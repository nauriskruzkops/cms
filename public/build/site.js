/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"site": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/build/";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push(["./src/Resources/views/theme/assets/main.js","vendors~site"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/Resources/views/theme/assets/css/bootstrap.css":
/*!************************************************************!*\
  !*** ./src/Resources/views/theme/assets/css/bootstrap.css ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./src/Resources/views/theme/assets/css/responsive.css":
/*!*************************************************************!*\
  !*** ./src/Resources/views/theme/assets/css/responsive.css ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./src/Resources/views/theme/assets/css/style-menu.css":
/*!*************************************************************!*\
  !*** ./src/Resources/views/theme/assets/css/style-menu.css ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./src/Resources/views/theme/assets/css/style-overwrite.css":
/*!******************************************************************!*\
  !*** ./src/Resources/views/theme/assets/css/style-overwrite.css ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./src/Resources/views/theme/assets/css/style.css":
/*!********************************************************!*\
  !*** ./src/Resources/views/theme/assets/css/style.css ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./src/Resources/views/theme/assets/js/appear.js":
/*!*******************************************************!*\
  !*** ./src/Resources/views/theme/assets/js/appear.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(jQuery) {/*
 * jQuery.appear
 * https://github.com/bas2k/jquery.appear/
 * http://code.google.com/p/jquery-appear/
 * http://bas2k.ru/
 *
 * Copyright (c) 2009 Michael Hixson
 * Copyright (c) 2012-2014 Alexander Brovikov
 * Licensed under the MIT license (http://www.opensource.org/licenses/mit-license.php)
 */
(function ($) {
  $.fn.appear = function (fn, options) {
    var settings = $.extend({
      //arbitrary data to pass to fn
      data: undefined,
      //call fn only on the first appear?
      one: true,
      // X & Y accuracy
      accX: 0,
      accY: 0
    }, options);
    return this.each(function () {
      var t = $(this); //whether the element is currently visible

      t.appeared = false;

      if (!fn) {
        //trigger the custom event
        t.trigger('appear', settings.data);
        return;
      }

      var w = $(window); //fires the appear event when appropriate

      var check = function check() {
        //is the element hidden?
        if (!t.is(':visible')) {
          //it became hidden
          t.appeared = false;
          return;
        } //is the element inside the visible window?


        var a = w.scrollLeft();
        var b = w.scrollTop();
        var o = t.offset();
        var x = o.left;
        var y = o.top;
        var ax = settings.accX;
        var ay = settings.accY;
        var th = t.height();
        var wh = w.height();
        var tw = t.width();
        var ww = w.width();

        if (y + th + ay >= b && y <= b + wh + ay && x + tw + ax >= a && x <= a + ww + ax) {
          //trigger the custom event
          if (!t.appeared) t.trigger('appear', settings.data);
        } else {
          //it scrolled out of view
          t.appeared = false;
        }
      }; //create a modified fn with some additional logic


      var modifiedFn = function modifiedFn() {
        //mark the element as visible
        t.appeared = true; //is this supposed to happen only once?

        if (settings.one) {
          //remove the check
          w.unbind('scroll', check);
          var i = $.inArray(check, $.fn.appear.checks);
          if (i >= 0) $.fn.appear.checks.splice(i, 1);
        } //trigger the original fn


        fn.apply(this, arguments);
      }; //bind the modified fn to the element


      if (settings.one) t.one('appear', settings.data, modifiedFn);else t.bind('appear', settings.data, modifiedFn); //check whenever the window scrolls

      w.scroll(check); //check whenever the dom changes

      $.fn.appear.checks.push(check); //check now

      check();
    });
  }; //keep a queue of appearance checks


  $.extend($.fn.appear, {
    checks: [],
    timeout: null,
    //process the queue
    checkAll: function checkAll() {
      var length = $.fn.appear.checks.length;
      if (length > 0) while (length--) {
        $.fn.appear.checks[length]();
      }
    },
    //check the queue asynchronously
    run: function run() {
      if ($.fn.appear.timeout) clearTimeout($.fn.appear.timeout);
      $.fn.appear.timeout = setTimeout($.fn.appear.checkAll, 20);
    }
  }); //run checks when these methods are called

  $.each(['append', 'prepend', 'after', 'before', 'attr', 'removeAttr', 'addClass', 'removeClass', 'toggleClass', 'remove', 'css', 'show', 'hide'], function (i, n) {
    var old = $.fn[n];

    if (old) {
      $.fn[n] = function () {
        var r = old.apply(this, arguments);
        $.fn.appear.run();
        return r;
      };
    }
  });
})(jQuery);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

/***/ }),

/***/ "./src/Resources/views/theme/assets/js/bootstrap.min.js":
/*!**************************************************************!*\
  !*** ./src/Resources/views/theme/assets/js/bootstrap.min.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(jQuery) {function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*!
 * Bootstrap v3.3.7 (http://getbootstrap.com)
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under the MIT license
 */
if ("undefined" == typeof jQuery) throw new Error("Bootstrap's JavaScript requires jQuery");
+function (a) {
  "use strict";

  var b = a.fn.jquery.split(" ")[0].split(".");
  if (b[0] < 2 && b[1] < 9 || 1 == b[0] && 9 == b[1] && b[2] < 1 || b[0] > 3) throw new Error("Bootstrap's JavaScript requires jQuery version 1.9.1 or higher, but lower than version 4");
}(jQuery), +function (a) {
  "use strict";

  function b() {
    var a = document.createElement("bootstrap"),
        b = {
      WebkitTransition: "webkitTransitionEnd",
      MozTransition: "transitionend",
      OTransition: "oTransitionEnd otransitionend",
      transition: "transitionend"
    };

    for (var c in b) {
      if (void 0 !== a.style[c]) return {
        end: b[c]
      };
    }

    return !1;
  }

  a.fn.emulateTransitionEnd = function (b) {
    var c = !1,
        d = this;
    a(this).one("bsTransitionEnd", function () {
      c = !0;
    });

    var e = function e() {
      c || a(d).trigger(a.support.transition.end);
    };

    return setTimeout(e, b), this;
  }, a(function () {
    a.support.transition = b(), a.support.transition && (a.event.special.bsTransitionEnd = {
      bindType: a.support.transition.end,
      delegateType: a.support.transition.end,
      handle: function handle(b) {
        if (a(b.target).is(this)) return b.handleObj.handler.apply(this, arguments);
      }
    });
  });
}(jQuery), +function (a) {
  "use strict";

  function b(b) {
    return this.each(function () {
      var c = a(this),
          e = c.data("bs.alert");
      e || c.data("bs.alert", e = new d(this)), "string" == typeof b && e[b].call(c);
    });
  }

  var c = '[data-dismiss="alert"]',
      d = function d(b) {
    a(b).on("click", c, this.close);
  };

  d.VERSION = "3.3.7", d.TRANSITION_DURATION = 150, d.prototype.close = function (b) {
    function c() {
      g.detach().trigger("closed.bs.alert").remove();
    }

    var e = a(this),
        f = e.attr("data-target");
    f || (f = e.attr("href"), f = f && f.replace(/.*(?=#[^\s]*$)/, ""));
    var g = a("#" === f ? [] : f);
    b && b.preventDefault(), g.length || (g = e.closest(".alert")), g.trigger(b = a.Event("close.bs.alert")), b.isDefaultPrevented() || (g.removeClass("in"), a.support.transition && g.hasClass("fade") ? g.one("bsTransitionEnd", c).emulateTransitionEnd(d.TRANSITION_DURATION) : c());
  };
  var e = a.fn.alert;
  a.fn.alert = b, a.fn.alert.Constructor = d, a.fn.alert.noConflict = function () {
    return a.fn.alert = e, this;
  }, a(document).on("click.bs.alert.data-api", c, d.prototype.close);
}(jQuery), +function (a) {
  "use strict";

  function b(b) {
    return this.each(function () {
      var d = a(this),
          e = d.data("bs.button"),
          f = "object" == _typeof(b) && b;
      e || d.data("bs.button", e = new c(this, f)), "toggle" == b ? e.toggle() : b && e.setState(b);
    });
  }

  var c = function c(b, d) {
    this.$element = a(b), this.options = a.extend({}, c.DEFAULTS, d), this.isLoading = !1;
  };

  c.VERSION = "3.3.7", c.DEFAULTS = {
    loadingText: "loading..."
  }, c.prototype.setState = function (b) {
    var c = "disabled",
        d = this.$element,
        e = d.is("input") ? "val" : "html",
        f = d.data();
    b += "Text", null == f.resetText && d.data("resetText", d[e]()), setTimeout(a.proxy(function () {
      d[e](null == f[b] ? this.options[b] : f[b]), "loadingText" == b ? (this.isLoading = !0, d.addClass(c).attr(c, c).prop(c, !0)) : this.isLoading && (this.isLoading = !1, d.removeClass(c).removeAttr(c).prop(c, !1));
    }, this), 0);
  }, c.prototype.toggle = function () {
    var a = !0,
        b = this.$element.closest('[data-toggle="buttons"]');

    if (b.length) {
      var c = this.$element.find("input");
      "radio" == c.prop("type") ? (c.prop("checked") && (a = !1), b.find(".active").removeClass("active"), this.$element.addClass("active")) : "checkbox" == c.prop("type") && (c.prop("checked") !== this.$element.hasClass("active") && (a = !1), this.$element.toggleClass("active")), c.prop("checked", this.$element.hasClass("active")), a && c.trigger("change");
    } else this.$element.attr("aria-pressed", !this.$element.hasClass("active")), this.$element.toggleClass("active");
  };
  var d = a.fn.button;
  a.fn.button = b, a.fn.button.Constructor = c, a.fn.button.noConflict = function () {
    return a.fn.button = d, this;
  }, a(document).on("click.bs.button.data-api", '[data-toggle^="button"]', function (c) {
    var d = a(c.target).closest(".btn");
    b.call(d, "toggle"), a(c.target).is('input[type="radio"], input[type="checkbox"]') || (c.preventDefault(), d.is("input,button") ? d.trigger("focus") : d.find("input:visible,button:visible").first().trigger("focus"));
  }).on("focus.bs.button.data-api blur.bs.button.data-api", '[data-toggle^="button"]', function (b) {
    a(b.target).closest(".btn").toggleClass("focus", /^focus(in)?$/.test(b.type));
  });
}(jQuery), +function (a) {
  "use strict";

  function b(b) {
    return this.each(function () {
      var d = a(this),
          e = d.data("bs.carousel"),
          f = a.extend({}, c.DEFAULTS, d.data(), "object" == _typeof(b) && b),
          g = "string" == typeof b ? b : f.slide;
      e || d.data("bs.carousel", e = new c(this, f)), "number" == typeof b ? e.to(b) : g ? e[g]() : f.interval && e.pause().cycle();
    });
  }

  var c = function c(b, _c) {
    this.$element = a(b), this.$indicators = this.$element.find(".carousel-indicators"), this.options = _c, this.paused = null, this.sliding = null, this.interval = null, this.$active = null, this.$items = null, this.options.keyboard && this.$element.on("keydown.bs.carousel", a.proxy(this.keydown, this)), "hover" == this.options.pause && !("ontouchstart" in document.documentElement) && this.$element.on("mouseenter.bs.carousel", a.proxy(this.pause, this)).on("mouseleave.bs.carousel", a.proxy(this.cycle, this));
  };

  c.VERSION = "3.3.7", c.TRANSITION_DURATION = 600, c.DEFAULTS = {
    interval: 5e3,
    pause: "hover",
    wrap: !0,
    keyboard: !0
  }, c.prototype.keydown = function (a) {
    if (!/input|textarea/i.test(a.target.tagName)) {
      switch (a.which) {
        case 37:
          this.prev();
          break;

        case 39:
          this.next();
          break;

        default:
          return;
      }

      a.preventDefault();
    }
  }, c.prototype.cycle = function (b) {
    return b || (this.paused = !1), this.interval && clearInterval(this.interval), this.options.interval && !this.paused && (this.interval = setInterval(a.proxy(this.next, this), this.options.interval)), this;
  }, c.prototype.getItemIndex = function (a) {
    return this.$items = a.parent().children(".item"), this.$items.index(a || this.$active);
  }, c.prototype.getItemForDirection = function (a, b) {
    var c = this.getItemIndex(b),
        d = "prev" == a && 0 === c || "next" == a && c == this.$items.length - 1;
    if (d && !this.options.wrap) return b;
    var e = "prev" == a ? -1 : 1,
        f = (c + e) % this.$items.length;
    return this.$items.eq(f);
  }, c.prototype.to = function (a) {
    var b = this,
        c = this.getItemIndex(this.$active = this.$element.find(".item.active"));
    if (!(a > this.$items.length - 1 || a < 0)) return this.sliding ? this.$element.one("slid.bs.carousel", function () {
      b.to(a);
    }) : c == a ? this.pause().cycle() : this.slide(a > c ? "next" : "prev", this.$items.eq(a));
  }, c.prototype.pause = function (b) {
    return b || (this.paused = !0), this.$element.find(".next, .prev").length && a.support.transition && (this.$element.trigger(a.support.transition.end), this.cycle(!0)), this.interval = clearInterval(this.interval), this;
  }, c.prototype.next = function () {
    if (!this.sliding) return this.slide("next");
  }, c.prototype.prev = function () {
    if (!this.sliding) return this.slide("prev");
  }, c.prototype.slide = function (b, d) {
    var e = this.$element.find(".item.active"),
        f = d || this.getItemForDirection(b, e),
        g = this.interval,
        h = "next" == b ? "left" : "right",
        i = this;
    if (f.hasClass("active")) return this.sliding = !1;
    var j = f[0],
        k = a.Event("slide.bs.carousel", {
      relatedTarget: j,
      direction: h
    });

    if (this.$element.trigger(k), !k.isDefaultPrevented()) {
      if (this.sliding = !0, g && this.pause(), this.$indicators.length) {
        this.$indicators.find(".active").removeClass("active");
        var l = a(this.$indicators.children()[this.getItemIndex(f)]);
        l && l.addClass("active");
      }

      var m = a.Event("slid.bs.carousel", {
        relatedTarget: j,
        direction: h
      });
      return a.support.transition && this.$element.hasClass("slide") ? (f.addClass(b), f[0].offsetWidth, e.addClass(h), f.addClass(h), e.one("bsTransitionEnd", function () {
        f.removeClass([b, h].join(" ")).addClass("active"), e.removeClass(["active", h].join(" ")), i.sliding = !1, setTimeout(function () {
          i.$element.trigger(m);
        }, 0);
      }).emulateTransitionEnd(c.TRANSITION_DURATION)) : (e.removeClass("active"), f.addClass("active"), this.sliding = !1, this.$element.trigger(m)), g && this.cycle(), this;
    }
  };
  var d = a.fn.carousel;
  a.fn.carousel = b, a.fn.carousel.Constructor = c, a.fn.carousel.noConflict = function () {
    return a.fn.carousel = d, this;
  };

  var e = function e(c) {
    var d,
        e = a(this),
        f = a(e.attr("data-target") || (d = e.attr("href")) && d.replace(/.*(?=#[^\s]+$)/, ""));

    if (f.hasClass("carousel")) {
      var g = a.extend({}, f.data(), e.data()),
          h = e.attr("data-slide-to");
      h && (g.interval = !1), b.call(f, g), h && f.data("bs.carousel").to(h), c.preventDefault();
    }
  };

  a(document).on("click.bs.carousel.data-api", "[data-slide]", e).on("click.bs.carousel.data-api", "[data-slide-to]", e), a(window).on("load", function () {
    a('[data-ride="carousel"]').each(function () {
      var c = a(this);
      b.call(c, c.data());
    });
  });
}(jQuery), +function (a) {
  "use strict";

  function b(b) {
    var c,
        d = b.attr("data-target") || (c = b.attr("href")) && c.replace(/.*(?=#[^\s]+$)/, "");
    return a(d);
  }

  function c(b) {
    return this.each(function () {
      var c = a(this),
          e = c.data("bs.collapse"),
          f = a.extend({}, d.DEFAULTS, c.data(), "object" == _typeof(b) && b);
      !e && f.toggle && /show|hide/.test(b) && (f.toggle = !1), e || c.data("bs.collapse", e = new d(this, f)), "string" == typeof b && e[b]();
    });
  }

  var d = function d(b, c) {
    this.$element = a(b), this.options = a.extend({}, d.DEFAULTS, c), this.$trigger = a('[data-toggle="collapse"][href="#' + b.id + '"],[data-toggle="collapse"][data-target="#' + b.id + '"]'), this.transitioning = null, this.options.parent ? this.$parent = this.getParent() : this.addAriaAndCollapsedClass(this.$element, this.$trigger), this.options.toggle && this.toggle();
  };

  d.VERSION = "3.3.7", d.TRANSITION_DURATION = 350, d.DEFAULTS = {
    toggle: !0
  }, d.prototype.dimension = function () {
    var a = this.$element.hasClass("width");
    return a ? "width" : "height";
  }, d.prototype.show = function () {
    if (!this.transitioning && !this.$element.hasClass("in")) {
      var b,
          e = this.$parent && this.$parent.children(".panel").children(".in, .collapsing");

      if (!(e && e.length && (b = e.data("bs.collapse"), b && b.transitioning))) {
        var f = a.Event("show.bs.collapse");

        if (this.$element.trigger(f), !f.isDefaultPrevented()) {
          e && e.length && (c.call(e, "hide"), b || e.data("bs.collapse", null));
          var g = this.dimension();
          this.$element.removeClass("collapse").addClass("collapsing")[g](0).attr("aria-expanded", !0), this.$trigger.removeClass("collapsed").attr("aria-expanded", !0), this.transitioning = 1;

          var h = function h() {
            this.$element.removeClass("collapsing").addClass("collapse in")[g](""), this.transitioning = 0, this.$element.trigger("shown.bs.collapse");
          };

          if (!a.support.transition) return h.call(this);
          var i = a.camelCase(["scroll", g].join("-"));
          this.$element.one("bsTransitionEnd", a.proxy(h, this)).emulateTransitionEnd(d.TRANSITION_DURATION)[g](this.$element[0][i]);
        }
      }
    }
  }, d.prototype.hide = function () {
    if (!this.transitioning && this.$element.hasClass("in")) {
      var b = a.Event("hide.bs.collapse");

      if (this.$element.trigger(b), !b.isDefaultPrevented()) {
        var c = this.dimension();
        this.$element[c](this.$element[c]())[0].offsetHeight, this.$element.addClass("collapsing").removeClass("collapse in").attr("aria-expanded", !1), this.$trigger.addClass("collapsed").attr("aria-expanded", !1), this.transitioning = 1;

        var e = function e() {
          this.transitioning = 0, this.$element.removeClass("collapsing").addClass("collapse").trigger("hidden.bs.collapse");
        };

        return a.support.transition ? void this.$element[c](0).one("bsTransitionEnd", a.proxy(e, this)).emulateTransitionEnd(d.TRANSITION_DURATION) : e.call(this);
      }
    }
  }, d.prototype.toggle = function () {
    this[this.$element.hasClass("in") ? "hide" : "show"]();
  }, d.prototype.getParent = function () {
    return a(this.options.parent).find('[data-toggle="collapse"][data-parent="' + this.options.parent + '"]').each(a.proxy(function (c, d) {
      var e = a(d);
      this.addAriaAndCollapsedClass(b(e), e);
    }, this)).end();
  }, d.prototype.addAriaAndCollapsedClass = function (a, b) {
    var c = a.hasClass("in");
    a.attr("aria-expanded", c), b.toggleClass("collapsed", !c).attr("aria-expanded", c);
  };
  var e = a.fn.collapse;
  a.fn.collapse = c, a.fn.collapse.Constructor = d, a.fn.collapse.noConflict = function () {
    return a.fn.collapse = e, this;
  }, a(document).on("click.bs.collapse.data-api", '[data-toggle="collapse"]', function (d) {
    var e = a(this);
    e.attr("data-target") || d.preventDefault();
    var f = b(e),
        g = f.data("bs.collapse"),
        h = g ? "toggle" : e.data();
    c.call(f, h);
  });
}(jQuery), +function (a) {
  "use strict";

  function b(b) {
    var c = b.attr("data-target");
    c || (c = b.attr("href"), c = c && /#[A-Za-z]/.test(c) && c.replace(/.*(?=#[^\s]*$)/, ""));
    var d = c && a(c);
    return d && d.length ? d : b.parent();
  }

  function c(c) {
    c && 3 === c.which || (a(e).remove(), a(f).each(function () {
      var d = a(this),
          e = b(d),
          f = {
        relatedTarget: this
      };
      e.hasClass("open") && (c && "click" == c.type && /input|textarea/i.test(c.target.tagName) && a.contains(e[0], c.target) || (e.trigger(c = a.Event("hide.bs.dropdown", f)), c.isDefaultPrevented() || (d.attr("aria-expanded", "false"), e.removeClass("open").trigger(a.Event("hidden.bs.dropdown", f)))));
    }));
  }

  function d(b) {
    return this.each(function () {
      var c = a(this),
          d = c.data("bs.dropdown");
      d || c.data("bs.dropdown", d = new g(this)), "string" == typeof b && d[b].call(c);
    });
  }

  var e = ".dropdown-backdrop",
      f = '[data-toggle="dropdown"]',
      g = function g(b) {
    a(b).on("click.bs.dropdown", this.toggle);
  };

  g.VERSION = "3.3.7", g.prototype.toggle = function (d) {
    var e = a(this);

    if (!e.is(".disabled, :disabled")) {
      var f = b(e),
          g = f.hasClass("open");

      if (c(), !g) {
        "ontouchstart" in document.documentElement && !f.closest(".navbar-nav").length && a(document.createElement("div")).addClass("dropdown-backdrop").insertAfter(a(this)).on("click", c);
        var h = {
          relatedTarget: this
        };
        if (f.trigger(d = a.Event("show.bs.dropdown", h)), d.isDefaultPrevented()) return;
        e.trigger("focus").attr("aria-expanded", "true"), f.toggleClass("open").trigger(a.Event("shown.bs.dropdown", h));
      }

      return !1;
    }
  }, g.prototype.keydown = function (c) {
    if (/(38|40|27|32)/.test(c.which) && !/input|textarea/i.test(c.target.tagName)) {
      var d = a(this);

      if (c.preventDefault(), c.stopPropagation(), !d.is(".disabled, :disabled")) {
        var e = b(d),
            g = e.hasClass("open");
        if (!g && 27 != c.which || g && 27 == c.which) return 27 == c.which && e.find(f).trigger("focus"), d.trigger("click");
        var h = " li:not(.disabled):visible a",
            i = e.find(".dropdown-menu" + h);

        if (i.length) {
          var j = i.index(c.target);
          38 == c.which && j > 0 && j--, 40 == c.which && j < i.length - 1 && j++, ~j || (j = 0), i.eq(j).trigger("focus");
        }
      }
    }
  };
  var h = a.fn.dropdown;
  a.fn.dropdown = d, a.fn.dropdown.Constructor = g, a.fn.dropdown.noConflict = function () {
    return a.fn.dropdown = h, this;
  }, a(document).on("click.bs.dropdown.data-api", c).on("click.bs.dropdown.data-api", ".dropdown form", function (a) {
    a.stopPropagation();
  }).on("click.bs.dropdown.data-api", f, g.prototype.toggle).on("keydown.bs.dropdown.data-api", f, g.prototype.keydown).on("keydown.bs.dropdown.data-api", ".dropdown-menu", g.prototype.keydown);
}(jQuery), +function (a) {
  "use strict";

  function b(b, d) {
    return this.each(function () {
      var e = a(this),
          f = e.data("bs.modal"),
          g = a.extend({}, c.DEFAULTS, e.data(), "object" == _typeof(b) && b);
      f || e.data("bs.modal", f = new c(this, g)), "string" == typeof b ? f[b](d) : g.show && f.show(d);
    });
  }

  var c = function c(b, _c2) {
    this.options = _c2, this.$body = a(document.body), this.$element = a(b), this.$dialog = this.$element.find(".modal-dialog"), this.$backdrop = null, this.isShown = null, this.originalBodyPad = null, this.scrollbarWidth = 0, this.ignoreBackdropClick = !1, this.options.remote && this.$element.find(".modal-content").load(this.options.remote, a.proxy(function () {
      this.$element.trigger("loaded.bs.modal");
    }, this));
  };

  c.VERSION = "3.3.7", c.TRANSITION_DURATION = 300, c.BACKDROP_TRANSITION_DURATION = 150, c.DEFAULTS = {
    backdrop: !0,
    keyboard: !0,
    show: !0
  }, c.prototype.toggle = function (a) {
    return this.isShown ? this.hide() : this.show(a);
  }, c.prototype.show = function (b) {
    var d = this,
        e = a.Event("show.bs.modal", {
      relatedTarget: b
    });
    this.$element.trigger(e), this.isShown || e.isDefaultPrevented() || (this.isShown = !0, this.checkScrollbar(), this.setScrollbar(), this.$body.addClass("modal-open"), this.escape(), this.resize(), this.$element.on("click.dismiss.bs.modal", '[data-dismiss="modal"]', a.proxy(this.hide, this)), this.$dialog.on("mousedown.dismiss.bs.modal", function () {
      d.$element.one("mouseup.dismiss.bs.modal", function (b) {
        a(b.target).is(d.$element) && (d.ignoreBackdropClick = !0);
      });
    }), this.backdrop(function () {
      var e = a.support.transition && d.$element.hasClass("fade");
      d.$element.parent().length || d.$element.appendTo(d.$body), d.$element.show().scrollTop(0), d.adjustDialog(), e && d.$element[0].offsetWidth, d.$element.addClass("in"), d.enforceFocus();
      var f = a.Event("shown.bs.modal", {
        relatedTarget: b
      });
      e ? d.$dialog.one("bsTransitionEnd", function () {
        d.$element.trigger("focus").trigger(f);
      }).emulateTransitionEnd(c.TRANSITION_DURATION) : d.$element.trigger("focus").trigger(f);
    }));
  }, c.prototype.hide = function (b) {
    b && b.preventDefault(), b = a.Event("hide.bs.modal"), this.$element.trigger(b), this.isShown && !b.isDefaultPrevented() && (this.isShown = !1, this.escape(), this.resize(), a(document).off("focusin.bs.modal"), this.$element.removeClass("in").off("click.dismiss.bs.modal").off("mouseup.dismiss.bs.modal"), this.$dialog.off("mousedown.dismiss.bs.modal"), a.support.transition && this.$element.hasClass("fade") ? this.$element.one("bsTransitionEnd", a.proxy(this.hideModal, this)).emulateTransitionEnd(c.TRANSITION_DURATION) : this.hideModal());
  }, c.prototype.enforceFocus = function () {
    a(document).off("focusin.bs.modal").on("focusin.bs.modal", a.proxy(function (a) {
      document === a.target || this.$element[0] === a.target || this.$element.has(a.target).length || this.$element.trigger("focus");
    }, this));
  }, c.prototype.escape = function () {
    this.isShown && this.options.keyboard ? this.$element.on("keydown.dismiss.bs.modal", a.proxy(function (a) {
      27 == a.which && this.hide();
    }, this)) : this.isShown || this.$element.off("keydown.dismiss.bs.modal");
  }, c.prototype.resize = function () {
    this.isShown ? a(window).on("resize.bs.modal", a.proxy(this.handleUpdate, this)) : a(window).off("resize.bs.modal");
  }, c.prototype.hideModal = function () {
    var a = this;
    this.$element.hide(), this.backdrop(function () {
      a.$body.removeClass("modal-open"), a.resetAdjustments(), a.resetScrollbar(), a.$element.trigger("hidden.bs.modal");
    });
  }, c.prototype.removeBackdrop = function () {
    this.$backdrop && this.$backdrop.remove(), this.$backdrop = null;
  }, c.prototype.backdrop = function (b) {
    var d = this,
        e = this.$element.hasClass("fade") ? "fade" : "";

    if (this.isShown && this.options.backdrop) {
      var f = a.support.transition && e;
      if (this.$backdrop = a(document.createElement("div")).addClass("modal-backdrop " + e).appendTo(this.$body), this.$element.on("click.dismiss.bs.modal", a.proxy(function (a) {
        return this.ignoreBackdropClick ? void (this.ignoreBackdropClick = !1) : void (a.target === a.currentTarget && ("static" == this.options.backdrop ? this.$element[0].focus() : this.hide()));
      }, this)), f && this.$backdrop[0].offsetWidth, this.$backdrop.addClass("in"), !b) return;
      f ? this.$backdrop.one("bsTransitionEnd", b).emulateTransitionEnd(c.BACKDROP_TRANSITION_DURATION) : b();
    } else if (!this.isShown && this.$backdrop) {
      this.$backdrop.removeClass("in");

      var g = function g() {
        d.removeBackdrop(), b && b();
      };

      a.support.transition && this.$element.hasClass("fade") ? this.$backdrop.one("bsTransitionEnd", g).emulateTransitionEnd(c.BACKDROP_TRANSITION_DURATION) : g();
    } else b && b();
  }, c.prototype.handleUpdate = function () {
    this.adjustDialog();
  }, c.prototype.adjustDialog = function () {
    var a = this.$element[0].scrollHeight > document.documentElement.clientHeight;
    this.$element.css({
      paddingLeft: !this.bodyIsOverflowing && a ? this.scrollbarWidth : "",
      paddingRight: this.bodyIsOverflowing && !a ? this.scrollbarWidth : ""
    });
  }, c.prototype.resetAdjustments = function () {
    this.$element.css({
      paddingLeft: "",
      paddingRight: ""
    });
  }, c.prototype.checkScrollbar = function () {
    var a = window.innerWidth;

    if (!a) {
      var b = document.documentElement.getBoundingClientRect();
      a = b.right - Math.abs(b.left);
    }

    this.bodyIsOverflowing = document.body.clientWidth < a, this.scrollbarWidth = this.measureScrollbar();
  }, c.prototype.setScrollbar = function () {
    var a = parseInt(this.$body.css("padding-right") || 0, 10);
    this.originalBodyPad = document.body.style.paddingRight || "", this.bodyIsOverflowing && this.$body.css("padding-right", a + this.scrollbarWidth);
  }, c.prototype.resetScrollbar = function () {
    this.$body.css("padding-right", this.originalBodyPad);
  }, c.prototype.measureScrollbar = function () {
    var a = document.createElement("div");
    a.className = "modal-scrollbar-measure", this.$body.append(a);
    var b = a.offsetWidth - a.clientWidth;
    return this.$body[0].removeChild(a), b;
  };
  var d = a.fn.modal;
  a.fn.modal = b, a.fn.modal.Constructor = c, a.fn.modal.noConflict = function () {
    return a.fn.modal = d, this;
  }, a(document).on("click.bs.modal.data-api", '[data-toggle="modal"]', function (c) {
    var d = a(this),
        e = d.attr("href"),
        f = a(d.attr("data-target") || e && e.replace(/.*(?=#[^\s]+$)/, "")),
        g = f.data("bs.modal") ? "toggle" : a.extend({
      remote: !/#/.test(e) && e
    }, f.data(), d.data());
    d.is("a") && c.preventDefault(), f.one("show.bs.modal", function (a) {
      a.isDefaultPrevented() || f.one("hidden.bs.modal", function () {
        d.is(":visible") && d.trigger("focus");
      });
    }), b.call(f, g, this);
  });
}(jQuery), +function (a) {
  "use strict";

  function b(b) {
    return this.each(function () {
      var d = a(this),
          e = d.data("bs.tooltip"),
          f = "object" == _typeof(b) && b;
      !e && /destroy|hide/.test(b) || (e || d.data("bs.tooltip", e = new c(this, f)), "string" == typeof b && e[b]());
    });
  }

  var c = function c(a, b) {
    this.type = null, this.options = null, this.enabled = null, this.timeout = null, this.hoverState = null, this.$element = null, this.inState = null, this.init("tooltip", a, b);
  };

  c.VERSION = "3.3.7", c.TRANSITION_DURATION = 150, c.DEFAULTS = {
    animation: !0,
    placement: "top",
    selector: !1,
    template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
    trigger: "hover focus",
    title: "",
    delay: 0,
    html: !1,
    container: !1,
    viewport: {
      selector: "body",
      padding: 0
    }
  }, c.prototype.init = function (b, c, d) {
    if (this.enabled = !0, this.type = b, this.$element = a(c), this.options = this.getOptions(d), this.$viewport = this.options.viewport && a(a.isFunction(this.options.viewport) ? this.options.viewport.call(this, this.$element) : this.options.viewport.selector || this.options.viewport), this.inState = {
      click: !1,
      hover: !1,
      focus: !1
    }, this.$element[0] instanceof document.constructor && !this.options.selector) throw new Error("`selector` option must be specified when initializing " + this.type + " on the window.document object!");

    for (var e = this.options.trigger.split(" "), f = e.length; f--;) {
      var g = e[f];
      if ("click" == g) this.$element.on("click." + this.type, this.options.selector, a.proxy(this.toggle, this));else if ("manual" != g) {
        var h = "hover" == g ? "mouseenter" : "focusin",
            i = "hover" == g ? "mouseleave" : "focusout";
        this.$element.on(h + "." + this.type, this.options.selector, a.proxy(this.enter, this)), this.$element.on(i + "." + this.type, this.options.selector, a.proxy(this.leave, this));
      }
    }

    this.options.selector ? this._options = a.extend({}, this.options, {
      trigger: "manual",
      selector: ""
    }) : this.fixTitle();
  }, c.prototype.getDefaults = function () {
    return c.DEFAULTS;
  }, c.prototype.getOptions = function (b) {
    return b = a.extend({}, this.getDefaults(), this.$element.data(), b), b.delay && "number" == typeof b.delay && (b.delay = {
      show: b.delay,
      hide: b.delay
    }), b;
  }, c.prototype.getDelegateOptions = function () {
    var b = {},
        c = this.getDefaults();
    return this._options && a.each(this._options, function (a, d) {
      c[a] != d && (b[a] = d);
    }), b;
  }, c.prototype.enter = function (b) {
    var c = b instanceof this.constructor ? b : a(b.currentTarget).data("bs." + this.type);
    return c || (c = new this.constructor(b.currentTarget, this.getDelegateOptions()), a(b.currentTarget).data("bs." + this.type, c)), b instanceof a.Event && (c.inState["focusin" == b.type ? "focus" : "hover"] = !0), c.tip().hasClass("in") || "in" == c.hoverState ? void (c.hoverState = "in") : (clearTimeout(c.timeout), c.hoverState = "in", c.options.delay && c.options.delay.show ? void (c.timeout = setTimeout(function () {
      "in" == c.hoverState && c.show();
    }, c.options.delay.show)) : c.show());
  }, c.prototype.isInStateTrue = function () {
    for (var a in this.inState) {
      if (this.inState[a]) return !0;
    }

    return !1;
  }, c.prototype.leave = function (b) {
    var c = b instanceof this.constructor ? b : a(b.currentTarget).data("bs." + this.type);
    if (c || (c = new this.constructor(b.currentTarget, this.getDelegateOptions()), a(b.currentTarget).data("bs." + this.type, c)), b instanceof a.Event && (c.inState["focusout" == b.type ? "focus" : "hover"] = !1), !c.isInStateTrue()) return clearTimeout(c.timeout), c.hoverState = "out", c.options.delay && c.options.delay.hide ? void (c.timeout = setTimeout(function () {
      "out" == c.hoverState && c.hide();
    }, c.options.delay.hide)) : c.hide();
  }, c.prototype.show = function () {
    var b = a.Event("show.bs." + this.type);

    if (this.hasContent() && this.enabled) {
      this.$element.trigger(b);
      var d = a.contains(this.$element[0].ownerDocument.documentElement, this.$element[0]);
      if (b.isDefaultPrevented() || !d) return;
      var e = this,
          f = this.tip(),
          g = this.getUID(this.type);
      this.setContent(), f.attr("id", g), this.$element.attr("aria-describedby", g), this.options.animation && f.addClass("fade");
      var h = "function" == typeof this.options.placement ? this.options.placement.call(this, f[0], this.$element[0]) : this.options.placement,
          i = /\s?auto?\s?/i,
          j = i.test(h);
      j && (h = h.replace(i, "") || "top"), f.detach().css({
        top: 0,
        left: 0,
        display: "block"
      }).addClass(h).data("bs." + this.type, this), this.options.container ? f.appendTo(this.options.container) : f.insertAfter(this.$element), this.$element.trigger("inserted.bs." + this.type);
      var k = this.getPosition(),
          l = f[0].offsetWidth,
          m = f[0].offsetHeight;

      if (j) {
        var n = h,
            o = this.getPosition(this.$viewport);
        h = "bottom" == h && k.bottom + m > o.bottom ? "top" : "top" == h && k.top - m < o.top ? "bottom" : "right" == h && k.right + l > o.width ? "left" : "left" == h && k.left - l < o.left ? "right" : h, f.removeClass(n).addClass(h);
      }

      var p = this.getCalculatedOffset(h, k, l, m);
      this.applyPlacement(p, h);

      var q = function q() {
        var a = e.hoverState;
        e.$element.trigger("shown.bs." + e.type), e.hoverState = null, "out" == a && e.leave(e);
      };

      a.support.transition && this.$tip.hasClass("fade") ? f.one("bsTransitionEnd", q).emulateTransitionEnd(c.TRANSITION_DURATION) : q();
    }
  }, c.prototype.applyPlacement = function (b, c) {
    var d = this.tip(),
        e = d[0].offsetWidth,
        f = d[0].offsetHeight,
        g = parseInt(d.css("margin-top"), 10),
        h = parseInt(d.css("margin-left"), 10);
    isNaN(g) && (g = 0), isNaN(h) && (h = 0), b.top += g, b.left += h, a.offset.setOffset(d[0], a.extend({
      using: function using(a) {
        d.css({
          top: Math.round(a.top),
          left: Math.round(a.left)
        });
      }
    }, b), 0), d.addClass("in");
    var i = d[0].offsetWidth,
        j = d[0].offsetHeight;
    "top" == c && j != f && (b.top = b.top + f - j);
    var k = this.getViewportAdjustedDelta(c, b, i, j);
    k.left ? b.left += k.left : b.top += k.top;
    var l = /top|bottom/.test(c),
        m = l ? 2 * k.left - e + i : 2 * k.top - f + j,
        n = l ? "offsetWidth" : "offsetHeight";
    d.offset(b), this.replaceArrow(m, d[0][n], l);
  }, c.prototype.replaceArrow = function (a, b, c) {
    this.arrow().css(c ? "left" : "top", 50 * (1 - a / b) + "%").css(c ? "top" : "left", "");
  }, c.prototype.setContent = function () {
    var a = this.tip(),
        b = this.getTitle();
    a.find(".tooltip-inner")[this.options.html ? "html" : "text"](b), a.removeClass("fade in top bottom left right");
  }, c.prototype.hide = function (b) {
    function d() {
      "in" != e.hoverState && f.detach(), e.$element && e.$element.removeAttr("aria-describedby").trigger("hidden.bs." + e.type), b && b();
    }

    var e = this,
        f = a(this.$tip),
        g = a.Event("hide.bs." + this.type);
    if (this.$element.trigger(g), !g.isDefaultPrevented()) return f.removeClass("in"), a.support.transition && f.hasClass("fade") ? f.one("bsTransitionEnd", d).emulateTransitionEnd(c.TRANSITION_DURATION) : d(), this.hoverState = null, this;
  }, c.prototype.fixTitle = function () {
    var a = this.$element;
    (a.attr("title") || "string" != typeof a.attr("data-original-title")) && a.attr("data-original-title", a.attr("title") || "").attr("title", "");
  }, c.prototype.hasContent = function () {
    return this.getTitle();
  }, c.prototype.getPosition = function (b) {
    b = b || this.$element;
    var c = b[0],
        d = "BODY" == c.tagName,
        e = c.getBoundingClientRect();
    null == e.width && (e = a.extend({}, e, {
      width: e.right - e.left,
      height: e.bottom - e.top
    }));
    var f = window.SVGElement && c instanceof window.SVGElement,
        g = d ? {
      top: 0,
      left: 0
    } : f ? null : b.offset(),
        h = {
      scroll: d ? document.documentElement.scrollTop || document.body.scrollTop : b.scrollTop()
    },
        i = d ? {
      width: a(window).width(),
      height: a(window).height()
    } : null;
    return a.extend({}, e, h, i, g);
  }, c.prototype.getCalculatedOffset = function (a, b, c, d) {
    return "bottom" == a ? {
      top: b.top + b.height,
      left: b.left + b.width / 2 - c / 2
    } : "top" == a ? {
      top: b.top - d,
      left: b.left + b.width / 2 - c / 2
    } : "left" == a ? {
      top: b.top + b.height / 2 - d / 2,
      left: b.left - c
    } : {
      top: b.top + b.height / 2 - d / 2,
      left: b.left + b.width
    };
  }, c.prototype.getViewportAdjustedDelta = function (a, b, c, d) {
    var e = {
      top: 0,
      left: 0
    };
    if (!this.$viewport) return e;
    var f = this.options.viewport && this.options.viewport.padding || 0,
        g = this.getPosition(this.$viewport);

    if (/right|left/.test(a)) {
      var h = b.top - f - g.scroll,
          i = b.top + f - g.scroll + d;
      h < g.top ? e.top = g.top - h : i > g.top + g.height && (e.top = g.top + g.height - i);
    } else {
      var j = b.left - f,
          k = b.left + f + c;
      j < g.left ? e.left = g.left - j : k > g.right && (e.left = g.left + g.width - k);
    }

    return e;
  }, c.prototype.getTitle = function () {
    var a,
        b = this.$element,
        c = this.options;
    return a = b.attr("data-original-title") || ("function" == typeof c.title ? c.title.call(b[0]) : c.title);
  }, c.prototype.getUID = function (a) {
    do {
      a += ~~(1e6 * Math.random());
    } while (document.getElementById(a));

    return a;
  }, c.prototype.tip = function () {
    if (!this.$tip && (this.$tip = a(this.options.template), 1 != this.$tip.length)) throw new Error(this.type + " `template` option must consist of exactly 1 top-level element!");
    return this.$tip;
  }, c.prototype.arrow = function () {
    return this.$arrow = this.$arrow || this.tip().find(".tooltip-arrow");
  }, c.prototype.enable = function () {
    this.enabled = !0;
  }, c.prototype.disable = function () {
    this.enabled = !1;
  }, c.prototype.toggleEnabled = function () {
    this.enabled = !this.enabled;
  }, c.prototype.toggle = function (b) {
    var c = this;
    b && (c = a(b.currentTarget).data("bs." + this.type), c || (c = new this.constructor(b.currentTarget, this.getDelegateOptions()), a(b.currentTarget).data("bs." + this.type, c))), b ? (c.inState.click = !c.inState.click, c.isInStateTrue() ? c.enter(c) : c.leave(c)) : c.tip().hasClass("in") ? c.leave(c) : c.enter(c);
  }, c.prototype.destroy = function () {
    var a = this;
    clearTimeout(this.timeout), this.hide(function () {
      a.$element.off("." + a.type).removeData("bs." + a.type), a.$tip && a.$tip.detach(), a.$tip = null, a.$arrow = null, a.$viewport = null, a.$element = null;
    });
  };
  var d = a.fn.tooltip;
  a.fn.tooltip = b, a.fn.tooltip.Constructor = c, a.fn.tooltip.noConflict = function () {
    return a.fn.tooltip = d, this;
  };
}(jQuery), +function (a) {
  "use strict";

  function b(b) {
    return this.each(function () {
      var d = a(this),
          e = d.data("bs.popover"),
          f = "object" == _typeof(b) && b;
      !e && /destroy|hide/.test(b) || (e || d.data("bs.popover", e = new c(this, f)), "string" == typeof b && e[b]());
    });
  }

  var c = function c(a, b) {
    this.init("popover", a, b);
  };

  if (!a.fn.tooltip) throw new Error("Popover requires tooltip.js");
  c.VERSION = "3.3.7", c.DEFAULTS = a.extend({}, a.fn.tooltip.Constructor.DEFAULTS, {
    placement: "right",
    trigger: "click",
    content: "",
    template: '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'
  }), c.prototype = a.extend({}, a.fn.tooltip.Constructor.prototype), c.prototype.constructor = c, c.prototype.getDefaults = function () {
    return c.DEFAULTS;
  }, c.prototype.setContent = function () {
    var a = this.tip(),
        b = this.getTitle(),
        c = this.getContent();
    a.find(".popover-title")[this.options.html ? "html" : "text"](b), a.find(".popover-content").children().detach().end()[this.options.html ? "string" == typeof c ? "html" : "append" : "text"](c), a.removeClass("fade top bottom left right in"), a.find(".popover-title").html() || a.find(".popover-title").hide();
  }, c.prototype.hasContent = function () {
    return this.getTitle() || this.getContent();
  }, c.prototype.getContent = function () {
    var a = this.$element,
        b = this.options;
    return a.attr("data-content") || ("function" == typeof b.content ? b.content.call(a[0]) : b.content);
  }, c.prototype.arrow = function () {
    return this.$arrow = this.$arrow || this.tip().find(".arrow");
  };
  var d = a.fn.popover;
  a.fn.popover = b, a.fn.popover.Constructor = c, a.fn.popover.noConflict = function () {
    return a.fn.popover = d, this;
  };
}(jQuery), +function (a) {
  "use strict";

  function b(c, d) {
    this.$body = a(document.body), this.$scrollElement = a(a(c).is(document.body) ? window : c), this.options = a.extend({}, b.DEFAULTS, d), this.selector = (this.options.target || "") + " .nav li > a", this.offsets = [], this.targets = [], this.activeTarget = null, this.scrollHeight = 0, this.$scrollElement.on("scroll.bs.scrollspy", a.proxy(this.process, this)), this.refresh(), this.process();
  }

  function c(c) {
    return this.each(function () {
      var d = a(this),
          e = d.data("bs.scrollspy"),
          f = "object" == _typeof(c) && c;
      e || d.data("bs.scrollspy", e = new b(this, f)), "string" == typeof c && e[c]();
    });
  }

  b.VERSION = "3.3.7", b.DEFAULTS = {
    offset: 10
  }, b.prototype.getScrollHeight = function () {
    return this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight, document.documentElement.scrollHeight);
  }, b.prototype.refresh = function () {
    var b = this,
        c = "offset",
        d = 0;
    this.offsets = [], this.targets = [], this.scrollHeight = this.getScrollHeight(), a.isWindow(this.$scrollElement[0]) || (c = "position", d = this.$scrollElement.scrollTop()), this.$body.find(this.selector).map(function () {
      var b = a(this),
          e = b.data("target") || b.attr("href"),
          f = /^#./.test(e) && a(e);
      return f && f.length && f.is(":visible") && [[f[c]().top + d, e]] || null;
    }).sort(function (a, b) {
      return a[0] - b[0];
    }).each(function () {
      b.offsets.push(this[0]), b.targets.push(this[1]);
    });
  }, b.prototype.process = function () {
    var a,
        b = this.$scrollElement.scrollTop() + this.options.offset,
        c = this.getScrollHeight(),
        d = this.options.offset + c - this.$scrollElement.height(),
        e = this.offsets,
        f = this.targets,
        g = this.activeTarget;
    if (this.scrollHeight != c && this.refresh(), b >= d) return g != (a = f[f.length - 1]) && this.activate(a);
    if (g && b < e[0]) return this.activeTarget = null, this.clear();

    for (a = e.length; a--;) {
      g != f[a] && b >= e[a] && (void 0 === e[a + 1] || b < e[a + 1]) && this.activate(f[a]);
    }
  }, b.prototype.activate = function (b) {
    this.activeTarget = b, this.clear();
    var c = this.selector + '[data-target="' + b + '"],' + this.selector + '[href="' + b + '"]',
        d = a(c).parents("li").addClass("active");
    d.parent(".dropdown-menu").length && (d = d.closest("li.dropdown").addClass("active")), d.trigger("activate.bs.scrollspy");
  }, b.prototype.clear = function () {
    a(this.selector).parentsUntil(this.options.target, ".active").removeClass("active");
  };
  var d = a.fn.scrollspy;
  a.fn.scrollspy = c, a.fn.scrollspy.Constructor = b, a.fn.scrollspy.noConflict = function () {
    return a.fn.scrollspy = d, this;
  }, a(window).on("load.bs.scrollspy.data-api", function () {
    a('[data-spy="scroll"]').each(function () {
      var b = a(this);
      c.call(b, b.data());
    });
  });
}(jQuery), +function (a) {
  "use strict";

  function b(b) {
    return this.each(function () {
      var d = a(this),
          e = d.data("bs.tab");
      e || d.data("bs.tab", e = new c(this)), "string" == typeof b && e[b]();
    });
  }

  var c = function c(b) {
    this.element = a(b);
  };

  c.VERSION = "3.3.7", c.TRANSITION_DURATION = 150, c.prototype.show = function () {
    var b = this.element,
        c = b.closest("ul:not(.dropdown-menu)"),
        d = b.data("target");

    if (d || (d = b.attr("href"), d = d && d.replace(/.*(?=#[^\s]*$)/, "")), !b.parent("li").hasClass("active")) {
      var e = c.find(".active:last a"),
          f = a.Event("hide.bs.tab", {
        relatedTarget: b[0]
      }),
          g = a.Event("show.bs.tab", {
        relatedTarget: e[0]
      });

      if (e.trigger(f), b.trigger(g), !g.isDefaultPrevented() && !f.isDefaultPrevented()) {
        var h = a(d);
        this.activate(b.closest("li"), c), this.activate(h, h.parent(), function () {
          e.trigger({
            type: "hidden.bs.tab",
            relatedTarget: b[0]
          }), b.trigger({
            type: "shown.bs.tab",
            relatedTarget: e[0]
          });
        });
      }
    }
  }, c.prototype.activate = function (b, d, e) {
    function f() {
      g.removeClass("active").find("> .dropdown-menu > .active").removeClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded", !1), b.addClass("active").find('[data-toggle="tab"]').attr("aria-expanded", !0), h ? (b[0].offsetWidth, b.addClass("in")) : b.removeClass("fade"), b.parent(".dropdown-menu").length && b.closest("li.dropdown").addClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded", !0), e && e();
    }

    var g = d.find("> .active"),
        h = e && a.support.transition && (g.length && g.hasClass("fade") || !!d.find("> .fade").length);
    g.length && h ? g.one("bsTransitionEnd", f).emulateTransitionEnd(c.TRANSITION_DURATION) : f(), g.removeClass("in");
  };
  var d = a.fn.tab;
  a.fn.tab = b, a.fn.tab.Constructor = c, a.fn.tab.noConflict = function () {
    return a.fn.tab = d, this;
  };

  var e = function e(c) {
    c.preventDefault(), b.call(a(this), "show");
  };

  a(document).on("click.bs.tab.data-api", '[data-toggle="tab"]', e).on("click.bs.tab.data-api", '[data-toggle="pill"]', e);
}(jQuery), +function (a) {
  "use strict";

  function b(b) {
    return this.each(function () {
      var d = a(this),
          e = d.data("bs.affix"),
          f = "object" == _typeof(b) && b;
      e || d.data("bs.affix", e = new c(this, f)), "string" == typeof b && e[b]();
    });
  }

  var c = function c(b, d) {
    this.options = a.extend({}, c.DEFAULTS, d), this.$target = a(this.options.target).on("scroll.bs.affix.data-api", a.proxy(this.checkPosition, this)).on("click.bs.affix.data-api", a.proxy(this.checkPositionWithEventLoop, this)), this.$element = a(b), this.affixed = null, this.unpin = null, this.pinnedOffset = null, this.checkPosition();
  };

  c.VERSION = "3.3.7", c.RESET = "affix affix-top affix-bottom", c.DEFAULTS = {
    offset: 0,
    target: window
  }, c.prototype.getState = function (a, b, c, d) {
    var e = this.$target.scrollTop(),
        f = this.$element.offset(),
        g = this.$target.height();
    if (null != c && "top" == this.affixed) return e < c && "top";
    if ("bottom" == this.affixed) return null != c ? !(e + this.unpin <= f.top) && "bottom" : !(e + g <= a - d) && "bottom";
    var h = null == this.affixed,
        i = h ? e : f.top,
        j = h ? g : b;
    return null != c && e <= c ? "top" : null != d && i + j >= a - d && "bottom";
  }, c.prototype.getPinnedOffset = function () {
    if (this.pinnedOffset) return this.pinnedOffset;
    this.$element.removeClass(c.RESET).addClass("affix");
    var a = this.$target.scrollTop(),
        b = this.$element.offset();
    return this.pinnedOffset = b.top - a;
  }, c.prototype.checkPositionWithEventLoop = function () {
    setTimeout(a.proxy(this.checkPosition, this), 1);
  }, c.prototype.checkPosition = function () {
    if (this.$element.is(":visible")) {
      var b = this.$element.height(),
          d = this.options.offset,
          e = d.top,
          f = d.bottom,
          g = Math.max(a(document).height(), a(document.body).height());
      "object" != _typeof(d) && (f = e = d), "function" == typeof e && (e = d.top(this.$element)), "function" == typeof f && (f = d.bottom(this.$element));
      var h = this.getState(g, b, e, f);

      if (this.affixed != h) {
        null != this.unpin && this.$element.css("top", "");
        var i = "affix" + (h ? "-" + h : ""),
            j = a.Event(i + ".bs.affix");
        if (this.$element.trigger(j), j.isDefaultPrevented()) return;
        this.affixed = h, this.unpin = "bottom" == h ? this.getPinnedOffset() : null, this.$element.removeClass(c.RESET).addClass(i).trigger(i.replace("affix", "affixed") + ".bs.affix");
      }

      "bottom" == h && this.$element.offset({
        top: g - b - f
      });
    }
  };
  var d = a.fn.affix;
  a.fn.affix = b, a.fn.affix.Constructor = c, a.fn.affix.noConflict = function () {
    return a.fn.affix = d, this;
  }, a(window).on("load", function () {
    a('[data-spy="affix"]').each(function () {
      var c = a(this),
          d = c.data();
      d.offset = d.offset || {}, null != d.offsetBottom && (d.offset.bottom = d.offsetBottom), null != d.offsetTop && (d.offset.top = d.offsetTop), b.call(c, d);
    });
  });
}(jQuery);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

/***/ }),

/***/ "./src/Resources/views/theme/assets/js/captcha.js":
/*!********************************************************!*\
  !*** ./src/Resources/views/theme/assets/js/captcha.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function($) {/* --------------------------------------------
reCAPTCHA
-------------------------------------------- */
//window.onload = reCAPTCHALoad;
Captcha = {
  key: "6Ldma6wUAAAAAGfR8wWW0Az_p28vq31GxeeCJs1S",
  captchaElement: "#captcha_token_src",
  load: function load() {
    if ($("#contact-form").length) {
      var script = document.createElement('script');
      script.type = 'text/javascript';
      script.src = 'https://www.google.com/recaptcha/api.js?render=' + Captcha.key;

      if ($(Captcha.captchaElement).length) {
        script.onload = function () {
          grecaptcha.ready(function () {
            grecaptcha.execute('6Ldma6wUAAAAAGfR8wWW0Az_p28vq31GxeeCJs1S', {
              action: 'homepage'
            }).then(function (token) {
              $(Captcha.captchaElement).attr('value', token);
            });
          });
        };
      }

      document.head.appendChild(script);
    }
  }
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

/***/ }),

/***/ "./src/Resources/views/theme/assets/js/isotope.js":
/*!********************************************************!*\
  !*** ./src/Resources/views/theme/assets/js/isotope.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(__webpack_provided_window_dot_jQuery) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __WEBPACK_LOCAL_MODULE_1__, __WEBPACK_LOCAL_MODULE_1__factory, __WEBPACK_LOCAL_MODULE_1__module;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_LOCAL_MODULE_2__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_LOCAL_MODULE_3__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_LOCAL_MODULE_4__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_LOCAL_MODULE_5__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_LOCAL_MODULE_6__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_LOCAL_MODULE_7__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_LOCAL_MODULE_8__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_LOCAL_MODULE_9__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_LOCAL_MODULE_10__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_LOCAL_MODULE_11__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_LOCAL_MODULE_12__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_LOCAL_MODULE_13__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_LOCAL_MODULE_14__;var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*!
 * Isotope PACKAGED v2.1.1
 * Filter & sort magical layouts
 * http://isotope.metafizzy.co
 */
(function (t) {
  function e() {}

  function i(t) {
    function i(e) {
      e.prototype.option || (e.prototype.option = function (e) {
        t.isPlainObject(e) && (this.options = t.extend(!0, this.options, e));
      });
    }

    function n(e, i) {
      t.fn[e] = function (n) {
        if ("string" == typeof n) {
          for (var s = o.call(arguments, 1), a = 0, u = this.length; u > a; a++) {
            var p = this[a],
                h = t.data(p, e);
            if (h) {
              if (t.isFunction(h[n]) && "_" !== n.charAt(0)) {
                var f = h[n].apply(h, s);
                if (void 0 !== f) return f;
              } else r("no such method '" + n + "' for " + e + " instance");
            } else r("cannot call methods on " + e + " prior to initialization; " + "attempted to call '" + n + "'");
          }

          return this;
        }

        return this.each(function () {
          var o = t.data(this, e);
          o ? (o.option(n), o._init()) : (o = new i(this, n), t.data(this, e, o));
        });
      };
    }

    if (t) {
      var r = "undefined" == typeof console ? e : function (t) {
        console.error(t);
      };
      return t.bridget = function (t, e) {
        i(e), n(t, e);
      }, t.bridget;
    }
  }

  var o = Array.prototype.slice;
   true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (i),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : undefined;
})(window), function (t) {
  function e(e) {
    var i = t.event;
    return i.target = i.target || i.srcElement || e, i;
  }

  var i = document.documentElement,
      o = function o() {};

  i.addEventListener ? o = function o(t, e, i) {
    t.addEventListener(e, i, !1);
  } : i.attachEvent && (o = function o(t, i, _o) {
    t[i + _o] = _o.handleEvent ? function () {
      var i = e(t);

      _o.handleEvent.call(_o, i);
    } : function () {
      var i = e(t);

      _o.call(t, i);
    }, t.attachEvent("on" + i, t[i + _o]);
  });

  var n = function n() {};

  i.removeEventListener ? n = function n(t, e, i) {
    t.removeEventListener(e, i, !1);
  } : i.detachEvent && (n = function n(t, e, i) {
    t.detachEvent("on" + e, t[e + i]);

    try {
      delete t[e + i];
    } catch (o) {
      t[e + i] = void 0;
    }
  });
  var r = {
    bind: o,
    unbind: n
  };
   true ? !(__WEBPACK_LOCAL_MODULE_1__factory = (r), (__WEBPACK_LOCAL_MODULE_1__module = { id: "eventie/eventie", exports: {}, loaded: false }), __WEBPACK_LOCAL_MODULE_1__ = (typeof __WEBPACK_LOCAL_MODULE_1__factory === 'function' ? (__WEBPACK_LOCAL_MODULE_1__factory.call(__WEBPACK_LOCAL_MODULE_1__module.exports, __webpack_require__, __WEBPACK_LOCAL_MODULE_1__module.exports, __WEBPACK_LOCAL_MODULE_1__module)) : __WEBPACK_LOCAL_MODULE_1__factory), (__WEBPACK_LOCAL_MODULE_1__module.loaded = true), __WEBPACK_LOCAL_MODULE_1__ === undefined && (__WEBPACK_LOCAL_MODULE_1__ = __WEBPACK_LOCAL_MODULE_1__module.exports)) : undefined;
}(this), function (t) {
  function e(t) {
    "function" == typeof t && (e.isReady ? t() : s.push(t));
  }

  function i(t) {
    var i = "readystatechange" === t.type && "complete" !== r.readyState;
    e.isReady || i || o();
  }

  function o() {
    e.isReady = !0;

    for (var t = 0, i = s.length; i > t; t++) {
      var o = s[t];
      o();
    }
  }

  function n(n) {
    return "complete" === r.readyState ? o() : (n.bind(r, "DOMContentLoaded", i), n.bind(r, "readystatechange", i), n.bind(t, "load", i)), e;
  }

  var r = t.document,
      s = [];
  e.isReady = !1,  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__WEBPACK_LOCAL_MODULE_1__], __WEBPACK_AMD_DEFINE_FACTORY__ = (n),
				__WEBPACK_LOCAL_MODULE_2__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__)) : undefined;
}(window), function () {
  function t() {}

  function e(t, e) {
    for (var i = t.length; i--;) {
      if (t[i].listener === e) return i;
    }

    return -1;
  }

  function i(t) {
    return function () {
      return this[t].apply(this, arguments);
    };
  }

  var o = t.prototype,
      n = this,
      r = n.EventEmitter;
  o.getListeners = function (t) {
    var e,
        i,
        o = this._getEvents();

    if (t instanceof RegExp) {
      e = {};

      for (i in o) {
        o.hasOwnProperty(i) && t.test(i) && (e[i] = o[i]);
      }
    } else e = o[t] || (o[t] = []);

    return e;
  }, o.flattenListeners = function (t) {
    var e,
        i = [];

    for (e = 0; t.length > e; e += 1) {
      i.push(t[e].listener);
    }

    return i;
  }, o.getListenersAsObject = function (t) {
    var e,
        i = this.getListeners(t);
    return i instanceof Array && (e = {}, e[t] = i), e || i;
  }, o.addListener = function (t, i) {
    var o,
        n = this.getListenersAsObject(t),
        r = "object" == _typeof(i);

    for (o in n) {
      n.hasOwnProperty(o) && -1 === e(n[o], i) && n[o].push(r ? i : {
        listener: i,
        once: !1
      });
    }

    return this;
  }, o.on = i("addListener"), o.addOnceListener = function (t, e) {
    return this.addListener(t, {
      listener: e,
      once: !0
    });
  }, o.once = i("addOnceListener"), o.defineEvent = function (t) {
    return this.getListeners(t), this;
  }, o.defineEvents = function (t) {
    for (var e = 0; t.length > e; e += 1) {
      this.defineEvent(t[e]);
    }

    return this;
  }, o.removeListener = function (t, i) {
    var o,
        n,
        r = this.getListenersAsObject(t);

    for (n in r) {
      r.hasOwnProperty(n) && (o = e(r[n], i), -1 !== o && r[n].splice(o, 1));
    }

    return this;
  }, o.off = i("removeListener"), o.addListeners = function (t, e) {
    return this.manipulateListeners(!1, t, e);
  }, o.removeListeners = function (t, e) {
    return this.manipulateListeners(!0, t, e);
  }, o.manipulateListeners = function (t, e, i) {
    var o,
        n,
        r = t ? this.removeListener : this.addListener,
        s = t ? this.removeListeners : this.addListeners;
    if ("object" != _typeof(e) || e instanceof RegExp) for (o = i.length; o--;) {
      r.call(this, e, i[o]);
    } else for (o in e) {
      e.hasOwnProperty(o) && (n = e[o]) && ("function" == typeof n ? r.call(this, o, n) : s.call(this, o, n));
    }
    return this;
  }, o.removeEvent = function (t) {
    var e,
        i = _typeof(t),
        o = this._getEvents();

    if ("string" === i) delete o[t];else if (t instanceof RegExp) for (e in o) {
      o.hasOwnProperty(e) && t.test(e) && delete o[e];
    } else delete this._events;
    return this;
  }, o.removeAllListeners = i("removeEvent"), o.emitEvent = function (t, e) {
    var i,
        o,
        n,
        r,
        s = this.getListenersAsObject(t);

    for (n in s) {
      if (s.hasOwnProperty(n)) for (o = s[n].length; o--;) {
        i = s[n][o], i.once === !0 && this.removeListener(t, i.listener), r = i.listener.apply(this, e || []), r === this._getOnceReturnValue() && this.removeListener(t, i.listener);
      }
    }

    return this;
  }, o.trigger = i("emitEvent"), o.emit = function (t) {
    var e = Array.prototype.slice.call(arguments, 1);
    return this.emitEvent(t, e);
  }, o.setOnceReturnValue = function (t) {
    return this._onceReturnValue = t, this;
  }, o._getOnceReturnValue = function () {
    return this.hasOwnProperty("_onceReturnValue") ? this._onceReturnValue : !0;
  }, o._getEvents = function () {
    return this._events || (this._events = {});
  }, t.noConflict = function () {
    return n.EventEmitter = r, t;
  },  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_LOCAL_MODULE_3__ = ((function () {
    return t;
  }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__))) : undefined;
}.call(this), function (t) {
  function e(t) {
    if (t) {
      if ("string" == typeof o[t]) return t;
      t = t.charAt(0).toUpperCase() + t.slice(1);

      for (var e, n = 0, r = i.length; r > n; n++) {
        if (e = i[n] + t, "string" == typeof o[e]) return e;
      }
    }
  }

  var i = "Webkit Moz ms Ms O".split(" "),
      o = document.documentElement.style;
   true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_LOCAL_MODULE_4__ = ((function () {
    return e;
  }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__))) : undefined;
}(window), function (t) {
  function e(t) {
    var e = parseFloat(t),
        i = -1 === t.indexOf("%") && !isNaN(e);
    return i && e;
  }

  function i() {}

  function o() {
    for (var t = {
      width: 0,
      height: 0,
      innerWidth: 0,
      innerHeight: 0,
      outerWidth: 0,
      outerHeight: 0
    }, e = 0, i = s.length; i > e; e++) {
      var o = s[e];
      t[o] = 0;
    }

    return t;
  }

  function n(i) {
    function n() {
      if (!d) {
        d = !0;
        var o = t.getComputedStyle;

        if (p = function () {
          var t = o ? function (t) {
            return o(t, null);
          } : function (t) {
            return t.currentStyle;
          };
          return function (e) {
            var i = t(e);
            return i || r("Style returned " + i + ". Are you running this code in a hidden iframe on Firefox? " + "See http://bit.ly/getsizebug1"), i;
          };
        }(), h = i("boxSizing")) {
          var n = document.createElement("div");
          n.style.width = "200px", n.style.padding = "1px 2px 3px 4px", n.style.borderStyle = "solid", n.style.borderWidth = "1px 2px 3px 4px", n.style[h] = "border-box";
          var s = document.body || document.documentElement;
          s.appendChild(n);
          var a = p(n);
          f = 200 === e(a.width), s.removeChild(n);
        }
      }
    }

    function a(t) {
      if (n(), "string" == typeof t && (t = document.querySelector(t)), t && "object" == _typeof(t) && t.nodeType) {
        var i = p(t);
        if ("none" === i.display) return o();
        var r = {};
        r.width = t.offsetWidth, r.height = t.offsetHeight;

        for (var a = r.isBorderBox = !(!h || !i[h] || "border-box" !== i[h]), d = 0, l = s.length; l > d; d++) {
          var c = s[d],
              y = i[c];
          y = u(t, y);
          var m = parseFloat(y);
          r[c] = isNaN(m) ? 0 : m;
        }

        var g = r.paddingLeft + r.paddingRight,
            v = r.paddingTop + r.paddingBottom,
            _ = r.marginLeft + r.marginRight,
            I = r.marginTop + r.marginBottom,
            L = r.borderLeftWidth + r.borderRightWidth,
            z = r.borderTopWidth + r.borderBottomWidth,
            b = a && f,
            x = e(i.width);

        x !== !1 && (r.width = x + (b ? 0 : g + L));
        var S = e(i.height);
        return S !== !1 && (r.height = S + (b ? 0 : v + z)), r.innerWidth = r.width - (g + L), r.innerHeight = r.height - (v + z), r.outerWidth = r.width + _, r.outerHeight = r.height + I, r;
      }
    }

    function u(e, i) {
      if (t.getComputedStyle || -1 === i.indexOf("%")) return i;
      var o = e.style,
          n = o.left,
          r = e.runtimeStyle,
          s = r && r.left;
      return s && (r.left = e.currentStyle.left), o.left = i, i = o.pixelLeft, o.left = n, s && (r.left = s), i;
    }

    var p,
        h,
        f,
        d = !1;
    return a;
  }

  var r = "undefined" == typeof console ? i : function (t) {
    console.error(t);
  },
      s = ["paddingLeft", "paddingRight", "paddingTop", "paddingBottom", "marginLeft", "marginRight", "marginTop", "marginBottom", "borderLeftWidth", "borderRightWidth", "borderTopWidth", "borderBottomWidth"];
   true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__WEBPACK_LOCAL_MODULE_4__], __WEBPACK_AMD_DEFINE_FACTORY__ = (n),
				__WEBPACK_LOCAL_MODULE_5__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__)) : undefined;
}(window), function (t) {
  function e(t, e) {
    return t[s](e);
  }

  function i(t) {
    if (!t.parentNode) {
      var e = document.createDocumentFragment();
      e.appendChild(t);
    }
  }

  function o(t, e) {
    i(t);

    for (var o = t.parentNode.querySelectorAll(e), n = 0, r = o.length; r > n; n++) {
      if (o[n] === t) return !0;
    }

    return !1;
  }

  function n(t, o) {
    return i(t), e(t, o);
  }

  var r,
      s = function () {
    if (t.matchesSelector) return "matchesSelector";

    for (var e = ["webkit", "moz", "ms", "o"], i = 0, o = e.length; o > i; i++) {
      var n = e[i],
          r = n + "MatchesSelector";
      if (t[r]) return r;
    }
  }();

  if (s) {
    var a = document.createElement("div"),
        u = e(a, "div");
    r = u ? e : n;
  } else r = o;

   true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_LOCAL_MODULE_6__ = ((function () {
    return r;
  }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__))) : undefined;
}(Element.prototype), function (t) {
  function e(t, e) {
    for (var i in e) {
      t[i] = e[i];
    }

    return t;
  }

  function i(t) {
    for (var e in t) {
      return !1;
    }

    return e = null, !0;
  }

  function o(t) {
    return t.replace(/([A-Z])/g, function (t) {
      return "-" + t.toLowerCase();
    });
  }

  function n(t, n, r) {
    function a(t, e) {
      t && (this.element = t, this.layout = e, this.position = {
        x: 0,
        y: 0
      }, this._create());
    }

    var u = r("transition"),
        p = r("transform"),
        h = u && p,
        f = !!r("perspective"),
        d = {
      WebkitTransition: "webkitTransitionEnd",
      MozTransition: "transitionend",
      OTransition: "otransitionend",
      transition: "transitionend"
    }[u],
        l = ["transform", "transition", "transitionDuration", "transitionProperty"],
        c = function () {
      for (var t = {}, e = 0, i = l.length; i > e; e++) {
        var o = l[e],
            n = r(o);
        n && n !== o && (t[o] = n);
      }

      return t;
    }();

    e(a.prototype, t.prototype), a.prototype._create = function () {
      this._transn = {
        ingProperties: {},
        clean: {},
        onEnd: {}
      }, this.css({
        position: "absolute"
      });
    }, a.prototype.handleEvent = function (t) {
      var e = "on" + t.type;
      this[e] && this[e](t);
    }, a.prototype.getSize = function () {
      this.size = n(this.element);
    }, a.prototype.css = function (t) {
      var e = this.element.style;

      for (var i in t) {
        var o = c[i] || i;
        e[o] = t[i];
      }
    }, a.prototype.getPosition = function () {
      var t = s(this.element),
          e = this.layout.options,
          i = e.isOriginLeft,
          o = e.isOriginTop,
          n = parseInt(t[i ? "left" : "right"], 10),
          r = parseInt(t[o ? "top" : "bottom"], 10);
      n = isNaN(n) ? 0 : n, r = isNaN(r) ? 0 : r;
      var a = this.layout.size;
      n -= i ? a.paddingLeft : a.paddingRight, r -= o ? a.paddingTop : a.paddingBottom, this.position.x = n, this.position.y = r;
    }, a.prototype.layoutPosition = function () {
      var t = this.layout.size,
          e = this.layout.options,
          i = {};
      e.isOriginLeft ? (i.left = this.position.x + t.paddingLeft + "px", i.right = "") : (i.right = this.position.x + t.paddingRight + "px", i.left = ""), e.isOriginTop ? (i.top = this.position.y + t.paddingTop + "px", i.bottom = "") : (i.bottom = this.position.y + t.paddingBottom + "px", i.top = ""), this.css(i), this.emitEvent("layout", [this]);
    };
    var y = f ? function (t, e) {
      return "translate3d(" + t + "px, " + e + "px, 0)";
    } : function (t, e) {
      return "translate(" + t + "px, " + e + "px)";
    };
    a.prototype._transitionTo = function (t, e) {
      this.getPosition();
      var i = this.position.x,
          o = this.position.y,
          n = parseInt(t, 10),
          r = parseInt(e, 10),
          s = n === this.position.x && r === this.position.y;
      if (this.setPosition(t, e), s && !this.isTransitioning) return this.layoutPosition(), void 0;
      var a = t - i,
          u = e - o,
          p = {},
          h = this.layout.options;
      a = h.isOriginLeft ? a : -a, u = h.isOriginTop ? u : -u, p.transform = y(a, u), this.transition({
        to: p,
        onTransitionEnd: {
          transform: this.layoutPosition
        },
        isCleaning: !0
      });
    }, a.prototype.goTo = function (t, e) {
      this.setPosition(t, e), this.layoutPosition();
    }, a.prototype.moveTo = h ? a.prototype._transitionTo : a.prototype.goTo, a.prototype.setPosition = function (t, e) {
      this.position.x = parseInt(t, 10), this.position.y = parseInt(e, 10);
    }, a.prototype._nonTransition = function (t) {
      this.css(t.to), t.isCleaning && this._removeStyles(t.to);

      for (var e in t.onTransitionEnd) {
        t.onTransitionEnd[e].call(this);
      }
    }, a.prototype._transition = function (t) {
      if (!parseFloat(this.layout.options.transitionDuration)) return this._nonTransition(t), void 0;
      var e = this._transn;

      for (var i in t.onTransitionEnd) {
        e.onEnd[i] = t.onTransitionEnd[i];
      }

      for (i in t.to) {
        e.ingProperties[i] = !0, t.isCleaning && (e.clean[i] = !0);
      }

      if (t.from) {
        this.css(t.from);
        var o = this.element.offsetHeight;
        o = null;
      }

      this.enableTransition(t.to), this.css(t.to), this.isTransitioning = !0;
    };
    var m = p && o(p) + ",opacity";
    a.prototype.enableTransition = function () {
      this.isTransitioning || (this.css({
        transitionProperty: m,
        transitionDuration: this.layout.options.transitionDuration
      }), this.element.addEventListener(d, this, !1));
    }, a.prototype.transition = a.prototype[u ? "_transition" : "_nonTransition"], a.prototype.onwebkitTransitionEnd = function (t) {
      this.ontransitionend(t);
    }, a.prototype.onotransitionend = function (t) {
      this.ontransitionend(t);
    };
    var g = {
      "-webkit-transform": "transform",
      "-moz-transform": "transform",
      "-o-transform": "transform"
    };
    a.prototype.ontransitionend = function (t) {
      if (t.target === this.element) {
        var e = this._transn,
            o = g[t.propertyName] || t.propertyName;

        if (delete e.ingProperties[o], i(e.ingProperties) && this.disableTransition(), o in e.clean && (this.element.style[t.propertyName] = "", delete e.clean[o]), o in e.onEnd) {
          var n = e.onEnd[o];
          n.call(this), delete e.onEnd[o];
        }

        this.emitEvent("transitionEnd", [this]);
      }
    }, a.prototype.disableTransition = function () {
      this.removeTransitionStyles(), this.element.removeEventListener(d, this, !1), this.isTransitioning = !1;
    }, a.prototype._removeStyles = function (t) {
      var e = {};

      for (var i in t) {
        e[i] = "";
      }

      this.css(e);
    };
    var v = {
      transitionProperty: "",
      transitionDuration: ""
    };
    return a.prototype.removeTransitionStyles = function () {
      this.css(v);
    }, a.prototype.removeElem = function () {
      this.element.parentNode.removeChild(this.element), this.emitEvent("remove", [this]);
    }, a.prototype.remove = function () {
      if (!u || !parseFloat(this.layout.options.transitionDuration)) return this.removeElem(), void 0;
      var t = this;
      this.on("transitionEnd", function () {
        return t.removeElem(), !0;
      }), this.hide();
    }, a.prototype.reveal = function () {
      delete this.isHidden, this.css({
        display: ""
      });
      var t = this.layout.options;
      this.transition({
        from: t.hiddenStyle,
        to: t.visibleStyle,
        isCleaning: !0
      });
    }, a.prototype.hide = function () {
      this.isHidden = !0, this.css({
        display: ""
      });
      var t = this.layout.options;
      this.transition({
        from: t.visibleStyle,
        to: t.hiddenStyle,
        isCleaning: !0,
        onTransitionEnd: {
          opacity: function opacity() {
            this.isHidden && this.css({
              display: "none"
            });
          }
        }
      });
    }, a.prototype.destroy = function () {
      this.css({
        position: "",
        left: "",
        right: "",
        top: "",
        bottom: "",
        transition: "",
        transform: ""
      });
    }, a;
  }

  var r = t.getComputedStyle,
      s = r ? function (t) {
    return r(t, null);
  } : function (t) {
    return t.currentStyle;
  };
   true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__WEBPACK_LOCAL_MODULE_3__, __WEBPACK_LOCAL_MODULE_5__, __WEBPACK_LOCAL_MODULE_4__], __WEBPACK_AMD_DEFINE_FACTORY__ = (n),
				__WEBPACK_LOCAL_MODULE_7__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__)) : undefined;
}(window), function (t) {
  function e(t, e) {
    for (var i in e) {
      t[i] = e[i];
    }

    return t;
  }

  function i(t) {
    return "[object Array]" === f.call(t);
  }

  function o(t) {
    var e = [];
    if (i(t)) e = t;else if (t && "number" == typeof t.length) for (var o = 0, n = t.length; n > o; o++) {
      e.push(t[o]);
    } else e.push(t);
    return e;
  }

  function n(t, e) {
    var i = l(e, t);
    -1 !== i && e.splice(i, 1);
  }

  function r(t) {
    return t.replace(/(.)([A-Z])/g, function (t, e, i) {
      return e + "-" + i;
    }).toLowerCase();
  }

  function s(i, s, f, l, c, y) {
    function m(t, i) {
      if ("string" == typeof t && (t = a.querySelector(t)), !t || !d(t)) return u && u.error("Bad " + this.constructor.namespace + " element: " + t), void 0;
      this.element = t, this.options = e({}, this.constructor.defaults), this.option(i);
      var o = ++g;
      this.element.outlayerGUID = o, v[o] = this, this._create(), this.options.isInitLayout && this.layout();
    }

    var g = 0,
        v = {};
    return m.namespace = "outlayer", m.Item = y, m.defaults = {
      containerStyle: {
        position: "relative"
      },
      isInitLayout: !0,
      isOriginLeft: !0,
      isOriginTop: !0,
      isResizeBound: !0,
      isResizingContainer: !0,
      transitionDuration: "1s",
      hiddenStyle: {
        opacity: 0,
        transform: "scale(0.005) rotateX(180deg)"
      },
      visibleStyle: {
        opacity: 1,
        transform: "scale(1) rotateX(0deg)"
      }
    }, e(m.prototype, f.prototype), m.prototype.option = function (t) {
      e(this.options, t);
    }, m.prototype._create = function () {
      this.reloadItems(), this.stamps = [], this.stamp(this.options.stamp), e(this.element.style, this.options.containerStyle), this.options.isResizeBound && this.bindResize();
    }, m.prototype.reloadItems = function () {
      this.items = this._itemize(this.element.children);
    }, m.prototype._itemize = function (t) {
      for (var e = this._filterFindItemElements(t), i = this.constructor.Item, o = [], n = 0, r = e.length; r > n; n++) {
        var s = e[n],
            a = new i(s, this);
        o.push(a);
      }

      return o;
    }, m.prototype._filterFindItemElements = function (t) {
      t = o(t);

      for (var e = this.options.itemSelector, i = [], n = 0, r = t.length; r > n; n++) {
        var s = t[n];
        if (d(s)) if (e) {
          c(s, e) && i.push(s);

          for (var a = s.querySelectorAll(e), u = 0, p = a.length; p > u; u++) {
            i.push(a[u]);
          }
        } else i.push(s);
      }

      return i;
    }, m.prototype.getItemElements = function () {
      for (var t = [], e = 0, i = this.items.length; i > e; e++) {
        t.push(this.items[e].element);
      }

      return t;
    }, m.prototype.layout = function () {
      this._resetLayout(), this._manageStamps();
      var t = void 0 !== this.options.isLayoutInstant ? this.options.isLayoutInstant : !this._isLayoutInited;
      this.layoutItems(this.items, t), this._isLayoutInited = !0;
    }, m.prototype._init = m.prototype.layout, m.prototype._resetLayout = function () {
      this.getSize();
    }, m.prototype.getSize = function () {
      this.size = l(this.element);
    }, m.prototype._getMeasurement = function (t, e) {
      var i,
          o = this.options[t];
      o ? ("string" == typeof o ? i = this.element.querySelector(o) : d(o) && (i = o), this[t] = i ? l(i)[e] : o) : this[t] = 0;
    }, m.prototype.layoutItems = function (t, e) {
      t = this._getItemsForLayout(t), this._layoutItems(t, e), this._postLayout();
    }, m.prototype._getItemsForLayout = function (t) {
      for (var e = [], i = 0, o = t.length; o > i; i++) {
        var n = t[i];
        n.isIgnored || e.push(n);
      }

      return e;
    }, m.prototype._layoutItems = function (t, e) {
      function i() {
        o.emitEvent("layoutComplete", [o, t]);
      }

      var o = this;
      if (!t || !t.length) return i(), void 0;

      this._itemsOn(t, "layout", i);

      for (var n = [], r = 0, s = t.length; s > r; r++) {
        var a = t[r],
            u = this._getItemLayoutPosition(a);

        u.item = a, u.isInstant = e || a.isLayoutInstant, n.push(u);
      }

      this._processLayoutQueue(n);
    }, m.prototype._getItemLayoutPosition = function () {
      return {
        x: 0,
        y: 0
      };
    }, m.prototype._processLayoutQueue = function (t) {
      for (var e = 0, i = t.length; i > e; e++) {
        var o = t[e];

        this._positionItem(o.item, o.x, o.y, o.isInstant);
      }
    }, m.prototype._positionItem = function (t, e, i, o) {
      o ? t.goTo(e, i) : t.moveTo(e, i);
    }, m.prototype._postLayout = function () {
      this.resizeContainer();
    }, m.prototype.resizeContainer = function () {
      if (this.options.isResizingContainer) {
        var t = this._getContainerSize();

        t && (this._setContainerMeasure(t.width, !0), this._setContainerMeasure(t.height, !1));
      }
    }, m.prototype._getContainerSize = h, m.prototype._setContainerMeasure = function (t, e) {
      if (void 0 !== t) {
        var i = this.size;
        i.isBorderBox && (t += e ? i.paddingLeft + i.paddingRight + i.borderLeftWidth + i.borderRightWidth : i.paddingBottom + i.paddingTop + i.borderTopWidth + i.borderBottomWidth), t = Math.max(t, 0), this.element.style[e ? "width" : "height"] = t + "px";
      }
    }, m.prototype._itemsOn = function (t, e, i) {
      function o() {
        return n++, n === r && i.call(s), !0;
      }

      for (var n = 0, r = t.length, s = this, a = 0, u = t.length; u > a; a++) {
        var p = t[a];
        p.on(e, o);
      }
    }, m.prototype.ignore = function (t) {
      var e = this.getItem(t);
      e && (e.isIgnored = !0);
    }, m.prototype.unignore = function (t) {
      var e = this.getItem(t);
      e && delete e.isIgnored;
    }, m.prototype.stamp = function (t) {
      if (t = this._find(t)) {
        this.stamps = this.stamps.concat(t);

        for (var e = 0, i = t.length; i > e; e++) {
          var o = t[e];
          this.ignore(o);
        }
      }
    }, m.prototype.unstamp = function (t) {
      if (t = this._find(t)) for (var e = 0, i = t.length; i > e; e++) {
        var o = t[e];
        n(o, this.stamps), this.unignore(o);
      }
    }, m.prototype._find = function (t) {
      return t ? ("string" == typeof t && (t = this.element.querySelectorAll(t)), t = o(t)) : void 0;
    }, m.prototype._manageStamps = function () {
      if (this.stamps && this.stamps.length) {
        this._getBoundingRect();

        for (var t = 0, e = this.stamps.length; e > t; t++) {
          var i = this.stamps[t];

          this._manageStamp(i);
        }
      }
    }, m.prototype._getBoundingRect = function () {
      var t = this.element.getBoundingClientRect(),
          e = this.size;
      this._boundingRect = {
        left: t.left + e.paddingLeft + e.borderLeftWidth,
        top: t.top + e.paddingTop + e.borderTopWidth,
        right: t.right - (e.paddingRight + e.borderRightWidth),
        bottom: t.bottom - (e.paddingBottom + e.borderBottomWidth)
      };
    }, m.prototype._manageStamp = h, m.prototype._getElementOffset = function (t) {
      var e = t.getBoundingClientRect(),
          i = this._boundingRect,
          o = l(t),
          n = {
        left: e.left - i.left - o.marginLeft,
        top: e.top - i.top - o.marginTop,
        right: i.right - e.right - o.marginRight,
        bottom: i.bottom - e.bottom - o.marginBottom
      };
      return n;
    }, m.prototype.handleEvent = function (t) {
      var e = "on" + t.type;
      this[e] && this[e](t);
    }, m.prototype.bindResize = function () {
      this.isResizeBound || (i.bind(t, "resize", this), this.isResizeBound = !0);
    }, m.prototype.unbindResize = function () {
      this.isResizeBound && i.unbind(t, "resize", this), this.isResizeBound = !1;
    }, m.prototype.onresize = function () {
      function t() {
        e.resize(), delete e.resizeTimeout;
      }

      this.resizeTimeout && clearTimeout(this.resizeTimeout);
      var e = this;
      this.resizeTimeout = setTimeout(t, 100);
    }, m.prototype.resize = function () {
      this.isResizeBound && this.needsResizeLayout() && this.layout();
    }, m.prototype.needsResizeLayout = function () {
      var t = l(this.element),
          e = this.size && t;
      return e && t.innerWidth !== this.size.innerWidth;
    }, m.prototype.addItems = function (t) {
      var e = this._itemize(t);

      return e.length && (this.items = this.items.concat(e)), e;
    }, m.prototype.appended = function (t) {
      var e = this.addItems(t);
      e.length && (this.layoutItems(e, !0), this.reveal(e));
    }, m.prototype.prepended = function (t) {
      var e = this._itemize(t);

      if (e.length) {
        var i = this.items.slice(0);
        this.items = e.concat(i), this._resetLayout(), this._manageStamps(), this.layoutItems(e, !0), this.reveal(e), this.layoutItems(i);
      }
    }, m.prototype.reveal = function (t) {
      var e = t && t.length;
      if (e) for (var i = 0; e > i; i++) {
        var o = t[i];
        o.reveal();
      }
    }, m.prototype.hide = function (t) {
      var e = t && t.length;
      if (e) for (var i = 0; e > i; i++) {
        var o = t[i];
        o.hide();
      }
    }, m.prototype.getItem = function (t) {
      for (var e = 0, i = this.items.length; i > e; e++) {
        var o = this.items[e];
        if (o.element === t) return o;
      }
    }, m.prototype.getItems = function (t) {
      if (t && t.length) {
        for (var e = [], i = 0, o = t.length; o > i; i++) {
          var n = t[i],
              r = this.getItem(n);
          r && e.push(r);
        }

        return e;
      }
    }, m.prototype.remove = function (t) {
      t = o(t);
      var e = this.getItems(t);

      if (e && e.length) {
        this._itemsOn(e, "remove", function () {
          this.emitEvent("removeComplete", [this, e]);
        });

        for (var i = 0, r = e.length; r > i; i++) {
          var s = e[i];
          s.remove(), n(s, this.items);
        }
      }
    }, m.prototype.destroy = function () {
      var t = this.element.style;
      t.height = "", t.position = "", t.width = "";

      for (var e = 0, i = this.items.length; i > e; e++) {
        var o = this.items[e];
        o.destroy();
      }

      this.unbindResize();
      var n = this.element.outlayerGUID;
      delete v[n], delete this.element.outlayerGUID, p && p.removeData(this.element, this.constructor.namespace);
    }, m.data = function (t) {
      var e = t && t.outlayerGUID;
      return e && v[e];
    }, m.create = function (t, i) {
      function o() {
        m.apply(this, arguments);
      }

      return Object.create ? o.prototype = Object.create(m.prototype) : e(o.prototype, m.prototype), o.prototype.constructor = o, o.defaults = e({}, m.defaults), e(o.defaults, i), o.prototype.settings = {}, o.namespace = t, o.data = m.data, o.Item = function () {
        y.apply(this, arguments);
      }, o.Item.prototype = new y(), s(function () {
        for (var e = r(t), i = a.querySelectorAll(".js-" + e), n = "data-" + e + "-options", s = 0, h = i.length; h > s; s++) {
          var f,
              d = i[s],
              l = d.getAttribute(n);

          try {
            f = l && JSON.parse(l);
          } catch (c) {
            u && u.error("Error parsing " + n + " on " + d.nodeName.toLowerCase() + (d.id ? "#" + d.id : "") + ": " + c);
            continue;
          }

          var y = new o(d, f);
          p && p.data(d, t, y);
        }
      }), p && p.bridget && p.bridget(t, o), o;
    }, m.Item = y, m;
  }

  var a = t.document,
      u = t.console,
      p = __webpack_provided_window_dot_jQuery,
      h = function h() {},
      f = Object.prototype.toString,
      d = "function" == typeof HTMLElement || "object" == (typeof HTMLElement === "undefined" ? "undefined" : _typeof(HTMLElement)) ? function (t) {
    return t instanceof HTMLElement;
  } : function (t) {
    return t && "object" == _typeof(t) && 1 === t.nodeType && "string" == typeof t.nodeName;
  },
      l = Array.prototype.indexOf ? function (t, e) {
    return t.indexOf(e);
  } : function (t, e) {
    for (var i = 0, o = t.length; o > i; i++) {
      if (t[i] === e) return i;
    }

    return -1;
  };

   true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__WEBPACK_LOCAL_MODULE_1__, __WEBPACK_LOCAL_MODULE_2__, __WEBPACK_LOCAL_MODULE_3__, __WEBPACK_LOCAL_MODULE_5__, __WEBPACK_LOCAL_MODULE_6__, __WEBPACK_LOCAL_MODULE_7__], __WEBPACK_AMD_DEFINE_FACTORY__ = (s),
				__WEBPACK_LOCAL_MODULE_8__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__)) : undefined;
}(window), function (t) {
  function e(t) {
    function e() {
      t.Item.apply(this, arguments);
    }

    e.prototype = new t.Item(), e.prototype._create = function () {
      this.id = this.layout.itemGUID++, t.Item.prototype._create.call(this), this.sortData = {};
    }, e.prototype.updateSortData = function () {
      if (!this.isIgnored) {
        this.sortData.id = this.id, this.sortData["original-order"] = this.id, this.sortData.random = Math.random();
        var t = this.layout.options.getSortData,
            e = this.layout._sorters;

        for (var i in t) {
          var o = e[i];
          this.sortData[i] = o(this.element, this);
        }
      }
    };
    var i = e.prototype.destroy;
    return e.prototype.destroy = function () {
      i.apply(this, arguments), this.css({
        display: ""
      });
    }, e;
  }

   true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__WEBPACK_LOCAL_MODULE_8__], __WEBPACK_AMD_DEFINE_FACTORY__ = (e),
				__WEBPACK_LOCAL_MODULE_9__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__)) : undefined;
}(window), function (t) {
  function e(t, e) {
    function i(t) {
      this.isotope = t, t && (this.options = t.options[this.namespace], this.element = t.element, this.items = t.filteredItems, this.size = t.size);
    }

    return function () {
      function t(t) {
        return function () {
          return e.prototype[t].apply(this.isotope, arguments);
        };
      }

      for (var o = ["_resetLayout", "_getItemLayoutPosition", "_manageStamp", "_getContainerSize", "_getElementOffset", "needsResizeLayout"], n = 0, r = o.length; r > n; n++) {
        var s = o[n];
        i.prototype[s] = t(s);
      }
    }(), i.prototype.needsVerticalResizeLayout = function () {
      var e = t(this.isotope.element),
          i = this.isotope.size && e;
      return i && e.innerHeight !== this.isotope.size.innerHeight;
    }, i.prototype._getMeasurement = function () {
      this.isotope._getMeasurement.apply(this, arguments);
    }, i.prototype.getColumnWidth = function () {
      this.getSegmentSize("column", "Width");
    }, i.prototype.getRowHeight = function () {
      this.getSegmentSize("row", "Height");
    }, i.prototype.getSegmentSize = function (t, e) {
      var i = t + e,
          o = "outer" + e;

      if (this._getMeasurement(i, o), !this[i]) {
        var n = this.getFirstItemSize();
        this[i] = n && n[o] || this.isotope.size["inner" + e];
      }
    }, i.prototype.getFirstItemSize = function () {
      var e = this.isotope.filteredItems[0];
      return e && e.element && t(e.element);
    }, i.prototype.layout = function () {
      this.isotope.layout.apply(this.isotope, arguments);
    }, i.prototype.getSize = function () {
      this.isotope.getSize(), this.size = this.isotope.size;
    }, i.modes = {}, i.create = function (t, e) {
      function o() {
        i.apply(this, arguments);
      }

      return o.prototype = new i(), e && (o.options = e), o.prototype.namespace = t, i.modes[t] = o, o;
    }, i;
  }

   true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__WEBPACK_LOCAL_MODULE_5__, __WEBPACK_LOCAL_MODULE_8__], __WEBPACK_AMD_DEFINE_FACTORY__ = (e),
				__WEBPACK_LOCAL_MODULE_10__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__)) : undefined;
}(window), function (t) {
  function e(t, e) {
    var o = t.create("masonry");
    return o.prototype._resetLayout = function () {
      this.getSize(), this._getMeasurement("columnWidth", "outerWidth"), this._getMeasurement("gutter", "outerWidth"), this.measureColumns();
      var t = this.cols;

      for (this.colYs = []; t--;) {
        this.colYs.push(0);
      }

      this.maxY = 0;
    }, o.prototype.measureColumns = function () {
      if (this.getContainerWidth(), !this.columnWidth) {
        var t = this.items[0],
            i = t && t.element;
        this.columnWidth = i && e(i).outerWidth || this.containerWidth;
      }

      this.columnWidth += this.gutter, this.cols = Math.floor((this.containerWidth + this.gutter) / this.columnWidth), this.cols = Math.max(this.cols, 1);
    }, o.prototype.getContainerWidth = function () {
      var t = this.options.isFitWidth ? this.element.parentNode : this.element,
          i = e(t);
      this.containerWidth = i && i.innerWidth;
    }, o.prototype._getItemLayoutPosition = function (t) {
      t.getSize();
      var e = t.size.outerWidth % this.columnWidth,
          o = e && 1 > e ? "round" : "ceil",
          n = Math[o](t.size.outerWidth / this.columnWidth);
      n = Math.min(n, this.cols);

      for (var r = this._getColGroup(n), s = Math.min.apply(Math, r), a = i(r, s), u = {
        x: this.columnWidth * a,
        y: s
      }, p = s + t.size.outerHeight, h = this.cols + 1 - r.length, f = 0; h > f; f++) {
        this.colYs[a + f] = p;
      }

      return u;
    }, o.prototype._getColGroup = function (t) {
      if (2 > t) return this.colYs;

      for (var e = [], i = this.cols + 1 - t, o = 0; i > o; o++) {
        var n = this.colYs.slice(o, o + t);
        e[o] = Math.max.apply(Math, n);
      }

      return e;
    }, o.prototype._manageStamp = function (t) {
      var i = e(t),
          o = this._getElementOffset(t),
          n = this.options.isOriginLeft ? o.left : o.right,
          r = n + i.outerWidth,
          s = Math.floor(n / this.columnWidth);

      s = Math.max(0, s);
      var a = Math.floor(r / this.columnWidth);
      a -= r % this.columnWidth ? 0 : 1, a = Math.min(this.cols - 1, a);

      for (var u = (this.options.isOriginTop ? o.top : o.bottom) + i.outerHeight, p = s; a >= p; p++) {
        this.colYs[p] = Math.max(u, this.colYs[p]);
      }
    }, o.prototype._getContainerSize = function () {
      this.maxY = Math.max.apply(Math, this.colYs);
      var t = {
        height: this.maxY
      };
      return this.options.isFitWidth && (t.width = this._getContainerFitWidth()), t;
    }, o.prototype._getContainerFitWidth = function () {
      for (var t = 0, e = this.cols; --e && 0 === this.colYs[e];) {
        t++;
      }

      return (this.cols - t) * this.columnWidth - this.gutter;
    }, o.prototype.needsResizeLayout = function () {
      var t = this.containerWidth;
      return this.getContainerWidth(), t !== this.containerWidth;
    }, o;
  }

  var i = Array.prototype.indexOf ? function (t, e) {
    return t.indexOf(e);
  } : function (t, e) {
    for (var i = 0, o = t.length; o > i; i++) {
      var n = t[i];
      if (n === e) return i;
    }

    return -1;
  };
   true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__WEBPACK_LOCAL_MODULE_8__, __WEBPACK_LOCAL_MODULE_5__], __WEBPACK_AMD_DEFINE_FACTORY__ = (e),
				__WEBPACK_LOCAL_MODULE_11__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__)) : undefined;
}(window), function (t) {
  function e(t, e) {
    for (var i in e) {
      t[i] = e[i];
    }

    return t;
  }

  function i(t, i) {
    var o = t.create("masonry"),
        n = o.prototype._getElementOffset,
        r = o.prototype.layout,
        s = o.prototype._getMeasurement;
    e(o.prototype, i.prototype), o.prototype._getElementOffset = n, o.prototype.layout = r, o.prototype._getMeasurement = s;
    var a = o.prototype.measureColumns;

    o.prototype.measureColumns = function () {
      this.items = this.isotope.filteredItems, a.call(this);
    };

    var u = o.prototype._manageStamp;
    return o.prototype._manageStamp = function () {
      this.options.isOriginLeft = this.isotope.options.isOriginLeft, this.options.isOriginTop = this.isotope.options.isOriginTop, u.apply(this, arguments);
    }, o;
  }

   true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__WEBPACK_LOCAL_MODULE_10__, __WEBPACK_LOCAL_MODULE_11__], __WEBPACK_AMD_DEFINE_FACTORY__ = (i),
				__WEBPACK_LOCAL_MODULE_12__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__)) : undefined;
}(window), function (t) {
  function e(t) {
    var e = t.create("fitRows");
    return e.prototype._resetLayout = function () {
      this.x = 0, this.y = 0, this.maxY = 0, this._getMeasurement("gutter", "outerWidth");
    }, e.prototype._getItemLayoutPosition = function (t) {
      t.getSize();
      var e = t.size.outerWidth + this.gutter,
          i = this.isotope.size.innerWidth + this.gutter;
      0 !== this.x && e + this.x > i && (this.x = 0, this.y = this.maxY);
      var o = {
        x: this.x,
        y: this.y
      };
      return this.maxY = Math.max(this.maxY, this.y + t.size.outerHeight), this.x += e, o;
    }, e.prototype._getContainerSize = function () {
      return {
        height: this.maxY
      };
    }, e;
  }

   true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__WEBPACK_LOCAL_MODULE_10__], __WEBPACK_AMD_DEFINE_FACTORY__ = (e),
				__WEBPACK_LOCAL_MODULE_13__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__)) : undefined;
}(window), function (t) {
  function e(t) {
    var e = t.create("vertical", {
      horizontalAlignment: 0
    });
    return e.prototype._resetLayout = function () {
      this.y = 0;
    }, e.prototype._getItemLayoutPosition = function (t) {
      t.getSize();
      var e = (this.isotope.size.innerWidth - t.size.outerWidth) * this.options.horizontalAlignment,
          i = this.y;
      return this.y += t.size.outerHeight, {
        x: e,
        y: i
      };
    }, e.prototype._getContainerSize = function () {
      return {
        height: this.y
      };
    }, e;
  }

   true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__WEBPACK_LOCAL_MODULE_10__], __WEBPACK_AMD_DEFINE_FACTORY__ = (e),
				__WEBPACK_LOCAL_MODULE_14__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__)) : undefined;
}(window), function (t) {
  function e(t, e) {
    for (var i in e) {
      t[i] = e[i];
    }

    return t;
  }

  function i(t) {
    return "[object Array]" === h.call(t);
  }

  function o(t) {
    var e = [];
    if (i(t)) e = t;else if (t && "number" == typeof t.length) for (var o = 0, n = t.length; n > o; o++) {
      e.push(t[o]);
    } else e.push(t);
    return e;
  }

  function n(t, e) {
    var i = f(e, t);
    -1 !== i && e.splice(i, 1);
  }

  function r(t, i, r, u, h) {
    function f(t, e) {
      return function (i, o) {
        for (var n = 0, r = t.length; r > n; n++) {
          var s = t[n],
              a = i.sortData[s],
              u = o.sortData[s];

          if (a > u || u > a) {
            var p = void 0 !== e[s] ? e[s] : e,
                h = p ? 1 : -1;
            return (a > u ? 1 : -1) * h;
          }
        }

        return 0;
      };
    }

    var d = t.create("isotope", {
      layoutMode: "masonry",
      isJQueryFiltering: !0,
      sortAscending: !0
    });
    d.Item = u, d.LayoutMode = h, d.prototype._create = function () {
      this.itemGUID = 0, this._sorters = {}, this._getSorters(), t.prototype._create.call(this), this.modes = {}, this.filteredItems = this.items, this.sortHistory = ["original-order"];

      for (var e in h.modes) {
        this._initLayoutMode(e);
      }
    }, d.prototype.reloadItems = function () {
      this.itemGUID = 0, t.prototype.reloadItems.call(this);
    }, d.prototype._itemize = function () {
      for (var e = t.prototype._itemize.apply(this, arguments), i = 0, o = e.length; o > i; i++) {
        var n = e[i];
        n.id = this.itemGUID++;
      }

      return this._updateItemsSortData(e), e;
    }, d.prototype._initLayoutMode = function (t) {
      var i = h.modes[t],
          o = this.options[t] || {};
      this.options[t] = i.options ? e(i.options, o) : o, this.modes[t] = new i(this);
    }, d.prototype.layout = function () {
      return !this._isLayoutInited && this.options.isInitLayout ? (this.arrange(), void 0) : (this._layout(), void 0);
    }, d.prototype._layout = function () {
      var t = this._getIsInstant();

      this._resetLayout(), this._manageStamps(), this.layoutItems(this.filteredItems, t), this._isLayoutInited = !0;
    }, d.prototype.arrange = function (t) {
      function e() {
        o.reveal(i.needReveal), o.hide(i.needHide);
      }

      this.option(t), this._getIsInstant();

      var i = this._filter(this.items);

      this.filteredItems = i.matches;
      var o = this;
      this._isInstant ? this._noTransition(e) : e(), this._sort(), this._layout();
    }, d.prototype._init = d.prototype.arrange, d.prototype._getIsInstant = function () {
      var t = void 0 !== this.options.isLayoutInstant ? this.options.isLayoutInstant : !this._isLayoutInited;
      return this._isInstant = t, t;
    }, d.prototype._filter = function (t) {
      var e = this.options.filter;
      e = e || "*";

      for (var i = [], o = [], n = [], r = this._getFilterTest(e), s = 0, a = t.length; a > s; s++) {
        var u = t[s];

        if (!u.isIgnored) {
          var p = r(u);
          p && i.push(u), p && u.isHidden ? o.push(u) : p || u.isHidden || n.push(u);
        }
      }

      return {
        matches: i,
        needReveal: o,
        needHide: n
      };
    }, d.prototype._getFilterTest = function (t) {
      return s && this.options.isJQueryFiltering ? function (e) {
        return s(e.element).is(t);
      } : "function" == typeof t ? function (e) {
        return t(e.element);
      } : function (e) {
        return r(e.element, t);
      };
    }, d.prototype.updateSortData = function (t) {
      var e;
      t ? (t = o(t), e = this.getItems(t)) : e = this.items, this._getSorters(), this._updateItemsSortData(e);
    }, d.prototype._getSorters = function () {
      var t = this.options.getSortData;

      for (var e in t) {
        var i = t[e];
        this._sorters[e] = l(i);
      }
    }, d.prototype._updateItemsSortData = function (t) {
      for (var e = t && t.length, i = 0; e && e > i; i++) {
        var o = t[i];
        o.updateSortData();
      }
    };

    var l = function () {
      function t(t) {
        if ("string" != typeof t) return t;
        var i = a(t).split(" "),
            o = i[0],
            n = o.match(/^\[(.+)\]$/),
            r = n && n[1],
            s = e(r, o),
            u = d.sortDataParsers[i[1]];
        return t = u ? function (t) {
          return t && u(s(t));
        } : function (t) {
          return t && s(t);
        };
      }

      function e(t, e) {
        var i;
        return i = t ? function (e) {
          return e.getAttribute(t);
        } : function (t) {
          var i = t.querySelector(e);
          return i && p(i);
        };
      }

      return t;
    }();

    d.sortDataParsers = {
      parseInt: function (_parseInt) {
        function parseInt(_x) {
          return _parseInt.apply(this, arguments);
        }

        parseInt.toString = function () {
          return _parseInt.toString();
        };

        return parseInt;
      }(function (t) {
        return parseInt(t, 10);
      }),
      parseFloat: function (_parseFloat) {
        function parseFloat(_x2) {
          return _parseFloat.apply(this, arguments);
        }

        parseFloat.toString = function () {
          return _parseFloat.toString();
        };

        return parseFloat;
      }(function (t) {
        return parseFloat(t);
      })
    }, d.prototype._sort = function () {
      var t = this.options.sortBy;

      if (t) {
        var e = [].concat.apply(t, this.sortHistory),
            i = f(e, this.options.sortAscending);
        this.filteredItems.sort(i), t !== this.sortHistory[0] && this.sortHistory.unshift(t);
      }
    }, d.prototype._mode = function () {
      var t = this.options.layoutMode,
          e = this.modes[t];
      if (!e) throw Error("No layout mode: " + t);
      return e.options = this.options[t], e;
    }, d.prototype._resetLayout = function () {
      t.prototype._resetLayout.call(this), this._mode()._resetLayout();
    }, d.prototype._getItemLayoutPosition = function (t) {
      return this._mode()._getItemLayoutPosition(t);
    }, d.prototype._manageStamp = function (t) {
      this._mode()._manageStamp(t);
    }, d.prototype._getContainerSize = function () {
      return this._mode()._getContainerSize();
    }, d.prototype.needsResizeLayout = function () {
      return this._mode().needsResizeLayout();
    }, d.prototype.appended = function (t) {
      var e = this.addItems(t);

      if (e.length) {
        var i = this._filterRevealAdded(e);

        this.filteredItems = this.filteredItems.concat(i);
      }
    }, d.prototype.prepended = function (t) {
      var e = this._itemize(t);

      if (e.length) {
        this._resetLayout(), this._manageStamps();

        var i = this._filterRevealAdded(e);

        this.layoutItems(this.filteredItems), this.filteredItems = i.concat(this.filteredItems), this.items = e.concat(this.items);
      }
    }, d.prototype._filterRevealAdded = function (t) {
      var e = this._filter(t);

      return this.hide(e.needHide), this.reveal(e.matches), this.layoutItems(e.matches, !0), e.matches;
    }, d.prototype.insert = function (t) {
      var e = this.addItems(t);

      if (e.length) {
        var i,
            o,
            n = e.length;

        for (i = 0; n > i; i++) {
          o = e[i], this.element.appendChild(o.element);
        }

        var r = this._filter(e).matches;

        for (i = 0; n > i; i++) {
          e[i].isLayoutInstant = !0;
        }

        for (this.arrange(), i = 0; n > i; i++) {
          delete e[i].isLayoutInstant;
        }

        this.reveal(r);
      }
    };
    var c = d.prototype.remove;
    return d.prototype.remove = function (t) {
      t = o(t);
      var e = this.getItems(t);
      if (c.call(this, t), e && e.length) for (var i = 0, r = e.length; r > i; i++) {
        var s = e[i];
        n(s, this.filteredItems);
      }
    }, d.prototype.shuffle = function () {
      for (var t = 0, e = this.items.length; e > t; t++) {
        var i = this.items[t];
        i.sortData.random = Math.random();
      }

      this.options.sortBy = "random", this._sort(), this._layout();
    }, d.prototype._noTransition = function (t) {
      var e = this.options.transitionDuration;
      this.options.transitionDuration = 0;
      var i = t.call(this);
      return this.options.transitionDuration = e, i;
    }, d.prototype.getFilteredItemElements = function () {
      for (var t = [], e = 0, i = this.filteredItems.length; i > e; e++) {
        t.push(this.filteredItems[e].element);
      }

      return t;
    }, d;
  }

  var s = __webpack_provided_window_dot_jQuery,
      a = String.prototype.trim ? function (t) {
    return t.trim();
  } : function (t) {
    return t.replace(/^\s+|\s+$/g, "");
  },
      u = document.documentElement,
      p = u.textContent ? function (t) {
    return t.textContent;
  } : function (t) {
    return t.innerText;
  },
      h = Object.prototype.toString,
      f = Array.prototype.indexOf ? function (t, e) {
    return t.indexOf(e);
  } : function (t, e) {
    for (var i = 0, o = t.length; o > i; i++) {
      if (t[i] === e) return i;
    }

    return -1;
  };
   true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__WEBPACK_LOCAL_MODULE_8__, __WEBPACK_LOCAL_MODULE_5__, __WEBPACK_LOCAL_MODULE_6__, __WEBPACK_LOCAL_MODULE_9__, __WEBPACK_LOCAL_MODULE_10__, __WEBPACK_LOCAL_MODULE_12__, __WEBPACK_LOCAL_MODULE_13__, __WEBPACK_LOCAL_MODULE_14__], __WEBPACK_AMD_DEFINE_FACTORY__ = (r),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : undefined;
}(window);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

/***/ }),

/***/ "./src/Resources/views/theme/assets/js/jquery.fancybox.js":
/*!****************************************************************!*\
  !*** ./src/Resources/views/theme/assets/js/jquery.fancybox.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(__webpack_provided_window_dot_jQuery, jQuery) {// ==================================================
// fancyBox v3.2.10
//
// Licensed GPLv3 for open source use
// or fancyBox Commercial License for commercial use
//
// http://fancyapps.com/fancybox/
// Copyright 2017 fancyApps
//
// ==================================================
;

(function (window, document, $, undefined) {
  'use strict'; // If there's no jQuery, fancyBox can't work
  // =========================================

  if (!$) {
    return;
  } // Check if fancyBox is already initialized
  // ========================================


  if ($.fn.fancybox) {
    if ('console' in window) {
      console.log('fancyBox already initialized');
    }

    return;
  } // Private default settings
  // ========================


  var defaults = {
    // Enable infinite gallery navigation
    loop: false,
    // Space around image, ignored if zoomed-in or viewport width is smaller than 800px
    margin: [44, 0],
    // Horizontal space between slides
    gutter: 50,
    // Enable keyboard navigation
    keyboard: true,
    // Should display navigation arrows at the screen edges
    arrows: true,
    // Should display infobar (counter and arrows at the top)
    infobar: true,
    // Should display toolbar (buttons at the top)
    toolbar: true,
    // What buttons should appear in the top right corner.
    // Buttons will be created using templates from `btnTpl` option
    // and they will be placed into toolbar (class="fancybox-toolbar"` element)
    buttons: ['slideShow', 'fullScreen', 'thumbs', 'share', //'download',
    //'zoom',
    'close'],
    // Detect "idle" time in seconds
    idleTime: 3,
    // Should display buttons at top right corner of the content
    // If 'auto' - they will be created for content having type 'html', 'inline' or 'ajax'
    // Use template from `btnTpl.smallBtn` for customization
    smallBtn: 'auto',
    // Disable right-click and use simple image protection for images
    protect: false,
    // Shortcut to make content "modal" - disable keyboard navigtion, hide buttons, etc
    modal: false,
    image: {
      // Wait for images to load before displaying
      // Requires predefined image dimensions
      // If 'auto' - will zoom in thumbnail if 'width' and 'height' attributes are found
      preload: "auto"
    },
    ajax: {
      // Object containing settings for ajax request
      settings: {
        // This helps to indicate that request comes from the modal
        // Feel free to change naming
        data: {
          fancybox: true
        }
      }
    },
    iframe: {
      // Iframe template
      tpl: '<iframe id="fancybox-frame{rnd}" name="fancybox-frame{rnd}" class="fancybox-iframe" frameborder="0" vspace="0" hspace="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen allowtransparency="true" src=""></iframe>',
      // Preload iframe before displaying it
      // This allows to calculate iframe content width and height
      // (note: Due to "Same Origin Policy", you can't get cross domain data).
      preload: true,
      // Custom CSS styling for iframe wrapping element
      // You can use this to set custom iframe dimensions
      css: {},
      // Iframe tag attributes
      attr: {
        scrolling: 'auto'
      }
    },
    // Default content type if cannot be detected automatically
    defaultType: 'image',
    // Open/close animation type
    // Possible values:
    //   false            - disable
    //   "zoom"           - zoom images from/to thumbnail
    //   "fade"
    //   "zoom-in-out"
    //
    animationEffect: "zoom",
    // Duration in ms for open/close animation
    animationDuration: 500,
    // Should image change opacity while zooming
    // If opacity is "auto", then opacity will be changed if image and thumbnail have different aspect ratios
    zoomOpacity: "auto",
    // Transition effect between slides
    //
    // Possible values:
    //   false            - disable
    //   "fade'
    //   "slide'
    //   "circular'
    //   "tube'
    //   "zoom-in-out'
    //   "rotate'
    //
    transitionEffect: "fade",
    // Duration in ms for transition animation
    transitionDuration: 366,
    // Custom CSS class for slide element
    slideClass: '',
    // Custom CSS class for layout
    baseClass: '',
    // Base template for layout
    baseTpl: '<div class="fancybox-container" role="dialog" tabindex="-1">' + '<div class="fancybox-bg"></div>' + '<div class="fancybox-inner">' + '<div class="fancybox-infobar">' + '<span data-fancybox-index></span>&nbsp;/&nbsp;<span data-fancybox-count></span>' + '</div>' + '<div class="fancybox-toolbar">{{buttons}}</div>' + '<div class="fancybox-navigation">{{arrows}}</div>' + '<div class="fancybox-stage"></div>' + '<div class="fancybox-caption-wrap"><div class="fancybox-caption"></div></div>' + '</div>' + '</div>',
    // Loading indicator template
    spinnerTpl: '<div class="fancybox-loading"></div>',
    // Error message template
    errorTpl: '<div class="fancybox-error"><p>{{ERROR}}<p></div>',
    btnTpl: {
      download: '<a download data-fancybox-download class="fancybox-button fancybox-button--download" title="{{DOWNLOAD}}">' + '<svg viewBox="0 0 40 40">' + '<path d="M20,23 L20,8 L20,23 L13,16 L20,23 L27,16 L20,23 M26,28 L13,28 L27,28 L14,28" />' + '</svg>' + '</a>',
      zoom: '<button data-fancybox-zoom class="fancybox-button fancybox-button--zoom" title="{{ZOOM}}">' + '<svg viewBox="0 0 40 40">' + '<path d="M 18,17 m-8,0 a 8,8 0 1,0 16,0 a 8,8 0 1,0 -16,0 M25,23 L31,29 L25,23" />' + '</svg>' + '</button>',
      close: '<button data-fancybox-close class="fancybox-button fancybox-button--close" title="{{CLOSE}}">' + '<svg viewBox="0 0 40 40">' + '<path d="M10,10 L30,30 M30,10 L10,30" />' + '</svg>' + '</button>',
      // This small close button will be appended to your html/inline/ajax content by default,
      // if "smallBtn" option is not set to false
      smallBtn: '<button data-fancybox-close class="fancybox-close-small" title="{{CLOSE}}"></button>',
      // Arrows
      arrowLeft: '<button data-fancybox-prev class="fancybox-button fancybox-button--arrow_left" title="{{PREV}}">' + '<svg viewBox="0 0 40 40">' + '<path d="M10,20 L30,20 L10,20 L18,28 L10,20 L18,12 L10,20"></path>' + '</svg>' + '</button>',
      arrowRight: '<button data-fancybox-next class="fancybox-button fancybox-button--arrow_right" title="{{NEXT}}">' + '<svg viewBox="0 0 40 40">' + '<path d="M30,20 L10,20 L30,20 L22,28 L30,20 L22,12 L30,20"></path>' + '</svg>' + '</button>'
    },
    // Container is injected into this element
    parentEl: 'body',
    // Focus handling
    // ==============
    // Try to focus on the first focusable element after opening
    autoFocus: false,
    // Put focus back to active element after closing
    backFocus: true,
    // Do not let user to focus on element outside modal content
    trapFocus: true,
    // Module specific options
    // =======================
    fullScreen: {
      autoStart: false
    },
    // Set `touch: false` to disable dragging/swiping
    touch: {
      vertical: true,
      // Allow to drag content vertically
      momentum: true // Continue movement after releasing mouse/touch when panning

    },
    // Hash value when initializing manually,
    // set `false` to disable hash change
    hash: null,
    // Customize or add new media types
    // Example:

    /*
    media : {
        youtube : {
            params : {
                autoplay : 0
            }
        }
    }
    */
    media: {},
    slideShow: {
      autoStart: false,
      speed: 4000
    },
    thumbs: {
      autoStart: false,
      // Display thumbnails on opening
      hideOnClose: true,
      // Hide thumbnail grid when closing animation starts
      parentEl: '.fancybox-container',
      // Container is injected into this element
      axis: 'y' // Vertical (y) or horizontal (x) scrolling

    },
    // Use mousewheel to navigate gallery
    // If 'auto' - enabled for images only
    wheel: 'auto',
    // Callbacks
    //==========
    // See Documentation/API/Events for more information
    // Example:

    /*
        afterShow: function( instance, current ) {
             console.info( 'Clicked element:' );
             console.info( current.opts.$orig );
        }
    */
    onInit: $.noop,
    // When instance has been initialized
    beforeLoad: $.noop,
    // Before the content of a slide is being loaded
    afterLoad: $.noop,
    // When the content of a slide is done loading
    beforeShow: $.noop,
    // Before open animation starts
    afterShow: $.noop,
    // When content is done loading and animating
    beforeClose: $.noop,
    // Before the instance attempts to close. Return false to cancel the close.
    afterClose: $.noop,
    // After instance has been closed
    onActivate: $.noop,
    // When instance is brought to front
    onDeactivate: $.noop,
    // When other instance has been activated
    // Interaction
    // ===========
    // Use options below to customize taken action when user clicks or double clicks on the fancyBox area,
    // each option can be string or method that returns value.
    //
    // Possible values:
    //   "close"           - close instance
    //   "next"            - move to next gallery item
    //   "nextOrClose"     - move to next gallery item or close if gallery has only one item
    //   "toggleControls"  - show/hide controls
    //   "zoom"            - zoom image (if loaded)
    //   false             - do nothing
    // Clicked on the content
    clickContent: function clickContent(current, event) {
      return current.type === 'image' ? 'zoom' : false;
    },
    // Clicked on the slide
    clickSlide: 'close',
    // Clicked on the background (backdrop) element
    clickOutside: 'close',
    // Same as previous two, but for double click
    dblclickContent: false,
    dblclickSlide: false,
    dblclickOutside: false,
    // Custom options when mobile device is detected
    // =============================================
    mobile: {
      idleTime: false,
      margin: 0,
      clickContent: function clickContent(current, event) {
        return current.type === 'image' ? 'toggleControls' : false;
      },
      clickSlide: function clickSlide(current, event) {
        return current.type === 'image' ? 'toggleControls' : 'close';
      },
      dblclickContent: function dblclickContent(current, event) {
        return current.type === 'image' ? 'zoom' : false;
      },
      dblclickSlide: function dblclickSlide(current, event) {
        return current.type === 'image' ? 'zoom' : false;
      }
    },
    // Internationalization
    // ============
    lang: 'en',
    i18n: {
      'en': {
        CLOSE: 'Close',
        NEXT: 'Next',
        PREV: 'Previous',
        ERROR: 'The requested content cannot be loaded. <br/> Please try again later.',
        PLAY_START: 'Start slideshow',
        PLAY_STOP: 'Pause slideshow',
        FULL_SCREEN: 'Full screen',
        THUMBS: 'Thumbnails',
        DOWNLOAD: 'Download',
        SHARE: 'Share',
        ZOOM: 'Zoom'
      },
      'de': {
        CLOSE: 'Schliessen',
        NEXT: 'Weiter',
        PREV: 'Zurück',
        ERROR: 'Die angeforderten Daten konnten nicht geladen werden. <br/> Bitte versuchen Sie es später nochmal.',
        PLAY_START: 'Diaschau starten',
        PLAY_STOP: 'Diaschau beenden',
        FULL_SCREEN: 'Vollbild',
        THUMBS: 'Vorschaubilder',
        DOWNLOAD: 'Herunterladen',
        SHARE: 'Teilen',
        ZOOM: 'Maßstab'
      }
    }
  }; // Few useful variables and methods
  // ================================

  var $W = $(window);
  var $D = $(document);
  var called = 0; // Check if an object is a jQuery object and not a native JavaScript object
  // ========================================================================

  var isQuery = function isQuery(obj) {
    return obj && obj.hasOwnProperty && obj instanceof $;
  }; // Handle multiple browsers for "requestAnimationFrame" and "cancelAnimationFrame"
  // ===============================================================================


  var requestAFrame = function () {
    return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || // if all else fails, use setTimeout
    function (callback) {
      return window.setTimeout(callback, 1000 / 60);
    };
  }(); // Detect the supported transition-end event property name
  // =======================================================


  var transitionEnd = function () {
    var t,
        el = document.createElement("fakeelement");
    var transitions = {
      "transition": "transitionend",
      "OTransition": "oTransitionEnd",
      "MozTransition": "transitionend",
      "WebkitTransition": "webkitTransitionEnd"
    };

    for (t in transitions) {
      if (el.style[t] !== undefined) {
        return transitions[t];
      }
    }

    return 'transitionend';
  }(); // Force redraw on an element.
  // This helps in cases where the browser doesn't redraw an updated element properly.
  // =================================================================================


  var forceRedraw = function forceRedraw($el) {
    return $el && $el.length && $el[0].offsetHeight;
  }; // Class definition
  // ================


  var FancyBox = function FancyBox(content, opts, index) {
    var self = this;
    self.opts = $.extend(true, {
      index: index
    }, $.fancybox.defaults, opts || {});

    if ($.fancybox.isMobile) {
      self.opts = $.extend(true, {}, self.opts, self.opts.mobile);
    } // Exclude buttons option from deep merging


    if (opts && $.isArray(opts.buttons)) {
      self.opts.buttons = opts.buttons;
    }

    self.id = self.opts.id || ++called;
    self.group = [];
    self.currIndex = parseInt(self.opts.index, 10) || 0;
    self.prevIndex = null;
    self.prevPos = null;
    self.currPos = 0;
    self.firstRun = null; // Create group elements from original item collection

    self.createGroup(content);

    if (!self.group.length) {
      return;
    } // Save last active element and current scroll position


    self.$lastFocus = $(document.activeElement).blur(); // Collection of gallery objects

    self.slides = {};
    self.init();
  };

  $.extend(FancyBox.prototype, {
    // Create DOM structure
    // ====================
    init: function init() {
      var self = this,
          firstItem = self.group[self.currIndex],
          firstItemOpts = firstItem.opts,
          scrollbarWidth = $.fancybox.scrollbarWidth,
          $scrollDiv,
          $container,
          buttonStr;
      self.scrollTop = $D.scrollTop();
      self.scrollLeft = $D.scrollLeft(); // Hide scrollbars
      // ===============

      if (!$.fancybox.getInstance()) {
        $('body').addClass('fancybox-active'); // iOS hack

        if (/iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream) {
          // iOS has problems for input elements inside fixed containers,
          // the workaround is to apply `position: fixed` to `<body>` element,
          // unfortunately, this makes it lose the scrollbars and forces address bar to appear.
          if (firstItem.type !== 'image') {
            $('body').css('top', $('body').scrollTop() * -1).addClass('fancybox-iosfix');
          }
        } else if (!$.fancybox.isMobile && document.body.scrollHeight > window.innerHeight) {
          if (scrollbarWidth === undefined) {
            $scrollDiv = $('<div style="width:50px;height:50px;overflow:scroll;" />').appendTo('body');
            scrollbarWidth = $.fancybox.scrollbarWidth = $scrollDiv[0].offsetWidth - $scrollDiv[0].clientWidth;
            $scrollDiv.remove();
          }

          $('head').append('<style id="fancybox-style-noscroll" type="text/css">.compensate-for-scrollbar { margin-right: ' + scrollbarWidth + 'px; }</style>');
          $('body').addClass('compensate-for-scrollbar');
        }
      } // Build html markup and set references
      // ====================================
      // Build html code for buttons and insert into main template


      buttonStr = '';
      $.each(firstItemOpts.buttons, function (index, value) {
        buttonStr += firstItemOpts.btnTpl[value] || '';
      }); // Create markup from base template, it will be initially hidden to
      // avoid unnecessary work like painting while initializing is not complete

      $container = $(self.translate(self, firstItemOpts.baseTpl.replace('\{\{buttons\}\}', buttonStr).replace('\{\{arrows\}\}', firstItemOpts.btnTpl.arrowLeft + firstItemOpts.btnTpl.arrowRight))).attr('id', 'fancybox-container-' + self.id).addClass('fancybox-is-hidden').addClass(firstItemOpts.baseClass).data('FancyBox', self).appendTo(firstItemOpts.parentEl); // Create object holding references to jQuery wrapped nodes

      self.$refs = {
        container: $container
      };
      ['bg', 'inner', 'infobar', 'toolbar', 'stage', 'caption', 'navigation'].forEach(function (item) {
        self.$refs[item] = $container.find('.fancybox-' + item);
      });
      self.trigger('onInit'); // Enable events, deactive previous instances

      self.activate(); // Build slides, load and reveal content

      self.jumpTo(self.currIndex);
    },
    // Simple i18n support - replaces object keys found in template
    // with corresponding values
    // ============================================================
    translate: function translate(obj, str) {
      var arr = obj.opts.i18n[obj.opts.lang];
      return str.replace(/\{\{(\w+)\}\}/g, function (match, n) {
        var value = arr[n];

        if (value === undefined) {
          return match;
        }

        return value;
      });
    },
    // Create array of gally item objects
    // Check if each object has valid type and content
    // ===============================================
    createGroup: function createGroup(content) {
      var self = this;
      var items = $.makeArray(content);
      $.each(items, function (i, item) {
        var obj = {},
            opts = {},
            $item,
            type,
            found,
            src,
            srcParts; // Step 1 - Make sure we have an object
        // ====================================

        if ($.isPlainObject(item)) {
          // We probably have manual usage here, something like
          // $.fancybox.open( [ { src : "image.jpg", type : "image" } ] )
          obj = item;
          opts = item.opts || item;
        } else if ($.type(item) === 'object' && $(item).length) {
          // Here we probably have jQuery collection returned by some selector
          $item = $(item);
          opts = $item.data();
          opts = $.extend({}, opts, opts.options || {}); // Here we store clicked element

          opts.$orig = $item;
          obj.src = opts.src || $item.attr('href'); // Assume that simple syntax is used, for example:
          //   `$.fancybox.open( $("#test"), {} );`

          if (!obj.type && !obj.src) {
            obj.type = 'inline';
            obj.src = item;
          }
        } else {
          // Assume we have a simple html code, for example:
          //   $.fancybox.open( '<div><h1>Hi!</h1></div>' );
          obj = {
            type: 'html',
            src: item + ''
          };
        } // Each gallery object has full collection of options


        obj.opts = $.extend(true, {}, self.opts, opts); // Do not merge buttons array

        if ($.isArray(opts.buttons)) {
          obj.opts.buttons = opts.buttons;
        } // Step 2 - Make sure we have content type, if not - try to guess
        // ==============================================================


        type = obj.type || obj.opts.type;
        src = obj.src || '';

        if (!type && src) {
          if (src.match(/(^data:image\/[a-z0-9+\/=]*,)|(\.(jp(e|g|eg)|gif|png|bmp|webp|svg|ico)((\?|#).*)?$)/i)) {
            type = 'image';
          } else if (src.match(/\.(pdf)((\?|#).*)?$/i)) {
            type = 'pdf';
          } else if (found = src.match(/\.(mp4|mov|ogv)((\?|#).*)?$/i)) {
            type = 'video';

            if (!obj.opts.videoFormat) {
              obj.opts.videoFormat = 'video/' + (found[1] === 'ogv' ? 'ogg' : found[1]);
            }
          } else if (src.charAt(0) === '#') {
            type = 'inline';
          }
        }

        if (type) {
          obj.type = type;
        } else {
          self.trigger('objectNeedsType', obj);
        } // Step 3 - Some adjustments
        // =========================


        obj.index = self.group.length; // Check if $orig and $thumb objects exist

        if (obj.opts.$orig && !obj.opts.$orig.length) {
          delete obj.opts.$orig;
        }

        if (!obj.opts.$thumb && obj.opts.$orig) {
          obj.opts.$thumb = obj.opts.$orig.find('img:first');
        }

        if (obj.opts.$thumb && !obj.opts.$thumb.length) {
          delete obj.opts.$thumb;
        } // "caption" is a "special" option, it can be used to customize caption per gallery item ..


        if ($.type(obj.opts.caption) === 'function') {
          obj.opts.caption = obj.opts.caption.apply(item, [self, obj]);
        }

        if ($.type(self.opts.caption) === 'function') {
          obj.opts.caption = self.opts.caption.apply(item, [self, obj]);
        } // Make sure we have caption as a string or jQuery object


        if (!(obj.opts.caption instanceof $)) {
          obj.opts.caption = obj.opts.caption === undefined ? '' : obj.opts.caption + '';
        } // Check if url contains "filter" used to filter the content
        // Example: "ajax.html #something"


        if (type === 'ajax') {
          srcParts = src.split(/\s+/, 2);

          if (srcParts.length > 1) {
            obj.src = srcParts.shift();
            obj.opts.filter = srcParts.shift();
          }
        }

        if (obj.opts.smallBtn == 'auto') {
          if ($.inArray(type, ['html', 'inline', 'ajax']) > -1) {
            obj.opts.toolbar = false;
            obj.opts.smallBtn = true;
          } else {
            obj.opts.smallBtn = false;
          }
        } // If the type is "pdf", then simply load file into iframe


        if (type === 'pdf') {
          obj.type = 'iframe';
          obj.opts.iframe.preload = false;
        } // Hide all buttons and disable interactivity for modal items


        if (obj.opts.modal) {
          obj.opts = $.extend(true, obj.opts, {
            // Remove buttons
            infobar: 0,
            toolbar: 0,
            smallBtn: 0,
            // Disable keyboard navigation
            keyboard: 0,
            // Disable some modules
            slideShow: 0,
            fullScreen: 0,
            thumbs: 0,
            touch: 0,
            // Disable click event handlers
            clickContent: false,
            clickSlide: false,
            clickOutside: false,
            dblclickContent: false,
            dblclickSlide: false,
            dblclickOutside: false
          });
        } // Step 4 - Add processed object to group
        // ======================================


        self.group.push(obj);
      });
    },
    // Attach an event handler functions for:
    //   - navigation buttons
    //   - browser scrolling, resizing;
    //   - focusing
    //   - keyboard
    //   - detect idle
    // ======================================
    addEvents: function addEvents() {
      var self = this;
      self.removeEvents(); // Make navigation elements clickable

      self.$refs.container.on('click.fb-close', '[data-fancybox-close]', function (e) {
        e.stopPropagation();
        e.preventDefault();
        self.close(e);
      }).on('click.fb-prev touchend.fb-prev', '[data-fancybox-prev]', function (e) {
        e.stopPropagation();
        e.preventDefault();
        self.previous();
      }).on('click.fb-next touchend.fb-next', '[data-fancybox-next]', function (e) {
        e.stopPropagation();
        e.preventDefault();
        self.next();
      }).on('click.fb', '[data-fancybox-zoom]', function (e) {
        // Click handler for zoom button
        self[self.isScaledDown() ? 'scaleToActual' : 'scaleToFit']();
      }); // Handle page scrolling and browser resizing

      $W.on('orientationchange.fb resize.fb', function (e) {
        if (e && e.originalEvent && e.originalEvent.type === "resize") {
          requestAFrame(function () {
            self.update();
          });
        } else {
          self.$refs.stage.hide();
          setTimeout(function () {
            self.$refs.stage.show();
            self.update();
          }, 600);
        }
      }); // Trap keyboard focus inside of the modal, so the user does not accidentally tab outside of the modal
      // (a.k.a. "escaping the modal")

      $D.on('focusin.fb', function (e) {
        var instance = $.fancybox ? $.fancybox.getInstance() : null;

        if (instance.isClosing || !instance.current || !instance.current.opts.trapFocus || $(e.target).hasClass('fancybox-container') || $(e.target).is(document)) {
          return;
        }

        if (instance && $(e.target).css('position') !== 'fixed' && !instance.$refs.container.has(e.target).length) {
          e.stopPropagation();
          instance.focus(); // Sometimes page gets scrolled, set it back

          $W.scrollTop(self.scrollTop).scrollLeft(self.scrollLeft);
        }
      }); // Enable keyboard navigation

      $D.on('keydown.fb', function (e) {
        var current = self.current,
            keycode = e.keyCode || e.which;

        if (!current || !current.opts.keyboard) {
          return;
        }

        if ($(e.target).is('input') || $(e.target).is('textarea')) {
          return;
        } // Backspace and Esc keys


        if (keycode === 8 || keycode === 27) {
          e.preventDefault();
          self.close(e);
          return;
        } // Left arrow and Up arrow


        if (keycode === 37 || keycode === 38) {
          e.preventDefault();
          self.previous();
          return;
        } // Righ arrow and Down arrow


        if (keycode === 39 || keycode === 40) {
          e.preventDefault();
          self.next();
          return;
        }

        self.trigger('afterKeydown', e, keycode);
      }); // Hide controls after some inactivity period

      if (self.group[self.currIndex].opts.idleTime) {
        self.idleSecondsCounter = 0;
        $D.on('mousemove.fb-idle mouseleave.fb-idle mousedown.fb-idle touchstart.fb-idle touchmove.fb-idle scroll.fb-idle keydown.fb-idle', function (e) {
          self.idleSecondsCounter = 0;

          if (self.isIdle) {
            self.showControls();
          }

          self.isIdle = false;
        });
        self.idleInterval = window.setInterval(function () {
          self.idleSecondsCounter++;

          if (self.idleSecondsCounter >= self.group[self.currIndex].opts.idleTime && !self.isDragging) {
            self.isIdle = true;
            self.idleSecondsCounter = 0;
            self.hideControls();
          }
        }, 1000);
      }
    },
    // Remove events added by the core
    // ===============================
    removeEvents: function removeEvents() {
      var self = this;
      $W.off('orientationchange.fb resize.fb');
      $D.off('focusin.fb keydown.fb .fb-idle');
      this.$refs.container.off('.fb-close .fb-prev .fb-next');

      if (self.idleInterval) {
        window.clearInterval(self.idleInterval);
        self.idleInterval = null;
      }
    },
    // Change to previous gallery item
    // ===============================
    previous: function previous(duration) {
      return this.jumpTo(this.currPos - 1, duration);
    },
    // Change to next gallery item
    // ===========================
    next: function next(duration) {
      return this.jumpTo(this.currPos + 1, duration);
    },
    // Switch to selected gallery item
    // ===============================
    jumpTo: function jumpTo(pos, duration, slide) {
      var self = this,
          firstRun,
          loop,
          current,
          previous,
          canvasWidth,
          currentPos,
          transitionProps;
      var groupLen = self.group.length;

      if (self.isDragging || self.isClosing || self.isAnimating && self.firstRun) {
        return;
      }

      pos = parseInt(pos, 10);
      loop = self.current ? self.current.opts.loop : self.opts.loop;

      if (!loop && (pos < 0 || pos >= groupLen)) {
        return false;
      }

      firstRun = self.firstRun = self.firstRun === null;

      if (groupLen < 2 && !firstRun && !!self.isDragging) {
        return;
      }

      previous = self.current;
      self.prevIndex = self.currIndex;
      self.prevPos = self.currPos; // Create slides

      current = self.createSlide(pos);

      if (groupLen > 1) {
        if (loop || current.index > 0) {
          self.createSlide(pos - 1);
        }

        if (loop || current.index < groupLen - 1) {
          self.createSlide(pos + 1);
        }
      }

      self.current = current;
      self.currIndex = current.index;
      self.currPos = current.pos;
      self.trigger('beforeShow', firstRun);
      self.updateControls();
      currentPos = $.fancybox.getTranslate(current.$slide);
      current.isMoved = (currentPos.left !== 0 || currentPos.top !== 0) && !current.$slide.hasClass('fancybox-animated');
      current.forcedDuration = undefined;

      if ($.isNumeric(duration)) {
        current.forcedDuration = duration;
      } else {
        duration = current.opts[firstRun ? 'animationDuration' : 'transitionDuration'];
      }

      duration = parseInt(duration, 10); // Fresh start - reveal container, current slide and start loading content

      if (firstRun) {
        if (current.opts.animationEffect && duration) {
          self.$refs.container.css('transition-duration', duration + 'ms');
        }

        self.$refs.container.removeClass('fancybox-is-hidden');
        forceRedraw(self.$refs.container);
        self.$refs.container.addClass('fancybox-is-open'); // Make first slide visible (to display loading icon, if needed)

        current.$slide.addClass('fancybox-slide--current');
        self.loadSlide(current);
        self.preload('image');
        return;
      } // Clean up


      $.each(self.slides, function (index, slide) {
        $.fancybox.stop(slide.$slide);
      }); // Make current that slide is visible even if content is still loading

      current.$slide.removeClass('fancybox-slide--next fancybox-slide--previous').addClass('fancybox-slide--current'); // If slides have been dragged, animate them to correct position

      if (current.isMoved) {
        canvasWidth = Math.round(current.$slide.width());
        $.each(self.slides, function (index, slide) {
          var pos = slide.pos - current.pos;
          $.fancybox.animate(slide.$slide, {
            top: 0,
            left: pos * canvasWidth + pos * slide.opts.gutter
          }, duration, function () {
            slide.$slide.removeAttr('style').removeClass('fancybox-slide--next fancybox-slide--previous');

            if (slide.pos === self.currPos) {
              current.isMoved = false;
              self.complete();
            }
          });
        });
      } else {
        self.$refs.stage.children().removeAttr('style');
      } // Start transition that reveals current content
      // or wait when it will be loaded


      if (current.isLoaded) {
        self.revealContent(current);
      } else {
        self.loadSlide(current);
      }

      self.preload('image');

      if (previous.pos === current.pos) {
        return;
      } // Handle previous slide
      // =====================


      transitionProps = 'fancybox-slide--' + (previous.pos > current.pos ? 'next' : 'previous');
      previous.$slide.removeClass('fancybox-slide--complete fancybox-slide--current fancybox-slide--next fancybox-slide--previous');
      previous.isComplete = false;

      if (!duration || !current.isMoved && !current.opts.transitionEffect) {
        return;
      }

      if (current.isMoved) {
        previous.$slide.addClass(transitionProps);
      } else {
        transitionProps = 'fancybox-animated ' + transitionProps + ' fancybox-fx-' + current.opts.transitionEffect;
        $.fancybox.animate(previous.$slide, transitionProps, duration, function () {
          previous.$slide.removeClass(transitionProps).removeAttr('style');
        });
      }
    },
    // Create new "slide" element
    // These are gallery items  that are actually added to DOM
    // =======================================================
    createSlide: function createSlide(pos) {
      var self = this;
      var $slide;
      var index;
      index = pos % self.group.length;
      index = index < 0 ? self.group.length + index : index;

      if (!self.slides[pos] && self.group[index]) {
        $slide = $('<div class="fancybox-slide"></div>').appendTo(self.$refs.stage);
        self.slides[pos] = $.extend(true, {}, self.group[index], {
          pos: pos,
          $slide: $slide,
          isLoaded: false
        });
        self.updateSlide(self.slides[pos]);
      }

      return self.slides[pos];
    },
    // Scale image to the actual size of the image
    // ===========================================
    scaleToActual: function scaleToActual(x, y, duration) {
      var self = this;
      var current = self.current;
      var $what = current.$content;
      var imgPos, posX, posY, scaleX, scaleY;
      var canvasWidth = parseInt(current.$slide.width(), 10);
      var canvasHeight = parseInt(current.$slide.height(), 10);
      var newImgWidth = current.width;
      var newImgHeight = current.height;

      if (!(current.type == 'image' && !current.hasError) || !$what || self.isAnimating) {
        return;
      }

      $.fancybox.stop($what);
      self.isAnimating = true;
      x = x === undefined ? canvasWidth * 0.5 : x;
      y = y === undefined ? canvasHeight * 0.5 : y;
      imgPos = $.fancybox.getTranslate($what);
      scaleX = newImgWidth / imgPos.width;
      scaleY = newImgHeight / imgPos.height; // Get center position for original image

      posX = canvasWidth * 0.5 - newImgWidth * 0.5;
      posY = canvasHeight * 0.5 - newImgHeight * 0.5; // Make sure image does not move away from edges

      if (newImgWidth > canvasWidth) {
        posX = imgPos.left * scaleX - (x * scaleX - x);

        if (posX > 0) {
          posX = 0;
        }

        if (posX < canvasWidth - newImgWidth) {
          posX = canvasWidth - newImgWidth;
        }
      }

      if (newImgHeight > canvasHeight) {
        posY = imgPos.top * scaleY - (y * scaleY - y);

        if (posY > 0) {
          posY = 0;
        }

        if (posY < canvasHeight - newImgHeight) {
          posY = canvasHeight - newImgHeight;
        }
      }

      self.updateCursor(newImgWidth, newImgHeight);
      $.fancybox.animate($what, {
        top: posY,
        left: posX,
        scaleX: scaleX,
        scaleY: scaleY
      }, duration || 330, function () {
        self.isAnimating = false;
      }); // Stop slideshow

      if (self.SlideShow && self.SlideShow.isActive) {
        self.SlideShow.stop();
      }
    },
    // Scale image to fit inside parent element
    // ========================================
    scaleToFit: function scaleToFit(duration) {
      var self = this;
      var current = self.current;
      var $what = current.$content;
      var end;

      if (!(current.type == 'image' && !current.hasError) || !$what || self.isAnimating) {
        return;
      }

      $.fancybox.stop($what);
      self.isAnimating = true;
      end = self.getFitPos(current);
      self.updateCursor(end.width, end.height);
      $.fancybox.animate($what, {
        top: end.top,
        left: end.left,
        scaleX: end.width / $what.width(),
        scaleY: end.height / $what.height()
      }, duration || 330, function () {
        self.isAnimating = false;
      });
    },
    // Calculate image size to fit inside viewport
    // ===========================================
    getFitPos: function getFitPos(slide) {
      var self = this;
      var $what = slide.$content;
      var imgWidth = slide.width;
      var imgHeight = slide.height;
      var margin = slide.opts.margin;
      var canvasWidth, canvasHeight, minRatio, width, height;

      if (!$what || !$what.length || !imgWidth && !imgHeight) {
        return false;
      } // Convert "margin to CSS style: [ top, right, bottom, left ]


      if ($.type(margin) === "number") {
        margin = [margin, margin];
      }

      if (margin.length == 2) {
        margin = [margin[0], margin[1], margin[0], margin[1]];
      } // We can not use $slide width here, because it can have different diemensions while in transiton


      canvasWidth = parseInt(self.$refs.stage.width(), 10) - (margin[1] + margin[3]);
      canvasHeight = parseInt(self.$refs.stage.height(), 10) - (margin[0] + margin[2]);
      minRatio = Math.min(1, canvasWidth / imgWidth, canvasHeight / imgHeight);
      width = Math.floor(minRatio * imgWidth);
      height = Math.floor(minRatio * imgHeight); // Use floor rounding to make sure it really fits

      return {
        top: Math.floor((canvasHeight - height) * 0.5) + margin[0],
        left: Math.floor((canvasWidth - width) * 0.5) + margin[3],
        width: width,
        height: height
      };
    },
    // Update content size and position for all slides
    // ==============================================
    update: function update() {
      var self = this;
      $.each(self.slides, function (key, slide) {
        self.updateSlide(slide);
      });
    },
    // Update slide content position and size
    // ======================================
    updateSlide: function updateSlide(slide, duration) {
      var self = this,
          $what = slide && slide.$content;

      if ($what && (slide.width || slide.height)) {
        self.isAnimating = false;
        $.fancybox.stop($what);
        $.fancybox.setTranslate($what, self.getFitPos(slide));

        if (slide.pos === self.currPos) {
          self.updateCursor();
        }
      }

      slide.$slide.trigger('refresh');
      self.trigger('onUpdate', slide);
    },
    // Horizontally center slide
    // =========================
    centerSlide: function centerSlide(slide, duration) {
      var self = this,
          canvasWidth,
          pos;

      if (self.current) {
        canvasWidth = Math.round(slide.$slide.width());
        pos = slide.pos - self.current.pos;
        $.fancybox.animate(slide.$slide, {
          top: 0,
          left: pos * canvasWidth + pos * slide.opts.gutter,
          opacity: 1
        }, duration === undefined ? 0 : duration, null, false);
      }
    },
    // Update cursor style depending if content can be zoomed
    // ======================================================
    updateCursor: function updateCursor(nextWidth, nextHeight) {
      var self = this;
      var isScaledDown;
      var $container = self.$refs.container.removeClass('fancybox-is-zoomable fancybox-can-zoomIn fancybox-can-drag fancybox-can-zoomOut');

      if (!self.current || self.isClosing) {
        return;
      }

      if (self.isZoomable()) {
        $container.addClass('fancybox-is-zoomable');

        if (nextWidth !== undefined && nextHeight !== undefined) {
          isScaledDown = nextWidth < self.current.width && nextHeight < self.current.height;
        } else {
          isScaledDown = self.isScaledDown();
        }

        if (isScaledDown) {
          // If image is scaled down, then, obviously, it can be zoomed to full size
          $container.addClass('fancybox-can-zoomIn');
        } else {
          if (self.current.opts.touch) {
            // If image size ir largen than available available and touch module is not disable,
            // then user can do panning
            $container.addClass('fancybox-can-drag');
          } else {
            $container.addClass('fancybox-can-zoomOut');
          }
        }
      } else if (self.current.opts.touch) {
        $container.addClass('fancybox-can-drag');
      }
    },
    // Check if current slide is zoomable
    // ==================================
    isZoomable: function isZoomable() {
      var self = this;
      var current = self.current;
      var fitPos;

      if (!current || self.isClosing) {
        return;
      } // Assume that slide is zoomable if
      //   - image is loaded successfuly
      //   - click action is "zoom"
      //   - actual size of the image is smaller than available area


      if (current.type === 'image' && current.isLoaded && !current.hasError && (current.opts.clickContent === 'zoom' || $.isFunction(current.opts.clickContent) && current.opts.clickContent(current) === "zoom")) {
        fitPos = self.getFitPos(current);

        if (current.width > fitPos.width || current.height > fitPos.height) {
          return true;
        }
      }

      return false;
    },
    // Check if current image dimensions are smaller than actual
    // =========================================================
    isScaledDown: function isScaledDown() {
      var self = this;
      var current = self.current;
      var $what = current.$content;
      var rez = false;

      if ($what) {
        rez = $.fancybox.getTranslate($what);
        rez = rez.width < current.width || rez.height < current.height;
      }

      return rez;
    },
    // Check if image dimensions exceed parent element
    // ===============================================
    canPan: function canPan() {
      var self = this;
      var current = self.current;
      var $what = current.$content;
      var rez = false;

      if ($what) {
        rez = self.getFitPos(current);
        rez = Math.abs($what.width() - rez.width) > 1 || Math.abs($what.height() - rez.height) > 1;
      }

      return rez;
    },
    // Load content into the slide
    // ===========================
    loadSlide: function loadSlide(slide) {
      var self = this,
          type,
          $slide;
      var ajaxLoad;

      if (slide.isLoading) {
        return;
      }

      if (slide.isLoaded) {
        return;
      }

      slide.isLoading = true;
      self.trigger('beforeLoad', slide);
      type = slide.type;
      $slide = slide.$slide;
      $slide.off('refresh').trigger('onReset').addClass('fancybox-slide--' + (type || 'unknown')).addClass(slide.opts.slideClass); // Create content depending on the type

      switch (type) {
        case 'image':
          self.setImage(slide);
          break;

        case 'iframe':
          self.setIframe(slide);
          break;

        case 'html':
          self.setContent(slide, slide.src || slide.content);
          break;

        case 'inline':
          if ($(slide.src).length) {
            self.setContent(slide, $(slide.src));
          } else {
            self.setError(slide);
          }

          break;

        case 'ajax':
          self.showLoading(slide);
          ajaxLoad = $.ajax($.extend({}, slide.opts.ajax.settings, {
            url: slide.src,
            success: function success(data, textStatus) {
              if (textStatus === 'success') {
                self.setContent(slide, data);
              }
            },
            error: function error(jqXHR, textStatus) {
              if (jqXHR && textStatus !== 'abort') {
                self.setError(slide);
              }
            }
          }));
          $slide.one('onReset', function () {
            ajaxLoad.abort();
          });
          break;

        case 'video':
          self.setContent(slide, '<video controls>' + '<source src="' + slide.src + '" type="' + slide.opts.videoFormat + '">' + 'Your browser doesn\'t support HTML5 video' + '</video>');
          break;

        default:
          self.setError(slide);
          break;
      }

      return true;
    },
    // Use thumbnail image, if possible
    // ================================
    setImage: function setImage(slide) {
      var self = this;
      var srcset = slide.opts.srcset || slide.opts.image.srcset;
      var found, temp, pxRatio, windowWidth; // If we have "srcset", then we need to find matching "src" value.
      // This is necessary, because when you set an src attribute, the browser will preload the image
      // before any javascript or even CSS is applied.

      if (srcset) {
        pxRatio = window.devicePixelRatio || 1;
        windowWidth = window.innerWidth * pxRatio;
        temp = srcset.split(',').map(function (el) {
          var ret = {};
          el.trim().split(/\s+/).forEach(function (el, i) {
            var value = parseInt(el.substring(0, el.length - 1), 10);

            if (i === 0) {
              return ret.url = el;
            }

            if (value) {
              ret.value = value;
              ret.postfix = el[el.length - 1];
            }
          });
          return ret;
        }); // Sort by value

        temp.sort(function (a, b) {
          return a.value - b.value;
        }); // Ok, now we have an array of all srcset values

        for (var j = 0; j < temp.length; j++) {
          var el = temp[j];

          if (el.postfix === 'w' && el.value >= windowWidth || el.postfix === 'x' && el.value >= pxRatio) {
            found = el;
            break;
          }
        } // If not found, take the last one


        if (!found && temp.length) {
          found = temp[temp.length - 1];
        }

        if (found) {
          slide.src = found.url; // If we have default width/height values, we can calculate height for matching source

          if (slide.width && slide.height && found.postfix == 'w') {
            slide.height = slide.width / slide.height * found.value;
            slide.width = found.value;
          }
        }
      } // This will be wrapper containing both ghost and actual image


      slide.$content = $('<div class="fancybox-image-wrap"></div>').addClass('fancybox-is-hidden').appendTo(slide.$slide); // If we have a thumbnail, we can display it while actual image is loading
      // Users will not stare at black screen and actual image will appear gradually

      if (slide.opts.preload !== false && slide.opts.width && slide.opts.height && (slide.opts.thumb || slide.opts.$thumb)) {
        slide.width = slide.opts.width;
        slide.height = slide.opts.height;
        slide.$ghost = $('<img />').one('error', function () {
          $(this).remove();
          slide.$ghost = null;
          self.setBigImage(slide);
        }).one('load', function () {
          self.afterLoad(slide);
          self.setBigImage(slide);
        }).addClass('fancybox-image').appendTo(slide.$content).attr('src', slide.opts.thumb || slide.opts.$thumb.attr('src'));
      } else {
        self.setBigImage(slide);
      }
    },
    // Create full-size image
    // ======================
    setBigImage: function setBigImage(slide) {
      var self = this;
      var $img = $('<img />');
      slide.$image = $img.one('error', function () {
        self.setError(slide);
      }).one('load', function () {
        // Clear timeout that checks if loading icon needs to be displayed
        clearTimeout(slide.timouts);
        slide.timouts = null;

        if (self.isClosing) {
          return;
        }

        slide.width = slide.opts.width || this.naturalWidth;
        slide.height = slide.opts.height || this.naturalHeight;

        if (slide.opts.image.srcset) {
          $img.attr('sizes', '100vw').attr('srcset', slide.opts.image.srcset);
        }

        self.hideLoading(slide);

        if (slide.$ghost) {
          slide.timouts = setTimeout(function () {
            slide.timouts = null;
            slide.$ghost.hide();
          }, Math.min(300, Math.max(1000, slide.height / 1600)));
        } else {
          self.afterLoad(slide);
        }
      }).addClass('fancybox-image').attr('src', slide.src).appendTo(slide.$content);

      if (($img[0].complete || $img[0].readyState == "complete") && $img[0].naturalWidth && $img[0].naturalHeight) {
        $img.trigger('load');
      } else if ($img[0].error) {
        $img.trigger('error');
      } else {
        slide.timouts = setTimeout(function () {
          if (!$img[0].complete && !slide.hasError) {
            self.showLoading(slide);
          }
        }, 100);
      }
    },
    // Create iframe wrapper, iframe and bindings
    // ==========================================
    setIframe: function setIframe(slide) {
      var self = this,
          opts = slide.opts.iframe,
          $slide = slide.$slide,
          $iframe;
      slide.$content = $('<div class="fancybox-content' + (opts.preload ? ' fancybox-is-hidden' : '') + '"></div>').css(opts.css).appendTo($slide);
      $iframe = $(opts.tpl.replace(/\{rnd\}/g, new Date().getTime())).attr(opts.attr).appendTo(slide.$content);

      if (opts.preload) {
        self.showLoading(slide); // Unfortunately, it is not always possible to determine if iframe is successfully loaded
        // (due to browser security policy)

        $iframe.on('load.fb error.fb', function (e) {
          this.isReady = 1;
          slide.$slide.trigger('refresh');
          self.afterLoad(slide);
        }); // Recalculate iframe content size
        // ===============================

        $slide.on('refresh.fb', function () {
          var $wrap = slide.$content,
              frameWidth = opts.css.width,
              frameHeight = opts.css.height,
              scrollWidth,
              $contents,
              $body;

          if ($iframe[0].isReady !== 1) {
            return;
          } // Check if content is accessible,
          // it will fail if frame is not with the same origin


          try {
            $contents = $iframe.contents();
            $body = $contents.find('body');
          } catch (ignore) {} // Calculate dimensions for the wrapper


          if ($body && $body.length) {
            if (frameWidth === undefined) {
              scrollWidth = $iframe[0].contentWindow.document.documentElement.scrollWidth;
              frameWidth = Math.ceil($body.outerWidth(true) + ($wrap.width() - scrollWidth));
              frameWidth += $wrap.outerWidth() - $wrap.innerWidth();
            }

            if (frameHeight === undefined) {
              frameHeight = Math.ceil($body.outerHeight(true));
              frameHeight += $wrap.outerHeight() - $wrap.innerHeight();
            } // Resize wrapper to fit iframe content


            if (frameWidth) {
              $wrap.width(frameWidth);
            }

            if (frameHeight) {
              $wrap.height(frameHeight);
            }
          }

          $wrap.removeClass('fancybox-is-hidden');
        });
      } else {
        this.afterLoad(slide);
      }

      $iframe.attr('src', slide.src);

      if (slide.opts.smallBtn === true) {
        slide.$content.prepend(self.translate(slide, slide.opts.btnTpl.smallBtn));
      } // Remove iframe if closing or changing gallery item


      $slide.one('onReset', function () {
        // This helps IE not to throw errors when closing
        try {
          $(this).find('iframe').hide().attr('src', '//about:blank');
        } catch (ignore) {}

        $(this).empty();
        slide.isLoaded = false;
      });
    },
    // Wrap and append content to the slide
    // ======================================
    setContent: function setContent(slide, content) {
      var self = this;

      if (self.isClosing) {
        return;
      }

      self.hideLoading(slide);
      slide.$slide.empty();

      if (isQuery(content) && content.parent().length) {
        // If content is a jQuery object, then it will be moved to the slide.
        // The placeholder is created so we will know where to put it back.
        // If user is navigating gallery fast, then the content might be already inside fancyBox
        // =====================================================================================
        // Make sure content is not already moved to fancyBox
        content.parent('.fancybox-slide--inline').trigger('onReset'); // Create temporary element marking original place of the content

        slide.$placeholder = $('<div></div>').hide().insertAfter(content); // Make sure content is visible

        content.css('display', 'inline-block');
      } else if (!slide.hasError) {
        // If content is just a plain text, try to convert it to html
        if ($.type(content) === 'string') {
          content = $('<div>').append($.trim(content)).contents(); // If we have text node, then add wrapping element to make vertical alignment work

          if (content[0].nodeType === 3) {
            content = $('<div>').html(content);
          }
        } // If "filter" option is provided, then filter content


        if (slide.opts.filter) {
          content = $('<div>').html(content).find(slide.opts.filter);
        }
      }

      slide.$slide.one('onReset', function () {
        // Pause all html5 video/audio
        $(this).find('video,audio').trigger('pause'); // Put content back

        if (slide.$placeholder) {
          slide.$placeholder.after(content.hide()).remove();
          slide.$placeholder = null;
        } // Remove custom close button


        if (slide.$smallBtn) {
          slide.$smallBtn.remove();
          slide.$smallBtn = null;
        } // Remove content and mark slide as not loaded


        if (!slide.hasError) {
          $(this).empty();
          slide.isLoaded = false;
        }
      });
      slide.$content = $(content).appendTo(slide.$slide);
      this.afterLoad(slide);
    },
    // Display error message
    // =====================
    setError: function setError(slide) {
      slide.hasError = true;
      slide.$slide.removeClass('fancybox-slide--' + slide.type);
      this.setContent(slide, this.translate(slide, slide.opts.errorTpl));
    },
    // Show loading icon inside the slide
    // ==================================
    showLoading: function showLoading(slide) {
      var self = this;
      slide = slide || self.current;

      if (slide && !slide.$spinner) {
        slide.$spinner = $(self.opts.spinnerTpl).appendTo(slide.$slide);
      }
    },
    // Remove loading icon from the slide
    // ==================================
    hideLoading: function hideLoading(slide) {
      var self = this;
      slide = slide || self.current;

      if (slide && slide.$spinner) {
        slide.$spinner.remove();
        delete slide.$spinner;
      }
    },
    // Adjustments after slide content has been loaded
    // ===============================================
    afterLoad: function afterLoad(slide) {
      var self = this;

      if (self.isClosing) {
        return;
      }

      slide.isLoading = false;
      slide.isLoaded = true;
      self.trigger('afterLoad', slide);
      self.hideLoading(slide);

      if (slide.opts.smallBtn && !slide.$smallBtn) {
        slide.$smallBtn = $(self.translate(slide, slide.opts.btnTpl.smallBtn)).appendTo(slide.$content.filter('div,form').first());
      }

      if (slide.opts.protect && slide.$content && !slide.hasError) {
        // Disable right click
        slide.$content.on('contextmenu.fb', function (e) {
          if (e.button == 2) {
            e.preventDefault();
          }

          return true;
        }); // Add fake element on top of the image
        // This makes a bit harder for user to select image

        if (slide.type === 'image') {
          $('<div class="fancybox-spaceball"></div>').appendTo(slide.$content);
        }
      }

      self.revealContent(slide);
    },
    // Make content visible
    // This method is called right after content has been loaded or
    // user navigates gallery and transition should start
    // ============================================================
    revealContent: function revealContent(slide) {
      var self = this;
      var $slide = slide.$slide;
      var effect,
          effectClassName,
          duration,
          opacity,
          end,
          start = false;
      effect = slide.opts[self.firstRun ? 'animationEffect' : 'transitionEffect'];
      duration = slide.opts[self.firstRun ? 'animationDuration' : 'transitionDuration'];
      duration = parseInt(slide.forcedDuration === undefined ? duration : slide.forcedDuration, 10);

      if (slide.isMoved || slide.pos !== self.currPos || !duration) {
        effect = false;
      } // Check if can zoom


      if (effect === 'zoom' && !(slide.pos === self.currPos && duration && slide.type === 'image' && !slide.hasError && (start = self.getThumbPos(slide)))) {
        effect = 'fade';
      } // Zoom animation
      // ==============


      if (effect === 'zoom') {
        end = self.getFitPos(slide);
        end.scaleX = end.width / start.width;
        end.scaleY = end.height / start.height;
        delete end.width;
        delete end.height; // Check if we need to animate opacity

        opacity = slide.opts.zoomOpacity;

        if (opacity == 'auto') {
          opacity = Math.abs(slide.width / slide.height - start.width / start.height) > 0.1;
        }

        if (opacity) {
          start.opacity = 0.1;
          end.opacity = 1;
        } // Draw image at start position


        $.fancybox.setTranslate(slide.$content.removeClass('fancybox-is-hidden'), start);
        forceRedraw(slide.$content); // Start animation

        $.fancybox.animate(slide.$content, end, duration, function () {
          self.complete();
        });
        return;
      }

      self.updateSlide(slide); // Simply show content
      // ===================

      if (!effect) {
        forceRedraw($slide);
        slide.$content.removeClass('fancybox-is-hidden');

        if (slide.pos === self.currPos) {
          self.complete();
        }

        return;
      }

      $.fancybox.stop($slide);
      effectClassName = 'fancybox-animated fancybox-slide--' + (slide.pos >= self.prevPos ? 'next' : 'previous') + ' fancybox-fx-' + effect;
      $slide.removeAttr('style').removeClass('fancybox-slide--current fancybox-slide--next fancybox-slide--previous').addClass(effectClassName);
      slide.$content.removeClass('fancybox-is-hidden'); //Force reflow for CSS3 transitions

      forceRedraw($slide);
      $.fancybox.animate($slide, 'fancybox-slide--current', duration, function (e) {
        $slide.removeClass(effectClassName).removeAttr('style');

        if (slide.pos === self.currPos) {
          self.complete();
        }
      }, true);
    },
    // Check if we can and have to zoom from thumbnail
    //================================================
    getThumbPos: function getThumbPos(slide) {
      var self = this;
      var rez = false; // Check if element is inside the viewport by at least 1 pixel

      var isElementVisible = function isElementVisible($el) {
        var element = $el[0];
        var elementRect = element.getBoundingClientRect();
        var parentRects = [];
        var visibleInAllParents;

        while (element.parentElement !== null) {
          if ($(element.parentElement).css('overflow') === 'hidden' || $(element.parentElement).css('overflow') === 'auto') {
            parentRects.push(element.parentElement.getBoundingClientRect());
          }

          element = element.parentElement;
        }

        visibleInAllParents = parentRects.every(function (parentRect) {
          var visiblePixelX = Math.min(elementRect.right, parentRect.right) - Math.max(elementRect.left, parentRect.left);
          var visiblePixelY = Math.min(elementRect.bottom, parentRect.bottom) - Math.max(elementRect.top, parentRect.top);
          return visiblePixelX > 0 && visiblePixelY > 0;
        });
        return visibleInAllParents && elementRect.bottom > 0 && elementRect.right > 0 && elementRect.left < $(window).width() && elementRect.top < $(window).height();
      };

      var $thumb = slide.opts.$thumb;
      var thumbPos = $thumb ? $thumb.offset() : 0;
      var slidePos;

      if (thumbPos && $thumb[0].ownerDocument === document && isElementVisible($thumb)) {
        slidePos = self.$refs.stage.offset();
        rez = {
          top: thumbPos.top - slidePos.top + parseFloat($thumb.css("border-top-width") || 0),
          left: thumbPos.left - slidePos.left + parseFloat($thumb.css("border-left-width") || 0),
          width: $thumb.width(),
          height: $thumb.height(),
          scaleX: 1,
          scaleY: 1
        };
      }

      return rez;
    },
    // Final adjustments after current gallery item is moved to position
    // and it`s content is loaded
    // ==================================================================
    complete: function complete() {
      var self = this,
          current = self.current,
          slides = {},
          promise;

      if (current.isMoved || !current.isLoaded || current.isComplete) {
        return;
      }

      current.isComplete = true;
      current.$slide.siblings().trigger('onReset');
      self.preload('inline'); // Trigger any CSS3 transiton inside the slide

      forceRedraw(current.$slide);
      current.$slide.addClass('fancybox-slide--complete'); // Remove unnecessary slides

      $.each(self.slides, function (key, slide) {
        if (slide.pos >= self.currPos - 1 && slide.pos <= self.currPos + 1) {
          slides[slide.pos] = slide;
        } else if (slide) {
          $.fancybox.stop(slide.$slide);
          slide.$slide.off().remove();
        }
      });
      self.slides = slides;
      self.updateCursor();
      self.trigger('afterShow'); // Play first html5 video/audio

      current.$slide.find('video,audio').first().trigger('play'); // Try to focus on the first focusable element

      if ($(document.activeElement).is('[disabled]') || current.opts.autoFocus && !(current.type == 'image' || current.type === 'iframe')) {
        self.focus();
      }
    },
    // Preload next and previous slides
    // ================================
    preload: function preload(type) {
      var self = this,
          next = self.slides[self.currPos + 1],
          prev = self.slides[self.currPos - 1];

      if (next && next.type === type) {
        self.loadSlide(next);
      }

      if (prev && prev.type === type) {
        self.loadSlide(prev);
      }
    },
    // Try to find and focus on the first focusable element
    // ====================================================
    focus: function focus() {
      var current = this.current;
      var $el;

      if (this.isClosing) {
        return;
      }

      if (current && current.isComplete) {
        // Look for first input with autofocus attribute
        $el = current.$slide.find('input[autofocus]:enabled:visible:first');

        if (!$el.length) {
          $el = current.$slide.find('button,:input,[tabindex],a').filter(':enabled:visible:first');
        }
      }

      $el = $el && $el.length ? $el : this.$refs.container;
      $el.focus();
    },
    // Activates current instance - brings container to the front and enables keyboard,
    // notifies other instances about deactivating
    // =================================================================================
    activate: function activate() {
      var self = this; // Deactivate all instances

      $('.fancybox-container').each(function () {
        var instance = $(this).data('FancyBox'); // Skip self and closing instances

        if (instance && instance.id !== self.id && !instance.isClosing) {
          instance.trigger('onDeactivate');
          instance.removeEvents();
          instance.isVisible = false;
        }
      });
      self.isVisible = true;

      if (self.current || self.isIdle) {
        self.update();
        self.updateControls();
      }

      self.trigger('onActivate');
      self.addEvents();
    },
    // Start closing procedure
    // This will start "zoom-out" animation if needed and clean everything up afterwards
    // =================================================================================
    close: function close(e, d) {
      var self = this;
      var current = self.current;
      var effect, duration;
      var $what, opacity, start, end;

      var done = function done() {
        self.cleanUp(e);
      };

      if (self.isClosing) {
        return false;
      }

      self.isClosing = true; // If beforeClose callback prevents closing, make sure content is centered

      if (self.trigger('beforeClose', e) === false) {
        self.isClosing = false;
        requestAFrame(function () {
          self.update();
        });
        return false;
      } // Remove all events
      // If there are multiple instances, they will be set again by "activate" method


      self.removeEvents();

      if (current.timouts) {
        clearTimeout(current.timouts);
      }

      $what = current.$content;
      effect = current.opts.animationEffect;
      duration = $.isNumeric(d) ? d : effect ? current.opts.animationDuration : 0; // Remove other slides

      current.$slide.off(transitionEnd).removeClass('fancybox-slide--complete fancybox-slide--next fancybox-slide--previous fancybox-animated');
      current.$slide.siblings().trigger('onReset').remove(); // Trigger animations

      if (duration) {
        self.$refs.container.removeClass('fancybox-is-open').addClass('fancybox-is-closing');
      } // Clean up


      self.hideLoading(current);
      self.hideControls();
      self.updateCursor(); // Check if possible to zoom-out

      if (effect === 'zoom' && !(e !== true && $what && duration && current.type === 'image' && !current.hasError && (end = self.getThumbPos(current)))) {
        effect = 'fade';
      }

      if (effect === 'zoom') {
        $.fancybox.stop($what);
        start = $.fancybox.getTranslate($what);
        start.width = start.width * start.scaleX;
        start.height = start.height * start.scaleY; // Check if we need to animate opacity

        opacity = current.opts.zoomOpacity;

        if (opacity == 'auto') {
          opacity = Math.abs(current.width / current.height - end.width / end.height) > 0.1;
        }

        if (opacity) {
          end.opacity = 0;
        }

        start.scaleX = start.width / end.width;
        start.scaleY = start.height / end.height;
        start.width = end.width;
        start.height = end.height;
        $.fancybox.setTranslate(current.$content, start);
        forceRedraw(current.$content);
        $.fancybox.animate(current.$content, end, duration, done);
        return true;
      }

      if (effect && duration) {
        // If skip animation
        if (e === true) {
          setTimeout(done, duration);
        } else {
          $.fancybox.animate(current.$slide.removeClass('fancybox-slide--current'), 'fancybox-animated fancybox-slide--previous fancybox-fx-' + effect, duration, done);
        }
      } else {
        done();
      }

      return true;
    },
    // Final adjustments after removing the instance
    // =============================================
    cleanUp: function cleanUp(e) {
      var self = this,
          $body = $('body'),
          instance,
          offset;
      self.current.$slide.trigger('onReset');
      self.$refs.container.empty().remove();
      self.trigger('afterClose', e); // Place back focus

      if (self.$lastFocus && !!self.current.opts.backFocus) {
        self.$lastFocus.focus();
      }

      self.current = null; // Check if there are other instances

      instance = $.fancybox.getInstance();

      if (instance) {
        instance.activate();
      } else {
        $W.scrollTop(self.scrollTop).scrollLeft(self.scrollLeft);
        $body.removeClass('fancybox-active compensate-for-scrollbar');

        if ($body.hasClass('fancybox-iosfix')) {
          offset = parseInt(document.body.style.top, 10);
          $body.removeClass('fancybox-iosfix').css('top', '').scrollTop(offset * -1);
        }

        $('#fancybox-style-noscroll').remove();
      }
    },
    // Call callback and trigger an event
    // ==================================
    trigger: function trigger(name, slide) {
      var args = Array.prototype.slice.call(arguments, 1),
          self = this,
          obj = slide && slide.opts ? slide : self.current,
          rez;

      if (obj) {
        args.unshift(obj);
      } else {
        obj = self;
      }

      args.unshift(self);

      if ($.isFunction(obj.opts[name])) {
        rez = obj.opts[name].apply(obj, args);
      }

      if (rez === false) {
        return rez;
      }

      if (name === 'afterClose' || !self.$refs) {
        $D.trigger(name + '.fb', args);
      } else {
        self.$refs.container.trigger(name + '.fb', args);
      }
    },
    // Update infobar values, navigation button states and reveal caption
    // ==================================================================
    updateControls: function updateControls(force) {
      var self = this;
      var current = self.current,
          index = current.index,
          caption = current.opts.caption,
          $container = self.$refs.container,
          $caption = self.$refs.caption; // Recalculate content dimensions

      current.$slide.trigger('refresh');
      self.$caption = caption && caption.length ? $caption.html(caption) : null;

      if (!self.isHiddenControls && !self.isIdle) {
        self.showControls();
      } // Update info and navigation elements


      $container.find('[data-fancybox-count]').html(self.group.length);
      $container.find('[data-fancybox-index]').html(index + 1);
      $container.find('[data-fancybox-prev]').prop('disabled', !current.opts.loop && index <= 0);
      $container.find('[data-fancybox-next]').prop('disabled', !current.opts.loop && index >= self.group.length - 1);

      if (current.type === 'image') {
        // Update download button source
        $container.find('[data-fancybox-download]').attr('href', current.opts.image.src || current.src).show();
      } else {
        $container.find('[data-fancybox-download],[data-fancybox-zoom]').hide();
      }
    },
    // Hide toolbar and caption
    // ========================
    hideControls: function hideControls() {
      this.isHiddenControls = true;
      this.$refs.container.removeClass('fancybox-show-infobar fancybox-show-toolbar fancybox-show-caption fancybox-show-nav');
    },
    showControls: function showControls() {
      var self = this;
      var opts = self.current ? self.current.opts : self.opts;
      var $container = self.$refs.container;
      self.isHiddenControls = false;
      self.idleSecondsCounter = 0;
      $container.toggleClass('fancybox-show-toolbar', !!(opts.toolbar && opts.buttons)).toggleClass('fancybox-show-infobar', !!(opts.infobar && self.group.length > 1)).toggleClass('fancybox-show-nav', !!(opts.arrows && self.group.length > 1)).toggleClass('fancybox-is-modal', !!opts.modal);

      if (self.$caption) {
        $container.addClass('fancybox-show-caption ');
      } else {
        $container.removeClass('fancybox-show-caption');
      }
    },
    // Toggle toolbar and caption
    // ==========================
    toggleControls: function toggleControls() {
      if (this.isHiddenControls) {
        this.showControls();
      } else {
        this.hideControls();
      }
    }
  });
  $.fancybox = {
    version: "3.2.10",
    defaults: defaults,
    // Get current instance and execute a command.
    //
    // Examples of usage:
    //
    //   $instance = $.fancybox.getInstance();
    //   $.fancybox.getInstance().jumpTo( 1 );
    //   $.fancybox.getInstance( 'jumpTo', 1 );
    //   $.fancybox.getInstance( function() {
    //       console.info( this.currIndex );
    //   });
    // ======================================================
    getInstance: function getInstance(command) {
      var instance = $('.fancybox-container:not(".fancybox-is-closing"):last').data('FancyBox');
      var args = Array.prototype.slice.call(arguments, 1);

      if (instance instanceof FancyBox) {
        if ($.type(command) === 'string') {
          instance[command].apply(instance, args);
        } else if ($.type(command) === 'function') {
          command.apply(instance, args);
        }

        return instance;
      }

      return false;
    },
    // Create new instance
    // ===================
    open: function open(items, opts, index) {
      return new FancyBox(items, opts, index);
    },
    // Close current or all instances
    // ==============================
    close: function close(all) {
      var instance = this.getInstance();

      if (instance) {
        instance.close(); // Try to find and close next instance

        if (all === true) {
          this.close();
        }
      }
    },
    // Close instances and unbind all events
    // ==============================
    destroy: function destroy() {
      this.close(true);
      $D.off('click.fb-start');
    },
    // Try to detect mobile devices
    // ============================
    isMobile: document.createTouch !== undefined && /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),
    // Detect if 'translate3d' support is available
    // ============================================
    use3d: function () {
      var div = document.createElement('div');
      return window.getComputedStyle && window.getComputedStyle(div).getPropertyValue('transform') && !(document.documentMode && document.documentMode < 11);
    }(),
    // Helper function to get current visual state of an element
    // returns array[ top, left, horizontal-scale, vertical-scale, opacity ]
    // =====================================================================
    getTranslate: function getTranslate($el) {
      var matrix;

      if (!$el || !$el.length) {
        return false;
      }

      matrix = $el.eq(0).css('transform');

      if (matrix && matrix.indexOf('matrix') !== -1) {
        matrix = matrix.split('(')[1];
        matrix = matrix.split(')')[0];
        matrix = matrix.split(',');
      } else {
        matrix = [];
      }

      if (matrix.length) {
        // If IE
        if (matrix.length > 10) {
          matrix = [matrix[13], matrix[12], matrix[0], matrix[5]];
        } else {
          matrix = [matrix[5], matrix[4], matrix[0], matrix[3]];
        }

        matrix = matrix.map(parseFloat);
      } else {
        matrix = [0, 0, 1, 1];
        var transRegex = /\.*translate\((.*)px,(.*)px\)/i;
        var transRez = transRegex.exec($el.eq(0).attr('style'));

        if (transRez) {
          matrix[0] = parseFloat(transRez[2]);
          matrix[1] = parseFloat(transRez[1]);
        }
      }

      return {
        top: matrix[0],
        left: matrix[1],
        scaleX: matrix[2],
        scaleY: matrix[3],
        opacity: parseFloat($el.css('opacity')),
        width: $el.width(),
        height: $el.height()
      };
    },
    // Shortcut for setting "translate3d" properties for element
    // Can set be used to set opacity, too
    // ========================================================
    setTranslate: function setTranslate($el, props) {
      var str = '';
      var css = {};

      if (!$el || !props) {
        return;
      }

      if (props.left !== undefined || props.top !== undefined) {
        str = (props.left === undefined ? $el.position().left : props.left) + 'px, ' + (props.top === undefined ? $el.position().top : props.top) + 'px';

        if (this.use3d) {
          str = 'translate3d(' + str + ', 0px)';
        } else {
          str = 'translate(' + str + ')';
        }
      }

      if (props.scaleX !== undefined && props.scaleY !== undefined) {
        str = (str.length ? str + ' ' : '') + 'scale(' + props.scaleX + ', ' + props.scaleY + ')';
      }

      if (str.length) {
        css.transform = str;
      }

      if (props.opacity !== undefined) {
        css.opacity = props.opacity;
      }

      if (props.width !== undefined) {
        css.width = props.width;
      }

      if (props.height !== undefined) {
        css.height = props.height;
      }

      return $el.css(css);
    },
    // Simple CSS transition handler
    // =============================
    animate: function animate($el, to, duration, callback, leaveAnimationName) {
      if ($.isFunction(duration)) {
        callback = duration;
        duration = null;
      }

      if (!$.isPlainObject(to)) {
        $el.removeAttr('style');
      }

      $el.on(transitionEnd, function (e) {
        // Skip events from child elements and z-index change
        if (e && e.originalEvent && (!$el.is(e.originalEvent.target) || e.originalEvent.propertyName == 'z-index')) {
          return;
        }

        $.fancybox.stop($el);

        if ($.isPlainObject(to)) {
          if (to.scaleX !== undefined && to.scaleY !== undefined) {
            $el.css('transition-duration', '');
            to.width = Math.round($el.width() * to.scaleX);
            to.height = Math.round($el.height() * to.scaleY);
            to.scaleX = 1;
            to.scaleY = 1;
            $.fancybox.setTranslate($el, to);
          }

          if (leaveAnimationName === false) {
            $el.removeAttr('style');
          }
        } else if (leaveAnimationName !== true) {
          $el.removeClass(to);
        }

        if ($.isFunction(callback)) {
          callback(e);
        }
      });

      if ($.isNumeric(duration)) {
        $el.css('transition-duration', duration + 'ms');
      }

      if ($.isPlainObject(to)) {
        $.fancybox.setTranslate($el, to);
      } else {
        $el.addClass(to);
      }

      if (to.scaleX && $el.hasClass('fancybox-image-wrap')) {
        $el.parent().addClass('fancybox-is-scaling');
      } // Make sure that `transitionend` callback gets fired


      $el.data("timer", setTimeout(function () {
        $el.trigger('transitionend');
      }, duration + 16));
    },
    stop: function stop($el) {
      clearTimeout($el.data("timer"));
      $el.off('transitionend').css('transition-duration', '');

      if ($el.hasClass('fancybox-image-wrap')) {
        $el.parent().removeClass('fancybox-is-scaling');
      }
    }
  }; // Default click handler for "fancyboxed" links
  // ============================================

  function _run(e) {
    var $target = $(e.currentTarget),
        opts = e.data ? e.data.options : {},
        value = $target.attr('data-fancybox') || '',
        index = 0,
        items = []; // Avoid opening multiple times

    if (e.isDefaultPrevented()) {
      return;
    }

    e.preventDefault(); // Get all related items and find index for clicked one

    if (value) {
      items = opts.selector ? $(opts.selector) : e.data ? e.data.items : [];
      items = items.length ? items.filter('[data-fancybox="' + value + '"]') : $('[data-fancybox="' + value + '"]');
      index = items.index($target); // Sometimes current item can not be found
      // (for example, when slider clones items)

      if (index < 0) {
        index = 0;
      }
    } else {
      items = [$target];
    }

    $.fancybox.open(items, opts, index);
  } // Create a jQuery plugin
  // ======================


  $.fn.fancybox = function (options) {
    var selector;
    options = options || {};
    selector = options.selector || false;

    if (selector) {
      $('body').off('click.fb-start', selector).on('click.fb-start', selector, {
        options: options
      }, _run);
    } else {
      this.off('click.fb-start').on('click.fb-start', {
        items: this,
        options: options
      }, _run);
    }

    return this;
  }; // Self initializing plugin
  // ========================


  $D.on('click.fb-start', '[data-fancybox]', _run);
})(window, document, __webpack_provided_window_dot_jQuery || jQuery); // ==========================================================================
//
// Media
// Adds additional media type support
//
// ==========================================================================


;

(function ($) {
  'use strict'; // Formats matching url to final form

  var format = function format(url, rez, params) {
    if (!url) {
      return;
    }

    params = params || '';

    if ($.type(params) === "object") {
      params = $.param(params, true);
    }

    $.each(rez, function (key, value) {
      url = url.replace('$' + key, value || '');
    });

    if (params.length) {
      url += (url.indexOf('?') > 0 ? '&' : '?') + params;
    }

    return url;
  }; // Object containing properties for each media type


  var defaults = {
    youtube: {
      matcher: /(youtube\.com|youtu\.be|youtube\-nocookie\.com)\/(watch\?(.*&)?v=|v\/|u\/|embed\/?)?(videoseries\?list=(.*)|[\w-]{11}|\?listType=(.*)&list=(.*))(.*)/i,
      params: {
        autoplay: 1,
        autohide: 1,
        fs: 1,
        rel: 0,
        hd: 1,
        wmode: 'transparent',
        enablejsapi: 1,
        html5: 1
      },
      paramPlace: 8,
      type: 'iframe',
      url: '//www.youtube.com/embed/$4',
      thumb: '//img.youtube.com/vi/$4/hqdefault.jpg'
    },
    vimeo: {
      matcher: /^.+vimeo.com\/(.*\/)?([\d]+)(.*)?/,
      params: {
        autoplay: 1,
        hd: 1,
        show_title: 1,
        show_byline: 1,
        show_portrait: 0,
        fullscreen: 1,
        api: 1
      },
      paramPlace: 3,
      type: 'iframe',
      url: '//player.vimeo.com/video/$2'
    },
    metacafe: {
      matcher: /metacafe.com\/watch\/(\d+)\/(.*)?/,
      type: 'iframe',
      url: '//www.metacafe.com/embed/$1/?ap=1'
    },
    dailymotion: {
      matcher: /dailymotion.com\/video\/(.*)\/?(.*)/,
      params: {
        additionalInfos: 0,
        autoStart: 1
      },
      type: 'iframe',
      url: '//www.dailymotion.com/embed/video/$1'
    },
    vine: {
      matcher: /vine.co\/v\/([a-zA-Z0-9\?\=\-]+)/,
      type: 'iframe',
      url: '//vine.co/v/$1/embed/simple'
    },
    instagram: {
      matcher: /(instagr\.am|instagram\.com)\/p\/([a-zA-Z0-9_\-]+)\/?/i,
      type: 'image',
      url: '//$1/p/$2/media/?size=l'
    },
    // Examples:
    // http://maps.google.com/?ll=48.857995,2.294297&spn=0.007666,0.021136&t=m&z=16
    // https://www.google.com/maps/@37.7852006,-122.4146355,14.65z
    // https://www.google.com/maps/place/Googleplex/@37.4220041,-122.0833494,17z/data=!4m5!3m4!1s0x0:0x6c296c66619367e0!8m2!3d37.4219998!4d-122.0840572
    gmap_place: {
      matcher: /(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(((maps\/(place\/(.*)\/)?\@(.*),(\d+.?\d+?)z))|(\?ll=))(.*)?/i,
      type: 'iframe',
      url: function url(rez) {
        return '//maps.google.' + rez[2] + '/?ll=' + (rez[9] ? rez[9] + '&z=' + Math.floor(rez[10]) + (rez[12] ? rez[12].replace(/^\//, "&") : '') : rez[12]) + '&output=' + (rez[12] && rez[12].indexOf('layer=c') > 0 ? 'svembed' : 'embed');
      }
    },
    // Examples:
    // https://www.google.com/maps/search/Empire+State+Building/
    // https://www.google.com/maps/search/?api=1&query=centurylink+field
    // https://www.google.com/maps/search/?api=1&query=47.5951518,-122.3316393
    gmap_search: {
      matcher: /(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(maps\/search\/)(.*)/i,
      type: 'iframe',
      url: function url(rez) {
        return '//maps.google.' + rez[2] + '/maps?q=' + rez[5].replace('query=', 'q=').replace('api=1', '') + '&output=embed';
      }
    }
  };
  $(document).on('objectNeedsType.fb', function (e, instance, item) {
    var url = item.src || '',
        type = false,
        media,
        thumb,
        rez,
        params,
        urlParams,
        paramObj,
        provider;
    media = $.extend(true, {}, defaults, item.opts.media); // Look for any matching media type

    $.each(media, function (providerName, providerOpts) {
      rez = url.match(providerOpts.matcher);

      if (!rez) {
        return;
      }

      type = providerOpts.type;
      paramObj = {};

      if (providerOpts.paramPlace && rez[providerOpts.paramPlace]) {
        urlParams = rez[providerOpts.paramPlace];

        if (urlParams[0] == '?') {
          urlParams = urlParams.substring(1);
        }

        urlParams = urlParams.split('&');

        for (var m = 0; m < urlParams.length; ++m) {
          var p = urlParams[m].split('=', 2);

          if (p.length == 2) {
            paramObj[p[0]] = decodeURIComponent(p[1].replace(/\+/g, " "));
          }
        }
      }

      params = $.extend(true, {}, providerOpts.params, item.opts[providerName], paramObj);
      url = $.type(providerOpts.url) === "function" ? providerOpts.url.call(this, rez, params, item) : format(providerOpts.url, rez, params);
      thumb = $.type(providerOpts.thumb) === "function" ? providerOpts.thumb.call(this, rez, params, item) : format(providerOpts.thumb, rez);

      if (providerName === 'vimeo') {
        url = url.replace('&%23', '#');
      }

      return false;
    }); // If it is found, then change content type and update the url

    if (type) {
      item.src = url;
      item.type = type;

      if (!item.opts.thumb && !(item.opts.$thumb && item.opts.$thumb.length)) {
        item.opts.thumb = thumb;
      }

      if (type === 'iframe') {
        $.extend(true, item.opts, {
          iframe: {
            preload: false,
            attr: {
              scrolling: "no"
            }
          }
        });
        item.contentProvider = provider;
        item.opts.slideClass += ' fancybox-slide--' + (provider == 'gmap_place' || provider == 'gmap_search' ? 'map' : 'video');
      }
    } else if (url) {
      item.type = item.opts.defaultType;
    }
  });
})(__webpack_provided_window_dot_jQuery || jQuery); // ==========================================================================
//
// Guestures
// Adds touch guestures, handles click and tap events
//
// ==========================================================================


;

(function (window, document, $) {
  'use strict';

  var requestAFrame = function () {
    return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || // if all else fails, use setTimeout
    function (callback) {
      return window.setTimeout(callback, 1000 / 60);
    };
  }();

  var cancelAFrame = function () {
    return window.cancelAnimationFrame || window.webkitCancelAnimationFrame || window.mozCancelAnimationFrame || window.oCancelAnimationFrame || function (id) {
      window.clearTimeout(id);
    };
  }();

  var pointers = function pointers(e) {
    var result = [];
    e = e.originalEvent || e || window.e;
    e = e.touches && e.touches.length ? e.touches : e.changedTouches && e.changedTouches.length ? e.changedTouches : [e];

    for (var key in e) {
      if (e[key].pageX) {
        result.push({
          x: e[key].pageX,
          y: e[key].pageY
        });
      } else if (e[key].clientX) {
        result.push({
          x: e[key].clientX,
          y: e[key].clientY
        });
      }
    }

    return result;
  };

  var distance = function distance(point2, point1, what) {
    if (!point1 || !point2) {
      return 0;
    }

    if (what === 'x') {
      return point2.x - point1.x;
    } else if (what === 'y') {
      return point2.y - point1.y;
    }

    return Math.sqrt(Math.pow(point2.x - point1.x, 2) + Math.pow(point2.y - point1.y, 2));
  };

  var isClickable = function isClickable($el) {
    if ($el.is('a,area,button,[role="button"],input,label,select,summary,textarea') || $.isFunction($el.get(0).onclick) || $el.data('selectable')) {
      return true;
    } // Check for attributes like data-fancybox-next or data-fancybox-close


    for (var i = 0, atts = $el[0].attributes, n = atts.length; i < n; i++) {
      if (atts[i].nodeName.substr(0, 14) === 'data-fancybox-') {
        return true;
      }
    }

    return false;
  };

  var hasScrollbars = function hasScrollbars(el) {
    var overflowY = window.getComputedStyle(el)['overflow-y'];
    var overflowX = window.getComputedStyle(el)['overflow-x'];
    var vertical = (overflowY === 'scroll' || overflowY === 'auto') && el.scrollHeight > el.clientHeight;
    var horizontal = (overflowX === 'scroll' || overflowX === 'auto') && el.scrollWidth > el.clientWidth;
    return vertical || horizontal;
  };

  var isScrollable = function isScrollable($el) {
    var rez = false;

    while (true) {
      rez = hasScrollbars($el.get(0));

      if (rez) {
        break;
      }

      $el = $el.parent();

      if (!$el.length || $el.hasClass('fancybox-stage') || $el.is('body')) {
        break;
      }
    }

    return rez;
  };

  var Guestures = function Guestures(instance) {
    var self = this;
    self.instance = instance;
    self.$bg = instance.$refs.bg;
    self.$stage = instance.$refs.stage;
    self.$container = instance.$refs.container;
    self.destroy();
    self.$container.on('touchstart.fb.touch mousedown.fb.touch', $.proxy(self, 'ontouchstart'));
  };

  Guestures.prototype.destroy = function () {
    this.$container.off('.fb.touch');
  };

  Guestures.prototype.ontouchstart = function (e) {
    var self = this;
    var $target = $(e.target);
    var instance = self.instance;
    var current = instance.current;
    var $content = current.$content;
    var isTouchDevice = e.type == 'touchstart'; // Do not respond to both (touch and mouse) events

    if (isTouchDevice) {
      self.$container.off('mousedown.fb.touch');
    } // Ignore right click


    if (e.originalEvent && e.originalEvent.button == 2) {
      return;
    } // Ignore taping on links, buttons, input elements


    if (!$target.length || isClickable($target) || isClickable($target.parent())) {
      return;
    } // Ignore clicks on the scrollbar


    if (!$target.is('img') && e.originalEvent.clientX > $target[0].clientWidth + $target.offset().left) {
      return;
    } // Ignore clicks while zooming or closing


    if (!current || self.instance.isAnimating || self.instance.isClosing) {
      e.stopPropagation();
      e.preventDefault();
      return;
    }

    self.realPoints = self.startPoints = pointers(e);

    if (!self.startPoints) {
      return;
    }

    e.stopPropagation();
    self.startEvent = e;
    self.canTap = true;
    self.$target = $target;
    self.$content = $content;
    self.opts = current.opts.touch;
    self.isPanning = false;
    self.isSwiping = false;
    self.isZooming = false;
    self.isScrolling = false;
    self.sliderStartPos = self.sliderLastPos || {
      top: 0,
      left: 0
    };
    self.contentStartPos = $.fancybox.getTranslate(self.$content);
    self.contentLastPos = null;
    self.startTime = new Date().getTime();
    self.distanceX = self.distanceY = self.distance = 0;
    self.canvasWidth = Math.round(current.$slide[0].clientWidth);
    self.canvasHeight = Math.round(current.$slide[0].clientHeight);
    $(document).off('.fb.touch').on(isTouchDevice ? 'touchend.fb.touch touchcancel.fb.touch' : 'mouseup.fb.touch mouseleave.fb.touch', $.proxy(self, "ontouchend")).on(isTouchDevice ? 'touchmove.fb.touch' : 'mousemove.fb.touch', $.proxy(self, "ontouchmove"));

    if ($.fancybox.isMobile) {
      document.addEventListener('scroll', self.onscroll, true);
    }

    if (!(self.opts || instance.canPan()) || !($target.is(self.$stage) || self.$stage.find($target).length)) {
      // Prevent image ghosting while dragging
      if ($target.is('img')) {
        e.preventDefault();
      }

      return;
    }

    if (!($.fancybox.isMobile && (isScrollable($target) || isScrollable($target.parent())))) {
      e.preventDefault();
    }

    if (self.startPoints.length === 1) {
      if (current.type === 'image' && (self.contentStartPos.width > self.canvasWidth + 1 || self.contentStartPos.height > self.canvasHeight + 1)) {
        $.fancybox.stop(self.$content);
        self.$content.css('transition-duration', '');
        self.isPanning = true;
      } else {
        self.isSwiping = true;
      }

      self.$container.addClass('fancybox-controls--isGrabbing');
    }

    if (self.startPoints.length === 2 && !instance.isAnimating && !current.hasError && current.type === 'image' && (current.isLoaded || current.$ghost)) {
      self.canTap = false;
      self.isSwiping = false;
      self.isPanning = false;
      self.isZooming = true;
      $.fancybox.stop(self.$content);
      self.$content.css('transition-duration', '');
      self.centerPointStartX = (self.startPoints[0].x + self.startPoints[1].x) * 0.5 - $(window).scrollLeft();
      self.centerPointStartY = (self.startPoints[0].y + self.startPoints[1].y) * 0.5 - $(window).scrollTop();
      self.percentageOfImageAtPinchPointX = (self.centerPointStartX - self.contentStartPos.left) / self.contentStartPos.width;
      self.percentageOfImageAtPinchPointY = (self.centerPointStartY - self.contentStartPos.top) / self.contentStartPos.height;
      self.startDistanceBetweenFingers = distance(self.startPoints[0], self.startPoints[1]);
    }
  };

  Guestures.prototype.onscroll = function (e) {
    self.isScrolling = true;
  };

  Guestures.prototype.ontouchmove = function (e) {
    var self = this,
        $target = $(e.target);

    if (self.isScrolling || !($target.is(self.$stage) || self.$stage.find($target).length)) {
      self.canTap = false;
      return;
    }

    self.newPoints = pointers(e);

    if (!(self.opts || self.instance.canPan()) || !self.newPoints || !self.newPoints.length) {
      return;
    }

    if (!(self.isSwiping && self.isSwiping === true)) {
      e.preventDefault();
    }

    self.distanceX = distance(self.newPoints[0], self.startPoints[0], 'x');
    self.distanceY = distance(self.newPoints[0], self.startPoints[0], 'y');
    self.distance = distance(self.newPoints[0], self.startPoints[0]); // Skip false ontouchmove events (Chrome)

    if (self.distance > 0) {
      if (self.isSwiping) {
        self.onSwipe(e);
      } else if (self.isPanning) {
        self.onPan();
      } else if (self.isZooming) {
        self.onZoom();
      }
    }
  };

  Guestures.prototype.onSwipe = function (e) {
    var self = this,
        swiping = self.isSwiping,
        left = self.sliderStartPos.left || 0,
        angle; // If direction is not yet determined

    if (swiping === true) {
      // We need at least 10px distance to correctly calculate an angle
      if (Math.abs(self.distance) > 10) {
        self.canTap = false;

        if (self.instance.group.length < 2 && self.opts.vertical) {
          self.isSwiping = 'y';
        } else if (self.instance.isDragging || self.opts.vertical === false || self.opts.vertical === 'auto' && $(window).width() > 800) {
          self.isSwiping = 'x';
        } else {
          angle = Math.abs(Math.atan2(self.distanceY, self.distanceX) * 180 / Math.PI);
          self.isSwiping = angle > 45 && angle < 135 ? 'y' : 'x';
        }

        self.canTap = false;

        if (self.isSwiping === 'y' && $.fancybox.isMobile && (isScrollable(self.$target) || isScrollable(self.$target.parent()))) {
          self.isScrolling = true;
          return;
        }

        self.instance.isDragging = self.isSwiping; // Reset points to avoid jumping, because we dropped first swipes to calculate the angle

        self.startPoints = self.newPoints;
        $.each(self.instance.slides, function (index, slide) {
          $.fancybox.stop(slide.$slide);
          slide.$slide.css('transition-duration', '');
          slide.inTransition = false;

          if (slide.pos === self.instance.current.pos) {
            self.sliderStartPos.left = $.fancybox.getTranslate(slide.$slide).left;
          }
        }); // Stop slideshow

        if (self.instance.SlideShow && self.instance.SlideShow.isActive) {
          self.instance.SlideShow.stop();
        }
      }

      return;
    } // Sticky edges


    if (swiping == 'x') {
      if (self.distanceX > 0 && (self.instance.group.length < 2 || self.instance.current.index === 0 && !self.instance.current.opts.loop)) {
        left = left + Math.pow(self.distanceX, 0.8);
      } else if (self.distanceX < 0 && (self.instance.group.length < 2 || self.instance.current.index === self.instance.group.length - 1 && !self.instance.current.opts.loop)) {
        left = left - Math.pow(-self.distanceX, 0.8);
      } else {
        left = left + self.distanceX;
      }
    }

    self.sliderLastPos = {
      top: swiping == 'x' ? 0 : self.sliderStartPos.top + self.distanceY,
      left: left
    };

    if (self.requestId) {
      cancelAFrame(self.requestId);
      self.requestId = null;
    }

    self.requestId = requestAFrame(function () {
      if (self.sliderLastPos) {
        $.each(self.instance.slides, function (index, slide) {
          var pos = slide.pos - self.instance.currPos;
          $.fancybox.setTranslate(slide.$slide, {
            top: self.sliderLastPos.top,
            left: self.sliderLastPos.left + pos * self.canvasWidth + pos * slide.opts.gutter
          });
        });
        self.$container.addClass('fancybox-is-sliding');
      }
    });
  };

  Guestures.prototype.onPan = function () {
    var self = this; // Sometimes, when tapping causally, image can move a bit and that breaks double tapping

    if (distance(self.newPoints[0], self.realPoints[0]) < ($.fancybox.isMobile ? 10 : 5)) {
      self.startPoints = self.newPoints;
      return;
    }

    self.canTap = false;
    self.contentLastPos = self.limitMovement();

    if (self.requestId) {
      cancelAFrame(self.requestId);
      self.requestId = null;
    }

    self.requestId = requestAFrame(function () {
      $.fancybox.setTranslate(self.$content, self.contentLastPos);
    });
  }; // Make panning sticky to the edges


  Guestures.prototype.limitMovement = function () {
    var self = this;
    var canvasWidth = self.canvasWidth;
    var canvasHeight = self.canvasHeight;
    var distanceX = self.distanceX;
    var distanceY = self.distanceY;
    var contentStartPos = self.contentStartPos;
    var currentOffsetX = contentStartPos.left;
    var currentOffsetY = contentStartPos.top;
    var currentWidth = contentStartPos.width;
    var currentHeight = contentStartPos.height;
    var minTranslateX, minTranslateY, maxTranslateX, maxTranslateY, newOffsetX, newOffsetY;

    if (currentWidth > canvasWidth) {
      newOffsetX = currentOffsetX + distanceX;
    } else {
      newOffsetX = currentOffsetX;
    }

    newOffsetY = currentOffsetY + distanceY; // Slow down proportionally to traveled distance

    minTranslateX = Math.max(0, canvasWidth * 0.5 - currentWidth * 0.5);
    minTranslateY = Math.max(0, canvasHeight * 0.5 - currentHeight * 0.5);
    maxTranslateX = Math.min(canvasWidth - currentWidth, canvasWidth * 0.5 - currentWidth * 0.5);
    maxTranslateY = Math.min(canvasHeight - currentHeight, canvasHeight * 0.5 - currentHeight * 0.5);

    if (currentWidth > canvasWidth) {
      //   ->
      if (distanceX > 0 && newOffsetX > minTranslateX) {
        newOffsetX = minTranslateX - 1 + Math.pow(-minTranslateX + currentOffsetX + distanceX, 0.8) || 0;
      } //    <-


      if (distanceX < 0 && newOffsetX < maxTranslateX) {
        newOffsetX = maxTranslateX + 1 - Math.pow(maxTranslateX - currentOffsetX - distanceX, 0.8) || 0;
      }
    }

    if (currentHeight > canvasHeight) {
      //   \/
      if (distanceY > 0 && newOffsetY > minTranslateY) {
        newOffsetY = minTranslateY - 1 + Math.pow(-minTranslateY + currentOffsetY + distanceY, 0.8) || 0;
      } //   /\


      if (distanceY < 0 && newOffsetY < maxTranslateY) {
        newOffsetY = maxTranslateY + 1 - Math.pow(maxTranslateY - currentOffsetY - distanceY, 0.8) || 0;
      }
    }

    return {
      top: newOffsetY,
      left: newOffsetX,
      scaleX: contentStartPos.scaleX,
      scaleY: contentStartPos.scaleY
    };
  };

  Guestures.prototype.limitPosition = function (newOffsetX, newOffsetY, newWidth, newHeight) {
    var self = this;
    var canvasWidth = self.canvasWidth;
    var canvasHeight = self.canvasHeight;

    if (newWidth > canvasWidth) {
      newOffsetX = newOffsetX > 0 ? 0 : newOffsetX;
      newOffsetX = newOffsetX < canvasWidth - newWidth ? canvasWidth - newWidth : newOffsetX;
    } else {
      // Center horizontally
      newOffsetX = Math.max(0, canvasWidth / 2 - newWidth / 2);
    }

    if (newHeight > canvasHeight) {
      newOffsetY = newOffsetY > 0 ? 0 : newOffsetY;
      newOffsetY = newOffsetY < canvasHeight - newHeight ? canvasHeight - newHeight : newOffsetY;
    } else {
      // Center vertically
      newOffsetY = Math.max(0, canvasHeight / 2 - newHeight / 2);
    }

    return {
      top: newOffsetY,
      left: newOffsetX
    };
  };

  Guestures.prototype.onZoom = function () {
    var self = this; // Calculate current distance between points to get pinch ratio and new width and height

    var currentWidth = self.contentStartPos.width;
    var currentHeight = self.contentStartPos.height;
    var currentOffsetX = self.contentStartPos.left;
    var currentOffsetY = self.contentStartPos.top;
    var endDistanceBetweenFingers = distance(self.newPoints[0], self.newPoints[1]);
    var pinchRatio = endDistanceBetweenFingers / self.startDistanceBetweenFingers;
    var newWidth = Math.floor(currentWidth * pinchRatio);
    var newHeight = Math.floor(currentHeight * pinchRatio); // This is the translation due to pinch-zooming

    var translateFromZoomingX = (currentWidth - newWidth) * self.percentageOfImageAtPinchPointX;
    var translateFromZoomingY = (currentHeight - newHeight) * self.percentageOfImageAtPinchPointY; //Point between the two touches

    var centerPointEndX = (self.newPoints[0].x + self.newPoints[1].x) / 2 - $(window).scrollLeft();
    var centerPointEndY = (self.newPoints[0].y + self.newPoints[1].y) / 2 - $(window).scrollTop(); // And this is the translation due to translation of the centerpoint
    // between the two fingers

    var translateFromTranslatingX = centerPointEndX - self.centerPointStartX;
    var translateFromTranslatingY = centerPointEndY - self.centerPointStartY; // The new offset is the old/current one plus the total translation

    var newOffsetX = currentOffsetX + (translateFromZoomingX + translateFromTranslatingX);
    var newOffsetY = currentOffsetY + (translateFromZoomingY + translateFromTranslatingY);
    var newPos = {
      top: newOffsetY,
      left: newOffsetX,
      scaleX: self.contentStartPos.scaleX * pinchRatio,
      scaleY: self.contentStartPos.scaleY * pinchRatio
    };
    self.canTap = false;
    self.newWidth = newWidth;
    self.newHeight = newHeight;
    self.contentLastPos = newPos;

    if (self.requestId) {
      cancelAFrame(self.requestId);
      self.requestId = null;
    }

    self.requestId = requestAFrame(function () {
      $.fancybox.setTranslate(self.$content, self.contentLastPos);
    });
  };

  Guestures.prototype.ontouchend = function (e) {
    var self = this;
    var dMs = Math.max(new Date().getTime() - self.startTime, 1);
    var swiping = self.isSwiping;
    var panning = self.isPanning;
    var zooming = self.isZooming;
    var scrolling = self.isScrolling;
    self.endPoints = pointers(e);
    self.$container.removeClass('fancybox-controls--isGrabbing');
    $(document).off('.fb.touch');
    document.removeEventListener('scroll', self.onscroll, true);

    if (self.requestId) {
      cancelAFrame(self.requestId);
      self.requestId = null;
    }

    self.isSwiping = false;
    self.isPanning = false;
    self.isZooming = false;
    self.isScrolling = false;
    self.instance.isDragging = false;

    if (self.canTap) {
      return self.onTap(e);
    }

    self.speed = 366; // Speed in px/ms

    self.velocityX = self.distanceX / dMs * 0.5;
    self.velocityY = self.distanceY / dMs * 0.5;
    self.speedX = Math.max(self.speed * 0.5, Math.min(self.speed * 1.5, 1 / Math.abs(self.velocityX) * self.speed));

    if (panning) {
      self.endPanning();
    } else if (zooming) {
      self.endZooming();
    } else {
      self.endSwiping(swiping, scrolling);
    }

    return;
  };

  Guestures.prototype.endSwiping = function (swiping, scrolling) {
    var self = this,
        ret = false,
        len = self.instance.group.length;
    self.sliderLastPos = null; // Close if swiped vertically / navigate if horizontally

    if (swiping == 'y' && !scrolling && Math.abs(self.distanceY) > 50) {
      // Continue vertical movement
      $.fancybox.animate(self.instance.current.$slide, {
        top: self.sliderStartPos.top + self.distanceY + self.velocityY * 150,
        opacity: 0
      }, 150);
      ret = self.instance.close(true, 300);
    } else if (swiping == 'x' && self.distanceX > 50 && len > 1) {
      ret = self.instance.previous(self.speedX);
    } else if (swiping == 'x' && self.distanceX < -50 && len > 1) {
      ret = self.instance.next(self.speedX);
    }

    if (ret === false && (swiping == 'x' || swiping == 'y')) {
      if (scrolling || len < 2) {
        self.instance.centerSlide(self.instance.current, 150);
      } else {
        self.instance.jumpTo(self.instance.current.index);
      }
    }

    self.$container.removeClass('fancybox-is-sliding');
  }; // Limit panning from edges
  // ========================


  Guestures.prototype.endPanning = function () {
    var self = this;
    var newOffsetX, newOffsetY, newPos;

    if (!self.contentLastPos) {
      return;
    }

    if (self.opts.momentum === false) {
      newOffsetX = self.contentLastPos.left;
      newOffsetY = self.contentLastPos.top;
    } else {
      // Continue movement
      newOffsetX = self.contentLastPos.left + self.velocityX * self.speed;
      newOffsetY = self.contentLastPos.top + self.velocityY * self.speed;
    }

    newPos = self.limitPosition(newOffsetX, newOffsetY, self.contentStartPos.width, self.contentStartPos.height);
    newPos.width = self.contentStartPos.width;
    newPos.height = self.contentStartPos.height;
    $.fancybox.animate(self.$content, newPos, 330);
  };

  Guestures.prototype.endZooming = function () {
    var self = this;
    var current = self.instance.current;
    var newOffsetX, newOffsetY, newPos, reset;
    var newWidth = self.newWidth;
    var newHeight = self.newHeight;

    if (!self.contentLastPos) {
      return;
    }

    newOffsetX = self.contentLastPos.left;
    newOffsetY = self.contentLastPos.top;
    reset = {
      top: newOffsetY,
      left: newOffsetX,
      width: newWidth,
      height: newHeight,
      scaleX: 1,
      scaleY: 1
    }; // Reset scalex/scaleY values; this helps for perfomance and does not break animation

    $.fancybox.setTranslate(self.$content, reset);

    if (newWidth < self.canvasWidth && newHeight < self.canvasHeight) {
      self.instance.scaleToFit(150);
    } else if (newWidth > current.width || newHeight > current.height) {
      self.instance.scaleToActual(self.centerPointStartX, self.centerPointStartY, 150);
    } else {
      newPos = self.limitPosition(newOffsetX, newOffsetY, newWidth, newHeight); // Switch from scale() to width/height or animation will not work correctly

      $.fancybox.setTranslate(self.content, $.fancybox.getTranslate(self.$content));
      $.fancybox.animate(self.$content, newPos, 150);
    }
  };

  Guestures.prototype.onTap = function (e) {
    var self = this;
    var $target = $(e.target);
    var instance = self.instance;
    var current = instance.current;
    var endPoints = e && pointers(e) || self.startPoints;
    var tapX = endPoints[0] ? endPoints[0].x - self.$stage.offset().left : 0;
    var tapY = endPoints[0] ? endPoints[0].y - self.$stage.offset().top : 0;
    var where;

    var process = function process(prefix) {
      var action = current.opts[prefix];

      if ($.isFunction(action)) {
        action = action.apply(instance, [current, e]);
      }

      if (!action) {
        return;
      }

      switch (action) {
        case "close":
          instance.close(self.startEvent);
          break;

        case "toggleControls":
          instance.toggleControls(true);
          break;

        case "next":
          instance.next();
          break;

        case "nextOrClose":
          if (instance.group.length > 1) {
            instance.next();
          } else {
            instance.close(self.startEvent);
          }

          break;

        case "zoom":
          if (current.type == 'image' && (current.isLoaded || current.$ghost)) {
            if (instance.canPan()) {
              instance.scaleToFit();
            } else if (instance.isScaledDown()) {
              instance.scaleToActual(tapX, tapY);
            } else if (instance.group.length < 2) {
              instance.close(self.startEvent);
            }
          }

          break;
      }
    }; // Ignore right click


    if (e.originalEvent && e.originalEvent.button == 2) {
      return;
    } // Skip if clicked on the scrollbar


    if (!$target.is('img') && tapX > $target[0].clientWidth + $target.offset().left) {
      return;
    } // Check where is clicked


    if ($target.is('.fancybox-bg,.fancybox-inner,.fancybox-outer,.fancybox-container')) {
      where = 'Outside';
    } else if ($target.is('.fancybox-slide')) {
      where = 'Slide';
    } else if (instance.current.$content && instance.current.$content.find($target).addBack().filter($target).length) {
      where = 'Content';
    } else {
      return;
    } // Check if this is a double tap


    if (self.tapped) {
      // Stop previously created single tap
      clearTimeout(self.tapped);
      self.tapped = null; // Skip if distance between taps is too big

      if (Math.abs(tapX - self.tapX) > 50 || Math.abs(tapY - self.tapY) > 50) {
        return this;
      } // OK, now we assume that this is a double-tap


      process('dblclick' + where);
    } else {
      // Single tap will be processed if user has not clicked second time within 300ms
      // or there is no need to wait for double-tap
      self.tapX = tapX;
      self.tapY = tapY;

      if (current.opts['dblclick' + where] && current.opts['dblclick' + where] !== current.opts['click' + where]) {
        self.tapped = setTimeout(function () {
          self.tapped = null;
          process('click' + where);
        }, 500);
      } else {
        process('click' + where);
      }
    }

    return this;
  };

  $(document).on('onActivate.fb', function (e, instance) {
    if (instance && !instance.Guestures) {
      instance.Guestures = new Guestures(instance);
    }
  });
})(window, document, __webpack_provided_window_dot_jQuery || jQuery); // ==========================================================================
//
// SlideShow
// Enables slideshow functionality
//
// Example of usage:
// $.fancybox.getInstance().SlideShow.start()
//
// ==========================================================================


;

(function (document, $) {
  'use strict';

  $.extend(true, $.fancybox.defaults, {
    btnTpl: {
      slideShow: '<button data-fancybox-play class="fancybox-button fancybox-button--play" title="{{PLAY_START}}">' + '<svg viewBox="0 0 40 40">' + '<path d="M13,12 L27,20 L13,27 Z" />' + '<path d="M15,10 v19 M23,10 v19" />' + '</svg>' + '</button>'
    },
    slideShow: {
      autoStart: false,
      speed: 3000
    }
  });

  var SlideShow = function SlideShow(instance) {
    this.instance = instance;
    this.init();
  };

  $.extend(SlideShow.prototype, {
    timer: null,
    isActive: false,
    $button: null,
    init: function init() {
      var self = this;
      self.$button = self.instance.$refs.toolbar.find('[data-fancybox-play]').on('click', function () {
        self.toggle();
      });

      if (self.instance.group.length < 2 || !self.instance.group[self.instance.currIndex].opts.slideShow) {
        self.$button.hide();
      }
    },
    set: function set(force) {
      var self = this; // Check if reached last element

      if (self.instance && self.instance.current && (force === true || self.instance.current.opts.loop || self.instance.currIndex < self.instance.group.length - 1)) {
        self.timer = setTimeout(function () {
          if (self.isActive) {
            self.instance.jumpTo((self.instance.currIndex + 1) % self.instance.group.length);
          }
        }, self.instance.current.opts.slideShow.speed);
      } else {
        self.stop();
        self.instance.idleSecondsCounter = 0;
        self.instance.showControls();
      }
    },
    clear: function clear() {
      var self = this;
      clearTimeout(self.timer);
      self.timer = null;
    },
    start: function start() {
      var self = this;
      var current = self.instance.current;

      if (current) {
        self.isActive = true;
        self.$button.attr('title', current.opts.i18n[current.opts.lang].PLAY_STOP).removeClass('fancybox-button--play').addClass('fancybox-button--pause');
        self.set(true);
      }
    },
    stop: function stop() {
      var self = this;
      var current = self.instance.current;
      self.clear();
      self.$button.attr('title', current.opts.i18n[current.opts.lang].PLAY_START).removeClass('fancybox-button--pause').addClass('fancybox-button--play');
      self.isActive = false;
    },
    toggle: function toggle() {
      var self = this;

      if (self.isActive) {
        self.stop();
      } else {
        self.start();
      }
    }
  });
  $(document).on({
    'onInit.fb': function onInitFb(e, instance) {
      if (instance && !instance.SlideShow) {
        instance.SlideShow = new SlideShow(instance);
      }
    },
    'beforeShow.fb': function beforeShowFb(e, instance, current, firstRun) {
      var SlideShow = instance && instance.SlideShow;

      if (firstRun) {
        if (SlideShow && current.opts.slideShow.autoStart) {
          SlideShow.start();
        }
      } else if (SlideShow && SlideShow.isActive) {
        SlideShow.clear();
      }
    },
    'afterShow.fb': function afterShowFb(e, instance, current) {
      var SlideShow = instance && instance.SlideShow;

      if (SlideShow && SlideShow.isActive) {
        SlideShow.set();
      }
    },
    'afterKeydown.fb': function afterKeydownFb(e, instance, current, keypress, keycode) {
      var SlideShow = instance && instance.SlideShow; // "P" or Spacebar

      if (SlideShow && current.opts.slideShow && (keycode === 80 || keycode === 32) && !$(document.activeElement).is('button,a,input')) {
        keypress.preventDefault();
        SlideShow.toggle();
      }
    },
    'beforeClose.fb onDeactivate.fb': function beforeCloseFbOnDeactivateFb(e, instance) {
      var SlideShow = instance && instance.SlideShow;

      if (SlideShow) {
        SlideShow.stop();
      }
    }
  }); // Page Visibility API to pause slideshow when window is not active

  $(document).on("visibilitychange", function () {
    var instance = $.fancybox.getInstance();
    var SlideShow = instance && instance.SlideShow;

    if (SlideShow && SlideShow.isActive) {
      if (document.hidden) {
        SlideShow.clear();
      } else {
        SlideShow.set();
      }
    }
  });
})(document, __webpack_provided_window_dot_jQuery || jQuery); // ==========================================================================
//
// FullScreen
// Adds fullscreen functionality
//
// ==========================================================================


;

(function (document, $) {
  'use strict'; // Collection of methods supported by user browser

  var fn = function () {
    var fnMap = [['requestFullscreen', 'exitFullscreen', 'fullscreenElement', 'fullscreenEnabled', 'fullscreenchange', 'fullscreenerror'], // new WebKit
    ['webkitRequestFullscreen', 'webkitExitFullscreen', 'webkitFullscreenElement', 'webkitFullscreenEnabled', 'webkitfullscreenchange', 'webkitfullscreenerror'], // old WebKit (Safari 5.1)
    ['webkitRequestFullScreen', 'webkitCancelFullScreen', 'webkitCurrentFullScreenElement', 'webkitCancelFullScreen', 'webkitfullscreenchange', 'webkitfullscreenerror'], ['mozRequestFullScreen', 'mozCancelFullScreen', 'mozFullScreenElement', 'mozFullScreenEnabled', 'mozfullscreenchange', 'mozfullscreenerror'], ['msRequestFullscreen', 'msExitFullscreen', 'msFullscreenElement', 'msFullscreenEnabled', 'MSFullscreenChange', 'MSFullscreenError']];
    var val;
    var ret = {};
    var i, j;

    for (i = 0; i < fnMap.length; i++) {
      val = fnMap[i];

      if (val && val[1] in document) {
        for (j = 0; j < val.length; j++) {
          ret[fnMap[0][j]] = val[j];
        }

        return ret;
      }
    }

    return false;
  }(); // If browser does not have Full Screen API, then simply unset default button template and stop


  if (!fn) {
    if ($ && $.fancybox) {
      $.fancybox.defaults.btnTpl.fullScreen = false;
    }

    return;
  }

  var FullScreen = {
    request: function request(elem) {
      elem = elem || document.documentElement;
      elem[fn.requestFullscreen](elem.ALLOW_KEYBOARD_INPUT);
    },
    exit: function exit() {
      document[fn.exitFullscreen]();
    },
    toggle: function toggle(elem) {
      elem = elem || document.documentElement;

      if (this.isFullscreen()) {
        this.exit();
      } else {
        this.request(elem);
      }
    },
    isFullscreen: function isFullscreen() {
      return Boolean(document[fn.fullscreenElement]);
    },
    enabled: function enabled() {
      return Boolean(document[fn.fullscreenEnabled]);
    }
  };
  $.extend(true, $.fancybox.defaults, {
    btnTpl: {
      fullScreen: '<button data-fancybox-fullscreen class="fancybox-button fancybox-button--fullscreen" title="{{FULL_SCREEN}}">' + '<svg viewBox="0 0 40 40">' + '<path d="M9,12 h22 v16 h-22 v-16 v16 h22 v-16 Z" />' + '</svg>' + '</button>'
    },
    fullScreen: {
      autoStart: false
    }
  });
  $(document).on({
    'onInit.fb': function onInitFb(e, instance) {
      var $container;

      if (instance && instance.group[instance.currIndex].opts.fullScreen) {
        $container = instance.$refs.container;
        $container.on('click.fb-fullscreen', '[data-fancybox-fullscreen]', function (e) {
          e.stopPropagation();
          e.preventDefault();
          FullScreen.toggle($container[0]);
        });

        if (instance.opts.fullScreen && instance.opts.fullScreen.autoStart === true) {
          FullScreen.request($container[0]);
        } // Expose API


        instance.FullScreen = FullScreen;
      } else if (instance) {
        instance.$refs.toolbar.find('[data-fancybox-fullscreen]').hide();
      }
    },
    'afterKeydown.fb': function afterKeydownFb(e, instance, current, keypress, keycode) {
      // "P" or Spacebar
      if (instance && instance.FullScreen && keycode === 70) {
        keypress.preventDefault();
        instance.FullScreen.toggle(instance.$refs.container[0]);
      }
    },
    'beforeClose.fb': function beforeCloseFb(instance) {
      if (instance && instance.FullScreen) {
        FullScreen.exit();
      }
    }
  });
  $(document).on(fn.fullscreenchange, function () {
    var isFullscreen = FullScreen.isFullscreen(),
        instance = $.fancybox.getInstance();

    if (instance) {
      // If image is zooming, then force to stop and reposition properly
      if (instance.current && instance.current.type === 'image' && instance.isAnimating) {
        instance.current.$content.css('transition', 'none');
        instance.isAnimating = false;
        instance.update(true, true, 0);
      }

      instance.trigger('onFullscreenChange', isFullscreen);
      instance.$refs.container.toggleClass('fancybox-is-fullscreen', isFullscreen);
    }
  });
})(document, __webpack_provided_window_dot_jQuery || jQuery); // ==========================================================================
//
// Thumbs
// Displays thumbnails in a grid
//
// ==========================================================================


;

(function (document, $) {
  'use strict'; // Make sure there are default values

  $.fancybox.defaults = $.extend(true, {
    btnTpl: {
      thumbs: '<button data-fancybox-thumbs class="fancybox-button fancybox-button--thumbs" title="{{THUMBS}}">' + '<svg viewBox="0 0 120 120">' + '<path d="M30,30 h14 v14 h-14 Z M50,30 h14 v14 h-14 Z M70,30 h14 v14 h-14 Z M30,50 h14 v14 h-14 Z M50,50 h14 v14 h-14 Z M70,50 h14 v14 h-14 Z M30,70 h14 v14 h-14 Z M50,70 h14 v14 h-14 Z M70,70 h14 v14 h-14 Z" />' + '</svg>' + '</button>'
    },
    thumbs: {
      autoStart: false,
      // Display thumbnails on opening
      hideOnClose: true,
      // Hide thumbnail grid when closing animation starts
      parentEl: '.fancybox-container',
      // Container is injected into this element
      axis: 'y' // Vertical (y) or horizontal (x) scrolling

    }
  }, $.fancybox.defaults);

  var FancyThumbs = function FancyThumbs(instance) {
    this.init(instance);
  };

  $.extend(FancyThumbs.prototype, {
    $button: null,
    $grid: null,
    $list: null,
    isVisible: false,
    isActive: false,
    init: function init(instance) {
      var self = this;
      self.instance = instance;
      instance.Thumbs = self; // Enable thumbs if at least two group items have thumbnails

      var first = instance.group[0],
          second = instance.group[1];
      self.opts = instance.group[instance.currIndex].opts.thumbs;
      self.$button = instance.$refs.toolbar.find('[data-fancybox-thumbs]');

      if (self.opts && first && second && (first.type == 'image' || first.opts.thumb || first.opts.$thumb) && (second.type == 'image' || second.opts.thumb || second.opts.$thumb)) {
        self.$button.show().on('click', function () {
          self.toggle();
        });
        self.isActive = true;
      } else {
        self.$button.hide();
      }
    },
    create: function create() {
      var self = this,
          instance = self.instance,
          parentEl = self.opts.parentEl,
          list,
          src;
      self.$grid = $('<div class="fancybox-thumbs fancybox-thumbs-' + self.opts.axis + '"></div>').appendTo(instance.$refs.container.find(parentEl).addBack().filter(parentEl)); // Build list HTML

      list = '<ul>';
      $.each(instance.group, function (i, item) {
        src = item.opts.thumb || (item.opts.$thumb ? item.opts.$thumb.attr('src') : null);

        if (!src && item.type === 'image') {
          src = item.src;
        }

        if (src && src.length) {
          list += '<li data-index="' + i + '"  tabindex="0" class="fancybox-thumbs-loading"><img data-src="' + src + '" /></li>';
        }
      });
      list += '</ul>';
      self.$list = $(list).appendTo(self.$grid).on('click', 'li', function () {
        instance.jumpTo($(this).data('index'));
      });
      self.$list.find('img').hide().one('load', function () {
        var $parent = $(this).parent().removeClass('fancybox-thumbs-loading'),
            thumbWidth = $parent.outerWidth(),
            thumbHeight = $parent.outerHeight(),
            width,
            height,
            widthRatio,
            heightRatio;
        width = this.naturalWidth || this.width;
        height = this.naturalHeight || this.height; // Calculate thumbnail dimensions; center vertically and horizontally

        widthRatio = width / thumbWidth;
        heightRatio = height / thumbHeight;

        if (widthRatio >= 1 && heightRatio >= 1) {
          if (widthRatio > heightRatio) {
            width = width / heightRatio;
            height = thumbHeight;
          } else {
            width = thumbWidth;
            height = height / widthRatio;
          }
        }

        $(this).css({
          width: Math.floor(width),
          height: Math.floor(height),
          'margin-top': height > thumbHeight ? Math.floor(thumbHeight * 0.3 - height * 0.3) : Math.floor(thumbHeight * 0.5 - height * 0.5),
          'margin-left': Math.floor(thumbWidth * 0.5 - width * 0.5)
        }).show();
      }).each(function () {
        this.src = $(this).data('src');
      });

      if (self.opts.axis === 'x') {
        self.$list.width(parseInt(self.$grid.css("padding-right")) + instance.group.length * self.$list.children().eq(0).outerWidth(true) + 'px');
      }
    },
    focus: function focus(duration) {
      var self = this,
          $list = self.$list,
          thumb,
          thumbPos;

      if (self.instance.current) {
        thumb = $list.children().removeClass('fancybox-thumbs-active').filter('[data-index="' + self.instance.current.index + '"]').addClass('fancybox-thumbs-active');
        thumbPos = thumb.position(); // Check if need to scroll to make current thumb visible

        if (self.opts.axis === 'y' && (thumbPos.top < 0 || thumbPos.top > $list.height() - thumb.outerHeight())) {
          $list.stop().animate({
            'scrollTop': $list.scrollTop() + thumbPos.top
          }, duration);
        } else if (self.opts.axis === 'x' && (thumbPos.left < $list.parent().scrollLeft() || thumbPos.left > $list.parent().scrollLeft() + ($list.parent().width() - thumb.outerWidth()))) {
          $list.parent().stop().animate({
            'scrollLeft': thumbPos.left
          }, duration);
        }
      }
    },
    update: function update() {
      this.instance.$refs.container.toggleClass('fancybox-show-thumbs', this.isVisible);

      if (this.isVisible) {
        if (!this.$grid) {
          this.create();
        }

        this.instance.trigger('onThumbsShow');
        this.focus(0);
      } else if (this.$grid) {
        this.instance.trigger('onThumbsHide');
      } // Update content position


      this.instance.update();
    },
    hide: function hide() {
      this.isVisible = false;
      this.update();
    },
    show: function show() {
      this.isVisible = true;
      this.update();
    },
    toggle: function toggle() {
      this.isVisible = !this.isVisible;
      this.update();
    }
  });
  $(document).on({
    'onInit.fb': function onInitFb(e, instance) {
      var Thumbs;

      if (instance && !instance.Thumbs) {
        Thumbs = new FancyThumbs(instance);

        if (Thumbs.isActive && Thumbs.opts.autoStart === true) {
          Thumbs.show();
        }
      }
    },
    'beforeShow.fb': function beforeShowFb(e, instance, item, firstRun) {
      var Thumbs = instance && instance.Thumbs;

      if (Thumbs && Thumbs.isVisible) {
        Thumbs.focus(firstRun ? 0 : 250);
      }
    },
    'afterKeydown.fb': function afterKeydownFb(e, instance, current, keypress, keycode) {
      var Thumbs = instance && instance.Thumbs; // "G"

      if (Thumbs && Thumbs.isActive && keycode === 71) {
        keypress.preventDefault();
        Thumbs.toggle();
      }
    },
    'beforeClose.fb': function beforeCloseFb(e, instance) {
      var Thumbs = instance && instance.Thumbs;

      if (Thumbs && Thumbs.isVisible && Thumbs.opts.hideOnClose !== false) {
        Thumbs.$grid.hide();
      }
    }
  });
})(document, __webpack_provided_window_dot_jQuery); //// ==========================================================================
//
// Share
// Displays simple form for sharing current url
//
// ==========================================================================


;

(function (document, $) {
  'use strict';

  $.extend(true, $.fancybox.defaults, {
    btnTpl: {
      share: '<button data-fancybox-share class="fancybox-button fancybox-button--share" title="{{SHARE}}">' + '<svg viewBox="0 0 40 40">' + '<path d="M6,30 C8,18 19,16 23,16 L23,16 L23,10 L33,20 L23,29 L23,24 C19,24 8,27 6,30 Z">' + '</svg>' + '</button>'
    },
    share: {
      tpl: '<div class="fancybox-share">' + '<h1>{{SHARE}}</h1>' + '<p class="fancybox-share__links">' + '<a class="fancybox-share__button fancybox-share__button--fb" href="https://www.facebook.com/sharer/sharer.php?u={{url}}">' + '<svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m287 456v-299c0-21 6-35 35-35h38v-63c-7-1-29-3-55-3-54 0-91 33-91 94v306m143-254h-205v72h196" /></svg>' + '<span>Facebook</span>' + '</a>' + '<a class="fancybox-share__button fancybox-share__button--pt" href="https://www.pinterest.com/pin/create/button/?url={{url}}&description={{descr}}&media={{media}}">' + '<svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m265 56c-109 0-164 78-164 144 0 39 15 74 47 87 5 2 10 0 12-5l4-19c2-6 1-8-3-13-9-11-15-25-15-45 0-58 43-110 113-110 62 0 96 38 96 88 0 67-30 122-73 122-24 0-42-19-36-44 6-29 20-60 20-81 0-19-10-35-31-35-25 0-44 26-44 60 0 21 7 36 7 36l-30 125c-8 37-1 83 0 87 0 3 4 4 5 2 2-3 32-39 42-75l16-64c8 16 31 29 56 29 74 0 124-67 124-157 0-69-58-132-146-132z" fill="#fff"/></svg>' + '<span>Pinterest</span>' + '</a>' + '<a class="fancybox-share__button fancybox-share__button--tw" href="https://twitter.com/intent/tweet?url={{url}}&text={{descr}}">' + '<svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m456 133c-14 7-31 11-47 13 17-10 30-27 37-46-15 10-34 16-52 20-61-62-157-7-141 75-68-3-129-35-169-85-22 37-11 86 26 109-13 0-26-4-37-9 0 39 28 72 65 80-12 3-25 4-37 2 10 33 41 57 77 57-42 30-77 38-122 34 170 111 378-32 359-208 16-11 30-25 41-42z" /></svg>' + '<span>Twitter</span>' + '</a>' + '</p>' + '<p><input class="fancybox-share__input" type="text" value="{{url_raw}}" /></p>' + '</div>'
    }
  });

  function escapeHtml(string) {
    var entityMap = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#39;',
      '/': '&#x2F;',
      '`': '&#x60;',
      '=': '&#x3D;'
    };
    return String(string).replace(/[&<>"'`=\/]/g, function (s) {
      return entityMap[s];
    });
  }

  $(document).on('click', '[data-fancybox-share]', function () {
    var f = $.fancybox.getInstance(),
        url,
        tpl;

    if (f) {
      url = f.current.opts.hash === false ? f.current.src : window.location;
      tpl = f.current.opts.share.tpl.replace(/\{\{media\}\}/g, f.current.type === 'image' ? encodeURIComponent(f.current.src) : '').replace(/\{\{url\}\}/g, encodeURIComponent(url)).replace(/\{\{url_raw\}\}/g, escapeHtml(url)).replace(/\{\{descr\}\}/g, f.$caption ? encodeURIComponent(f.$caption.text()) : '');
      $.fancybox.open({
        src: f.translate(f, tpl),
        type: 'html',
        opts: {
          animationEffect: "fade",
          animationDuration: 250,
          afterLoad: function afterLoad(instance, current) {
            // Opening links in a popup window
            current.$content.find('.fancybox-share__links a').click(function () {
              window.open(this.href, "Share", "width=550, height=450");
              return false;
            });
          }
        }
      });
    }
  });
})(document, __webpack_provided_window_dot_jQuery || jQuery); // ==========================================================================
//
// Hash
// Enables linking to each modal
//
// ==========================================================================


;

(function (document, window, $) {
  'use strict'; // Simple $.escapeSelector polyfill (for jQuery prior v3)

  if (!$.escapeSelector) {
    $.escapeSelector = function (sel) {
      var rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g;

      var fcssescape = function fcssescape(ch, asCodePoint) {
        if (asCodePoint) {
          // U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
          if (ch === "\0") {
            return "\uFFFD";
          } // Control characters and (dependent upon position) numbers get escaped as code points


          return ch.slice(0, -1) + "\\" + ch.charCodeAt(ch.length - 1).toString(16) + " ";
        } // Other potentially-special ASCII characters get backslash-escaped


        return "\\" + ch;
      };

      return (sel + "").replace(rcssescape, fcssescape);
    };
  } // Create new history entry only once


  var shouldCreateHistory = true; // Variable containing last hash value set by fancyBox
  // It will be used to determine if fancyBox needs to close after hash change is detected

  var currentHash = null; // Throttling the history change

  var timerID = null; // Get info about gallery name and current index from url

  function parseUrl() {
    var hash = window.location.hash.substr(1);
    var rez = hash.split('-');
    var index = rez.length > 1 && /^\+?\d+$/.test(rez[rez.length - 1]) ? parseInt(rez.pop(-1), 10) || 1 : 1;
    var gallery = rez.join('-'); // Index is starting from 1

    if (index < 1) {
      index = 1;
    }

    return {
      hash: hash,
      index: index,
      gallery: gallery
    };
  } // Trigger click evnt on links to open new fancyBox instance


  function triggerFromUrl(url) {
    var $el;

    if (url.gallery !== '') {
      // If we can find element matching 'data-fancybox' atribute, then trigger click event for that ..
      $el = $("[data-fancybox='" + $.escapeSelector(url.gallery) + "']").eq(url.index - 1);

      if (!$el.length) {
        // .. if not, try finding element by ID
        $el = $("#" + $.escapeSelector(url.gallery) + "");
      }

      if ($el.length) {
        shouldCreateHistory = false;
        $el.trigger('click');
      }
    }
  } // Get gallery name from current instance


  function getGalleryID(instance) {
    var opts;

    if (!instance) {
      return false;
    }

    opts = instance.current ? instance.current.opts : instance.opts;
    return opts.hash || (opts.$orig ? opts.$orig.data('fancybox') : '');
  } // Start when DOM becomes ready


  $(function () {
    // Check if user has disabled this module
    if ($.fancybox.defaults.hash === false) {
      return;
    } // Update hash when opening/closing fancyBox


    $(document).on({
      'onInit.fb': function onInitFb(e, instance) {
        var url, gallery;

        if (instance.group[instance.currIndex].opts.hash === false) {
          return;
        }

        url = parseUrl();
        gallery = getGalleryID(instance); // Make sure gallery start index matches index from hash

        if (gallery && url.gallery && gallery == url.gallery) {
          instance.currIndex = url.index - 1;
        }
      },
      'beforeShow.fb': function beforeShowFb(e, instance, current) {
        var gallery;

        if (!current || current.opts.hash === false) {
          return;
        }

        gallery = getGalleryID(instance); // Update window hash

        if (gallery && gallery !== '') {
          if (window.location.hash.indexOf(gallery) < 0) {
            instance.opts.origHash = window.location.hash;
          }

          currentHash = gallery + (instance.group.length > 1 ? '-' + (current.index + 1) : '');

          if ('replaceState' in window.history) {
            if (timerID) {
              clearTimeout(timerID);
            }

            timerID = setTimeout(function () {
              window.history[shouldCreateHistory ? 'pushState' : 'replaceState']({}, document.title, window.location.pathname + window.location.search + '#' + currentHash);
              timerID = null;
              shouldCreateHistory = false;
            }, 300);
          } else {
            window.location.hash = currentHash;
          }
        }
      },
      'beforeClose.fb': function beforeCloseFb(e, instance, current) {
        var gallery, origHash;

        if (timerID) {
          clearTimeout(timerID);
        }

        if (current.opts.hash === false) {
          return;
        }

        gallery = getGalleryID(instance);
        origHash = instance && instance.opts.origHash ? instance.opts.origHash : ''; // Remove hash from location bar

        if (gallery && gallery !== '') {
          if ('replaceState' in history) {
            window.history.replaceState({}, document.title, window.location.pathname + window.location.search + origHash);
          } else {
            window.location.hash = origHash; // Keep original scroll position

            $(window).scrollTop(instance.scrollTop).scrollLeft(instance.scrollLeft);
          }
        }

        currentHash = null;
      }
    }); // Check if need to close after url has changed

    $(window).on('hashchange.fb', function () {
      var url = parseUrl();

      if ($.fancybox.getInstance()) {
        if (currentHash && currentHash !== url.gallery + '-' + url.index && !(url.index === 1 && currentHash == url.gallery)) {
          currentHash = null;
          $.fancybox.close();
        }
      } else if (url.gallery !== '') {
        triggerFromUrl(url);
      }
    }); // Check current hash and trigger click event on matching element to start fancyBox, if needed

    setTimeout(function () {
      triggerFromUrl(parseUrl());
    }, 50);
  });
})(document, window, __webpack_provided_window_dot_jQuery || jQuery);

;

(function (document, $) {
  'use strict';

  var prevTime = new Date().getTime();
  $(document).on({
    'onInit.fb': function onInitFb(e, instance, current) {
      instance.$refs.stage.on('mousewheel DOMMouseScroll wheel MozMousePixelScroll', function (e) {
        var current = instance.current,
            currTime = new Date().getTime();

        if (instance.group.length < 1 || current.opts.wheel === false || current.opts.wheel === 'auto' && current.type !== 'image') {
          return;
        }

        e.preventDefault();
        e.stopPropagation();

        if (current.$slide.hasClass('fancybox-animated')) {
          return;
        }

        e = e.originalEvent || e;

        if (currTime - prevTime < 250) {
          return;
        }

        prevTime = currTime;
        instance[(-e.deltaY || -e.deltaX || e.wheelDelta || -e.detail) < 0 ? 'next' : 'previous']();
      });
    }
  });
})(document, __webpack_provided_window_dot_jQuery || jQuery);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"), __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

/***/ }),

/***/ "./src/Resources/views/theme/assets/js/mixitup.js":
/*!********************************************************!*\
  !*** ./src/Resources/views/theme/assets/js/mixitup.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(jQuery) {function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**!
 * MixItUp v2.1.10
 *
 * @copyright Copyright 2015 KunkaLabs Limited.
 * @author    KunkaLabs Limited.
 * @link      https://mixitup.kunkalabs.com
 *
 * @license   Commercial use requires a commercial license.
 *            https://mixitup.kunkalabs.com/licenses/
 *
 *            Non-commercial use permitted under terms of CC-BY-NC license.
 *            http://creativecommons.org/licenses/by-nc/3.0/
 */
(function ($, undf) {
  'use strict';
  /**
   * MixItUp Constructor Function
   * @constructor
   * @extends jQuery
   */

  $.MixItUp = function () {
    var self = this;

    self._execAction('_constructor', 0);

    $.extend(self, {
      /* Public Properties
      ---------------------------------------------------------------------- */
      selectors: {
        target: '.mix',
        filter: '.filter',
        sort: '.sort'
      },
      animation: {
        enable: true,
        effects: 'fade scale',
        duration: 600,
        easing: 'ease',
        perspectiveDistance: '3000',
        perspectiveOrigin: '50% 50%',
        queue: true,
        queueLimit: 1,
        animateChangeLayout: false,
        animateResizeContainer: true,
        animateResizeTargets: false,
        staggerSequence: false,
        reverseOut: false
      },
      callbacks: {
        onMixLoad: false,
        onMixStart: false,
        onMixBusy: false,
        onMixEnd: false,
        onMixFail: false,
        _user: false
      },
      controls: {
        enable: true,
        live: false,
        toggleFilterButtons: false,
        toggleLogic: 'or',
        activeClass: 'active'
      },
      layout: {
        display: 'inline-block',
        containerClass: '',
        containerClassFail: 'fail'
      },
      load: {
        filter: 'all',
        sort: false
      },

      /* Private Properties
      ---------------------------------------------------------------------- */
      _$body: null,
      _$container: null,
      _$targets: null,
      _$parent: null,
      _$sortButtons: null,
      _$filterButtons: null,
      _suckMode: false,
      _mixing: false,
      _sorting: false,
      _clicking: false,
      _loading: true,
      _changingLayout: false,
      _changingClass: false,
      _changingDisplay: false,
      _origOrder: [],
      _startOrder: [],
      _newOrder: [],
      _activeFilter: null,
      _toggleArray: [],
      _toggleString: '',
      _activeSort: 'default:asc',
      _newSort: null,
      _startHeight: null,
      _newHeight: null,
      _incPadding: true,
      _newDisplay: null,
      _newClass: null,
      _targetsBound: 0,
      _targetsDone: 0,
      _queue: [],
      _$show: $(),
      _$hide: $()
    });

    self._execAction('_constructor', 1);
  };
  /**
   * MixItUp Prototype
   * @override
   */


  $.MixItUp.prototype = {
    constructor: $.MixItUp,

    /* Static Properties
    ---------------------------------------------------------------------- */
    _instances: {},
    _handled: {
      _filter: {},
      _sort: {}
    },
    _bound: {
      _filter: {},
      _sort: {}
    },
    _actions: {},
    _filters: {},

    /* Static Methods
    ---------------------------------------------------------------------- */

    /**
     * Extend
     * @since 2.1.0
     * @param {object} new properties/methods
     * @extends {object} prototype
     */
    extend: function extend(extension) {
      for (var key in extension) {
        $.MixItUp.prototype[key] = extension[key];
      }
    },

    /**
     * Add Action
     * @since 2.1.0
     * @param {string} hook name
     * @param {string} namespace
     * @param {function} function to execute
     * @param {number} priority
     * @extends {object} $.MixItUp.prototype._actions
     */
    addAction: function addAction(hook, name, func, priority) {
      $.MixItUp.prototype._addHook('_actions', hook, name, func, priority);
    },

    /**
     * Add Filter
     * @since 2.1.0
     * @param {string} hook name
     * @param {string} namespace
     * @param {function} function to execute
     * @param {number} priority
     * @extends {object} $.MixItUp.prototype._filters
     */
    addFilter: function addFilter(hook, name, func, priority) {
      $.MixItUp.prototype._addHook('_filters', hook, name, func, priority);
    },

    /**
     * Add Hook
     * @since 2.1.0
     * @param {string} type of hook
     * @param {string} hook name
     * @param {function} function to execute
     * @param {number} priority
     * @extends {object} $.MixItUp.prototype._filters
     */
    _addHook: function _addHook(type, hook, name, func, priority) {
      var collection = $.MixItUp.prototype[type],
          obj = {};
      priority = priority === 1 || priority === 'post' ? 'post' : 'pre';
      obj[hook] = {};
      obj[hook][priority] = {};
      obj[hook][priority][name] = func;
      $.extend(true, collection, obj);
    },

    /* Private Methods
    ---------------------------------------------------------------------- */

    /**
     * Initialise
     * @since 2.0.0
     * @param {object} domNode
     * @param {object} config
     */
    _init: function _init(domNode, config) {
      var self = this;

      self._execAction('_init', 0, arguments);

      config && $.extend(true, self, config);
      self._$body = $('body');
      self._domNode = domNode;
      self._$container = $(domNode);

      self._$container.addClass(self.layout.containerClass);

      self._id = domNode.id;

      self._platformDetect();

      self._brake = self._getPrefixedCSS('transition', 'none');

      self._refresh(true);

      self._$parent = self._$targets.parent().length ? self._$targets.parent() : self._$container;

      if (self.load.sort) {
        self._newSort = self._parseSort(self.load.sort);
        self._newSortString = self.load.sort;
        self._activeSort = self.load.sort;

        self._sort();

        self._printSort();
      }

      self._activeFilter = self.load.filter === 'all' ? self.selectors.target : self.load.filter === 'none' ? '' : self.load.filter;
      self.controls.enable && self._bindHandlers();

      if (self.controls.toggleFilterButtons) {
        self._buildToggleArray();

        for (var i = 0; i < self._toggleArray.length; i++) {
          self._updateControls({
            filter: self._toggleArray[i],
            sort: self._activeSort
          }, true);
        }

        ;
      } else if (self.controls.enable) {
        self._updateControls({
          filter: self._activeFilter,
          sort: self._activeSort
        });
      }

      self._filter();

      self._init = true;

      self._$container.data('mixItUp', self);

      self._execAction('_init', 1, arguments);

      self._buildState();

      self._$targets.css(self._brake);

      self._goMix(self.animation.enable);
    },

    /**
     * Platform Detect
     * @since 2.0.0
     */
    _platformDetect: function _platformDetect() {
      var self = this,
          vendorsTrans = ['Webkit', 'Moz', 'O', 'ms'],
          vendorsRAF = ['webkit', 'moz'],
          chrome = window.navigator.appVersion.match(/Chrome\/(\d+)\./) || false,
          ff = typeof InstallTrigger !== 'undefined',
          prefix = function prefix(el) {
        for (var i = 0; i < vendorsTrans.length; i++) {
          if (vendorsTrans[i] + 'Transition' in el.style) {
            return {
              prefix: '-' + vendorsTrans[i].toLowerCase() + '-',
              vendor: vendorsTrans[i]
            };
          }

          ;
        }

        ;
        return 'transition' in el.style ? '' : false;
      },
          transPrefix = prefix(self._domNode);

      self._execAction('_platformDetect', 0);

      self._chrome = chrome ? parseInt(chrome[1], 10) : false;
      self._ff = ff ? parseInt(window.navigator.userAgent.match(/rv:([^)]+)\)/)[1]) : false;
      self._prefix = transPrefix.prefix;
      self._vendor = transPrefix.vendor;
      self._suckMode = window.atob && self._prefix ? false : true;
      self._suckMode && (self.animation.enable = false);
      self._ff && self._ff <= 4 && (self.animation.enable = false);
      /* Polyfills
      ---------------------------------------------------------------------- */

      /**
       * window.requestAnimationFrame
       */

      for (var x = 0; x < vendorsRAF.length && !window.requestAnimationFrame; x++) {
        window.requestAnimationFrame = window[vendorsRAF[x] + 'RequestAnimationFrame'];
      }
      /**
       * Object.getPrototypeOf
       */


      if (typeof Object.getPrototypeOf !== 'function') {
        if (_typeof('test'.__proto__) === 'object') {
          Object.getPrototypeOf = function (object) {
            return object.__proto__;
          };
        } else {
          Object.getPrototypeOf = function (object) {
            return object.constructor.prototype;
          };
        }
      }
      /**
       * Element.nextElementSibling
       */


      if (self._domNode.nextElementSibling === undf) {
        Object.defineProperty(Element.prototype, 'nextElementSibling', {
          get: function get() {
            var el = this.nextSibling;

            while (el) {
              if (el.nodeType === 1) {
                return el;
              }

              el = el.nextSibling;
            }

            return null;
          }
        });
      }

      self._execAction('_platformDetect', 1);
    },

    /**
     * Refresh
     * @since 2.0.0
     * @param {boolean} init
     * @param {boolean} force
     */
    _refresh: function _refresh(init, force) {
      var self = this;

      self._execAction('_refresh', 0, arguments);

      self._$targets = self._$container.find(self.selectors.target);

      for (var i = 0; i < self._$targets.length; i++) {
        var target = self._$targets[i];

        if (target.dataset === undf || force) {
          target.dataset = {};

          for (var j = 0; j < target.attributes.length; j++) {
            var attr = target.attributes[j],
                name = attr.name,
                val = attr.value;

            if (name.indexOf('data-') > -1) {
              var dataName = self._helpers._camelCase(name.substring(5, name.length));

              target.dataset[dataName] = val;
            }
          }
        }

        if (target.mixParent === undf) {
          target.mixParent = self._id;
        }
      }

      if (self._$targets.length && init || !self._origOrder.length && self._$targets.length) {
        self._origOrder = [];

        for (var i = 0; i < self._$targets.length; i++) {
          var target = self._$targets[i];

          self._origOrder.push(target);
        }
      }

      self._execAction('_refresh', 1, arguments);
    },

    /**
     * Bind Handlers
     * @since 2.0.0
     */
    _bindHandlers: function _bindHandlers() {
      var self = this,
          filters = $.MixItUp.prototype._bound._filter,
          sorts = $.MixItUp.prototype._bound._sort;

      self._execAction('_bindHandlers', 0);

      if (self.controls.live) {
        self._$body.on('click.mixItUp.' + self._id, self.selectors.sort, function () {
          self._processClick($(this), 'sort');
        }).on('click.mixItUp.' + self._id, self.selectors.filter, function () {
          self._processClick($(this), 'filter');
        });
      } else {
        self._$sortButtons = $(self.selectors.sort);
        self._$filterButtons = $(self.selectors.filter);

        self._$sortButtons.on('click.mixItUp.' + self._id, function () {
          self._processClick($(this), 'sort');
        });

        self._$filterButtons.on('click.mixItUp.' + self._id, function () {
          self._processClick($(this), 'filter');
        });
      }

      filters[self.selectors.filter] = filters[self.selectors.filter] === undf ? 1 : filters[self.selectors.filter] + 1;
      sorts[self.selectors.sort] = sorts[self.selectors.sort] === undf ? 1 : sorts[self.selectors.sort] + 1;

      self._execAction('_bindHandlers', 1);
    },

    /**
     * Process Click
     * @since 2.0.0
     * @param {object} $button
     * @param {string} type
     */
    _processClick: function _processClick($button, type) {
      var self = this,
          trackClick = function trackClick($button, type, off) {
        var proto = $.MixItUp.prototype;
        proto._handled['_' + type][self.selectors[type]] = proto._handled['_' + type][self.selectors[type]] === undf ? 1 : proto._handled['_' + type][self.selectors[type]] + 1;

        if (proto._handled['_' + type][self.selectors[type]] === proto._bound['_' + type][self.selectors[type]]) {
          $button[(off ? 'remove' : 'add') + 'Class'](self.controls.activeClass);
          delete proto._handled['_' + type][self.selectors[type]];
        }
      };

      self._execAction('_processClick', 0, arguments);

      if (!self._mixing || self.animation.queue && self._queue.length < self.animation.queueLimit) {
        self._clicking = true;

        if (type === 'sort') {
          var sort = $button.attr('data-sort');

          if (!$button.hasClass(self.controls.activeClass) || sort.indexOf('random') > -1) {
            $(self.selectors.sort).removeClass(self.controls.activeClass);
            trackClick($button, type);
            self.sort(sort);
          }
        }

        if (type === 'filter') {
          var filter = $button.attr('data-filter'),
              ndx,
              seperator = self.controls.toggleLogic === 'or' ? ',' : '';

          if (!self.controls.toggleFilterButtons) {
            if (!$button.hasClass(self.controls.activeClass)) {
              $(self.selectors.filter).removeClass(self.controls.activeClass);
              trackClick($button, type);
              self.filter(filter);
            }
          } else {
            self._buildToggleArray();

            if (!$button.hasClass(self.controls.activeClass)) {
              trackClick($button, type);

              self._toggleArray.push(filter);
            } else {
              trackClick($button, type, true);
              ndx = self._toggleArray.indexOf(filter);

              self._toggleArray.splice(ndx, 1);
            }

            self._toggleArray = $.grep(self._toggleArray, function (n) {
              return n;
            });
            self._toggleString = self._toggleArray.join(seperator);
            self.filter(self._toggleString);
          }
        }

        self._execAction('_processClick', 1, arguments);
      } else {
        if (typeof self.callbacks.onMixBusy === 'function') {
          self.callbacks.onMixBusy.call(self._domNode, self._state, self);
        }

        self._execAction('_processClickBusy', 1, arguments);
      }
    },

    /**
     * Build Toggle Array
     * @since 2.0.0
     */
    _buildToggleArray: function _buildToggleArray() {
      var self = this,
          activeFilter = self._activeFilter.replace(/\s/g, '');

      self._execAction('_buildToggleArray', 0, arguments);

      if (self.controls.toggleLogic === 'or') {
        self._toggleArray = activeFilter.split(',');
      } else {
        self._toggleArray = activeFilter.split('.');
        !self._toggleArray[0] && self._toggleArray.shift();

        for (var i = 0, filter; filter = self._toggleArray[i]; i++) {
          self._toggleArray[i] = '.' + filter;
        }
      }

      self._execAction('_buildToggleArray', 1, arguments);
    },

    /**
     * Update Controls
     * @since 2.0.0
     * @param {object} command
     * @param {boolean} multi
     */
    _updateControls: function _updateControls(command, multi) {
      var self = this,
          output = {
        filter: command.filter,
        sort: command.sort
      },
          update = function update($el, filter) {
        try {
          multi && type === 'filter' && !(output.filter === 'none' || output.filter === '') ? $el.filter(filter).addClass(self.controls.activeClass) : $el.removeClass(self.controls.activeClass).filter(filter).addClass(self.controls.activeClass);
        } catch (e) {}
      },
          type = 'filter',
          $el = null;

      self._execAction('_updateControls', 0, arguments);

      command.filter === undf && (output.filter = self._activeFilter);
      command.sort === undf && (output.sort = self._activeSort);
      output.filter === self.selectors.target && (output.filter = 'all');

      for (var i = 0; i < 2; i++) {
        $el = self.controls.live ? $(self.selectors[type]) : self['_$' + type + 'Buttons'];
        $el && update($el, '[data-' + type + '="' + output[type] + '"]');
        type = 'sort';
      }

      self._execAction('_updateControls', 1, arguments);
    },

    /**
     * Filter (private)
     * @since 2.0.0
     */
    _filter: function _filter() {
      var self = this;

      self._execAction('_filter', 0);

      for (var i = 0; i < self._$targets.length; i++) {
        var $target = $(self._$targets[i]);

        if ($target.is(self._activeFilter)) {
          self._$show = self._$show.add($target);
        } else {
          self._$hide = self._$hide.add($target);
        }
      }

      self._execAction('_filter', 1);
    },

    /**
     * Sort (private)
     * @since 2.0.0
     */
    _sort: function _sort() {
      var self = this,
          arrayShuffle = function arrayShuffle(oldArray) {
        var newArray = oldArray.slice(),
            len = newArray.length,
            i = len;

        while (i--) {
          var p = parseInt(Math.random() * len);
          var t = newArray[i];
          newArray[i] = newArray[p];
          newArray[p] = t;
        }

        ;
        return newArray;
      };

      self._execAction('_sort', 0);

      self._startOrder = [];

      for (var i = 0; i < self._$targets.length; i++) {
        var target = self._$targets[i];

        self._startOrder.push(target);
      }

      switch (self._newSort[0].sortBy) {
        case 'default':
          self._newOrder = self._origOrder;
          break;

        case 'random':
          self._newOrder = arrayShuffle(self._startOrder);
          break;

        case 'custom':
          self._newOrder = self._newSort[0].order;
          break;

        default:
          self._newOrder = self._startOrder.concat().sort(function (a, b) {
            return self._compare(a, b);
          });
      }

      self._execAction('_sort', 1);
    },

    /**
     * Compare Algorithm
     * @since 2.0.0
     * @param {string|number} a
     * @param {string|number} b
     * @param {number} depth (recursion)
     * @return {number}
     */
    _compare: function _compare(a, b, depth) {
      depth = depth ? depth : 0;

      var self = this,
          order = self._newSort[depth].order,
          getData = function getData(el) {
        return el.dataset[self._newSort[depth].sortBy] || 0;
      },
          attrA = isNaN(getData(a) * 1) ? getData(a).toLowerCase() : getData(a) * 1,
          attrB = isNaN(getData(b) * 1) ? getData(b).toLowerCase() : getData(b) * 1;

      if (attrA < attrB) return order === 'asc' ? -1 : 1;
      if (attrA > attrB) return order === 'asc' ? 1 : -1;
      if (attrA === attrB && self._newSort.length > depth + 1) return self._compare(a, b, depth + 1);
      return 0;
    },

    /**
     * Print Sort
     * @since 2.0.0
     * @param {boolean} reset
     */
    _printSort: function _printSort(reset) {
      var self = this,
          order = reset ? self._startOrder : self._newOrder,
          targets = self._$parent[0].querySelectorAll(self.selectors.target),
          nextSibling = targets.length ? targets[targets.length - 1].nextElementSibling : null,
          frag = document.createDocumentFragment();

      self._execAction('_printSort', 0, arguments);

      for (var i = 0; i < targets.length; i++) {
        var target = targets[i],
            whiteSpace = target.nextSibling;
        if (target.style.position === 'absolute') continue;

        if (whiteSpace && whiteSpace.nodeName === '#text') {
          self._$parent[0].removeChild(whiteSpace);
        }

        self._$parent[0].removeChild(target);
      }

      for (var i = 0; i < order.length; i++) {
        var el = order[i];

        if (self._newSort[0].sortBy === 'default' && self._newSort[0].order === 'desc' && !reset) {
          var firstChild = frag.firstChild;
          frag.insertBefore(el, firstChild);
          frag.insertBefore(document.createTextNode(' '), el);
        } else {
          frag.appendChild(el);
          frag.appendChild(document.createTextNode(' '));
        }
      }

      nextSibling ? self._$parent[0].insertBefore(frag, nextSibling) : self._$parent[0].appendChild(frag);

      self._execAction('_printSort', 1, arguments);
    },

    /**
     * Parse Sort
     * @since 2.0.0
     * @param {string} sortString
     * @return {array} newSort
     */
    _parseSort: function _parseSort(sortString) {
      var self = this,
          rules = typeof sortString === 'string' ? sortString.split(' ') : [sortString],
          newSort = [];

      for (var i = 0; i < rules.length; i++) {
        var rule = typeof sortString === 'string' ? rules[i].split(':') : ['custom', rules[i]],
            ruleObj = {
          sortBy: self._helpers._camelCase(rule[0]),
          order: rule[1] || 'asc'
        };
        newSort.push(ruleObj);
        if (ruleObj.sortBy === 'default' || ruleObj.sortBy === 'random') break;
      }

      return self._execFilter('_parseSort', newSort, arguments);
    },

    /**
     * Parse Effects
     * @since 2.0.0
     * @return {object} effects
     */
    _parseEffects: function _parseEffects() {
      var self = this,
          effects = {
        opacity: '',
        transformIn: '',
        transformOut: '',
        filter: ''
      },
          parse = function parse(effect, extract, reverse) {
        if (self.animation.effects.indexOf(effect) > -1) {
          if (extract) {
            var propIndex = self.animation.effects.indexOf(effect + '(');

            if (propIndex > -1) {
              var str = self.animation.effects.substring(propIndex),
                  match = /\(([^)]+)\)/.exec(str),
                  val = match[1];
              return {
                val: val
              };
            }
          }

          return true;
        } else {
          return false;
        }
      },
          negate = function negate(value, invert) {
        if (invert) {
          return value.charAt(0) === '-' ? value.substr(1, value.length) : '-' + value;
        } else {
          return value;
        }
      },
          buildTransform = function buildTransform(key, invert) {
        var transforms = [['scale', '.01'], ['translateX', '20px'], ['translateY', '20px'], ['translateZ', '20px'], ['rotateX', '90deg'], ['rotateY', '90deg'], ['rotateZ', '180deg']];

        for (var i = 0; i < transforms.length; i++) {
          var prop = transforms[i][0],
              def = transforms[i][1],
              inverted = invert && prop !== 'scale';
          effects[key] += parse(prop) ? prop + '(' + negate(parse(prop, true).val || def, inverted) + ') ' : '';
        }
      };

      effects.opacity = parse('fade') ? parse('fade', true).val || '0' : '1';
      buildTransform('transformIn');
      self.animation.reverseOut ? buildTransform('transformOut', true) : effects.transformOut = effects.transformIn;
      effects.transition = {};
      effects.transition = self._getPrefixedCSS('transition', 'all ' + self.animation.duration + 'ms ' + self.animation.easing + ', opacity ' + self.animation.duration + 'ms linear');
      self.animation.stagger = parse('stagger') ? true : false;
      self.animation.staggerDuration = parseInt(parse('stagger') ? parse('stagger', true).val ? parse('stagger', true).val : 100 : 100);
      return self._execFilter('_parseEffects', effects);
    },

    /**
     * Build State
     * @since 2.0.0
     * @param {boolean} future
     * @return {object} futureState
     */
    _buildState: function _buildState(future) {
      var self = this,
          state = {};

      self._execAction('_buildState', 0);

      state = {
        activeFilter: self._activeFilter === '' ? 'none' : self._activeFilter,
        activeSort: future && self._newSortString ? self._newSortString : self._activeSort,
        fail: !self._$show.length && self._activeFilter !== '',
        $targets: self._$targets,
        $show: self._$show,
        $hide: self._$hide,
        totalTargets: self._$targets.length,
        totalShow: self._$show.length,
        totalHide: self._$hide.length,
        display: future && self._newDisplay ? self._newDisplay : self.layout.display
      };

      if (future) {
        return self._execFilter('_buildState', state);
      } else {
        self._state = state;

        self._execAction('_buildState', 1);
      }
    },

    /**
     * Go Mix
     * @since 2.0.0
     * @param {boolean} animate
     */
    _goMix: function _goMix(animate) {
      var self = this,
          phase1 = function phase1() {
        if (self._chrome && self._chrome === 31) {
          chromeFix(self._$parent[0]);
        }

        self._setInter();

        phase2();
      },
          phase2 = function phase2() {
        var scrollTop = window.pageYOffset,
            scrollLeft = window.pageXOffset,
            docHeight = document.documentElement.scrollHeight;

        self._getInterMixData();

        self._setFinal();

        self._getFinalMixData();

        window.pageYOffset !== scrollTop && window.scrollTo(scrollLeft, scrollTop);

        self._prepTargets();

        if (window.requestAnimationFrame) {
          requestAnimationFrame(phase3);
        } else {
          setTimeout(function () {
            phase3();
          }, 20);
        }
      },
          phase3 = function phase3() {
        self._animateTargets();

        if (self._targetsBound === 0) {
          self._cleanUp();
        }
      },
          chromeFix = function chromeFix(grid) {
        var parent = grid.parentElement,
            placeholder = document.createElement('div'),
            frag = document.createDocumentFragment();
        parent.insertBefore(placeholder, grid);
        frag.appendChild(grid);
        parent.replaceChild(grid, placeholder);
      },
          futureState = self._buildState(true);

      self._execAction('_goMix', 0, arguments);

      !self.animation.duration && (animate = false);
      self._mixing = true;

      self._$container.removeClass(self.layout.containerClassFail);

      if (typeof self.callbacks.onMixStart === 'function') {
        self.callbacks.onMixStart.call(self._domNode, self._state, futureState, self);
      }

      self._$container.trigger('mixStart', [self._state, futureState, self]);

      self._getOrigMixData();

      if (animate && !self._suckMode) {
        window.requestAnimationFrame ? requestAnimationFrame(phase1) : phase1();
      } else {
        self._cleanUp();
      }

      self._execAction('_goMix', 1, arguments);
    },

    /**
     * Get Target Data
     * @since 2.0.0
     */
    _getTargetData: function _getTargetData(el, stage) {
      var self = this,
          elStyle;
      el.dataset[stage + 'PosX'] = el.offsetLeft;
      el.dataset[stage + 'PosY'] = el.offsetTop;

      if (self.animation.animateResizeTargets) {
        elStyle = !self._suckMode ? window.getComputedStyle(el) : {
          marginBottom: '',
          marginRight: ''
        };
        el.dataset[stage + 'MarginBottom'] = parseInt(elStyle.marginBottom);
        el.dataset[stage + 'MarginRight'] = parseInt(elStyle.marginRight);
        el.dataset[stage + 'Width'] = el.offsetWidth;
        el.dataset[stage + 'Height'] = el.offsetHeight;
      }
    },

    /**
     * Get Original Mix Data
     * @since 2.0.0
     */
    _getOrigMixData: function _getOrigMixData() {
      var self = this,
          parentStyle = !self._suckMode ? window.getComputedStyle(self._$parent[0]) : {
        boxSizing: ''
      },
          parentBS = parentStyle.boxSizing || parentStyle[self._vendor + 'BoxSizing'];
      self._incPadding = parentBS === 'border-box';

      self._execAction('_getOrigMixData', 0);

      !self._suckMode && (self.effects = self._parseEffects());
      self._$toHide = self._$hide.filter(':visible');
      self._$toShow = self._$show.filter(':hidden');
      self._$pre = self._$targets.filter(':visible');
      self._startHeight = self._incPadding ? self._$parent.outerHeight() : self._$parent.height();

      for (var i = 0; i < self._$pre.length; i++) {
        var el = self._$pre[i];

        self._getTargetData(el, 'orig');
      }

      self._execAction('_getOrigMixData', 1);
    },

    /**
     * Set Intermediate Positions
     * @since 2.0.0
     */
    _setInter: function _setInter() {
      var self = this;

      self._execAction('_setInter', 0);

      if (self._changingLayout && self.animation.animateChangeLayout) {
        self._$toShow.css('display', self._newDisplay);

        if (self._changingClass) {
          self._$container.removeClass(self.layout.containerClass).addClass(self._newClass);
        }
      } else {
        self._$toShow.css('display', self.layout.display);
      }

      self._execAction('_setInter', 1);
    },

    /**
     * Get Intermediate Mix Data
     * @since 2.0.0
     */
    _getInterMixData: function _getInterMixData() {
      var self = this;

      self._execAction('_getInterMixData', 0);

      for (var i = 0; i < self._$toShow.length; i++) {
        var el = self._$toShow[i];

        self._getTargetData(el, 'inter');
      }

      for (var i = 0; i < self._$pre.length; i++) {
        var el = self._$pre[i];

        self._getTargetData(el, 'inter');
      }

      self._execAction('_getInterMixData', 1);
    },

    /**
     * Set Final Positions
     * @since 2.0.0
     */
    _setFinal: function _setFinal() {
      var self = this;

      self._execAction('_setFinal', 0);

      self._sorting && self._printSort();

      self._$toHide.removeStyle('display');

      if (self._changingLayout && self.animation.animateChangeLayout) {
        self._$pre.css('display', self._newDisplay);
      }

      self._execAction('_setFinal', 1);
    },

    /**
     * Get Final Mix Data
     * @since 2.0.0
     */
    _getFinalMixData: function _getFinalMixData() {
      var self = this;

      self._execAction('_getFinalMixData', 0);

      for (var i = 0; i < self._$toShow.length; i++) {
        var el = self._$toShow[i];

        self._getTargetData(el, 'final');
      }

      for (var i = 0; i < self._$pre.length; i++) {
        var el = self._$pre[i];

        self._getTargetData(el, 'final');
      }

      self._newHeight = self._incPadding ? self._$parent.outerHeight() : self._$parent.height();
      self._sorting && self._printSort(true);

      self._$toShow.removeStyle('display');

      self._$pre.css('display', self.layout.display);

      if (self._changingClass && self.animation.animateChangeLayout) {
        self._$container.removeClass(self._newClass).addClass(self.layout.containerClass);
      }

      self._execAction('_getFinalMixData', 1);
    },

    /**
     * Prepare Targets
     * @since 2.0.0
     */
    _prepTargets: function _prepTargets() {
      var self = this,
          transformCSS = {
        _in: self._getPrefixedCSS('transform', self.effects.transformIn),
        _out: self._getPrefixedCSS('transform', self.effects.transformOut)
      };

      self._execAction('_prepTargets', 0);

      if (self.animation.animateResizeContainer) {
        self._$parent.css('height', self._startHeight + 'px');
      }

      for (var i = 0; i < self._$toShow.length; i++) {
        var el = self._$toShow[i],
            $el = $(el);
        el.style.opacity = self.effects.opacity;
        el.style.display = self._changingLayout && self.animation.animateChangeLayout ? self._newDisplay : self.layout.display;
        $el.css(transformCSS._in);

        if (self.animation.animateResizeTargets) {
          el.style.width = el.dataset.finalWidth + 'px';
          el.style.height = el.dataset.finalHeight + 'px';
          el.style.marginRight = -(el.dataset.finalWidth - el.dataset.interWidth) + el.dataset.finalMarginRight * 1 + 'px';
          el.style.marginBottom = -(el.dataset.finalHeight - el.dataset.interHeight) + el.dataset.finalMarginBottom * 1 + 'px';
        }
      }

      for (var i = 0; i < self._$pre.length; i++) {
        var el = self._$pre[i],
            $el = $(el),
            translate = {
          x: el.dataset.origPosX - el.dataset.interPosX,
          y: el.dataset.origPosY - el.dataset.interPosY
        },
            transformCSS = self._getPrefixedCSS('transform', 'translate(' + translate.x + 'px,' + translate.y + 'px)');

        $el.css(transformCSS);

        if (self.animation.animateResizeTargets) {
          el.style.width = el.dataset.origWidth + 'px';
          el.style.height = el.dataset.origHeight + 'px';

          if (el.dataset.origWidth - el.dataset.finalWidth) {
            el.style.marginRight = -(el.dataset.origWidth - el.dataset.interWidth) + el.dataset.origMarginRight * 1 + 'px';
          }

          if (el.dataset.origHeight - el.dataset.finalHeight) {
            el.style.marginBottom = -(el.dataset.origHeight - el.dataset.interHeight) + el.dataset.origMarginBottom * 1 + 'px';
          }
        }
      }

      self._execAction('_prepTargets', 1);
    },

    /**
     * Animate Targets
     * @since 2.0.0
     */
    _animateTargets: function _animateTargets() {
      var self = this;

      self._execAction('_animateTargets', 0);

      self._targetsDone = 0;
      self._targetsBound = 0;

      self._$parent.css(self._getPrefixedCSS('perspective', self.animation.perspectiveDistance + 'px')).css(self._getPrefixedCSS('perspective-origin', self.animation.perspectiveOrigin));

      if (self.animation.animateResizeContainer) {
        self._$parent.css(self._getPrefixedCSS('transition', 'height ' + self.animation.duration + 'ms ease')).css('height', self._newHeight + 'px');
      }

      for (var i = 0; i < self._$toShow.length; i++) {
        var el = self._$toShow[i],
            $el = $(el),
            translate = {
          x: el.dataset.finalPosX - el.dataset.interPosX,
          y: el.dataset.finalPosY - el.dataset.interPosY
        },
            delay = self._getDelay(i),
            toShowCSS = {};

        el.style.opacity = '';

        for (var j = 0; j < 2; j++) {
          var a = j === 0 ? a = self._prefix : '';

          if (self._ff && self._ff <= 20) {
            toShowCSS[a + 'transition-property'] = 'all';
            toShowCSS[a + 'transition-timing-function'] = self.animation.easing + 'ms';
            toShowCSS[a + 'transition-duration'] = self.animation.duration + 'ms';
          }

          toShowCSS[a + 'transition-delay'] = delay + 'ms';
          toShowCSS[a + 'transform'] = 'translate(' + translate.x + 'px,' + translate.y + 'px)';
        }

        if (self.effects.transform || self.effects.opacity) {
          self._bindTargetDone($el);
        }

        self._ff && self._ff <= 20 ? $el.css(toShowCSS) : $el.css(self.effects.transition).css(toShowCSS);
      }

      for (var i = 0; i < self._$pre.length; i++) {
        var el = self._$pre[i],
            $el = $(el),
            translate = {
          x: el.dataset.finalPosX - el.dataset.interPosX,
          y: el.dataset.finalPosY - el.dataset.interPosY
        },
            delay = self._getDelay(i);

        if (!(el.dataset.finalPosX === el.dataset.origPosX && el.dataset.finalPosY === el.dataset.origPosY)) {
          self._bindTargetDone($el);
        }

        $el.css(self._getPrefixedCSS('transition', 'all ' + self.animation.duration + 'ms ' + self.animation.easing + ' ' + delay + 'ms'));
        $el.css(self._getPrefixedCSS('transform', 'translate(' + translate.x + 'px,' + translate.y + 'px)'));

        if (self.animation.animateResizeTargets) {
          if (el.dataset.origWidth - el.dataset.finalWidth && el.dataset.finalWidth * 1) {
            el.style.width = el.dataset.finalWidth + 'px';
            el.style.marginRight = -(el.dataset.finalWidth - el.dataset.interWidth) + el.dataset.finalMarginRight * 1 + 'px';
          }

          if (el.dataset.origHeight - el.dataset.finalHeight && el.dataset.finalHeight * 1) {
            el.style.height = el.dataset.finalHeight + 'px';
            el.style.marginBottom = -(el.dataset.finalHeight - el.dataset.interHeight) + el.dataset.finalMarginBottom * 1 + 'px';
          }
        }
      }

      if (self._changingClass) {
        self._$container.removeClass(self.layout.containerClass).addClass(self._newClass);
      }

      for (var i = 0; i < self._$toHide.length; i++) {
        var el = self._$toHide[i],
            $el = $(el),
            delay = self._getDelay(i),
            toHideCSS = {};

        for (var j = 0; j < 2; j++) {
          var a = j === 0 ? a = self._prefix : '';
          toHideCSS[a + 'transition-delay'] = delay + 'ms';
          toHideCSS[a + 'transform'] = self.effects.transformOut;
          toHideCSS.opacity = self.effects.opacity;
        }

        $el.css(self.effects.transition).css(toHideCSS);

        if (self.effects.transform || self.effects.opacity) {
          self._bindTargetDone($el);
        }

        ;
      }

      self._execAction('_animateTargets', 1);
    },

    /**
     * Bind Targets TransitionEnd
     * @since 2.0.0
     * @param {object} $el
     */
    _bindTargetDone: function _bindTargetDone($el) {
      var self = this,
          el = $el[0];

      self._execAction('_bindTargetDone', 0, arguments);

      if (!el.dataset.bound) {
        el.dataset.bound = true;
        self._targetsBound++;
        $el.on('webkitTransitionEnd.mixItUp transitionend.mixItUp', function (e) {
          if ((e.originalEvent.propertyName.indexOf('transform') > -1 || e.originalEvent.propertyName.indexOf('opacity') > -1) && $(e.originalEvent.target).is(self.selectors.target)) {
            $el.off('.mixItUp');
            delete el.dataset.bound;

            self._targetDone();
          }
        });
      }

      self._execAction('_bindTargetDone', 1, arguments);
    },

    /**
     * Target Done
     * @since 2.0.0
     */
    _targetDone: function _targetDone() {
      var self = this;

      self._execAction('_targetDone', 0);

      self._targetsDone++;
      self._targetsDone === self._targetsBound && self._cleanUp();

      self._execAction('_targetDone', 1);
    },

    /**
     * Clean Up
     * @since 2.0.0
     */
    _cleanUp: function _cleanUp() {
      var self = this,
          targetStyles = self.animation.animateResizeTargets ? 'transform opacity width height margin-bottom margin-right' : 'transform opacity',
          unBrake = function unBrake() {
        self._$targets.removeStyle('transition', self._prefix);
      };

      self._execAction('_cleanUp', 0);

      !self._changingLayout ? self._$show.css('display', self.layout.display) : self._$show.css('display', self._newDisplay);

      self._$targets.css(self._brake);

      self._$targets.removeStyle(targetStyles, self._prefix).removeAttr('data-inter-pos-x data-inter-pos-y data-final-pos-x data-final-pos-y data-orig-pos-x data-orig-pos-y data-orig-height data-orig-width data-final-height data-final-width data-inter-width data-inter-height data-orig-margin-right data-orig-margin-bottom data-inter-margin-right data-inter-margin-bottom data-final-margin-right data-final-margin-bottom');

      self._$hide.removeStyle('display');

      self._$parent.removeStyle('height transition perspective-distance perspective perspective-origin-x perspective-origin-y perspective-origin perspectiveOrigin', self._prefix);

      if (self._sorting) {
        self._printSort();

        self._activeSort = self._newSortString;
        self._sorting = false;
      }

      if (self._changingLayout) {
        if (self._changingDisplay) {
          self.layout.display = self._newDisplay;
          self._changingDisplay = false;
        }

        if (self._changingClass) {
          self._$parent.removeClass(self.layout.containerClass).addClass(self._newClass);

          self.layout.containerClass = self._newClass;
          self._changingClass = false;
        }

        self._changingLayout = false;
      }

      self._refresh();

      self._buildState();

      if (self._state.fail) {
        self._$container.addClass(self.layout.containerClassFail);
      }

      self._$show = $();
      self._$hide = $();

      if (window.requestAnimationFrame) {
        requestAnimationFrame(unBrake);
      }

      self._mixing = false;

      if (typeof self.callbacks._user === 'function') {
        self.callbacks._user.call(self._domNode, self._state, self);
      }

      if (typeof self.callbacks.onMixEnd === 'function') {
        self.callbacks.onMixEnd.call(self._domNode, self._state, self);
      }

      self._$container.trigger('mixEnd', [self._state, self]);

      if (self._state.fail) {
        typeof self.callbacks.onMixFail === 'function' && self.callbacks.onMixFail.call(self._domNode, self._state, self);

        self._$container.trigger('mixFail', [self._state, self]);
      }

      if (self._loading) {
        typeof self.callbacks.onMixLoad === 'function' && self.callbacks.onMixLoad.call(self._domNode, self._state, self);

        self._$container.trigger('mixLoad', [self._state, self]);
      }

      if (self._queue.length) {
        self._execAction('_queue', 0);

        self.multiMix(self._queue[0][0], self._queue[0][1], self._queue[0][2]);

        self._queue.splice(0, 1);
      }

      self._execAction('_cleanUp', 1);

      self._loading = false;
    },

    /**
     * Get Prefixed CSS
     * @since 2.0.0
     * @param {string} property
     * @param {string} value
     * @param {boolean} prefixValue
     * @return {object} styles
     */
    _getPrefixedCSS: function _getPrefixedCSS(property, value, prefixValue) {
      var self = this,
          styles = {},
          prefix = '',
          i = -1;

      for (i = 0; i < 2; i++) {
        prefix = i === 0 ? self._prefix : '';
        prefixValue ? styles[prefix + property] = prefix + value : styles[prefix + property] = value;
      }

      return self._execFilter('_getPrefixedCSS', styles, arguments);
    },

    /**
     * Get Delay
     * @since 2.0.0
     * @param {number} i
     * @return {number} delay
     */
    _getDelay: function _getDelay(i) {
      var self = this,
          n = typeof self.animation.staggerSequence === 'function' ? self.animation.staggerSequence.call(self._domNode, i, self._state) : i,
          delay = self.animation.stagger ? n * self.animation.staggerDuration : 0;
      return self._execFilter('_getDelay', delay, arguments);
    },

    /**
     * Parse MultiMix Arguments
     * @since 2.0.0
     * @param {array} args
     * @return {object} output
     */
    _parseMultiMixArgs: function _parseMultiMixArgs(args) {
      var self = this,
          output = {
        command: null,
        animate: self.animation.enable,
        callback: null
      };

      for (var i = 0; i < args.length; i++) {
        var arg = args[i];

        if (arg !== null) {
          if (_typeof(arg) === 'object' || typeof arg === 'string') {
            output.command = arg;
          } else if (typeof arg === 'boolean') {
            output.animate = arg;
          } else if (typeof arg === 'function') {
            output.callback = arg;
          }
        }
      }

      return self._execFilter('_parseMultiMixArgs', output, arguments);
    },

    /**
     * Parse Insert Arguments
     * @since 2.0.0
     * @param {array} args
     * @return {object} output
     */
    _parseInsertArgs: function _parseInsertArgs(args) {
      var self = this,
          output = {
        index: 0,
        $object: $(),
        multiMix: {
          filter: self._state.activeFilter
        },
        callback: null
      };

      for (var i = 0; i < args.length; i++) {
        var arg = args[i];

        if (typeof arg === 'number') {
          output.index = arg;
        } else if (_typeof(arg) === 'object' && arg instanceof $) {
          output.$object = arg;
        } else if (_typeof(arg) === 'object' && self._helpers._isElement(arg)) {
          output.$object = $(arg);
        } else if (_typeof(arg) === 'object' && arg !== null) {
          output.multiMix = arg;
        } else if (typeof arg === 'boolean' && !arg) {
          output.multiMix = false;
        } else if (typeof arg === 'function') {
          output.callback = arg;
        }
      }

      return self._execFilter('_parseInsertArgs', output, arguments);
    },

    /**
     * Execute Action
     * @since 2.0.0
     * @param {string} methodName
     * @param {boolean} isPost
     * @param {array} args
     */
    _execAction: function _execAction(methodName, isPost, args) {
      var self = this,
          context = isPost ? 'post' : 'pre';

      if (!self._actions.isEmptyObject && self._actions.hasOwnProperty(methodName)) {
        for (var key in self._actions[methodName][context]) {
          self._actions[methodName][context][key].call(self, args);
        }
      }
    },

    /**
     * Execute Filter
     * @since 2.0.0
     * @param {string} methodName
     * @param {mixed} value
     * @return {mixed} value
     */
    _execFilter: function _execFilter(methodName, value, args) {
      var self = this;

      if (!self._filters.isEmptyObject && self._filters.hasOwnProperty(methodName)) {
        for (var key in self._filters[methodName]) {
          return self._filters[methodName][key].call(self, args);
        }
      } else {
        return value;
      }
    },

    /* Helpers
    ---------------------------------------------------------------------- */
    _helpers: {
      /**
       * CamelCase
       * @since 2.0.0
       * @param {string}
       * @return {string}
       */
      _camelCase: function _camelCase(string) {
        return string.replace(/-([a-z])/g, function (g) {
          return g[1].toUpperCase();
        });
      },

      /**
       * Is Element
       * @since 2.1.3
       * @param {object} element to test
       * @return {boolean}
       */
      _isElement: function _isElement(el) {
        if (window.HTMLElement) {
          return el instanceof HTMLElement;
        } else {
          return el !== null && el.nodeType === 1 && el.nodeName === 'string';
        }
      }
    },

    /* Public Methods
    ---------------------------------------------------------------------- */

    /**
     * Is Mixing
     * @since 2.0.0
     * @return {boolean}
     */
    isMixing: function isMixing() {
      var self = this;
      return self._execFilter('isMixing', self._mixing);
    },

    /**
     * Filter (public)
     * @since 2.0.0
     * @param {array} arguments
     */
    filter: function filter() {
      var self = this,
          args = self._parseMultiMixArgs(arguments);

      self._clicking && (self._toggleString = '');
      self.multiMix({
        filter: args.command
      }, args.animate, args.callback);
    },

    /**
     * Sort (public)
     * @since 2.0.0
     * @param {array} arguments
     */
    sort: function sort() {
      var self = this,
          args = self._parseMultiMixArgs(arguments);

      self.multiMix({
        sort: args.command
      }, args.animate, args.callback);
    },

    /**
     * Change Layout (public)
     * @since 2.0.0
     * @param {array} arguments
     */
    changeLayout: function changeLayout() {
      var self = this,
          args = self._parseMultiMixArgs(arguments);

      self.multiMix({
        changeLayout: args.command
      }, args.animate, args.callback);
    },

    /**
     * MultiMix
     * @since 2.0.0
     * @param {array} arguments
     */
    multiMix: function multiMix() {
      var self = this,
          args = self._parseMultiMixArgs(arguments);

      self._execAction('multiMix', 0, arguments);

      if (!self._mixing) {
        if (self.controls.enable && !self._clicking) {
          self.controls.toggleFilterButtons && self._buildToggleArray();

          self._updateControls(args.command, self.controls.toggleFilterButtons);
        }

        self._queue.length < 2 && (self._clicking = false);
        delete self.callbacks._user;
        if (args.callback) self.callbacks._user = args.callback;
        var sort = args.command.sort,
            filter = args.command.filter,
            changeLayout = args.command.changeLayout;

        self._refresh();

        if (sort) {
          self._newSort = self._parseSort(sort);
          self._newSortString = sort;
          self._sorting = true;

          self._sort();
        }

        if (filter !== undf) {
          filter = filter === 'all' ? self.selectors.target : filter;
          self._activeFilter = filter;
        }

        self._filter();

        if (changeLayout) {
          self._newDisplay = typeof changeLayout === 'string' ? changeLayout : changeLayout.display || self.layout.display;
          self._newClass = changeLayout.containerClass || '';

          if (self._newDisplay !== self.layout.display || self._newClass !== self.layout.containerClass) {
            self._changingLayout = true;
            self._changingClass = self._newClass !== self.layout.containerClass;
            self._changingDisplay = self._newDisplay !== self.layout.display;
          }
        }

        self._$targets.css(self._brake);

        self._goMix(args.animate ^ self.animation.enable ? args.animate : self.animation.enable);

        self._execAction('multiMix', 1, arguments);
      } else {
        if (self.animation.queue && self._queue.length < self.animation.queueLimit) {
          self._queue.push(arguments);

          self.controls.enable && !self._clicking && self._updateControls(args.command);

          self._execAction('multiMixQueue', 1, arguments);
        } else {
          if (typeof self.callbacks.onMixBusy === 'function') {
            self.callbacks.onMixBusy.call(self._domNode, self._state, self);
          }

          self._$container.trigger('mixBusy', [self._state, self]);

          self._execAction('multiMixBusy', 1, arguments);
        }
      }
    },

    /**
     * Insert
     * @since 2.0.0
     * @param {array} arguments
     */
    insert: function insert() {
      var self = this,
          args = self._parseInsertArgs(arguments),
          callback = typeof args.callback === 'function' ? args.callback : null,
          frag = document.createDocumentFragment(),
          target = function () {
        self._refresh();

        if (self._$targets.length) {
          return args.index < self._$targets.length || !self._$targets.length ? self._$targets[args.index] : self._$targets[self._$targets.length - 1].nextElementSibling;
        } else {
          return self._$parent[0].children[0];
        }
      }();

      self._execAction('insert', 0, arguments);

      if (args.$object) {
        for (var i = 0; i < args.$object.length; i++) {
          var el = args.$object[i];
          frag.appendChild(el);
          frag.appendChild(document.createTextNode(' '));
        }

        self._$parent[0].insertBefore(frag, target);
      }

      self._execAction('insert', 1, arguments);

      if (_typeof(args.multiMix) === 'object') {
        self.multiMix(args.multiMix, callback);
      }
    },

    /**
     * Prepend
     * @since 2.0.0
     * @param {array} arguments
     */
    prepend: function prepend() {
      var self = this,
          args = self._parseInsertArgs(arguments);

      self.insert(0, args.$object, args.multiMix, args.callback);
    },

    /**
     * Append
     * @since 2.0.0
     * @param {array} arguments
     */
    append: function append() {
      var self = this,
          args = self._parseInsertArgs(arguments);

      self.insert(self._state.totalTargets, args.$object, args.multiMix, args.callback);
    },

    /**
     * Get Option
     * @since 2.0.0
     * @param {string} string
     * @return {mixed} value
     */
    getOption: function getOption(string) {
      var self = this,
          getProperty = function getProperty(obj, prop) {
        var parts = prop.split('.'),
            last = parts.pop(),
            l = parts.length,
            i = 1,
            current = parts[0] || prop;

        while ((obj = obj[current]) && i < l) {
          current = parts[i];
          i++;
        }

        if (obj !== undf) {
          return obj[last] !== undf ? obj[last] : obj;
        }
      };

      return string ? self._execFilter('getOption', getProperty(self, string), arguments) : self;
    },

    /**
     * Set Options
     * @since 2.0.0
     * @param {object} config
     */
    setOptions: function setOptions(config) {
      var self = this;

      self._execAction('setOptions', 0, arguments);

      _typeof(config) === 'object' && $.extend(true, self, config);

      self._execAction('setOptions', 1, arguments);
    },

    /**
     * Get State
     * @since 2.0.0
     * @return {object} state
     */
    getState: function getState() {
      var self = this;
      return self._execFilter('getState', self._state, self);
    },

    /**
     * Force Refresh
     * @since 2.1.2
     */
    forceRefresh: function forceRefresh() {
      var self = this;

      self._refresh(false, true);
    },

    /**
     * Destroy
     * @since 2.0.0
     * @param {boolean} hideAll
     */
    destroy: function destroy(hideAll) {
      var self = this,
          filters = $.MixItUp.prototype._bound._filter,
          sorts = $.MixItUp.prototype._bound._sort;

      self._execAction('destroy', 0, arguments);

      self._$body.add($(self.selectors.sort)).add($(self.selectors.filter)).off('.mixItUp');

      for (var i = 0; i < self._$targets.length; i++) {
        var target = self._$targets[i];
        hideAll && (target.style.display = '');
        delete target.mixParent;
      }

      self._execAction('destroy', 1, arguments);

      if (filters[self.selectors.filter] && filters[self.selectors.filter] > 1) {
        filters[self.selectors.filter]--;
      } else if (filters[self.selectors.filter] === 1) {
        delete filters[self.selectors.filter];
      }

      if (sorts[self.selectors.sort] && sorts[self.selectors.sort] > 1) {
        sorts[self.selectors.sort]--;
      } else if (sorts[self.selectors.sort] === 1) {
        delete sorts[self.selectors.sort];
      }

      delete $.MixItUp.prototype._instances[self._id];
    }
  };
  /* jQuery Methods
  ---------------------------------------------------------------------- */

  /**
   * jQuery .mixItUp() method
   * @since 2.0.0
   * @extends $.fn
   */

  $.fn.mixItUp = function () {
    var args = arguments,
        dataReturn = [],
        eachReturn,
        _instantiate = function _instantiate(domNode, settings) {
      var instance = new $.MixItUp(),
          rand = function rand() {
        return ('00000' + (Math.random() * 16777216 << 0).toString(16)).substr(-6).toUpperCase();
      };

      instance._execAction('_instantiate', 0, arguments);

      domNode.id = !domNode.id ? 'MixItUp' + rand() : domNode.id;

      if (!instance._instances[domNode.id]) {
        instance._instances[domNode.id] = instance;

        instance._init(domNode, settings);
      }

      instance._execAction('_instantiate', 1, arguments);
    };

    eachReturn = this.each(function () {
      if (args && typeof args[0] === 'string') {
        var instance = $.MixItUp.prototype._instances[this.id];

        if (args[0] === 'isLoaded') {
          dataReturn.push(instance ? true : false);
        } else {
          var data = instance[args[0]](args[1], args[2], args[3]);
          if (data !== undf) dataReturn.push(data);
        }
      } else {
        _instantiate(this, args[0]);
      }
    });

    if (dataReturn.length) {
      return dataReturn.length > 1 ? dataReturn : dataReturn[0];
    } else {
      return eachReturn;
    }
  };
  /**
   * jQuery .removeStyle() method
   * @since 2.0.0
   * @extends $.fn
   */


  $.fn.removeStyle = function (style, prefix) {
    prefix = prefix ? prefix : '';
    return this.each(function () {
      var el = this,
          styles = style.split(' ');

      for (var i = 0; i < styles.length; i++) {
        for (var j = 0; j < 4; j++) {
          switch (j) {
            case 0:
              var prop = styles[i];
              break;

            case 1:
              var prop = $.MixItUp.prototype._helpers._camelCase(prop);

              break;

            case 2:
              var prop = prefix + styles[i];
              break;

            case 3:
              var prop = $.MixItUp.prototype._helpers._camelCase(prefix + styles[i]);

          }

          if (el.style[prop] !== undf && typeof el.style[prop] !== 'unknown' && el.style[prop].length > 0) {
            el.style[prop] = '';
          }

          if (!prefix && j === 1) break;
        }
      }

      if (el.attributes && el.attributes.style && el.attributes.style !== undf && el.attributes.style.value === '') {
        el.attributes.removeNamedItem('style');
      }
    });
  };
})(jQuery);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

/***/ }),

/***/ "./src/Resources/views/theme/assets/js/owl.js":
/*!****************************************************!*\
  !*** ./src/Resources/views/theme/assets/js/owl.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(__webpack_provided_window_dot_jQuery, jQuery) {function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * Owl Carousel v2.2.0
 * Copyright 2013-2016 David Deutsch
 * Licensed under MIT (https://github.com/OwlCarousel2/OwlCarousel2/blob/master/LICENSE)
 */

/**
 * Owl carousel
 * @version 2.1.6
 * @author Bartosz Wojciechowski
 * @author David Deutsch
 * @license The MIT License (MIT)
 * @todo Lazy Load Icon
 * @todo prevent animationend bubling
 * @todo itemsScaleUp
 * @todo Test Zepto
 * @todo stagePadding calculate wrong active classes
 */
;

(function ($, window, document, undefined) {
  /**
   * Creates a carousel.
   * @class The Owl Carousel.
   * @public
   * @param {HTMLElement|jQuery} element - The element to create the carousel for.
   * @param {Object} [options] - The options
   */
  function Owl(element, options) {
    /**
     * Current settings for the carousel.
     * @public
     */
    this.settings = null;
    /**
     * Current options set by the caller including defaults.
     * @public
     */

    this.options = $.extend({}, Owl.Defaults, options);
    /**
     * Plugin element.
     * @public
     */

    this.$element = $(element);
    /**
     * Proxied event handlers.
     * @protected
     */

    this._handlers = {};
    /**
     * References to the running plugins of this carousel.
     * @protected
     */

    this._plugins = {};
    /**
     * Currently suppressed events to prevent them from beeing retriggered.
     * @protected
     */

    this._supress = {};
    /**
     * Absolute current position.
     * @protected
     */

    this._current = null;
    /**
     * Animation speed in milliseconds.
     * @protected
     */

    this._speed = null;
    /**
     * Coordinates of all items in pixel.
     * @todo The name of this member is missleading.
     * @protected
     */

    this._coordinates = [];
    /**
     * Current breakpoint.
     * @todo Real media queries would be nice.
     * @protected
     */

    this._breakpoint = null;
    /**
     * Current width of the plugin element.
     */

    this._width = null;
    /**
     * All real items.
     * @protected
     */

    this._items = [];
    /**
     * All cloned items.
     * @protected
     */

    this._clones = [];
    /**
     * Merge values of all items.
     * @todo Maybe this could be part of a plugin.
     * @protected
     */

    this._mergers = [];
    /**
     * Widths of all items.
     */

    this._widths = [];
    /**
     * Invalidated parts within the update process.
     * @protected
     */

    this._invalidated = {};
    /**
     * Ordered list of workers for the update process.
     * @protected
     */

    this._pipe = [];
    /**
     * Current state information for the drag operation.
     * @todo #261
     * @protected
     */

    this._drag = {
      time: null,
      target: null,
      pointer: null,
      stage: {
        start: null,
        current: null
      },
      direction: null
    };
    /**
     * Current state information and their tags.
     * @type {Object}
     * @protected
     */

    this._states = {
      current: {},
      tags: {
        'initializing': ['busy'],
        'animating': ['busy'],
        'dragging': ['interacting']
      }
    };
    $.each(['onResize', 'onThrottledResize'], $.proxy(function (i, handler) {
      this._handlers[handler] = $.proxy(this[handler], this);
    }, this));
    $.each(Owl.Plugins, $.proxy(function (key, plugin) {
      this._plugins[key.charAt(0).toLowerCase() + key.slice(1)] = new plugin(this);
    }, this));
    $.each(Owl.Workers, $.proxy(function (priority, worker) {
      this._pipe.push({
        'filter': worker.filter,
        'run': $.proxy(worker.run, this)
      });
    }, this));
    this.setup();
    this.initialize();
  }
  /**
   * Default options for the carousel.
   * @public
   */


  Owl.Defaults = {
    items: 3,
    loop: false,
    center: false,
    rewind: false,
    mouseDrag: true,
    touchDrag: true,
    pullDrag: true,
    freeDrag: false,
    margin: 0,
    stagePadding: 0,
    merge: false,
    mergeFit: true,
    autoWidth: false,
    startPosition: 0,
    rtl: false,
    smartSpeed: 250,
    fluidSpeed: false,
    dragEndSpeed: false,
    responsive: {},
    responsiveRefreshRate: 200,
    responsiveBaseElement: window,
    fallbackEasing: 'swing',
    info: false,
    nestedItemSelector: false,
    itemElement: 'div',
    stageElement: 'div',
    refreshClass: 'owl-refresh',
    loadedClass: 'owl-loaded',
    loadingClass: 'owl-loading',
    rtlClass: 'owl-rtl',
    responsiveClass: 'owl-responsive',
    dragClass: 'owl-drag',
    itemClass: 'owl-item',
    stageClass: 'owl-stage',
    stageOuterClass: 'owl-stage-outer',
    grabClass: 'owl-grab'
  };
  /**
   * Enumeration for width.
   * @public
   * @readonly
   * @enum {String}
   */

  Owl.Width = {
    Default: 'default',
    Inner: 'inner',
    Outer: 'outer'
  };
  /**
   * Enumeration for types.
   * @public
   * @readonly
   * @enum {String}
   */

  Owl.Type = {
    Event: 'event',
    State: 'state'
  };
  /**
   * Contains all registered plugins.
   * @public
   */

  Owl.Plugins = {};
  /**
   * List of workers involved in the update process.
   */

  Owl.Workers = [{
    filter: ['width', 'settings'],
    run: function run() {
      this._width = this.$element.width();
    }
  }, {
    filter: ['width', 'items', 'settings'],
    run: function run(cache) {
      cache.current = this._items && this._items[this.relative(this._current)];
    }
  }, {
    filter: ['items', 'settings'],
    run: function run() {
      this.$stage.children('.cloned').remove();
    }
  }, {
    filter: ['width', 'items', 'settings'],
    run: function run(cache) {
      var margin = this.settings.margin || '',
          grid = !this.settings.autoWidth,
          rtl = this.settings.rtl,
          css = {
        'width': 'auto',
        'margin-left': rtl ? margin : '',
        'margin-right': rtl ? '' : margin
      };
      !grid && this.$stage.children().css(css);
      cache.css = css;
    }
  }, {
    filter: ['width', 'items', 'settings'],
    run: function run(cache) {
      var width = (this.width() / this.settings.items).toFixed(3) - this.settings.margin,
          merge = null,
          iterator = this._items.length,
          grid = !this.settings.autoWidth,
          widths = [];
      cache.items = {
        merge: false,
        width: width
      };

      while (iterator--) {
        merge = this._mergers[iterator];
        merge = this.settings.mergeFit && Math.min(merge, this.settings.items) || merge;
        cache.items.merge = merge > 1 || cache.items.merge;
        widths[iterator] = !grid ? this._items[iterator].width() : width * merge;
      }

      this._widths = widths;
    }
  }, {
    filter: ['items', 'settings'],
    run: function run() {
      var clones = [],
          items = this._items,
          settings = this.settings,
          view = Math.max(settings.items * 2, 4),
          size = Math.ceil(items.length / 2) * 2,
          repeat = settings.loop && items.length ? settings.rewind ? view : Math.max(view, size) : 0,
          append = '',
          prepend = '';
      repeat /= 2;

      while (repeat--) {
        clones.push(this.normalize(clones.length / 2, true));
        append = append + items[clones[clones.length - 1]][0].outerHTML;
        clones.push(this.normalize(items.length - 1 - (clones.length - 1) / 2, true));
        prepend = items[clones[clones.length - 1]][0].outerHTML + prepend;
      }

      this._clones = clones;
      $(append).addClass('cloned').appendTo(this.$stage);
      $(prepend).addClass('cloned').prependTo(this.$stage);
    }
  }, {
    filter: ['width', 'items', 'settings'],
    run: function run() {
      var rtl = this.settings.rtl ? 1 : -1,
          size = this._clones.length + this._items.length,
          iterator = -1,
          previous = 0,
          current = 0,
          coordinates = [];

      while (++iterator < size) {
        previous = coordinates[iterator - 1] || 0;
        current = this._widths[this.relative(iterator)] + this.settings.margin;
        coordinates.push(previous + current * rtl);
      }

      this._coordinates = coordinates;
    }
  }, {
    filter: ['width', 'items', 'settings'],
    run: function run() {
      var padding = this.settings.stagePadding,
          coordinates = this._coordinates,
          css = {
        'width': Math.ceil(Math.abs(coordinates[coordinates.length - 1])) + padding * 2,
        'padding-left': padding || '',
        'padding-right': padding || ''
      };
      this.$stage.css(css);
    }
  }, {
    filter: ['width', 'items', 'settings'],
    run: function run(cache) {
      var iterator = this._coordinates.length,
          grid = !this.settings.autoWidth,
          items = this.$stage.children();

      if (grid && cache.items.merge) {
        while (iterator--) {
          cache.css.width = this._widths[this.relative(iterator)];
          items.eq(iterator).css(cache.css);
        }
      } else if (grid) {
        cache.css.width = cache.items.width;
        items.css(cache.css);
      }
    }
  }, {
    filter: ['items'],
    run: function run() {
      this._coordinates.length < 1 && this.$stage.removeAttr('style');
    }
  }, {
    filter: ['width', 'items', 'settings'],
    run: function run(cache) {
      cache.current = cache.current ? this.$stage.children().index(cache.current) : 0;
      cache.current = Math.max(this.minimum(), Math.min(this.maximum(), cache.current));
      this.reset(cache.current);
    }
  }, {
    filter: ['position'],
    run: function run() {
      this.animate(this.coordinates(this._current));
    }
  }, {
    filter: ['width', 'position', 'items', 'settings'],
    run: function run() {
      var rtl = this.settings.rtl ? 1 : -1,
          padding = this.settings.stagePadding * 2,
          begin = this.coordinates(this.current()) + padding,
          end = begin + this.width() * rtl,
          inner,
          outer,
          matches = [],
          i,
          n;

      for (i = 0, n = this._coordinates.length; i < n; i++) {
        inner = this._coordinates[i - 1] || 0;
        outer = Math.abs(this._coordinates[i]) + padding * rtl;

        if (this.op(inner, '<=', begin) && this.op(inner, '>', end) || this.op(outer, '<', begin) && this.op(outer, '>', end)) {
          matches.push(i);
        }
      }

      this.$stage.children('.active').removeClass('active');
      this.$stage.children(':eq(' + matches.join('), :eq(') + ')').addClass('active');

      if (this.settings.center) {
        this.$stage.children('.center').removeClass('center');
        this.$stage.children().eq(this.current()).addClass('center');
      }
    }
  }];
  /**
   * Initializes the carousel.
   * @protected
   */

  Owl.prototype.initialize = function () {
    this.enter('initializing');
    this.trigger('initialize');
    this.$element.toggleClass(this.settings.rtlClass, this.settings.rtl);

    if (this.settings.autoWidth && !this.is('pre-loading')) {
      var imgs, nestedSelector, width;
      imgs = this.$element.find('img');
      nestedSelector = this.settings.nestedItemSelector ? '.' + this.settings.nestedItemSelector : undefined;
      width = this.$element.children(nestedSelector).width();

      if (imgs.length && width <= 0) {
        this.preloadAutoWidthImages(imgs);
      }
    }

    this.$element.addClass(this.options.loadingClass); // create stage

    this.$stage = $('<' + this.settings.stageElement + ' class="' + this.settings.stageClass + '"/>').wrap('<div class="' + this.settings.stageOuterClass + '"/>'); // append stage

    this.$element.append(this.$stage.parent()); // append content

    this.replace(this.$element.children().not(this.$stage.parent())); // check visibility

    if (this.$element.is(':visible')) {
      // update view
      this.refresh();
    } else {
      // invalidate width
      this.invalidate('width');
    }

    this.$element.removeClass(this.options.loadingClass).addClass(this.options.loadedClass); // register event handlers

    this.registerEventHandlers();
    this.leave('initializing');
    this.trigger('initialized');
  };
  /**
   * Setups the current settings.
   * @todo Remove responsive classes. Why should adaptive designs be brought into IE8?
   * @todo Support for media queries by using `matchMedia` would be nice.
   * @public
   */


  Owl.prototype.setup = function () {
    var viewport = this.viewport(),
        overwrites = this.options.responsive,
        match = -1,
        settings = null;

    if (!overwrites) {
      settings = $.extend({}, this.options);
    } else {
      $.each(overwrites, function (breakpoint) {
        if (breakpoint <= viewport && breakpoint > match) {
          match = Number(breakpoint);
        }
      });
      settings = $.extend({}, this.options, overwrites[match]);

      if (typeof settings.stagePadding === 'function') {
        settings.stagePadding = settings.stagePadding();
      }

      delete settings.responsive; // responsive class

      if (settings.responsiveClass) {
        this.$element.attr('class', this.$element.attr('class').replace(new RegExp('(' + this.options.responsiveClass + '-)\\S+\\s', 'g'), '$1' + match));
      }
    }

    this.trigger('change', {
      property: {
        name: 'settings',
        value: settings
      }
    });
    this._breakpoint = match;
    this.settings = settings;
    this.invalidate('settings');
    this.trigger('changed', {
      property: {
        name: 'settings',
        value: this.settings
      }
    });
  };
  /**
   * Updates option logic if necessery.
   * @protected
   */


  Owl.prototype.optionsLogic = function () {
    if (this.settings.autoWidth) {
      this.settings.stagePadding = false;
      this.settings.merge = false;
    }
  };
  /**
   * Prepares an item before add.
   * @todo Rename event parameter `content` to `item`.
   * @protected
   * @returns {jQuery|HTMLElement} - The item container.
   */


  Owl.prototype.prepare = function (item) {
    var event = this.trigger('prepare', {
      content: item
    });

    if (!event.data) {
      event.data = $('<' + this.settings.itemElement + '/>').addClass(this.options.itemClass).append(item);
    }

    this.trigger('prepared', {
      content: event.data
    });
    return event.data;
  };
  /**
   * Updates the view.
   * @public
   */


  Owl.prototype.update = function () {
    var i = 0,
        n = this._pipe.length,
        filter = $.proxy(function (p) {
      return this[p];
    }, this._invalidated),
        cache = {};

    while (i < n) {
      if (this._invalidated.all || $.grep(this._pipe[i].filter, filter).length > 0) {
        this._pipe[i].run(cache);
      }

      i++;
    }

    this._invalidated = {};
    !this.is('valid') && this.enter('valid');
  };
  /**
   * Gets the width of the view.
   * @public
   * @param {Owl.Width} [dimension=Owl.Width.Default] - The dimension to return.
   * @returns {Number} - The width of the view in pixel.
   */


  Owl.prototype.width = function (dimension) {
    dimension = dimension || Owl.Width.Default;

    switch (dimension) {
      case Owl.Width.Inner:
      case Owl.Width.Outer:
        return this._width;

      default:
        return this._width - this.settings.stagePadding * 2 + this.settings.margin;
    }
  };
  /**
   * Refreshes the carousel primarily for adaptive purposes.
   * @public
   */


  Owl.prototype.refresh = function () {
    this.enter('refreshing');
    this.trigger('refresh');
    this.setup();
    this.optionsLogic();
    this.$element.addClass(this.options.refreshClass);
    this.update();
    this.$element.removeClass(this.options.refreshClass);
    this.leave('refreshing');
    this.trigger('refreshed');
  };
  /**
   * Checks window `resize` event.
   * @protected
   */


  Owl.prototype.onThrottledResize = function () {
    window.clearTimeout(this.resizeTimer);
    this.resizeTimer = window.setTimeout(this._handlers.onResize, this.settings.responsiveRefreshRate);
  };
  /**
   * Checks window `resize` event.
   * @protected
   */


  Owl.prototype.onResize = function () {
    if (!this._items.length) {
      return false;
    }

    if (this._width === this.$element.width()) {
      return false;
    }

    if (!this.$element.is(':visible')) {
      return false;
    }

    this.enter('resizing');

    if (this.trigger('resize').isDefaultPrevented()) {
      this.leave('resizing');
      return false;
    }

    this.invalidate('width');
    this.refresh();
    this.leave('resizing');
    this.trigger('resized');
  };
  /**
   * Registers event handlers.
   * @todo Check `msPointerEnabled`
   * @todo #261
   * @protected
   */


  Owl.prototype.registerEventHandlers = function () {
    if ($.support.transition) {
      this.$stage.on($.support.transition.end + '.owl.core', $.proxy(this.onTransitionEnd, this));
    }

    if (this.settings.responsive !== false) {
      this.on(window, 'resize', this._handlers.onThrottledResize);
    }

    if (this.settings.mouseDrag) {
      this.$element.addClass(this.options.dragClass);
      this.$stage.on('mousedown.owl.core', $.proxy(this.onDragStart, this));
      this.$stage.on('dragstart.owl.core selectstart.owl.core', function () {
        return false;
      });
    }

    if (this.settings.touchDrag) {
      this.$stage.on('touchstart.owl.core', $.proxy(this.onDragStart, this));
      this.$stage.on('touchcancel.owl.core', $.proxy(this.onDragEnd, this));
    }
  };
  /**
   * Handles `touchstart` and `mousedown` events.
   * @todo Horizontal swipe threshold as option
   * @todo #261
   * @protected
   * @param {Event} event - The event arguments.
   */


  Owl.prototype.onDragStart = function (event) {
    var stage = null;

    if (event.which === 3) {
      return;
    }

    if ($.support.transform) {
      stage = this.$stage.css('transform').replace(/.*\(|\)| /g, '').split(',');
      stage = {
        x: stage[stage.length === 16 ? 12 : 4],
        y: stage[stage.length === 16 ? 13 : 5]
      };
    } else {
      stage = this.$stage.position();
      stage = {
        x: this.settings.rtl ? stage.left + this.$stage.width() - this.width() + this.settings.margin : stage.left,
        y: stage.top
      };
    }

    if (this.is('animating')) {
      $.support.transform ? this.animate(stage.x) : this.$stage.stop();
      this.invalidate('position');
    }

    this.$element.toggleClass(this.options.grabClass, event.type === 'mousedown');
    this.speed(0);
    this._drag.time = new Date().getTime();
    this._drag.target = $(event.target);
    this._drag.stage.start = stage;
    this._drag.stage.current = stage;
    this._drag.pointer = this.pointer(event);
    $(document).on('mouseup.owl.core touchend.owl.core', $.proxy(this.onDragEnd, this));
    $(document).one('mousemove.owl.core touchmove.owl.core', $.proxy(function (event) {
      var delta = this.difference(this._drag.pointer, this.pointer(event));
      $(document).on('mousemove.owl.core touchmove.owl.core', $.proxy(this.onDragMove, this));

      if (Math.abs(delta.x) < Math.abs(delta.y) && this.is('valid')) {
        return;
      }

      event.preventDefault();
      this.enter('dragging');
      this.trigger('drag');
    }, this));
  };
  /**
   * Handles the `touchmove` and `mousemove` events.
   * @todo #261
   * @protected
   * @param {Event} event - The event arguments.
   */


  Owl.prototype.onDragMove = function (event) {
    var minimum = null,
        maximum = null,
        pull = null,
        delta = this.difference(this._drag.pointer, this.pointer(event)),
        stage = this.difference(this._drag.stage.start, delta);

    if (!this.is('dragging')) {
      return;
    }

    event.preventDefault();

    if (this.settings.loop) {
      minimum = this.coordinates(this.minimum());
      maximum = this.coordinates(this.maximum() + 1) - minimum;
      stage.x = ((stage.x - minimum) % maximum + maximum) % maximum + minimum;
    } else {
      minimum = this.settings.rtl ? this.coordinates(this.maximum()) : this.coordinates(this.minimum());
      maximum = this.settings.rtl ? this.coordinates(this.minimum()) : this.coordinates(this.maximum());
      pull = this.settings.pullDrag ? -1 * delta.x / 5 : 0;
      stage.x = Math.max(Math.min(stage.x, minimum + pull), maximum + pull);
    }

    this._drag.stage.current = stage;
    this.animate(stage.x);
  };
  /**
   * Handles the `touchend` and `mouseup` events.
   * @todo #261
   * @todo Threshold for click event
   * @protected
   * @param {Event} event - The event arguments.
   */


  Owl.prototype.onDragEnd = function (event) {
    var delta = this.difference(this._drag.pointer, this.pointer(event)),
        stage = this._drag.stage.current,
        direction = delta.x > 0 ^ this.settings.rtl ? 'left' : 'right';
    $(document).off('.owl.core');
    this.$element.removeClass(this.options.grabClass);

    if (delta.x !== 0 && this.is('dragging') || !this.is('valid')) {
      this.speed(this.settings.dragEndSpeed || this.settings.smartSpeed);
      this.current(this.closest(stage.x, delta.x !== 0 ? direction : this._drag.direction));
      this.invalidate('position');
      this.update();
      this._drag.direction = direction;

      if (Math.abs(delta.x) > 3 || new Date().getTime() - this._drag.time > 300) {
        this._drag.target.one('click.owl.core', function () {
          return false;
        });
      }
    }

    if (!this.is('dragging')) {
      return;
    }

    this.leave('dragging');
    this.trigger('dragged');
  };
  /**
   * Gets absolute position of the closest item for a coordinate.
   * @todo Setting `freeDrag` makes `closest` not reusable. See #165.
   * @protected
   * @param {Number} coordinate - The coordinate in pixel.
   * @param {String} direction - The direction to check for the closest item. Ether `left` or `right`.
   * @return {Number} - The absolute position of the closest item.
   */


  Owl.prototype.closest = function (coordinate, direction) {
    var position = -1,
        pull = 30,
        width = this.width(),
        coordinates = this.coordinates();

    if (!this.settings.freeDrag) {
      // check closest item
      $.each(coordinates, $.proxy(function (index, value) {
        // on a left pull, check on current index
        if (direction === 'left' && coordinate > value - pull && coordinate < value + pull) {
          position = index; // on a right pull, check on previous index
          // to do so, subtract width from value and set position = index + 1
        } else if (direction === 'right' && coordinate > value - width - pull && coordinate < value - width + pull) {
          position = index + 1;
        } else if (this.op(coordinate, '<', value) && this.op(coordinate, '>', coordinates[index + 1] || value - width)) {
          position = direction === 'left' ? index + 1 : index;
        }

        return position === -1;
      }, this));
    }

    if (!this.settings.loop) {
      // non loop boundries
      if (this.op(coordinate, '>', coordinates[this.minimum()])) {
        position = coordinate = this.minimum();
      } else if (this.op(coordinate, '<', coordinates[this.maximum()])) {
        position = coordinate = this.maximum();
      }
    }

    return position;
  };
  /**
   * Animates the stage.
   * @todo #270
   * @public
   * @param {Number} coordinate - The coordinate in pixels.
   */


  Owl.prototype.animate = function (coordinate) {
    var animate = this.speed() > 0;
    this.is('animating') && this.onTransitionEnd();

    if (animate) {
      this.enter('animating');
      this.trigger('translate');
    }

    if ($.support.transform3d && $.support.transition) {
      this.$stage.css({
        transform: 'translate3d(' + coordinate + 'px,0px,0px)',
        transition: this.speed() / 1000 + 's'
      });
    } else if (animate) {
      this.$stage.animate({
        left: coordinate + 'px'
      }, this.speed(), this.settings.fallbackEasing, $.proxy(this.onTransitionEnd, this));
    } else {
      this.$stage.css({
        left: coordinate + 'px'
      });
    }
  };
  /**
   * Checks whether the carousel is in a specific state or not.
   * @param {String} state - The state to check.
   * @returns {Boolean} - The flag which indicates if the carousel is busy.
   */


  Owl.prototype.is = function (state) {
    return this._states.current[state] && this._states.current[state] > 0;
  };
  /**
   * Sets the absolute position of the current item.
   * @public
   * @param {Number} [position] - The new absolute position or nothing to leave it unchanged.
   * @returns {Number} - The absolute position of the current item.
   */


  Owl.prototype.current = function (position) {
    if (position === undefined) {
      return this._current;
    }

    if (this._items.length === 0) {
      return undefined;
    }

    position = this.normalize(position);

    if (this._current !== position) {
      var event = this.trigger('change', {
        property: {
          name: 'position',
          value: position
        }
      });

      if (event.data !== undefined) {
        position = this.normalize(event.data);
      }

      this._current = position;
      this.invalidate('position');
      this.trigger('changed', {
        property: {
          name: 'position',
          value: this._current
        }
      });
    }

    return this._current;
  };
  /**
   * Invalidates the given part of the update routine.
   * @param {String} [part] - The part to invalidate.
   * @returns {Array.<String>} - The invalidated parts.
   */


  Owl.prototype.invalidate = function (part) {
    if ($.type(part) === 'string') {
      this._invalidated[part] = true;
      this.is('valid') && this.leave('valid');
    }

    return $.map(this._invalidated, function (v, i) {
      return i;
    });
  };
  /**
   * Resets the absolute position of the current item.
   * @public
   * @param {Number} position - The absolute position of the new item.
   */


  Owl.prototype.reset = function (position) {
    position = this.normalize(position);

    if (position === undefined) {
      return;
    }

    this._speed = 0;
    this._current = position;
    this.suppress(['translate', 'translated']);
    this.animate(this.coordinates(position));
    this.release(['translate', 'translated']);
  };
  /**
   * Normalizes an absolute or a relative position of an item.
   * @public
   * @param {Number} position - The absolute or relative position to normalize.
   * @param {Boolean} [relative=false] - Whether the given position is relative or not.
   * @returns {Number} - The normalized position.
   */


  Owl.prototype.normalize = function (position, relative) {
    var n = this._items.length,
        m = relative ? 0 : this._clones.length;

    if (!this.isNumeric(position) || n < 1) {
      position = undefined;
    } else if (position < 0 || position >= n + m) {
      position = ((position - m / 2) % n + n) % n + m / 2;
    }

    return position;
  };
  /**
   * Converts an absolute position of an item into a relative one.
   * @public
   * @param {Number} position - The absolute position to convert.
   * @returns {Number} - The converted position.
   */


  Owl.prototype.relative = function (position) {
    position -= this._clones.length / 2;
    return this.normalize(position, true);
  };
  /**
   * Gets the maximum position for the current item.
   * @public
   * @param {Boolean} [relative=false] - Whether to return an absolute position or a relative position.
   * @returns {Number}
   */


  Owl.prototype.maximum = function (relative) {
    var settings = this.settings,
        maximum = this._coordinates.length,
        iterator,
        reciprocalItemsWidth,
        elementWidth;

    if (settings.loop) {
      maximum = this._clones.length / 2 + this._items.length - 1;
    } else if (settings.autoWidth || settings.merge) {
      iterator = this._items.length;
      reciprocalItemsWidth = this._items[--iterator].width();
      elementWidth = this.$element.width();

      while (iterator--) {
        reciprocalItemsWidth += this._items[iterator].width() + this.settings.margin;

        if (reciprocalItemsWidth > elementWidth) {
          break;
        }
      }

      maximum = iterator + 1;
    } else if (settings.center) {
      maximum = this._items.length - 1;
    } else {
      maximum = this._items.length - settings.items;
    }

    if (relative) {
      maximum -= this._clones.length / 2;
    }

    return Math.max(maximum, 0);
  };
  /**
   * Gets the minimum position for the current item.
   * @public
   * @param {Boolean} [relative=false] - Whether to return an absolute position or a relative position.
   * @returns {Number}
   */


  Owl.prototype.minimum = function (relative) {
    return relative ? 0 : this._clones.length / 2;
  };
  /**
   * Gets an item at the specified relative position.
   * @public
   * @param {Number} [position] - The relative position of the item.
   * @return {jQuery|Array.<jQuery>} - The item at the given position or all items if no position was given.
   */


  Owl.prototype.items = function (position) {
    if (position === undefined) {
      return this._items.slice();
    }

    position = this.normalize(position, true);
    return this._items[position];
  };
  /**
   * Gets an item at the specified relative position.
   * @public
   * @param {Number} [position] - The relative position of the item.
   * @return {jQuery|Array.<jQuery>} - The item at the given position or all items if no position was given.
   */


  Owl.prototype.mergers = function (position) {
    if (position === undefined) {
      return this._mergers.slice();
    }

    position = this.normalize(position, true);
    return this._mergers[position];
  };
  /**
   * Gets the absolute positions of clones for an item.
   * @public
   * @param {Number} [position] - The relative position of the item.
   * @returns {Array.<Number>} - The absolute positions of clones for the item or all if no position was given.
   */


  Owl.prototype.clones = function (position) {
    var odd = this._clones.length / 2,
        even = odd + this._items.length,
        map = function map(index) {
      return index % 2 === 0 ? even + index / 2 : odd - (index + 1) / 2;
    };

    if (position === undefined) {
      return $.map(this._clones, function (v, i) {
        return map(i);
      });
    }

    return $.map(this._clones, function (v, i) {
      return v === position ? map(i) : null;
    });
  };
  /**
   * Sets the current animation speed.
   * @public
   * @param {Number} [speed] - The animation speed in milliseconds or nothing to leave it unchanged.
   * @returns {Number} - The current animation speed in milliseconds.
   */


  Owl.prototype.speed = function (speed) {
    if (speed !== undefined) {
      this._speed = speed;
    }

    return this._speed;
  };
  /**
   * Gets the coordinate of an item.
   * @todo The name of this method is missleanding.
   * @public
   * @param {Number} position - The absolute position of the item within `minimum()` and `maximum()`.
   * @returns {Number|Array.<Number>} - The coordinate of the item in pixel or all coordinates.
   */


  Owl.prototype.coordinates = function (position) {
    var multiplier = 1,
        newPosition = position - 1,
        coordinate;

    if (position === undefined) {
      return $.map(this._coordinates, $.proxy(function (coordinate, index) {
        return this.coordinates(index);
      }, this));
    }

    if (this.settings.center) {
      if (this.settings.rtl) {
        multiplier = -1;
        newPosition = position + 1;
      }

      coordinate = this._coordinates[position];
      coordinate += (this.width() - coordinate + (this._coordinates[newPosition] || 0)) / 2 * multiplier;
    } else {
      coordinate = this._coordinates[newPosition] || 0;
    }

    coordinate = Math.ceil(coordinate);
    return coordinate;
  };
  /**
   * Calculates the speed for a translation.
   * @protected
   * @param {Number} from - The absolute position of the start item.
   * @param {Number} to - The absolute position of the target item.
   * @param {Number} [factor=undefined] - The time factor in milliseconds.
   * @returns {Number} - The time in milliseconds for the translation.
   */


  Owl.prototype.duration = function (from, to, factor) {
    if (factor === 0) {
      return 0;
    }

    return Math.min(Math.max(Math.abs(to - from), 1), 6) * Math.abs(factor || this.settings.smartSpeed);
  };
  /**
   * Slides to the specified item.
   * @public
   * @param {Number} position - The position of the item.
   * @param {Number} [speed] - The time in milliseconds for the transition.
   */


  Owl.prototype.to = function (position, speed) {
    var current = this.current(),
        revert = null,
        distance = position - this.relative(current),
        direction = (distance > 0) - (distance < 0),
        items = this._items.length,
        minimum = this.minimum(),
        maximum = this.maximum();

    if (this.settings.loop) {
      if (!this.settings.rewind && Math.abs(distance) > items / 2) {
        distance += direction * -1 * items;
      }

      position = current + distance;
      revert = ((position - minimum) % items + items) % items + minimum;

      if (revert !== position && revert - distance <= maximum && revert - distance > 0) {
        current = revert - distance;
        position = revert;
        this.reset(current);
      }
    } else if (this.settings.rewind) {
      maximum += 1;
      position = (position % maximum + maximum) % maximum;
    } else {
      position = Math.max(minimum, Math.min(maximum, position));
    }

    this.speed(this.duration(current, position, speed));
    this.current(position);

    if (this.$element.is(':visible')) {
      this.update();
    }
  };
  /**
   * Slides to the next item.
   * @public
   * @param {Number} [speed] - The time in milliseconds for the transition.
   */


  Owl.prototype.next = function (speed) {
    speed = speed || false;
    this.to(this.relative(this.current()) + 1, speed);
  };
  /**
   * Slides to the previous item.
   * @public
   * @param {Number} [speed] - The time in milliseconds for the transition.
   */


  Owl.prototype.prev = function (speed) {
    speed = speed || false;
    this.to(this.relative(this.current()) - 1, speed);
  };
  /**
   * Handles the end of an animation.
   * @protected
   * @param {Event} event - The event arguments.
   */


  Owl.prototype.onTransitionEnd = function (event) {
    // if css2 animation then event object is undefined
    if (event !== undefined) {
      event.stopPropagation(); // Catch only owl-stage transitionEnd event

      if ((event.target || event.srcElement || event.originalTarget) !== this.$stage.get(0)) {
        return false;
      }
    }

    this.leave('animating');
    this.trigger('translated');
  };
  /**
   * Gets viewport width.
   * @protected
   * @return {Number} - The width in pixel.
   */


  Owl.prototype.viewport = function () {
    var width;

    if (this.options.responsiveBaseElement !== window) {
      width = $(this.options.responsiveBaseElement).width();
    } else if (window.innerWidth) {
      width = window.innerWidth;
    } else if (document.documentElement && document.documentElement.clientWidth) {
      width = document.documentElement.clientWidth;
    } else {
      throw 'Can not detect viewport width.';
    }

    return width;
  };
  /**
   * Replaces the current content.
   * @public
   * @param {HTMLElement|jQuery|String} content - The new content.
   */


  Owl.prototype.replace = function (content) {
    this.$stage.empty();
    this._items = [];

    if (content) {
      content = content instanceof jQuery ? content : $(content);
    }

    if (this.settings.nestedItemSelector) {
      content = content.find('.' + this.settings.nestedItemSelector);
    }

    content.filter(function () {
      return this.nodeType === 1;
    }).each($.proxy(function (index, item) {
      item = this.prepare(item);
      this.$stage.append(item);

      this._items.push(item);

      this._mergers.push(item.find('[data-merge]').addBack('[data-merge]').attr('data-merge') * 1 || 1);
    }, this));
    this.reset(this.isNumeric(this.settings.startPosition) ? this.settings.startPosition : 0);
    this.invalidate('items');
  };
  /**
   * Adds an item.
   * @todo Use `item` instead of `content` for the event arguments.
   * @public
   * @param {HTMLElement|jQuery|String} content - The item content to add.
   * @param {Number} [position] - The relative position at which to insert the item otherwise the item will be added to the end.
   */


  Owl.prototype.add = function (content, position) {
    var current = this.relative(this._current);
    position = position === undefined ? this._items.length : this.normalize(position, true);
    content = content instanceof jQuery ? content : $(content);
    this.trigger('add', {
      content: content,
      position: position
    });
    content = this.prepare(content);

    if (this._items.length === 0 || position === this._items.length) {
      this._items.length === 0 && this.$stage.append(content);
      this._items.length !== 0 && this._items[position - 1].after(content);

      this._items.push(content);

      this._mergers.push(content.find('[data-merge]').addBack('[data-merge]').attr('data-merge') * 1 || 1);
    } else {
      this._items[position].before(content);

      this._items.splice(position, 0, content);

      this._mergers.splice(position, 0, content.find('[data-merge]').addBack('[data-merge]').attr('data-merge') * 1 || 1);
    }

    this._items[current] && this.reset(this._items[current].index());
    this.invalidate('items');
    this.trigger('added', {
      content: content,
      position: position
    });
  };
  /**
   * Removes an item by its position.
   * @todo Use `item` instead of `content` for the event arguments.
   * @public
   * @param {Number} position - The relative position of the item to remove.
   */


  Owl.prototype.remove = function (position) {
    position = this.normalize(position, true);

    if (position === undefined) {
      return;
    }

    this.trigger('remove', {
      content: this._items[position],
      position: position
    });

    this._items[position].remove();

    this._items.splice(position, 1);

    this._mergers.splice(position, 1);

    this.invalidate('items');
    this.trigger('removed', {
      content: null,
      position: position
    });
  };
  /**
   * Preloads images with auto width.
   * @todo Replace by a more generic approach
   * @protected
   */


  Owl.prototype.preloadAutoWidthImages = function (images) {
    images.each($.proxy(function (i, element) {
      this.enter('pre-loading');
      element = $(element);
      $(new Image()).one('load', $.proxy(function (e) {
        element.attr('src', e.target.src);
        element.css('opacity', 1);
        this.leave('pre-loading');
        !this.is('pre-loading') && !this.is('initializing') && this.refresh();
      }, this)).attr('src', element.attr('src') || element.attr('data-src') || element.attr('data-src-retina'));
    }, this));
  };
  /**
   * Destroys the carousel.
   * @public
   */


  Owl.prototype.destroy = function () {
    this.$element.off('.owl.core');
    this.$stage.off('.owl.core');
    $(document).off('.owl.core');

    if (this.settings.responsive !== false) {
      window.clearTimeout(this.resizeTimer);
      this.off(window, 'resize', this._handlers.onThrottledResize);
    }

    for (var i in this._plugins) {
      this._plugins[i].destroy();
    }

    this.$stage.children('.cloned').remove();
    this.$stage.unwrap();
    this.$stage.children().contents().unwrap();
    this.$stage.children().unwrap();
    this.$element.removeClass(this.options.refreshClass).removeClass(this.options.loadingClass).removeClass(this.options.loadedClass).removeClass(this.options.rtlClass).removeClass(this.options.dragClass).removeClass(this.options.grabClass).attr('class', this.$element.attr('class').replace(new RegExp(this.options.responsiveClass + '-\\S+\\s', 'g'), '')).removeData('owl.carousel');
  };
  /**
   * Operators to calculate right-to-left and left-to-right.
   * @protected
   * @param {Number} [a] - The left side operand.
   * @param {String} [o] - The operator.
   * @param {Number} [b] - The right side operand.
   */


  Owl.prototype.op = function (a, o, b) {
    var rtl = this.settings.rtl;

    switch (o) {
      case '<':
        return rtl ? a > b : a < b;

      case '>':
        return rtl ? a < b : a > b;

      case '>=':
        return rtl ? a <= b : a >= b;

      case '<=':
        return rtl ? a >= b : a <= b;

      default:
        break;
    }
  };
  /**
   * Attaches to an internal event.
   * @protected
   * @param {HTMLElement} element - The event source.
   * @param {String} event - The event name.
   * @param {Function} listener - The event handler to attach.
   * @param {Boolean} capture - Wether the event should be handled at the capturing phase or not.
   */


  Owl.prototype.on = function (element, event, listener, capture) {
    if (element.addEventListener) {
      element.addEventListener(event, listener, capture);
    } else if (element.attachEvent) {
      element.attachEvent('on' + event, listener);
    }
  };
  /**
   * Detaches from an internal event.
   * @protected
   * @param {HTMLElement} element - The event source.
   * @param {String} event - The event name.
   * @param {Function} listener - The attached event handler to detach.
   * @param {Boolean} capture - Wether the attached event handler was registered as a capturing listener or not.
   */


  Owl.prototype.off = function (element, event, listener, capture) {
    if (element.removeEventListener) {
      element.removeEventListener(event, listener, capture);
    } else if (element.detachEvent) {
      element.detachEvent('on' + event, listener);
    }
  };
  /**
   * Triggers a public event.
   * @todo Remove `status`, `relatedTarget` should be used instead.
   * @protected
   * @param {String} name - The event name.
   * @param {*} [data=null] - The event data.
   * @param {String} [namespace=carousel] - The event namespace.
   * @param {String} [state] - The state which is associated with the event.
   * @param {Boolean} [enter=false] - Indicates if the call enters the specified state or not.
   * @returns {Event} - The event arguments.
   */


  Owl.prototype.trigger = function (name, data, namespace, state, enter) {
    var status = {
      item: {
        count: this._items.length,
        index: this.current()
      }
    },
        handler = $.camelCase($.grep(['on', name, namespace], function (v) {
      return v;
    }).join('-').toLowerCase()),
        event = $.Event([name, 'owl', namespace || 'carousel'].join('.').toLowerCase(), $.extend({
      relatedTarget: this
    }, status, data));

    if (!this._supress[name]) {
      $.each(this._plugins, function (name, plugin) {
        if (plugin.onTrigger) {
          plugin.onTrigger(event);
        }
      });
      this.register({
        type: Owl.Type.Event,
        name: name
      });
      this.$element.trigger(event);

      if (this.settings && typeof this.settings[handler] === 'function') {
        this.settings[handler].call(this, event);
      }
    }

    return event;
  };
  /**
   * Enters a state.
   * @param name - The state name.
   */


  Owl.prototype.enter = function (name) {
    $.each([name].concat(this._states.tags[name] || []), $.proxy(function (i, name) {
      if (this._states.current[name] === undefined) {
        this._states.current[name] = 0;
      }

      this._states.current[name]++;
    }, this));
  };
  /**
   * Leaves a state.
   * @param name - The state name.
   */


  Owl.prototype.leave = function (name) {
    $.each([name].concat(this._states.tags[name] || []), $.proxy(function (i, name) {
      this._states.current[name]--;
    }, this));
  };
  /**
   * Registers an event or state.
   * @public
   * @param {Object} object - The event or state to register.
   */


  Owl.prototype.register = function (object) {
    if (object.type === Owl.Type.Event) {
      if (!$.event.special[object.name]) {
        $.event.special[object.name] = {};
      }

      if (!$.event.special[object.name].owl) {
        var _default = $.event.special[object.name]._default;

        $.event.special[object.name]._default = function (e) {
          if (_default && _default.apply && (!e.namespace || e.namespace.indexOf('owl') === -1)) {
            return _default.apply(this, arguments);
          }

          return e.namespace && e.namespace.indexOf('owl') > -1;
        };

        $.event.special[object.name].owl = true;
      }
    } else if (object.type === Owl.Type.State) {
      if (!this._states.tags[object.name]) {
        this._states.tags[object.name] = object.tags;
      } else {
        this._states.tags[object.name] = this._states.tags[object.name].concat(object.tags);
      }

      this._states.tags[object.name] = $.grep(this._states.tags[object.name], $.proxy(function (tag, i) {
        return $.inArray(tag, this._states.tags[object.name]) === i;
      }, this));
    }
  };
  /**
   * Suppresses events.
   * @protected
   * @param {Array.<String>} events - The events to suppress.
   */


  Owl.prototype.suppress = function (events) {
    $.each(events, $.proxy(function (index, event) {
      this._supress[event] = true;
    }, this));
  };
  /**
   * Releases suppressed events.
   * @protected
   * @param {Array.<String>} events - The events to release.
   */


  Owl.prototype.release = function (events) {
    $.each(events, $.proxy(function (index, event) {
      delete this._supress[event];
    }, this));
  };
  /**
   * Gets unified pointer coordinates from event.
   * @todo #261
   * @protected
   * @param {Event} - The `mousedown` or `touchstart` event.
   * @returns {Object} - Contains `x` and `y` coordinates of current pointer position.
   */


  Owl.prototype.pointer = function (event) {
    var result = {
      x: null,
      y: null
    };
    event = event.originalEvent || event || window.event;
    event = event.touches && event.touches.length ? event.touches[0] : event.changedTouches && event.changedTouches.length ? event.changedTouches[0] : event;

    if (event.pageX) {
      result.x = event.pageX;
      result.y = event.pageY;
    } else {
      result.x = event.clientX;
      result.y = event.clientY;
    }

    return result;
  };
  /**
   * Determines if the input is a Number or something that can be coerced to a Number
   * @protected
   * @param {Number|String|Object|Array|Boolean|RegExp|Function|Symbol} - The input to be tested
   * @returns {Boolean} - An indication if the input is a Number or can be coerced to a Number
   */


  Owl.prototype.isNumeric = function (number) {
    return !isNaN(parseFloat(number));
  };
  /**
   * Gets the difference of two vectors.
   * @todo #261
   * @protected
   * @param {Object} - The first vector.
   * @param {Object} - The second vector.
   * @returns {Object} - The difference.
   */


  Owl.prototype.difference = function (first, second) {
    return {
      x: first.x - second.x,
      y: first.y - second.y
    };
  };
  /**
   * The jQuery Plugin for the Owl Carousel
   * @todo Navigation plugin `next` and `prev`
   * @public
   */


  $.fn.owlCarousel = function (option) {
    var args = Array.prototype.slice.call(arguments, 1);
    return this.each(function () {
      var $this = $(this),
          data = $this.data('owl.carousel');

      if (!data) {
        data = new Owl(this, _typeof(option) == 'object' && option);
        $this.data('owl.carousel', data);
        $.each(['next', 'prev', 'to', 'destroy', 'refresh', 'replace', 'add', 'remove'], function (i, event) {
          data.register({
            type: Owl.Type.Event,
            name: event
          });
          data.$element.on(event + '.owl.carousel.core', $.proxy(function (e) {
            if (e.namespace && e.relatedTarget !== this) {
              this.suppress([event]);
              data[event].apply(this, [].slice.call(arguments, 1));
              this.release([event]);
            }
          }, data));
        });
      }

      if (typeof option == 'string' && option.charAt(0) !== '_') {
        data[option].apply(data, args);
      }
    });
  };
  /**
   * The constructor for the jQuery Plugin
   * @public
   */


  $.fn.owlCarousel.Constructor = Owl;
})(window.Zepto || __webpack_provided_window_dot_jQuery, window, document);
/**
 * AutoRefresh Plugin
 * @version 2.1.0
 * @author Artus Kolanowski
 * @author David Deutsch
 * @license The MIT License (MIT)
 */


;

(function ($, window, document, undefined) {
  /**
   * Creates the auto refresh plugin.
   * @class The Auto Refresh Plugin
   * @param {Owl} carousel - The Owl Carousel
   */
  var AutoRefresh = function AutoRefresh(carousel) {
    /**
     * Reference to the core.
     * @protected
     * @type {Owl}
     */
    this._core = carousel;
    /**
     * Refresh interval.
     * @protected
     * @type {number}
     */

    this._interval = null;
    /**
     * Whether the element is currently visible or not.
     * @protected
     * @type {Boolean}
     */

    this._visible = null;
    /**
     * All event handlers.
     * @protected
     * @type {Object}
     */

    this._handlers = {
      'initialized.owl.carousel': $.proxy(function (e) {
        if (e.namespace && this._core.settings.autoRefresh) {
          this.watch();
        }
      }, this)
    }; // set default options

    this._core.options = $.extend({}, AutoRefresh.Defaults, this._core.options); // register event handlers

    this._core.$element.on(this._handlers);
  };
  /**
   * Default options.
   * @public
   */


  AutoRefresh.Defaults = {
    autoRefresh: true,
    autoRefreshInterval: 500
  };
  /**
   * Watches the element.
   */

  AutoRefresh.prototype.watch = function () {
    if (this._interval) {
      return;
    }

    this._visible = this._core.$element.is(':visible');
    this._interval = window.setInterval($.proxy(this.refresh, this), this._core.settings.autoRefreshInterval);
  };
  /**
   * Refreshes the element.
   */


  AutoRefresh.prototype.refresh = function () {
    if (this._core.$element.is(':visible') === this._visible) {
      return;
    }

    this._visible = !this._visible;

    this._core.$element.toggleClass('owl-hidden', !this._visible);

    this._visible && this._core.invalidate('width') && this._core.refresh();
  };
  /**
   * Destroys the plugin.
   */


  AutoRefresh.prototype.destroy = function () {
    var handler, property;
    window.clearInterval(this._interval);

    for (handler in this._handlers) {
      this._core.$element.off(handler, this._handlers[handler]);
    }

    for (property in Object.getOwnPropertyNames(this)) {
      typeof this[property] != 'function' && (this[property] = null);
    }
  };

  $.fn.owlCarousel.Constructor.Plugins.AutoRefresh = AutoRefresh;
})(window.Zepto || __webpack_provided_window_dot_jQuery, window, document);
/**
 * Lazy Plugin
 * @version 2.1.0
 * @author Bartosz Wojciechowski
 * @author David Deutsch
 * @license The MIT License (MIT)
 */


;

(function ($, window, document, undefined) {
  /**
   * Creates the lazy plugin.
   * @class The Lazy Plugin
   * @param {Owl} carousel - The Owl Carousel
   */
  var Lazy = function Lazy(carousel) {
    /**
     * Reference to the core.
     * @protected
     * @type {Owl}
     */
    this._core = carousel;
    /**
     * Already loaded items.
     * @protected
     * @type {Array.<jQuery>}
     */

    this._loaded = [];
    /**
     * Event handlers.
     * @protected
     * @type {Object}
     */

    this._handlers = {
      'initialized.owl.carousel change.owl.carousel resized.owl.carousel': $.proxy(function (e) {
        if (!e.namespace) {
          return;
        }

        if (!this._core.settings || !this._core.settings.lazyLoad) {
          return;
        }

        if (e.property && e.property.name == 'position' || e.type == 'initialized') {
          var settings = this._core.settings,
              n = settings.center && Math.ceil(settings.items / 2) || settings.items,
              i = settings.center && n * -1 || 0,
              position = (e.property && e.property.value !== undefined ? e.property.value : this._core.current()) + i,
              clones = this._core.clones().length,
              load = $.proxy(function (i, v) {
            this.load(v);
          }, this);

          while (i++ < n) {
            this.load(clones / 2 + this._core.relative(position));
            clones && $.each(this._core.clones(this._core.relative(position)), load);
            position++;
          }
        }
      }, this)
    }; // set the default options

    this._core.options = $.extend({}, Lazy.Defaults, this._core.options); // register event handler

    this._core.$element.on(this._handlers);
  };
  /**
   * Default options.
   * @public
   */


  Lazy.Defaults = {
    lazyLoad: false
  };
  /**
   * Loads all resources of an item at the specified position.
   * @param {Number} position - The absolute position of the item.
   * @protected
   */

  Lazy.prototype.load = function (position) {
    var $item = this._core.$stage.children().eq(position),
        $elements = $item && $item.find('.owl-lazy');

    if (!$elements || $.inArray($item.get(0), this._loaded) > -1) {
      return;
    }

    $elements.each($.proxy(function (index, element) {
      var $element = $(element),
          image,
          url = window.devicePixelRatio > 1 && $element.attr('data-src-retina') || $element.attr('data-src');

      this._core.trigger('load', {
        element: $element,
        url: url
      }, 'lazy');

      if ($element.is('img')) {
        $element.one('load.owl.lazy', $.proxy(function () {
          $element.css('opacity', 1);

          this._core.trigger('loaded', {
            element: $element,
            url: url
          }, 'lazy');
        }, this)).attr('src', url);
      } else {
        image = new Image();
        image.onload = $.proxy(function () {
          $element.css({
            'background-image': 'url(' + url + ')',
            'opacity': '1'
          });

          this._core.trigger('loaded', {
            element: $element,
            url: url
          }, 'lazy');
        }, this);
        image.src = url;
      }
    }, this));

    this._loaded.push($item.get(0));
  };
  /**
   * Destroys the plugin.
   * @public
   */


  Lazy.prototype.destroy = function () {
    var handler, property;

    for (handler in this.handlers) {
      this._core.$element.off(handler, this.handlers[handler]);
    }

    for (property in Object.getOwnPropertyNames(this)) {
      typeof this[property] != 'function' && (this[property] = null);
    }
  };

  $.fn.owlCarousel.Constructor.Plugins.Lazy = Lazy;
})(window.Zepto || __webpack_provided_window_dot_jQuery, window, document);
/**
 * AutoHeight Plugin
 * @version 2.1.0
 * @author Bartosz Wojciechowski
 * @author David Deutsch
 * @license The MIT License (MIT)
 */


;

(function ($, window, document, undefined) {
  /**
   * Creates the auto height plugin.
   * @class The Auto Height Plugin
   * @param {Owl} carousel - The Owl Carousel
   */
  var AutoHeight = function AutoHeight(carousel) {
    /**
     * Reference to the core.
     * @protected
     * @type {Owl}
     */
    this._core = carousel;
    /**
     * All event handlers.
     * @protected
     * @type {Object}
     */

    this._handlers = {
      'initialized.owl.carousel refreshed.owl.carousel': $.proxy(function (e) {
        if (e.namespace && this._core.settings.autoHeight) {
          this.update();
        }
      }, this),
      'changed.owl.carousel': $.proxy(function (e) {
        if (e.namespace && this._core.settings.autoHeight && e.property.name == 'position') {
          this.update();
        }
      }, this),
      'loaded.owl.lazy': $.proxy(function (e) {
        if (e.namespace && this._core.settings.autoHeight && e.element.closest('.' + this._core.settings.itemClass).index() === this._core.current()) {
          this.update();
        }
      }, this)
    }; // set default options

    this._core.options = $.extend({}, AutoHeight.Defaults, this._core.options); // register event handlers

    this._core.$element.on(this._handlers);
  };
  /**
   * Default options.
   * @public
   */


  AutoHeight.Defaults = {
    autoHeight: false,
    autoHeightClass: 'owl-height'
  };
  /**
   * Updates the view.
   */

  AutoHeight.prototype.update = function () {
    var start = this._core._current,
        end = start + this._core.settings.items,
        visible = this._core.$stage.children().toArray().slice(start, end),
        heights = [],
        maxheight = 0;

    $.each(visible, function (index, item) {
      heights.push($(item).height());
    });
    maxheight = Math.max.apply(null, heights);

    this._core.$stage.parent().height(maxheight).addClass(this._core.settings.autoHeightClass);
  };

  AutoHeight.prototype.destroy = function () {
    var handler, property;

    for (handler in this._handlers) {
      this._core.$element.off(handler, this._handlers[handler]);
    }

    for (property in Object.getOwnPropertyNames(this)) {
      typeof this[property] != 'function' && (this[property] = null);
    }
  };

  $.fn.owlCarousel.Constructor.Plugins.AutoHeight = AutoHeight;
})(window.Zepto || __webpack_provided_window_dot_jQuery, window, document);
/**
 * Video Plugin
 * @version 2.1.0
 * @author Bartosz Wojciechowski
 * @author David Deutsch
 * @license The MIT License (MIT)
 */


;

(function ($, window, document, undefined) {
  /**
   * Creates the video plugin.
   * @class The Video Plugin
   * @param {Owl} carousel - The Owl Carousel
   */
  var Video = function Video(carousel) {
    /**
     * Reference to the core.
     * @protected
     * @type {Owl}
     */
    this._core = carousel;
    /**
     * Cache all video URLs.
     * @protected
     * @type {Object}
     */

    this._videos = {};
    /**
     * Current playing item.
     * @protected
     * @type {jQuery}
     */

    this._playing = null;
    /**
     * All event handlers.
     * @todo The cloned content removale is too late
     * @protected
     * @type {Object}
     */

    this._handlers = {
      'initialized.owl.carousel': $.proxy(function (e) {
        if (e.namespace) {
          this._core.register({
            type: 'state',
            name: 'playing',
            tags: ['interacting']
          });
        }
      }, this),
      'resize.owl.carousel': $.proxy(function (e) {
        if (e.namespace && this._core.settings.video && this.isInFullScreen()) {
          e.preventDefault();
        }
      }, this),
      'refreshed.owl.carousel': $.proxy(function (e) {
        if (e.namespace && this._core.is('resizing')) {
          this._core.$stage.find('.cloned .owl-video-frame').remove();
        }
      }, this),
      'changed.owl.carousel': $.proxy(function (e) {
        if (e.namespace && e.property.name === 'position' && this._playing) {
          this.stop();
        }
      }, this),
      'prepared.owl.carousel': $.proxy(function (e) {
        if (!e.namespace) {
          return;
        }

        var $element = $(e.content).find('.owl-video');

        if ($element.length) {
          $element.css('display', 'none');
          this.fetch($element, $(e.content));
        }
      }, this)
    }; // set default options

    this._core.options = $.extend({}, Video.Defaults, this._core.options); // register event handlers

    this._core.$element.on(this._handlers);

    this._core.$element.on('click.owl.video', '.owl-video-play-icon', $.proxy(function (e) {
      this.play(e);
    }, this));
  };
  /**
   * Default options.
   * @public
   */


  Video.Defaults = {
    video: false,
    videoHeight: false,
    videoWidth: false
  };
  /**
   * Gets the video ID and the type (YouTube/Vimeo/vzaar only).
   * @protected
   * @param {jQuery} target - The target containing the video data.
   * @param {jQuery} item - The item containing the video.
   */

  Video.prototype.fetch = function (target, item) {
    var type = function () {
      if (target.attr('data-vimeo-id')) {
        return 'vimeo';
      } else if (target.attr('data-vzaar-id')) {
        return 'vzaar';
      } else {
        return 'youtube';
      }
    }(),
        id = target.attr('data-vimeo-id') || target.attr('data-youtube-id') || target.attr('data-vzaar-id'),
        width = target.attr('data-width') || this._core.settings.videoWidth,
        height = target.attr('data-height') || this._core.settings.videoHeight,
        url = target.attr('href');

    if (url) {
      /*
      		Parses the id's out of the following urls (and probably more):
      		https://www.youtube.com/watch?v=:id
      		https://youtu.be/:id
      		https://vimeo.com/:id
      		https://vimeo.com/channels/:channel/:id
      		https://vimeo.com/groups/:group/videos/:id
      		https://app.vzaar.com/videos/:id
      				Visual example: https://regexper.com/#(http%3A%7Chttps%3A%7C)%5C%2F%5C%2F(player.%7Cwww.%7Capp.)%3F(vimeo%5C.com%7Cyoutu(be%5C.com%7C%5C.be%7Cbe%5C.googleapis%5C.com)%7Cvzaar%5C.com)%5C%2F(video%5C%2F%7Cvideos%5C%2F%7Cembed%5C%2F%7Cchannels%5C%2F.%2B%5C%2F%7Cgroups%5C%2F.%2B%5C%2F%7Cwatch%5C%3Fv%3D%7Cv%5C%2F)%3F(%5BA-Za-z0-9._%25-%5D*)(%5C%26%5CS%2B)%3F
      */
      id = url.match(/(http:|https:|)\/\/(player.|www.|app.)?(vimeo\.com|youtu(be\.com|\.be|be\.googleapis\.com)|vzaar\.com)\/(video\/|videos\/|embed\/|channels\/.+\/|groups\/.+\/|watch\?v=|v\/)?([A-Za-z0-9._%-]*)(\&\S+)?/);

      if (id[3].indexOf('youtu') > -1) {
        type = 'youtube';
      } else if (id[3].indexOf('vimeo') > -1) {
        type = 'vimeo';
      } else if (id[3].indexOf('vzaar') > -1) {
        type = 'vzaar';
      } else {
        throw new Error('Video URL not supported.');
      }

      id = id[6];
    } else {
      throw new Error('Missing video URL.');
    }

    this._videos[url] = {
      type: type,
      id: id,
      width: width,
      height: height
    };
    item.attr('data-video', url);
    this.thumbnail(target, this._videos[url]);
  };
  /**
   * Creates video thumbnail.
   * @protected
   * @param {jQuery} target - The target containing the video data.
   * @param {Object} info - The video info object.
   * @see `fetch`
   */


  Video.prototype.thumbnail = function (target, video) {
    var tnLink,
        icon,
        path,
        dimensions = video.width && video.height ? 'style="width:' + video.width + 'px;height:' + video.height + 'px;"' : '',
        customTn = target.find('img'),
        srcType = 'src',
        lazyClass = '',
        settings = this._core.settings,
        create = function create(path) {
      icon = '<div class="owl-video-play-icon"></div>';

      if (settings.lazyLoad) {
        tnLink = '<div class="owl-video-tn ' + lazyClass + '" ' + srcType + '="' + path + '"></div>';
      } else {
        tnLink = '<div class="owl-video-tn" style="opacity:1;background-image:url(' + path + ')"></div>';
      }

      target.after(tnLink);
      target.after(icon);
    }; // wrap video content into owl-video-wrapper div


    target.wrap('<div class="owl-video-wrapper"' + dimensions + '></div>');

    if (this._core.settings.lazyLoad) {
      srcType = 'data-src';
      lazyClass = 'owl-lazy';
    } // custom thumbnail


    if (customTn.length) {
      create(customTn.attr(srcType));
      customTn.remove();
      return false;
    }

    if (video.type === 'youtube') {
      path = "//img.youtube.com/vi/" + video.id + "/hqdefault.jpg";
      create(path);
    } else if (video.type === 'vimeo') {
      $.ajax({
        type: 'GET',
        url: '//vimeo.com/api/v2/video/' + video.id + '.json',
        jsonp: 'callback',
        dataType: 'jsonp',
        success: function success(data) {
          path = data[0].thumbnail_large;
          create(path);
        }
      });
    } else if (video.type === 'vzaar') {
      $.ajax({
        type: 'GET',
        url: '//vzaar.com/api/videos/' + video.id + '.json',
        jsonp: 'callback',
        dataType: 'jsonp',
        success: function success(data) {
          path = data.framegrab_url;
          create(path);
        }
      });
    }
  };
  /**
   * Stops the current video.
   * @public
   */


  Video.prototype.stop = function () {
    this._core.trigger('stop', null, 'video');

    this._playing.find('.owl-video-frame').remove();

    this._playing.removeClass('owl-video-playing');

    this._playing = null;

    this._core.leave('playing');

    this._core.trigger('stopped', null, 'video');
  };
  /**
   * Starts the current video.
   * @public
   * @param {Event} event - The event arguments.
   */


  Video.prototype.play = function (event) {
    var target = $(event.target),
        item = target.closest('.' + this._core.settings.itemClass),
        video = this._videos[item.attr('data-video')],
        width = video.width || '100%',
        height = video.height || this._core.$stage.height(),
        html;

    if (this._playing) {
      return;
    }

    this._core.enter('playing');

    this._core.trigger('play', null, 'video');

    item = this._core.items(this._core.relative(item.index()));

    this._core.reset(item.index());

    if (video.type === 'youtube') {
      html = '<iframe width="' + width + '" height="' + height + '" src="//www.youtube.com/embed/' + video.id + '?autoplay=1&v=' + video.id + '" frameborder="0" allowfullscreen></iframe>';
    } else if (video.type === 'vimeo') {
      html = '<iframe src="//player.vimeo.com/video/' + video.id + '?autoplay=1" width="' + width + '" height="' + height + '" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>';
    } else if (video.type === 'vzaar') {
      html = '<iframe frameborder="0"' + 'height="' + height + '"' + 'width="' + width + '" allowfullscreen mozallowfullscreen webkitAllowFullScreen ' + 'src="//view.vzaar.com/' + video.id + '/player?autoplay=true"></iframe>';
    }

    $('<div class="owl-video-frame">' + html + '</div>').insertAfter(item.find('.owl-video'));
    this._playing = item.addClass('owl-video-playing');
  };
  /**
   * Checks whether an video is currently in full screen mode or not.
   * @todo Bad style because looks like a readonly method but changes members.
   * @protected
   * @returns {Boolean}
   */


  Video.prototype.isInFullScreen = function () {
    var element = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement;
    return element && $(element).parent().hasClass('owl-video-frame');
  };
  /**
   * Destroys the plugin.
   */


  Video.prototype.destroy = function () {
    var handler, property;

    this._core.$element.off('click.owl.video');

    for (handler in this._handlers) {
      this._core.$element.off(handler, this._handlers[handler]);
    }

    for (property in Object.getOwnPropertyNames(this)) {
      typeof this[property] != 'function' && (this[property] = null);
    }
  };

  $.fn.owlCarousel.Constructor.Plugins.Video = Video;
})(window.Zepto || __webpack_provided_window_dot_jQuery, window, document);
/**
 * Animate Plugin
 * @version 2.1.0
 * @author Bartosz Wojciechowski
 * @author David Deutsch
 * @license The MIT License (MIT)
 */


;

(function ($, window, document, undefined) {
  /**
   * Creates the animate plugin.
   * @class The Navigation Plugin
   * @param {Owl} scope - The Owl Carousel
   */
  var Animate = function Animate(scope) {
    this.core = scope;
    this.core.options = $.extend({}, Animate.Defaults, this.core.options);
    this.swapping = true;
    this.previous = undefined;
    this.next = undefined;
    this.handlers = {
      'change.owl.carousel': $.proxy(function (e) {
        if (e.namespace && e.property.name == 'position') {
          this.previous = this.core.current();
          this.next = e.property.value;
        }
      }, this),
      'drag.owl.carousel dragged.owl.carousel translated.owl.carousel': $.proxy(function (e) {
        if (e.namespace) {
          this.swapping = e.type == 'translated';
        }
      }, this),
      'translate.owl.carousel': $.proxy(function (e) {
        if (e.namespace && this.swapping && (this.core.options.animateOut || this.core.options.animateIn)) {
          this.swap();
        }
      }, this)
    };
    this.core.$element.on(this.handlers);
  };
  /**
   * Default options.
   * @public
   */


  Animate.Defaults = {
    animateOut: false,
    animateIn: false
  };
  /**
   * Toggles the animation classes whenever an translations starts.
   * @protected
   * @returns {Boolean|undefined}
   */

  Animate.prototype.swap = function () {
    if (this.core.settings.items !== 1) {
      return;
    }

    if (!$.support.animation || !$.support.transition) {
      return;
    }

    this.core.speed(0);
    var left,
        clear = $.proxy(this.clear, this),
        previous = this.core.$stage.children().eq(this.previous),
        next = this.core.$stage.children().eq(this.next),
        incoming = this.core.settings.animateIn,
        outgoing = this.core.settings.animateOut;

    if (this.core.current() === this.previous) {
      return;
    }

    if (outgoing) {
      left = this.core.coordinates(this.previous) - this.core.coordinates(this.next);
      previous.one($.support.animation.end, clear).css({
        'left': left + 'px'
      }).addClass('animated owl-animated-out').addClass(outgoing);
    }

    if (incoming) {
      next.one($.support.animation.end, clear).addClass('animated owl-animated-in').addClass(incoming);
    }
  };

  Animate.prototype.clear = function (e) {
    $(e.target).css({
      'left': ''
    }).removeClass('animated owl-animated-out owl-animated-in').removeClass(this.core.settings.animateIn).removeClass(this.core.settings.animateOut);
    this.core.onTransitionEnd();
  };
  /**
   * Destroys the plugin.
   * @public
   */


  Animate.prototype.destroy = function () {
    var handler, property;

    for (handler in this.handlers) {
      this.core.$element.off(handler, this.handlers[handler]);
    }

    for (property in Object.getOwnPropertyNames(this)) {
      typeof this[property] != 'function' && (this[property] = null);
    }
  };

  $.fn.owlCarousel.Constructor.Plugins.Animate = Animate;
})(window.Zepto || __webpack_provided_window_dot_jQuery, window, document);
/**
 * Autoplay Plugin
 * @version 2.1.0
 * @author Bartosz Wojciechowski
 * @author Artus Kolanowski
 * @author David Deutsch
 * @license The MIT License (MIT)
 */


;

(function ($, window, document, undefined) {
  /**
   * Creates the autoplay plugin.
   * @class The Autoplay Plugin
   * @param {Owl} scope - The Owl Carousel
   */
  var Autoplay = function Autoplay(carousel) {
    /**
     * Reference to the core.
     * @protected
     * @type {Owl}
     */
    this._core = carousel;
    /**
     * The autoplay timeout.
     * @type {Timeout}
     */

    this._timeout = null;
    /**
     * Indicates whenever the autoplay is paused.
     * @type {Boolean}
     */

    this._paused = false;
    /**
     * All event handlers.
     * @protected
     * @type {Object}
     */

    this._handlers = {
      'changed.owl.carousel': $.proxy(function (e) {
        if (e.namespace && e.property.name === 'settings') {
          if (this._core.settings.autoplay) {
            this.play();
          } else {
            this.stop();
          }
        } else if (e.namespace && e.property.name === 'position') {
          //console.log('play?', e);
          if (this._core.settings.autoplay) {
            this._setAutoPlayInterval();
          }
        }
      }, this),
      'initialized.owl.carousel': $.proxy(function (e) {
        if (e.namespace && this._core.settings.autoplay) {
          this.play();
        }
      }, this),
      'play.owl.autoplay': $.proxy(function (e, t, s) {
        if (e.namespace) {
          this.play(t, s);
        }
      }, this),
      'stop.owl.autoplay': $.proxy(function (e) {
        if (e.namespace) {
          this.stop();
        }
      }, this),
      'mouseover.owl.autoplay': $.proxy(function () {
        if (this._core.settings.autoplayHoverPause && this._core.is('rotating')) {
          this.pause();
        }
      }, this),
      'mouseleave.owl.autoplay': $.proxy(function () {
        if (this._core.settings.autoplayHoverPause && this._core.is('rotating')) {
          this.play();
        }
      }, this),
      'touchstart.owl.core': $.proxy(function () {
        if (this._core.settings.autoplayHoverPause && this._core.is('rotating')) {
          this.pause();
        }
      }, this),
      'touchend.owl.core': $.proxy(function () {
        if (this._core.settings.autoplayHoverPause) {
          this.play();
        }
      }, this)
    }; // register event handlers

    this._core.$element.on(this._handlers); // set default options


    this._core.options = $.extend({}, Autoplay.Defaults, this._core.options);
  };
  /**
   * Default options.
   * @public
   */


  Autoplay.Defaults = {
    autoplay: false,
    autoplayTimeout: 5000,
    autoplayHoverPause: false,
    autoplaySpeed: false
  };
  /**
   * Starts the autoplay.
   * @public
   * @param {Number} [timeout] - The interval before the next animation starts.
   * @param {Number} [speed] - The animation speed for the animations.
   */

  Autoplay.prototype.play = function (timeout, speed) {
    this._paused = false;

    if (this._core.is('rotating')) {
      return;
    }

    this._core.enter('rotating');

    this._setAutoPlayInterval();
  };
  /**
   * Gets a new timeout
   * @private
   * @param {Number} [timeout] - The interval before the next animation starts.
   * @param {Number} [speed] - The animation speed for the animations.
   * @return {Timeout}
   */


  Autoplay.prototype._getNextTimeout = function (timeout, speed) {
    if (this._timeout) {
      window.clearTimeout(this._timeout);
    }

    return window.setTimeout($.proxy(function () {
      if (this._paused || this._core.is('busy') || this._core.is('interacting') || document.hidden) {
        return;
      }

      this._core.next(speed || this._core.settings.autoplaySpeed);
    }, this), timeout || this._core.settings.autoplayTimeout);
  };
  /**
   * Sets autoplay in motion.
   * @private
   */


  Autoplay.prototype._setAutoPlayInterval = function () {
    this._timeout = this._getNextTimeout();
  };
  /**
   * Stops the autoplay.
   * @public
   */


  Autoplay.prototype.stop = function () {
    if (!this._core.is('rotating')) {
      return;
    }

    window.clearTimeout(this._timeout);

    this._core.leave('rotating');
  };
  /**
   * Stops the autoplay.
   * @public
   */


  Autoplay.prototype.pause = function () {
    if (!this._core.is('rotating')) {
      return;
    }

    this._paused = true;
  };
  /**
   * Destroys the plugin.
   */


  Autoplay.prototype.destroy = function () {
    var handler, property;
    this.stop();

    for (handler in this._handlers) {
      this._core.$element.off(handler, this._handlers[handler]);
    }

    for (property in Object.getOwnPropertyNames(this)) {
      typeof this[property] != 'function' && (this[property] = null);
    }
  };

  $.fn.owlCarousel.Constructor.Plugins.autoplay = Autoplay;
})(window.Zepto || __webpack_provided_window_dot_jQuery, window, document);
/**
 * Navigation Plugin
 * @version 2.1.0
 * @author Artus Kolanowski
 * @author David Deutsch
 * @license The MIT License (MIT)
 */


;

(function ($, window, document, undefined) {
  'use strict';
  /**
   * Creates the navigation plugin.
   * @class The Navigation Plugin
   * @param {Owl} carousel - The Owl Carousel.
   */

  var Navigation = function Navigation(carousel) {
    /**
     * Reference to the core.
     * @protected
     * @type {Owl}
     */
    this._core = carousel;
    /**
     * Indicates whether the plugin is initialized or not.
     * @protected
     * @type {Boolean}
     */

    this._initialized = false;
    /**
     * The current paging indexes.
     * @protected
     * @type {Array}
     */

    this._pages = [];
    /**
     * All DOM elements of the user interface.
     * @protected
     * @type {Object}
     */

    this._controls = {};
    /**
     * Markup for an indicator.
     * @protected
     * @type {Array.<String>}
     */

    this._templates = [];
    /**
     * The carousel element.
     * @type {jQuery}
     */

    this.$element = this._core.$element;
    /**
     * Overridden methods of the carousel.
     * @protected
     * @type {Object}
     */

    this._overrides = {
      next: this._core.next,
      prev: this._core.prev,
      to: this._core.to
    };
    /**
     * All event handlers.
     * @protected
     * @type {Object}
     */

    this._handlers = {
      'prepared.owl.carousel': $.proxy(function (e) {
        if (e.namespace && this._core.settings.dotsData) {
          this._templates.push('<div class="' + this._core.settings.dotClass + '">' + $(e.content).find('[data-dot]').addBack('[data-dot]').attr('data-dot') + '</div>');
        }
      }, this),
      'added.owl.carousel': $.proxy(function (e) {
        if (e.namespace && this._core.settings.dotsData) {
          this._templates.splice(e.position, 0, this._templates.pop());
        }
      }, this),
      'remove.owl.carousel': $.proxy(function (e) {
        if (e.namespace && this._core.settings.dotsData) {
          this._templates.splice(e.position, 1);
        }
      }, this),
      'changed.owl.carousel': $.proxy(function (e) {
        if (e.namespace && e.property.name == 'position') {
          this.draw();
        }
      }, this),
      'initialized.owl.carousel': $.proxy(function (e) {
        if (e.namespace && !this._initialized) {
          this._core.trigger('initialize', null, 'navigation');

          this.initialize();
          this.update();
          this.draw();
          this._initialized = true;

          this._core.trigger('initialized', null, 'navigation');
        }
      }, this),
      'refreshed.owl.carousel': $.proxy(function (e) {
        if (e.namespace && this._initialized) {
          this._core.trigger('refresh', null, 'navigation');

          this.update();
          this.draw();

          this._core.trigger('refreshed', null, 'navigation');
        }
      }, this)
    }; // set default options

    this._core.options = $.extend({}, Navigation.Defaults, this._core.options); // register event handlers

    this.$element.on(this._handlers);
  };
  /**
   * Default options.
   * @public
   * @todo Rename `slideBy` to `navBy`
   */


  Navigation.Defaults = {
    nav: false,
    navText: ['prev', 'next'],
    navSpeed: false,
    navElement: 'div',
    navContainer: false,
    navContainerClass: 'owl-nav',
    navClass: ['owl-prev', 'owl-next'],
    slideBy: 1,
    dotClass: 'owl-dot',
    dotsClass: 'owl-dots',
    dots: true,
    dotsEach: false,
    dotsData: false,
    dotsSpeed: false,
    dotsContainer: false
  };
  /**
   * Initializes the layout of the plugin and extends the carousel.
   * @protected
   */

  Navigation.prototype.initialize = function () {
    var override,
        settings = this._core.settings; // create DOM structure for relative navigation

    this._controls.$relative = (settings.navContainer ? $(settings.navContainer) : $('<div>').addClass(settings.navContainerClass).appendTo(this.$element)).addClass('disabled');
    this._controls.$previous = $('<' + settings.navElement + '>').addClass(settings.navClass[0]).html(settings.navText[0]).prependTo(this._controls.$relative).on('click', $.proxy(function (e) {
      this.prev(settings.navSpeed);
    }, this));
    this._controls.$next = $('<' + settings.navElement + '>').addClass(settings.navClass[1]).html(settings.navText[1]).appendTo(this._controls.$relative).on('click', $.proxy(function (e) {
      this.next(settings.navSpeed);
    }, this)); // create DOM structure for absolute navigation

    if (!settings.dotsData) {
      this._templates = [$('<div>').addClass(settings.dotClass).append($('<span>')).prop('outerHTML')];
    }

    this._controls.$absolute = (settings.dotsContainer ? $(settings.dotsContainer) : $('<div>').addClass(settings.dotsClass).appendTo(this.$element)).addClass('disabled');

    this._controls.$absolute.on('click', 'div', $.proxy(function (e) {
      var index = $(e.target).parent().is(this._controls.$absolute) ? $(e.target).index() : $(e.target).parent().index();
      e.preventDefault();
      this.to(index, settings.dotsSpeed);
    }, this)); // override public methods of the carousel


    for (override in this._overrides) {
      this._core[override] = $.proxy(this[override], this);
    }
  };
  /**
   * Destroys the plugin.
   * @protected
   */


  Navigation.prototype.destroy = function () {
    var handler, control, property, override;

    for (handler in this._handlers) {
      this.$element.off(handler, this._handlers[handler]);
    }

    for (control in this._controls) {
      this._controls[control].remove();
    }

    for (override in this.overides) {
      this._core[override] = this._overrides[override];
    }

    for (property in Object.getOwnPropertyNames(this)) {
      typeof this[property] != 'function' && (this[property] = null);
    }
  };
  /**
   * Updates the internal state.
   * @protected
   */


  Navigation.prototype.update = function () {
    var i,
        j,
        k,
        lower = this._core.clones().length / 2,
        upper = lower + this._core.items().length,
        maximum = this._core.maximum(true),
        settings = this._core.settings,
        size = settings.center || settings.autoWidth || settings.dotsData ? 1 : settings.dotsEach || settings.items;

    if (settings.slideBy !== 'page') {
      settings.slideBy = Math.min(settings.slideBy, settings.items);
    }

    if (settings.dots || settings.slideBy == 'page') {
      this._pages = [];

      for (i = lower, j = 0, k = 0; i < upper; i++) {
        if (j >= size || j === 0) {
          this._pages.push({
            start: Math.min(maximum, i - lower),
            end: i - lower + size - 1
          });

          if (Math.min(maximum, i - lower) === maximum) {
            break;
          }

          j = 0, ++k;
        }

        j += this._core.mergers(this._core.relative(i));
      }
    }
  };
  /**
   * Draws the user interface.
   * @todo The option `dotsData` wont work.
   * @protected
   */


  Navigation.prototype.draw = function () {
    var difference,
        settings = this._core.settings,
        disabled = this._core.items().length <= settings.items,
        index = this._core.relative(this._core.current()),
        loop = settings.loop || settings.rewind;

    this._controls.$relative.toggleClass('disabled', !settings.nav || disabled);

    if (settings.nav) {
      this._controls.$previous.toggleClass('disabled', !loop && index <= this._core.minimum(true));

      this._controls.$next.toggleClass('disabled', !loop && index >= this._core.maximum(true));
    }

    this._controls.$absolute.toggleClass('disabled', !settings.dots || disabled);

    if (settings.dots) {
      difference = this._pages.length - this._controls.$absolute.children().length;

      if (settings.dotsData && difference !== 0) {
        this._controls.$absolute.html(this._templates.join(''));
      } else if (difference > 0) {
        this._controls.$absolute.append(new Array(difference + 1).join(this._templates[0]));
      } else if (difference < 0) {
        this._controls.$absolute.children().slice(difference).remove();
      }

      this._controls.$absolute.find('.active').removeClass('active');

      this._controls.$absolute.children().eq($.inArray(this.current(), this._pages)).addClass('active');
    }
  };
  /**
   * Extends event data.
   * @protected
   * @param {Event} event - The event object which gets thrown.
   */


  Navigation.prototype.onTrigger = function (event) {
    var settings = this._core.settings;
    event.page = {
      index: $.inArray(this.current(), this._pages),
      count: this._pages.length,
      size: settings && (settings.center || settings.autoWidth || settings.dotsData ? 1 : settings.dotsEach || settings.items)
    };
  };
  /**
   * Gets the current page position of the carousel.
   * @protected
   * @returns {Number}
   */


  Navigation.prototype.current = function () {
    var current = this._core.relative(this._core.current());

    return $.grep(this._pages, $.proxy(function (page, index) {
      return page.start <= current && page.end >= current;
    }, this)).pop();
  };
  /**
   * Gets the current succesor/predecessor position.
   * @protected
   * @returns {Number}
   */


  Navigation.prototype.getPosition = function (successor) {
    var position,
        length,
        settings = this._core.settings;

    if (settings.slideBy == 'page') {
      position = $.inArray(this.current(), this._pages);
      length = this._pages.length;
      successor ? ++position : --position;
      position = this._pages[(position % length + length) % length].start;
    } else {
      position = this._core.relative(this._core.current());
      length = this._core.items().length;
      successor ? position += settings.slideBy : position -= settings.slideBy;
    }

    return position;
  };
  /**
   * Slides to the next item or page.
   * @public
   * @param {Number} [speed=false] - The time in milliseconds for the transition.
   */


  Navigation.prototype.next = function (speed) {
    $.proxy(this._overrides.to, this._core)(this.getPosition(true), speed);
  };
  /**
   * Slides to the previous item or page.
   * @public
   * @param {Number} [speed=false] - The time in milliseconds for the transition.
   */


  Navigation.prototype.prev = function (speed) {
    $.proxy(this._overrides.to, this._core)(this.getPosition(false), speed);
  };
  /**
   * Slides to the specified item or page.
   * @public
   * @param {Number} position - The position of the item or page.
   * @param {Number} [speed] - The time in milliseconds for the transition.
   * @param {Boolean} [standard=false] - Whether to use the standard behaviour or not.
   */


  Navigation.prototype.to = function (position, speed, standard) {
    var length;

    if (!standard && this._pages.length) {
      length = this._pages.length;
      $.proxy(this._overrides.to, this._core)(this._pages[(position % length + length) % length].start, speed);
    } else {
      $.proxy(this._overrides.to, this._core)(position, speed);
    }
  };

  $.fn.owlCarousel.Constructor.Plugins.Navigation = Navigation;
})(window.Zepto || __webpack_provided_window_dot_jQuery, window, document);
/**
 * Hash Plugin
 * @version 2.1.0
 * @author Artus Kolanowski
 * @author David Deutsch
 * @license The MIT License (MIT)
 */


;

(function ($, window, document, undefined) {
  'use strict';
  /**
   * Creates the hash plugin.
   * @class The Hash Plugin
   * @param {Owl} carousel - The Owl Carousel
   */

  var Hash = function Hash(carousel) {
    /**
     * Reference to the core.
     * @protected
     * @type {Owl}
     */
    this._core = carousel;
    /**
     * Hash index for the items.
     * @protected
     * @type {Object}
     */

    this._hashes = {};
    /**
     * The carousel element.
     * @type {jQuery}
     */

    this.$element = this._core.$element;
    /**
     * All event handlers.
     * @protected
     * @type {Object}
     */

    this._handlers = {
      'initialized.owl.carousel': $.proxy(function (e) {
        if (e.namespace && this._core.settings.startPosition === 'URLHash') {
          $(window).trigger('hashchange.owl.navigation');
        }
      }, this),
      'prepared.owl.carousel': $.proxy(function (e) {
        if (e.namespace) {
          var hash = $(e.content).find('[data-hash]').addBack('[data-hash]').attr('data-hash');

          if (!hash) {
            return;
          }

          this._hashes[hash] = e.content;
        }
      }, this),
      'changed.owl.carousel': $.proxy(function (e) {
        if (e.namespace && e.property.name === 'position') {
          var current = this._core.items(this._core.relative(this._core.current())),
              hash = $.map(this._hashes, function (item, hash) {
            return item === current ? hash : null;
          }).join();

          if (!hash || window.location.hash.slice(1) === hash) {
            return;
          }

          window.location.hash = hash;
        }
      }, this)
    }; // set default options

    this._core.options = $.extend({}, Hash.Defaults, this._core.options); // register the event handlers

    this.$element.on(this._handlers); // register event listener for hash navigation

    $(window).on('hashchange.owl.navigation', $.proxy(function (e) {
      var hash = window.location.hash.substring(1),
          items = this._core.$stage.children(),
          position = this._hashes[hash] && items.index(this._hashes[hash]);

      if (position === undefined || position === this._core.current()) {
        return;
      }

      this._core.to(this._core.relative(position), false, true);
    }, this));
  };
  /**
   * Default options.
   * @public
   */


  Hash.Defaults = {
    URLhashListener: false
  };
  /**
   * Destroys the plugin.
   * @public
   */

  Hash.prototype.destroy = function () {
    var handler, property;
    $(window).off('hashchange.owl.navigation');

    for (handler in this._handlers) {
      this._core.$element.off(handler, this._handlers[handler]);
    }

    for (property in Object.getOwnPropertyNames(this)) {
      typeof this[property] != 'function' && (this[property] = null);
    }
  };

  $.fn.owlCarousel.Constructor.Plugins.Hash = Hash;
})(window.Zepto || __webpack_provided_window_dot_jQuery, window, document);
/**
 * Support Plugin
 *
 * @version 2.1.0
 * @author Vivid Planet Software GmbH
 * @author Artus Kolanowski
 * @author David Deutsch
 * @license The MIT License (MIT)
 */


;

(function ($, window, document, undefined) {
  var style = $('<support>').get(0).style,
      prefixes = 'Webkit Moz O ms'.split(' '),
      events = {
    transition: {
      end: {
        WebkitTransition: 'webkitTransitionEnd',
        MozTransition: 'transitionend',
        OTransition: 'oTransitionEnd',
        transition: 'transitionend'
      }
    },
    animation: {
      end: {
        WebkitAnimation: 'webkitAnimationEnd',
        MozAnimation: 'animationend',
        OAnimation: 'oAnimationEnd',
        animation: 'animationend'
      }
    }
  },
      tests = {
    csstransforms: function csstransforms() {
      return !!test('transform');
    },
    csstransforms3d: function csstransforms3d() {
      return !!test('perspective');
    },
    csstransitions: function csstransitions() {
      return !!test('transition');
    },
    cssanimations: function cssanimations() {
      return !!test('animation');
    }
  };

  function test(property, prefixed) {
    var result = false,
        upper = property.charAt(0).toUpperCase() + property.slice(1);
    $.each((property + ' ' + prefixes.join(upper + ' ') + upper).split(' '), function (i, property) {
      if (style[property] !== undefined) {
        result = prefixed ? property : true;
        return false;
      }
    });
    return result;
  }

  function prefixed(property) {
    return test(property, true);
  }

  if (tests.csstransitions()) {
    /* jshint -W053 */
    $.support.transition = new String(prefixed('transition'));
    $.support.transition.end = events.transition.end[$.support.transition];
  }

  if (tests.cssanimations()) {
    /* jshint -W053 */
    $.support.animation = new String(prefixed('animation'));
    $.support.animation.end = events.animation.end[$.support.animation];
  }

  if (tests.csstransforms()) {
    /* jshint -W053 */
    $.support.transform = new String(prefixed('transform'));
    $.support.transform3d = tests.csstransforms3d();
  }
})(window.Zepto || __webpack_provided_window_dot_jQuery, window, document);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"), __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

/***/ }),

/***/ "./src/Resources/views/theme/assets/js/script.js":
/*!*******************************************************!*\
  !*** ./src/Resources/views/theme/assets/js/script.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(__webpack_provided_window_dot_jQuery) {(function ($) {
  "use strict"; //Hide Loading Box (Preloader)

  function handlePreloader() {
    if ($('.preloader').length) {
      $('.preloader').delay(200).fadeOut(500);
    }
  } //Update Header Style and Scroll to Top


  function headerStyle() {
    if ($('.main-header').length) {
      var windowpos = $(window).scrollTop();
      var siteHeader = $('.main-header');
      var siteHeaderHeight = $('.main-header').height();
      var scrollLink = $('.scroll-to-top');

      if (windowpos >= siteHeaderHeight) {
        siteHeader.addClass('fixed-header');
        scrollLink.fadeIn(300);
      } else {
        siteHeader.removeClass('fixed-header');
        scrollLink.fadeOut(300);
      }
    }
  } //headerStyle();
  //Event Countdown Timer


  if ($('.time-countdown').length) {
    $('.time-countdown').each(function () {
      var $this = $(this),
          finalDate = $(this).data('countdown');
      $this.countdown(finalDate, function (event) {
        var $this = $(this).html(event.strftime('' + '<div class="counter-column"><span class="count">%D</span>Days</div> ' + '<div class="counter-column"><span class="count">%H</span>Hours</div>  ' + '<div class="counter-column"><span class="count">%M</span>Minutes</div>  ' + '<div class="counter-column"><span class="count">%S</span>Seconds</div>'));
      });
    });
  } //Fact Counter + Text Count


  if ($('.count-box').length) {
    $('.count-box').appear(function () {
      var $t = $(this),
          n = $t.find(".count-text").attr("data-stop"),
          r = parseInt($t.find(".count-text").attr("data-speed"), 10);

      if (!$t.hasClass("counted")) {
        $t.addClass("counted");
        $({
          countNum: $t.find(".count-text").text()
        }).animate({
          countNum: n
        }, {
          duration: r,
          easing: "linear",
          step: function step() {
            $t.find(".count-text").text(Math.floor(this.countNum));
          },
          complete: function complete() {
            $t.find(".count-text").text(this.countNum);
          }
        });
      }
    }, {
      accY: 0
    });
  } //Product Tabs


  if ($('.project-tab').length) {
    $('.project-tab .product-tab-btns .p-tab-btn').on('click', function (e) {
      e.preventDefault();
      var target = $($(this).attr('data-tab'));

      if ($(target).hasClass('actve-tab')) {
        return false;
      } else {
        $('.project-tab .product-tab-btns .p-tab-btn').removeClass('active-btn');
        $(this).addClass('active-btn');
        $('.project-tab .p-tabs-content .p-tab').removeClass('active-tab');
        $(target).addClass('active-tab');
      }
    });
  } //Jquery Spinner / Quantity Spinner


  if ($('.quantity-spinner').length) {
    $("input.quantity-spinner").TouchSpin({
      verticalbuttons: true
    });
  } //Product Carousel


  if ($('.project-carousel').length) {
    $('.project-carousel').owlCarousel({
      loop: true,
      margin: 30,
      nav: true,
      smartSpeed: 700,
      autoplay: 5000,
      navText: ['<span class="fa fa-angle-left"></span>', '<span class="fa fa-angle-right"></span>'],
      responsive: {
        0: {
          items: 1
        },
        600: {
          items: 2
        },
        800: {
          items: 3
        },
        1024: {
          items: 4
        },
        1200: {
          items: 5
        }
      }
    });
  } //Product Carousel Two


  if ($('.project-carousel-two').length) {
    $('.project-carousel-two').owlCarousel({
      loop: true,
      margin: 30,
      nav: true,
      smartSpeed: 700,
      autoplay: 5000,
      navText: ['<span class="fa fa-angle-left"></span>', '<span class="fa fa-angle-right"></span>'],
      responsive: {
        0: {
          items: 1
        },
        600: {
          items: 2
        },
        800: {
          items: 3
        },
        1024: {
          items: 4
        },
        1200: {
          items: 4
        }
      }
    });
  } //Text Rotator


  if ($('.slider-banner-section .content h2 span').length) {} // $(".slider-banner-section .content h2 span").textrotator({
  // animation: "flip",
  // speed: 3000
  // });
  //Tabs Box


  if ($('.tabs-box').length) {
    $('.tabs-box .tab-buttons .tab-btn').on('click', function (e) {
      e.preventDefault();
      var target = $($(this).attr('data-tab'));

      if ($(target).is(':visible')) {
        return false;
      } else {
        target.parents('.tabs-box').find('.tab-buttons').find('.tab-btn').removeClass('active-btn');
        $(this).addClass('active-btn');
        target.parents('.tabs-box').find('.tabs-content').find('.tab').fadeOut(0);
        target.parents('.tabs-box').find('.tabs-content').find('.tab').removeClass('active-tab');
        $(target).fadeIn(300);
        $(target).addClass('active-tab');
      }
    });
  } //Accordion Box


  if ($('.accordion-box').length) {
    $(".accordion-box").on('click', '.acc-btn', function () {
      var outerBox = $(this).parents('.accordion-box');
      var target = $(this).parents('.accordion');

      if ($(this).hasClass('active') !== true) {
        $(outerBox).find('.accordion .acc-btn').removeClass('active');
      }

      if ($(this).next('.acc-content').is(':visible')) {
        return false;
      } else {
        $(this).addClass('active');
        $(outerBox).children('.accordion').removeClass('active-block');
        $(outerBox).find('.accordion').children('.acc-content').slideUp(300);
        target.addClass('active-block');
        $(this).next('.acc-content').slideDown(300);
      }
    });
  } //Two Item Carousel


  if ($('.two-item-carousel').length) {
    $('.two-item-carousel').owlCarousel({
      loop: true,
      margin: 90,
      nav: true,
      smartSpeed: 700,
      autoplay: 4000,
      navText: ['<span class="fa fa-angle-left"></span>', '<span class="fa fa-angle-right"></span>'],
      responsive: {
        0: {
          items: 1
        },
        600: {
          items: 1
        },
        800: {
          items: 1
        },
        1024: {
          items: 2
        },
        1200: {
          items: 2
        }
      }
    });
  } //Four Item Carousel


  if ($('.four-item-carousel').length) {
    $('.four-item-carousel').owlCarousel({
      loop: true,
      margin: 30,
      nav: true,
      smartSpeed: 700,
      autoplay: 4000,
      navText: ['<span class="fa fa-angle-left"></span>', '<span class="fa fa-angle-right"></span>'],
      responsive: {
        0: {
          items: 1
        },
        600: {
          items: 2
        },
        800: {
          items: 2
        },
        1024: {
          items: 3
        },
        1200: {
          items: 4
        }
      }
    });
  } //Sortable Masonary with Filters


  function sortableMasonry() {
    if ($('.sortable-masonry').length) {
      var winDow = $(window); // Needed variables

      var $container = $('.sortable-masonry .items-container');
      var $filter = $('.filter-btns');
      $container.isotope({
        filter: '*',
        masonry: {
          columnWidth: '.masonry-item.col-lg-4'
        },
        animationOptions: {
          duration: 500,
          easing: 'linear'
        }
      }); // Isotope Filter 

      $filter.find('li').on('click', function () {
        var selector = $(this).attr('data-filter');

        try {
          $container.isotope({
            filter: selector,
            animationOptions: {
              duration: 500,
              easing: 'linear',
              queue: false
            }
          });
        } catch (err) {}

        return false;
      });
      winDow.on('resize', function () {
        var selector = $filter.find('li.active').attr('data-filter');
        $container.isotope({
          filter: selector,
          animationOptions: {
            duration: 500,
            easing: 'linear',
            queue: false
          }
        });
      });
      var filterItemA = $('.filter-btns li');
      filterItemA.on('click', function () {
        var $this = $(this);

        if (!$this.hasClass('active')) {
          filterItemA.removeClass('active');
          $this.addClass('active');
        }
      });
    }
  }

  sortableMasonry(); // Sponsors Carousel

  if ($('.sponsors-carousel').length) {
    $('.sponsors-carousel').owlCarousel({
      loop: true,
      margin: 0,
      nav: true,
      smartSpeed: 500,
      autoplay: 4000,
      navText: ['<span class="fa fa-angle-left"></span>', '<span class="fa fa-angle-right"></span>'],
      responsive: {
        0: {
          items: 1
        },
        480: {
          items: 2
        },
        600: {
          items: 3
        },
        800: {
          items: 5
        },
        1024: {
          items: 6
        }
      }
    });
  } //LightBox / Fancybox


  if ($('.lightbox-image').length) {
    $('.lightbox-image').fancybox({
      openEffect: 'fade',
      closeEffect: 'fade',
      helpers: {
        media: {}
      }
    });
  } //Gallery Filters


  if ($('.filter-list').length) {
    $('.filter-list').mixItUp({});
  } // Scroll to a Specific Div


  if ($('.scroll-to-target').length) {
    $(".scroll-to-target").on('click', function () {
      var target = $(this).attr('data-target'); // animate

      $('html, body').animate({
        scrollTop: $(target).offset().top
      }, 1500);
    });
  } // Elements Animation


  if ($('.wow').length) {
    var wow = new WOW({
      boxClass: 'wow',
      // animated element css class (default is wow)
      animateClass: 'animated',
      // animation css class (default is animated)
      offset: 0,
      // distance to the element when triggering the animation (default is 0)
      mobile: false,
      // trigger animations on mobile devices (default is true)
      live: true // act on asynchronously loaded content (default is true)

    });
    wow.init();
  }
  /* ==========================================================================
     When document is Scrollig, do
     ========================================================================== */


  $(window).on('scroll', function () {
    headerStyle();
  });
  /* ==========================================================================
     When document is loading, do
     ========================================================================== */

  $(window).on('load', function () {
    handlePreloader();
    sortableMasonry();
  });
  var contactForm = $("#contact-form");

  if ($(contactForm).length) {
    Captcha.load();
    $(contactForm).submit(function (e) {
      var email = $("[name=email]", contactForm).val();
      var phone = $("[name=phone]", contactForm).val();

      if (email === '' && phone === '') {
        return false;
      }
    });
  }
})(__webpack_provided_window_dot_jQuery);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

/***/ }),

/***/ "./src/Resources/views/theme/assets/js/wow.js":
/*!****************************************************!*\
  !*** ./src/Resources/views/theme/assets/js/wow.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*! WOW - v1.0.1 - 2014-08-15
* Copyright (c) 2014 Matthieu Aussaguel; Licensed MIT */
(function () {
  var a,
      b,
      c,
      d = function d(a, b) {
    return function () {
      return a.apply(b, arguments);
    };
  },
      e = [].indexOf || function (a) {
    for (var b = 0, c = this.length; c > b; b++) {
      if (b in this && this[b] === a) return b;
    }

    return -1;
  };

  b = function () {
    function a() {}

    return a.prototype.extend = function (a, b) {
      var c, d;

      for (c in b) {
        d = b[c], null == a[c] && (a[c] = d);
      }

      return a;
    }, a.prototype.isMobile = function (a) {
      return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(a);
    }, a;
  }(), c = this.WeakMap || this.MozWeakMap || (c = function () {
    function a() {
      this.keys = [], this.values = [];
    }

    return a.prototype.get = function (a) {
      var b, c, d, e, f;

      for (f = this.keys, b = d = 0, e = f.length; e > d; b = ++d) {
        if (c = f[b], c === a) return this.values[b];
      }
    }, a.prototype.set = function (a, b) {
      var c, d, e, f, g;

      for (g = this.keys, c = e = 0, f = g.length; f > e; c = ++e) {
        if (d = g[c], d === a) return void (this.values[c] = b);
      }

      return this.keys.push(a), this.values.push(b);
    }, a;
  }()), a = this.MutationObserver || this.WebkitMutationObserver || this.MozMutationObserver || (a = function () {
    function a() {
      console.warn("MutationObserver is not supported by your browser."), console.warn("WOW.js cannot detect dom mutations, please call .sync() after loading new content.");
    }

    return a.notSupported = !0, a.prototype.observe = function () {}, a;
  }()), this.WOW = function () {
    function f(a) {
      null == a && (a = {}), this.scrollCallback = d(this.scrollCallback, this), this.scrollHandler = d(this.scrollHandler, this), this.start = d(this.start, this), this.scrolled = !0, this.config = this.util().extend(a, this.defaults), this.animationNameCache = new c();
    }

    return f.prototype.defaults = {
      boxClass: "wow",
      animateClass: "animated",
      offset: 0,
      mobile: !0,
      live: !0
    }, f.prototype.init = function () {
      var a;
      return this.element = window.document.documentElement, "interactive" === (a = document.readyState) || "complete" === a ? this.start() : document.addEventListener("DOMContentLoaded", this.start), this.finished = [];
    }, f.prototype.start = function () {
      var b, c, d, e;
      if (this.stopped = !1, this.boxes = function () {
        var a, c, d, e;

        for (d = this.element.querySelectorAll("." + this.config.boxClass), e = [], a = 0, c = d.length; c > a; a++) {
          b = d[a], e.push(b);
        }

        return e;
      }.call(this), this.all = function () {
        var a, c, d, e;

        for (d = this.boxes, e = [], a = 0, c = d.length; c > a; a++) {
          b = d[a], e.push(b);
        }

        return e;
      }.call(this), this.boxes.length) if (this.disabled()) this.resetStyle();else {
        for (e = this.boxes, c = 0, d = e.length; d > c; c++) {
          b = e[c], this.applyStyle(b, !0);
        }

        window.addEventListener("scroll", this.scrollHandler, !1), window.addEventListener("resize", this.scrollHandler, !1), this.interval = setInterval(this.scrollCallback, 50);
      }
      return this.config.live ? new a(function (a) {
        return function (b) {
          var c, d, e, f, g;

          for (g = [], e = 0, f = b.length; f > e; e++) {
            d = b[e], g.push(function () {
              var a, b, e, f;

              for (e = d.addedNodes || [], f = [], a = 0, b = e.length; b > a; a++) {
                c = e[a], f.push(this.doSync(c));
              }

              return f;
            }.call(a));
          }

          return g;
        };
      }(this)).observe(document.body, {
        childList: !0,
        subtree: !0
      }) : void 0;
    }, f.prototype.stop = function () {
      return this.stopped = !0, window.removeEventListener("scroll", this.scrollHandler, !1), window.removeEventListener("resize", this.scrollHandler, !1), null != this.interval ? clearInterval(this.interval) : void 0;
    }, f.prototype.sync = function () {
      return a.notSupported ? this.doSync(this.element) : void 0;
    }, f.prototype.doSync = function (a) {
      var b, c, d, f, g;

      if (!this.stopped) {
        if (null == a && (a = this.element), 1 !== a.nodeType) return;

        for (a = a.parentNode || a, f = a.querySelectorAll("." + this.config.boxClass), g = [], c = 0, d = f.length; d > c; c++) {
          b = f[c], e.call(this.all, b) < 0 ? (this.applyStyle(b, !0), this.boxes.push(b), this.all.push(b), g.push(this.scrolled = !0)) : g.push(void 0);
        }

        return g;
      }
    }, f.prototype.show = function (a) {
      return this.applyStyle(a), a.className = "" + a.className + " " + this.config.animateClass;
    }, f.prototype.applyStyle = function (a, b) {
      var c, d, e;
      return d = a.getAttribute("data-wow-duration"), c = a.getAttribute("data-wow-delay"), e = a.getAttribute("data-wow-iteration"), this.animate(function (f) {
        return function () {
          return f.customStyle(a, b, d, c, e);
        };
      }(this));
    }, f.prototype.animate = function () {
      return "requestAnimationFrame" in window ? function (a) {
        return window.requestAnimationFrame(a);
      } : function (a) {
        return a();
      };
    }(), f.prototype.resetStyle = function () {
      var a, b, c, d, e;

      for (d = this.boxes, e = [], b = 0, c = d.length; c > b; b++) {
        a = d[b], e.push(a.setAttribute("style", "visibility: visible;"));
      }

      return e;
    }, f.prototype.customStyle = function (a, b, c, d, e) {
      return b && this.cacheAnimationName(a), a.style.visibility = b ? "hidden" : "visible", c && this.vendorSet(a.style, {
        animationDuration: c
      }), d && this.vendorSet(a.style, {
        animationDelay: d
      }), e && this.vendorSet(a.style, {
        animationIterationCount: e
      }), this.vendorSet(a.style, {
        animationName: b ? "none" : this.cachedAnimationName(a)
      }), a;
    }, f.prototype.vendors = ["moz", "webkit"], f.prototype.vendorSet = function (a, b) {
      var c, d, e, f;
      f = [];

      for (c in b) {
        d = b[c], a["" + c] = d, f.push(function () {
          var b, f, g, h;

          for (g = this.vendors, h = [], b = 0, f = g.length; f > b; b++) {
            e = g[b], h.push(a["" + e + c.charAt(0).toUpperCase() + c.substr(1)] = d);
          }

          return h;
        }.call(this));
      }

      return f;
    }, f.prototype.vendorCSS = function (a, b) {
      var c, d, e, f, g, h;

      for (d = window.getComputedStyle(a), c = d.getPropertyCSSValue(b), h = this.vendors, f = 0, g = h.length; g > f; f++) {
        e = h[f], c = c || d.getPropertyCSSValue("-" + e + "-" + b);
      }

      return c;
    }, f.prototype.animationName = function (a) {
      var b;

      try {
        b = this.vendorCSS(a, "animation-name").cssText;
      } catch (c) {
        b = window.getComputedStyle(a).getPropertyValue("animation-name");
      }

      return "none" === b ? "" : b;
    }, f.prototype.cacheAnimationName = function (a) {
      return this.animationNameCache.set(a, this.animationName(a));
    }, f.prototype.cachedAnimationName = function (a) {
      return this.animationNameCache.get(a);
    }, f.prototype.scrollHandler = function () {
      return this.scrolled = !0;
    }, f.prototype.scrollCallback = function () {
      var a;
      return !this.scrolled || (this.scrolled = !1, this.boxes = function () {
        var b, c, d, e;

        for (d = this.boxes, e = [], b = 0, c = d.length; c > b; b++) {
          a = d[b], a && (this.isVisible(a) ? this.show(a) : e.push(a));
        }

        return e;
      }.call(this), this.boxes.length || this.config.live) ? void 0 : this.stop();
    }, f.prototype.offsetTop = function (a) {
      for (var b; void 0 === a.offsetTop;) {
        a = a.parentNode;
      }

      for (b = a.offsetTop; a = a.offsetParent;) {
        b += a.offsetTop;
      }

      return b;
    }, f.prototype.isVisible = function (a) {
      var b, c, d, e, f;
      return c = a.getAttribute("data-wow-offset") || this.config.offset, f = window.pageYOffset, e = f + Math.min(this.element.clientHeight, innerHeight) - c, d = this.offsetTop(a), b = d + a.clientHeight, e >= d && b >= f;
    }, f.prototype.util = function () {
      return null != this._util ? this._util : this._util = new b();
    }, f.prototype.disabled = function () {
      return !this.config.mobile && this.util().isMobile(navigator.userAgent);
    }, f;
  }();
}).call(this);

/***/ }),

/***/ "./src/Resources/views/theme/assets/main.js":
/*!**************************************************!*\
  !*** ./src/Resources/views/theme/assets/main.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(jQuery, global) {__webpack_require__(/*! ./css/bootstrap.css */ "./src/Resources/views/theme/assets/css/bootstrap.css");

__webpack_require__(/*! ./plugins/revolution/css/settings.css */ "./src/Resources/views/theme/assets/plugins/revolution/css/settings.css");

__webpack_require__(/*! ./plugins/revolution/css/layers.css */ "./src/Resources/views/theme/assets/plugins/revolution/css/layers.css");

__webpack_require__(/*! ./plugins/revolution/css/navigation.css */ "./src/Resources/views/theme/assets/plugins/revolution/css/navigation.css");

__webpack_require__(/*! ./css/style.css */ "./src/Resources/views/theme/assets/css/style.css");

__webpack_require__(/*! ./css/style-menu.css */ "./src/Resources/views/theme/assets/css/style-menu.css");

__webpack_require__(/*! ./css/style-overwrite.css */ "./src/Resources/views/theme/assets/css/style-overwrite.css");

__webpack_require__(/*! ./css/responsive.css */ "./src/Resources/views/theme/assets/css/responsive.css");

var $ = jQuery = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");

global.$ = global.jQuery = $;

__webpack_require__(/*! jquery-ui */ "./node_modules/jquery-ui/ui/widget.js");

__webpack_require__(/*! ./js/jquery.fancybox.js */ "./src/Resources/views/theme/assets/js/jquery.fancybox.js");

__webpack_require__(/*! ./js/bootstrap.min.js */ "./src/Resources/views/theme/assets/js/bootstrap.min.js"); // require('./plugins/TweenLite.min.js');
// require('./plugins/CSSPlugin.min.js');
// require('./plugins/revolution/js/jquery.themepunch.revolution.min.js');
// require('./plugins/revolution/js/jquery.themepunch.tools.min.js');
// require('./plugins/revolution/js/extensions/revolution.extension.actions.min.js');
// require('./plugins/revolution/js/extensions/revolution.extension.carousel.min.js');
// require('./plugins/revolution/js/extensions/revolution.extension.kenburn.min.js');
// require('./plugins/revolution/js/extensions/revolution.extension.layeranimation.min.js');
// require('./plugins/revolution/js/extensions/revolution.extension.migration.min.js');
// require('./plugins/revolution/js/extensions/revolution.extension.navigation.min.js');
// require('./plugins/revolution/js/extensions/revolution.extension.parallax.min.js');
// require('./plugins/revolution/js/extensions/revolution.extension.slideanims.min.js');
// require('./plugins/revolution/js/extensions/revolution.extension.video.min.js');
//
//require('./js/main-slider-script.js');
//require('./js/validate.js');


__webpack_require__(/*! ./js/isotope.js */ "./src/Resources/views/theme/assets/js/isotope.js");

__webpack_require__(/*! ./js/owl.js */ "./src/Resources/views/theme/assets/js/owl.js");

__webpack_require__(/*! ./js/mixitup.js */ "./src/Resources/views/theme/assets/js/mixitup.js");

__webpack_require__(/*! ./js/wow.js */ "./src/Resources/views/theme/assets/js/wow.js");

__webpack_require__(/*! ./js/appear.js */ "./src/Resources/views/theme/assets/js/appear.js");

__webpack_require__(/*! ./js/captcha.js */ "./src/Resources/views/theme/assets/js/captcha.js");

__webpack_require__(/*! ./js/script.js */ "./src/Resources/views/theme/assets/js/script.js");
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"), __webpack_require__(/*! ./../../../../../node_modules/webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./src/Resources/views/theme/assets/plugins/revolution/css/layers.css":
/*!****************************************************************************!*\
  !*** ./src/Resources/views/theme/assets/plugins/revolution/css/layers.css ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./src/Resources/views/theme/assets/plugins/revolution/css/navigation.css":
/*!********************************************************************************!*\
  !*** ./src/Resources/views/theme/assets/plugins/revolution/css/navigation.css ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./src/Resources/views/theme/assets/plugins/revolution/css/settings.css":
/*!******************************************************************************!*\
  !*** ./src/Resources/views/theme/assets/plugins/revolution/css/settings.css ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL1Jlc291cmNlcy92aWV3cy90aGVtZS9hc3NldHMvY3NzL2Jvb3RzdHJhcC5jc3M/YzM1MSIsIndlYnBhY2s6Ly8vLi9zcmMvUmVzb3VyY2VzL3ZpZXdzL3RoZW1lL2Fzc2V0cy9jc3MvcmVzcG9uc2l2ZS5jc3M/YzhlYSIsIndlYnBhY2s6Ly8vLi9zcmMvUmVzb3VyY2VzL3ZpZXdzL3RoZW1lL2Fzc2V0cy9jc3Mvc3R5bGUtbWVudS5jc3M/OWExOCIsIndlYnBhY2s6Ly8vLi9zcmMvUmVzb3VyY2VzL3ZpZXdzL3RoZW1lL2Fzc2V0cy9jc3Mvc3R5bGUtb3ZlcndyaXRlLmNzcz8zYjU5Iiwid2VicGFjazovLy8uL3NyYy9SZXNvdXJjZXMvdmlld3MvdGhlbWUvYXNzZXRzL2Nzcy9zdHlsZS5jc3M/NTEwZCIsIndlYnBhY2s6Ly8vLi9zcmMvUmVzb3VyY2VzL3ZpZXdzL3RoZW1lL2Fzc2V0cy9qcy9hcHBlYXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1Jlc291cmNlcy92aWV3cy90aGVtZS9hc3NldHMvanMvYm9vdHN0cmFwLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvUmVzb3VyY2VzL3ZpZXdzL3RoZW1lL2Fzc2V0cy9qcy9jYXB0Y2hhLmpzIiwid2VicGFjazovLy8uL3NyYy9SZXNvdXJjZXMvdmlld3MvdGhlbWUvYXNzZXRzL2pzL2lzb3RvcGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1Jlc291cmNlcy92aWV3cy90aGVtZS9hc3NldHMvanMvanF1ZXJ5LmZhbmN5Ym94LmpzIiwid2VicGFjazovLy8uL3NyYy9SZXNvdXJjZXMvdmlld3MvdGhlbWUvYXNzZXRzL2pzL21peGl0dXAuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1Jlc291cmNlcy92aWV3cy90aGVtZS9hc3NldHMvanMvb3dsLmpzIiwid2VicGFjazovLy8uL3NyYy9SZXNvdXJjZXMvdmlld3MvdGhlbWUvYXNzZXRzL2pzL3NjcmlwdC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvUmVzb3VyY2VzL3ZpZXdzL3RoZW1lL2Fzc2V0cy9qcy93b3cuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1Jlc291cmNlcy92aWV3cy90aGVtZS9hc3NldHMvbWFpbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvUmVzb3VyY2VzL3ZpZXdzL3RoZW1lL2Fzc2V0cy9wbHVnaW5zL3Jldm9sdXRpb24vY3NzL2xheWVycy5jc3M/ZWQ5MCIsIndlYnBhY2s6Ly8vLi9zcmMvUmVzb3VyY2VzL3ZpZXdzL3RoZW1lL2Fzc2V0cy9wbHVnaW5zL3Jldm9sdXRpb24vY3NzL25hdmlnYXRpb24uY3NzPzQ4ODkiLCJ3ZWJwYWNrOi8vLy4vc3JjL1Jlc291cmNlcy92aWV3cy90aGVtZS9hc3NldHMvcGx1Z2lucy9yZXZvbHV0aW9uL2Nzcy9zZXR0aW5ncy5jc3M/NDFjZCJdLCJuYW1lcyI6WyIkIiwiZm4iLCJhcHBlYXIiLCJvcHRpb25zIiwic2V0dGluZ3MiLCJleHRlbmQiLCJkYXRhIiwidW5kZWZpbmVkIiwib25lIiwiYWNjWCIsImFjY1kiLCJlYWNoIiwidCIsImFwcGVhcmVkIiwidHJpZ2dlciIsInciLCJ3aW5kb3ciLCJjaGVjayIsImlzIiwiYSIsInNjcm9sbExlZnQiLCJiIiwic2Nyb2xsVG9wIiwibyIsIm9mZnNldCIsIngiLCJsZWZ0IiwieSIsInRvcCIsImF4IiwiYXkiLCJ0aCIsImhlaWdodCIsIndoIiwidHciLCJ3aWR0aCIsInd3IiwibW9kaWZpZWRGbiIsInVuYmluZCIsImkiLCJpbkFycmF5IiwiY2hlY2tzIiwic3BsaWNlIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJiaW5kIiwic2Nyb2xsIiwicHVzaCIsInRpbWVvdXQiLCJjaGVja0FsbCIsImxlbmd0aCIsInJ1biIsImNsZWFyVGltZW91dCIsInNldFRpbWVvdXQiLCJuIiwib2xkIiwiciIsImpRdWVyeSIsIkVycm9yIiwianF1ZXJ5Iiwic3BsaXQiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJXZWJraXRUcmFuc2l0aW9uIiwiTW96VHJhbnNpdGlvbiIsIk9UcmFuc2l0aW9uIiwidHJhbnNpdGlvbiIsImMiLCJzdHlsZSIsImVuZCIsImVtdWxhdGVUcmFuc2l0aW9uRW5kIiwiZCIsImUiLCJzdXBwb3J0IiwiZXZlbnQiLCJzcGVjaWFsIiwiYnNUcmFuc2l0aW9uRW5kIiwiYmluZFR5cGUiLCJkZWxlZ2F0ZVR5cGUiLCJoYW5kbGUiLCJ0YXJnZXQiLCJoYW5kbGVPYmoiLCJoYW5kbGVyIiwiY2FsbCIsIm9uIiwiY2xvc2UiLCJWRVJTSU9OIiwiVFJBTlNJVElPTl9EVVJBVElPTiIsInByb3RvdHlwZSIsImciLCJkZXRhY2giLCJyZW1vdmUiLCJmIiwiYXR0ciIsInJlcGxhY2UiLCJwcmV2ZW50RGVmYXVsdCIsImNsb3Nlc3QiLCJFdmVudCIsImlzRGVmYXVsdFByZXZlbnRlZCIsInJlbW92ZUNsYXNzIiwiaGFzQ2xhc3MiLCJhbGVydCIsIkNvbnN0cnVjdG9yIiwibm9Db25mbGljdCIsInRvZ2dsZSIsInNldFN0YXRlIiwiJGVsZW1lbnQiLCJERUZBVUxUUyIsImlzTG9hZGluZyIsImxvYWRpbmdUZXh0IiwicmVzZXRUZXh0IiwicHJveHkiLCJhZGRDbGFzcyIsInByb3AiLCJyZW1vdmVBdHRyIiwiZmluZCIsInRvZ2dsZUNsYXNzIiwiYnV0dG9uIiwiZmlyc3QiLCJ0ZXN0IiwidHlwZSIsInNsaWRlIiwidG8iLCJpbnRlcnZhbCIsInBhdXNlIiwiY3ljbGUiLCIkaW5kaWNhdG9ycyIsInBhdXNlZCIsInNsaWRpbmciLCIkYWN0aXZlIiwiJGl0ZW1zIiwia2V5Ym9hcmQiLCJrZXlkb3duIiwiZG9jdW1lbnRFbGVtZW50Iiwid3JhcCIsInRhZ05hbWUiLCJ3aGljaCIsInByZXYiLCJuZXh0IiwiY2xlYXJJbnRlcnZhbCIsInNldEludGVydmFsIiwiZ2V0SXRlbUluZGV4IiwicGFyZW50IiwiY2hpbGRyZW4iLCJpbmRleCIsImdldEl0ZW1Gb3JEaXJlY3Rpb24iLCJlcSIsImgiLCJqIiwiayIsInJlbGF0ZWRUYXJnZXQiLCJkaXJlY3Rpb24iLCJsIiwibSIsIm9mZnNldFdpZHRoIiwiam9pbiIsImNhcm91c2VsIiwiJHRyaWdnZXIiLCJpZCIsInRyYW5zaXRpb25pbmciLCIkcGFyZW50IiwiZ2V0UGFyZW50IiwiYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzIiwiZGltZW5zaW9uIiwic2hvdyIsImNhbWVsQ2FzZSIsImhpZGUiLCJvZmZzZXRIZWlnaHQiLCJjb2xsYXBzZSIsImNvbnRhaW5zIiwiaW5zZXJ0QWZ0ZXIiLCJzdG9wUHJvcGFnYXRpb24iLCJkcm9wZG93biIsIiRib2R5IiwiYm9keSIsIiRkaWFsb2ciLCIkYmFja2Ryb3AiLCJpc1Nob3duIiwib3JpZ2luYWxCb2R5UGFkIiwic2Nyb2xsYmFyV2lkdGgiLCJpZ25vcmVCYWNrZHJvcENsaWNrIiwicmVtb3RlIiwibG9hZCIsIkJBQ0tEUk9QX1RSQU5TSVRJT05fRFVSQVRJT04iLCJiYWNrZHJvcCIsImNoZWNrU2Nyb2xsYmFyIiwic2V0U2Nyb2xsYmFyIiwiZXNjYXBlIiwicmVzaXplIiwiYXBwZW5kVG8iLCJhZGp1c3REaWFsb2ciLCJlbmZvcmNlRm9jdXMiLCJvZmYiLCJoaWRlTW9kYWwiLCJoYXMiLCJoYW5kbGVVcGRhdGUiLCJyZXNldEFkanVzdG1lbnRzIiwicmVzZXRTY3JvbGxiYXIiLCJyZW1vdmVCYWNrZHJvcCIsImN1cnJlbnRUYXJnZXQiLCJmb2N1cyIsInNjcm9sbEhlaWdodCIsImNsaWVudEhlaWdodCIsImNzcyIsInBhZGRpbmdMZWZ0IiwiYm9keUlzT3ZlcmZsb3dpbmciLCJwYWRkaW5nUmlnaHQiLCJpbm5lcldpZHRoIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwicmlnaHQiLCJNYXRoIiwiYWJzIiwiY2xpZW50V2lkdGgiLCJtZWFzdXJlU2Nyb2xsYmFyIiwicGFyc2VJbnQiLCJjbGFzc05hbWUiLCJhcHBlbmQiLCJyZW1vdmVDaGlsZCIsIm1vZGFsIiwiZW5hYmxlZCIsImhvdmVyU3RhdGUiLCJpblN0YXRlIiwiaW5pdCIsImFuaW1hdGlvbiIsInBsYWNlbWVudCIsInNlbGVjdG9yIiwidGVtcGxhdGUiLCJ0aXRsZSIsImRlbGF5IiwiaHRtbCIsImNvbnRhaW5lciIsInZpZXdwb3J0IiwicGFkZGluZyIsImdldE9wdGlvbnMiLCIkdmlld3BvcnQiLCJpc0Z1bmN0aW9uIiwiY2xpY2siLCJob3ZlciIsImNvbnN0cnVjdG9yIiwiZW50ZXIiLCJsZWF2ZSIsIl9vcHRpb25zIiwiZml4VGl0bGUiLCJnZXREZWZhdWx0cyIsImdldERlbGVnYXRlT3B0aW9ucyIsInRpcCIsImlzSW5TdGF0ZVRydWUiLCJoYXNDb250ZW50Iiwib3duZXJEb2N1bWVudCIsImdldFVJRCIsInNldENvbnRlbnQiLCJkaXNwbGF5IiwiZ2V0UG9zaXRpb24iLCJib3R0b20iLCJwIiwiZ2V0Q2FsY3VsYXRlZE9mZnNldCIsImFwcGx5UGxhY2VtZW50IiwicSIsIiR0aXAiLCJpc05hTiIsInNldE9mZnNldCIsInVzaW5nIiwicm91bmQiLCJnZXRWaWV3cG9ydEFkanVzdGVkRGVsdGEiLCJyZXBsYWNlQXJyb3ciLCJhcnJvdyIsImdldFRpdGxlIiwiU1ZHRWxlbWVudCIsInJhbmRvbSIsImdldEVsZW1lbnRCeUlkIiwiJGFycm93IiwiZW5hYmxlIiwiZGlzYWJsZSIsInRvZ2dsZUVuYWJsZWQiLCJkZXN0cm95IiwicmVtb3ZlRGF0YSIsInRvb2x0aXAiLCJjb250ZW50IiwiZ2V0Q29udGVudCIsInBvcG92ZXIiLCIkc2Nyb2xsRWxlbWVudCIsIm9mZnNldHMiLCJ0YXJnZXRzIiwiYWN0aXZlVGFyZ2V0IiwicHJvY2VzcyIsInJlZnJlc2giLCJnZXRTY3JvbGxIZWlnaHQiLCJtYXgiLCJpc1dpbmRvdyIsIm1hcCIsInNvcnQiLCJhY3RpdmF0ZSIsImNsZWFyIiwicGFyZW50cyIsInBhcmVudHNVbnRpbCIsInNjcm9sbHNweSIsImVsZW1lbnQiLCJ0YWIiLCIkdGFyZ2V0IiwiY2hlY2tQb3NpdGlvbiIsImNoZWNrUG9zaXRpb25XaXRoRXZlbnRMb29wIiwiYWZmaXhlZCIsInVucGluIiwicGlubmVkT2Zmc2V0IiwiUkVTRVQiLCJnZXRTdGF0ZSIsImdldFBpbm5lZE9mZnNldCIsImFmZml4Iiwib2Zmc2V0Qm90dG9tIiwib2Zmc2V0VG9wIiwiQ2FwdGNoYSIsImtleSIsImNhcHRjaGFFbGVtZW50Iiwic2NyaXB0Iiwic3JjIiwib25sb2FkIiwiZ3JlY2FwdGNoYSIsInJlYWR5IiwiZXhlY3V0ZSIsImFjdGlvbiIsInRoZW4iLCJ0b2tlbiIsImhlYWQiLCJhcHBlbmRDaGlsZCIsIm9wdGlvbiIsImlzUGxhaW5PYmplY3QiLCJzIiwidSIsImNoYXJBdCIsIl9pbml0IiwiY29uc29sZSIsImVycm9yIiwiYnJpZGdldCIsIkFycmF5Iiwic2xpY2UiLCJkZWZpbmUiLCJzcmNFbGVtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsImF0dGFjaEV2ZW50IiwiaGFuZGxlRXZlbnQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZGV0YWNoRXZlbnQiLCJpc1JlYWR5IiwicmVhZHlTdGF0ZSIsImxpc3RlbmVyIiwiRXZlbnRFbWl0dGVyIiwiZ2V0TGlzdGVuZXJzIiwiX2dldEV2ZW50cyIsIlJlZ0V4cCIsImhhc093blByb3BlcnR5IiwiZmxhdHRlbkxpc3RlbmVycyIsImdldExpc3RlbmVyc0FzT2JqZWN0IiwiYWRkTGlzdGVuZXIiLCJvbmNlIiwiYWRkT25jZUxpc3RlbmVyIiwiZGVmaW5lRXZlbnQiLCJkZWZpbmVFdmVudHMiLCJyZW1vdmVMaXN0ZW5lciIsImFkZExpc3RlbmVycyIsIm1hbmlwdWxhdGVMaXN0ZW5lcnMiLCJyZW1vdmVMaXN0ZW5lcnMiLCJyZW1vdmVFdmVudCIsIl9ldmVudHMiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJlbWl0RXZlbnQiLCJfZ2V0T25jZVJldHVyblZhbHVlIiwiZW1pdCIsInNldE9uY2VSZXR1cm5WYWx1ZSIsIl9vbmNlUmV0dXJuVmFsdWUiLCJ0b1VwcGVyQ2FzZSIsInBhcnNlRmxvYXQiLCJpbmRleE9mIiwiaW5uZXJIZWlnaHQiLCJvdXRlcldpZHRoIiwib3V0ZXJIZWlnaHQiLCJnZXRDb21wdXRlZFN0eWxlIiwiY3VycmVudFN0eWxlIiwiYm9yZGVyU3R5bGUiLCJib3JkZXJXaWR0aCIsInF1ZXJ5U2VsZWN0b3IiLCJub2RlVHlwZSIsImlzQm9yZGVyQm94IiwidiIsInBhZGRpbmdUb3AiLCJwYWRkaW5nQm90dG9tIiwiXyIsIm1hcmdpbkxlZnQiLCJtYXJnaW5SaWdodCIsIkkiLCJtYXJnaW5Ub3AiLCJtYXJnaW5Cb3R0b20iLCJMIiwiYm9yZGVyTGVmdFdpZHRoIiwiYm9yZGVyUmlnaHRXaWR0aCIsInoiLCJib3JkZXJUb3BXaWR0aCIsImJvcmRlckJvdHRvbVdpZHRoIiwiUyIsInJ1bnRpbWVTdHlsZSIsInBpeGVsTGVmdCIsInBhcmVudE5vZGUiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwicXVlcnlTZWxlY3RvckFsbCIsIm1hdGNoZXNTZWxlY3RvciIsIkVsZW1lbnQiLCJ0b0xvd2VyQ2FzZSIsImxheW91dCIsInBvc2l0aW9uIiwiX2NyZWF0ZSIsIl90cmFuc24iLCJpbmdQcm9wZXJ0aWVzIiwiY2xlYW4iLCJvbkVuZCIsImdldFNpemUiLCJzaXplIiwiaXNPcmlnaW5MZWZ0IiwiaXNPcmlnaW5Ub3AiLCJsYXlvdXRQb3NpdGlvbiIsIl90cmFuc2l0aW9uVG8iLCJzZXRQb3NpdGlvbiIsImlzVHJhbnNpdGlvbmluZyIsInRyYW5zZm9ybSIsIm9uVHJhbnNpdGlvbkVuZCIsImlzQ2xlYW5pbmciLCJnb1RvIiwibW92ZVRvIiwiX25vblRyYW5zaXRpb24iLCJfcmVtb3ZlU3R5bGVzIiwiX3RyYW5zaXRpb24iLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJmcm9tIiwiZW5hYmxlVHJhbnNpdGlvbiIsInRyYW5zaXRpb25Qcm9wZXJ0eSIsIm9ud2Via2l0VHJhbnNpdGlvbkVuZCIsIm9udHJhbnNpdGlvbmVuZCIsIm9ub3RyYW5zaXRpb25lbmQiLCJwcm9wZXJ0eU5hbWUiLCJkaXNhYmxlVHJhbnNpdGlvbiIsInJlbW92ZVRyYW5zaXRpb25TdHlsZXMiLCJyZW1vdmVFbGVtIiwicmV2ZWFsIiwiaXNIaWRkZW4iLCJoaWRkZW5TdHlsZSIsInZpc2libGVTdHlsZSIsIm9wYWNpdHkiLCJuYW1lc3BhY2UiLCJkZWZhdWx0cyIsIm91dGxheWVyR1VJRCIsImlzSW5pdExheW91dCIsIkl0ZW0iLCJjb250YWluZXJTdHlsZSIsImlzUmVzaXplQm91bmQiLCJpc1Jlc2l6aW5nQ29udGFpbmVyIiwicmVsb2FkSXRlbXMiLCJzdGFtcHMiLCJzdGFtcCIsImJpbmRSZXNpemUiLCJpdGVtcyIsIl9pdGVtaXplIiwiX2ZpbHRlckZpbmRJdGVtRWxlbWVudHMiLCJpdGVtU2VsZWN0b3IiLCJnZXRJdGVtRWxlbWVudHMiLCJfcmVzZXRMYXlvdXQiLCJfbWFuYWdlU3RhbXBzIiwiaXNMYXlvdXRJbnN0YW50IiwiX2lzTGF5b3V0SW5pdGVkIiwibGF5b3V0SXRlbXMiLCJfZ2V0TWVhc3VyZW1lbnQiLCJfZ2V0SXRlbXNGb3JMYXlvdXQiLCJfbGF5b3V0SXRlbXMiLCJfcG9zdExheW91dCIsImlzSWdub3JlZCIsIl9pdGVtc09uIiwiX2dldEl0ZW1MYXlvdXRQb3NpdGlvbiIsIml0ZW0iLCJpc0luc3RhbnQiLCJfcHJvY2Vzc0xheW91dFF1ZXVlIiwiX3Bvc2l0aW9uSXRlbSIsInJlc2l6ZUNvbnRhaW5lciIsIl9nZXRDb250YWluZXJTaXplIiwiX3NldENvbnRhaW5lck1lYXN1cmUiLCJpZ25vcmUiLCJnZXRJdGVtIiwidW5pZ25vcmUiLCJfZmluZCIsImNvbmNhdCIsInVuc3RhbXAiLCJfZ2V0Qm91bmRpbmdSZWN0IiwiX21hbmFnZVN0YW1wIiwiX2JvdW5kaW5nUmVjdCIsIl9nZXRFbGVtZW50T2Zmc2V0IiwidW5iaW5kUmVzaXplIiwib25yZXNpemUiLCJyZXNpemVUaW1lb3V0IiwibmVlZHNSZXNpemVMYXlvdXQiLCJhZGRJdGVtcyIsImFwcGVuZGVkIiwicHJlcGVuZGVkIiwiZ2V0SXRlbXMiLCJjcmVhdGUiLCJPYmplY3QiLCJnZXRBdHRyaWJ1dGUiLCJKU09OIiwicGFyc2UiLCJub2RlTmFtZSIsInRvU3RyaW5nIiwiSFRNTEVsZW1lbnQiLCJpdGVtR1VJRCIsInNvcnREYXRhIiwidXBkYXRlU29ydERhdGEiLCJnZXRTb3J0RGF0YSIsIl9zb3J0ZXJzIiwiaXNvdG9wZSIsImZpbHRlcmVkSXRlbXMiLCJuZWVkc1ZlcnRpY2FsUmVzaXplTGF5b3V0IiwiZ2V0Q29sdW1uV2lkdGgiLCJnZXRTZWdtZW50U2l6ZSIsImdldFJvd0hlaWdodCIsImdldEZpcnN0SXRlbVNpemUiLCJtb2RlcyIsIm1lYXN1cmVDb2x1bW5zIiwiY29scyIsImNvbFlzIiwibWF4WSIsImdldENvbnRhaW5lcldpZHRoIiwiY29sdW1uV2lkdGgiLCJjb250YWluZXJXaWR0aCIsImd1dHRlciIsImZsb29yIiwiaXNGaXRXaWR0aCIsIm1pbiIsIl9nZXRDb2xHcm91cCIsIl9nZXRDb250YWluZXJGaXRXaWR0aCIsImhvcml6b250YWxBbGlnbm1lbnQiLCJsYXlvdXRNb2RlIiwiaXNKUXVlcnlGaWx0ZXJpbmciLCJzb3J0QXNjZW5kaW5nIiwiTGF5b3V0TW9kZSIsIl9nZXRTb3J0ZXJzIiwic29ydEhpc3RvcnkiLCJfaW5pdExheW91dE1vZGUiLCJfdXBkYXRlSXRlbXNTb3J0RGF0YSIsImFycmFuZ2UiLCJfbGF5b3V0IiwiX2dldElzSW5zdGFudCIsIm5lZWRSZXZlYWwiLCJuZWVkSGlkZSIsIl9maWx0ZXIiLCJtYXRjaGVzIiwiX2lzSW5zdGFudCIsIl9ub1RyYW5zaXRpb24iLCJfc29ydCIsImZpbHRlciIsIl9nZXRGaWx0ZXJUZXN0IiwibWF0Y2giLCJzb3J0RGF0YVBhcnNlcnMiLCJzb3J0QnkiLCJ1bnNoaWZ0IiwiX21vZGUiLCJfZmlsdGVyUmV2ZWFsQWRkZWQiLCJpbnNlcnQiLCJzaHVmZmxlIiwiZ2V0RmlsdGVyZWRJdGVtRWxlbWVudHMiLCJTdHJpbmciLCJ0cmltIiwidGV4dENvbnRlbnQiLCJpbm5lclRleHQiLCJmYW5jeWJveCIsImxvZyIsImxvb3AiLCJtYXJnaW4iLCJhcnJvd3MiLCJpbmZvYmFyIiwidG9vbGJhciIsImJ1dHRvbnMiLCJpZGxlVGltZSIsInNtYWxsQnRuIiwicHJvdGVjdCIsImltYWdlIiwicHJlbG9hZCIsImFqYXgiLCJpZnJhbWUiLCJ0cGwiLCJzY3JvbGxpbmciLCJkZWZhdWx0VHlwZSIsImFuaW1hdGlvbkVmZmVjdCIsImFuaW1hdGlvbkR1cmF0aW9uIiwiem9vbU9wYWNpdHkiLCJ0cmFuc2l0aW9uRWZmZWN0Iiwic2xpZGVDbGFzcyIsImJhc2VDbGFzcyIsImJhc2VUcGwiLCJzcGlubmVyVHBsIiwiZXJyb3JUcGwiLCJidG5UcGwiLCJkb3dubG9hZCIsInpvb20iLCJhcnJvd0xlZnQiLCJhcnJvd1JpZ2h0IiwicGFyZW50RWwiLCJhdXRvRm9jdXMiLCJiYWNrRm9jdXMiLCJ0cmFwRm9jdXMiLCJmdWxsU2NyZWVuIiwiYXV0b1N0YXJ0IiwidG91Y2giLCJ2ZXJ0aWNhbCIsIm1vbWVudHVtIiwiaGFzaCIsIm1lZGlhIiwic2xpZGVTaG93Iiwic3BlZWQiLCJ0aHVtYnMiLCJoaWRlT25DbG9zZSIsImF4aXMiLCJ3aGVlbCIsIm9uSW5pdCIsIm5vb3AiLCJiZWZvcmVMb2FkIiwiYWZ0ZXJMb2FkIiwiYmVmb3JlU2hvdyIsImFmdGVyU2hvdyIsImJlZm9yZUNsb3NlIiwiYWZ0ZXJDbG9zZSIsIm9uQWN0aXZhdGUiLCJvbkRlYWN0aXZhdGUiLCJjbGlja0NvbnRlbnQiLCJjdXJyZW50IiwiY2xpY2tTbGlkZSIsImNsaWNrT3V0c2lkZSIsImRibGNsaWNrQ29udGVudCIsImRibGNsaWNrU2xpZGUiLCJkYmxjbGlja091dHNpZGUiLCJtb2JpbGUiLCJsYW5nIiwiaTE4biIsIkNMT1NFIiwiTkVYVCIsIlBSRVYiLCJFUlJPUiIsIlBMQVlfU1RBUlQiLCJQTEFZX1NUT1AiLCJGVUxMX1NDUkVFTiIsIlRIVU1CUyIsIkRPV05MT0FEIiwiU0hBUkUiLCJaT09NIiwiJFciLCIkRCIsImNhbGxlZCIsImlzUXVlcnkiLCJvYmoiLCJyZXF1ZXN0QUZyYW1lIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwid2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwibW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwib1JlcXVlc3RBbmltYXRpb25GcmFtZSIsImNhbGxiYWNrIiwidHJhbnNpdGlvbkVuZCIsImVsIiwidHJhbnNpdGlvbnMiLCJmb3JjZVJlZHJhdyIsIiRlbCIsIkZhbmN5Qm94Iiwib3B0cyIsInNlbGYiLCJpc01vYmlsZSIsImlzQXJyYXkiLCJncm91cCIsImN1cnJJbmRleCIsInByZXZJbmRleCIsInByZXZQb3MiLCJjdXJyUG9zIiwiZmlyc3RSdW4iLCJjcmVhdGVHcm91cCIsIiRsYXN0Rm9jdXMiLCJhY3RpdmVFbGVtZW50IiwiYmx1ciIsInNsaWRlcyIsImZpcnN0SXRlbSIsImZpcnN0SXRlbU9wdHMiLCIkc2Nyb2xsRGl2IiwiJGNvbnRhaW5lciIsImJ1dHRvblN0ciIsImdldEluc3RhbmNlIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiTVNTdHJlYW0iLCJ2YWx1ZSIsInRyYW5zbGF0ZSIsIiRyZWZzIiwiZm9yRWFjaCIsImp1bXBUbyIsInN0ciIsImFyciIsIm1ha2VBcnJheSIsIiRpdGVtIiwiZm91bmQiLCJzcmNQYXJ0cyIsIiRvcmlnIiwidmlkZW9Gb3JtYXQiLCIkdGh1bWIiLCJjYXB0aW9uIiwic2hpZnQiLCJhZGRFdmVudHMiLCJyZW1vdmVFdmVudHMiLCJwcmV2aW91cyIsImlzU2NhbGVkRG93biIsIm9yaWdpbmFsRXZlbnQiLCJ1cGRhdGUiLCJzdGFnZSIsImluc3RhbmNlIiwiaXNDbG9zaW5nIiwia2V5Y29kZSIsImtleUNvZGUiLCJpZGxlU2Vjb25kc0NvdW50ZXIiLCJpc0lkbGUiLCJzaG93Q29udHJvbHMiLCJpZGxlSW50ZXJ2YWwiLCJpc0RyYWdnaW5nIiwiaGlkZUNvbnRyb2xzIiwiZHVyYXRpb24iLCJwb3MiLCJjYW52YXNXaWR0aCIsImN1cnJlbnRQb3MiLCJ0cmFuc2l0aW9uUHJvcHMiLCJncm91cExlbiIsImlzQW5pbWF0aW5nIiwiY3JlYXRlU2xpZGUiLCJ1cGRhdGVDb250cm9scyIsImdldFRyYW5zbGF0ZSIsIiRzbGlkZSIsImlzTW92ZWQiLCJmb3JjZWREdXJhdGlvbiIsImlzTnVtZXJpYyIsImxvYWRTbGlkZSIsInN0b3AiLCJhbmltYXRlIiwiY29tcGxldGUiLCJpc0xvYWRlZCIsInJldmVhbENvbnRlbnQiLCJpc0NvbXBsZXRlIiwidXBkYXRlU2xpZGUiLCJzY2FsZVRvQWN0dWFsIiwiJHdoYXQiLCIkY29udGVudCIsImltZ1BvcyIsInBvc1giLCJwb3NZIiwic2NhbGVYIiwic2NhbGVZIiwiY2FudmFzSGVpZ2h0IiwibmV3SW1nV2lkdGgiLCJuZXdJbWdIZWlnaHQiLCJoYXNFcnJvciIsInVwZGF0ZUN1cnNvciIsIlNsaWRlU2hvdyIsImlzQWN0aXZlIiwic2NhbGVUb0ZpdCIsImdldEZpdFBvcyIsImltZ1dpZHRoIiwiaW1nSGVpZ2h0IiwibWluUmF0aW8iLCJzZXRUcmFuc2xhdGUiLCJjZW50ZXJTbGlkZSIsIm5leHRXaWR0aCIsIm5leHRIZWlnaHQiLCJpc1pvb21hYmxlIiwiZml0UG9zIiwicmV6IiwiY2FuUGFuIiwiYWpheExvYWQiLCJzZXRJbWFnZSIsInNldElmcmFtZSIsInNldEVycm9yIiwic2hvd0xvYWRpbmciLCJ1cmwiLCJzdWNjZXNzIiwidGV4dFN0YXR1cyIsImpxWEhSIiwiYWJvcnQiLCJzcmNzZXQiLCJ0ZW1wIiwicHhSYXRpbyIsIndpbmRvd1dpZHRoIiwiZGV2aWNlUGl4ZWxSYXRpbyIsInJldCIsInN1YnN0cmluZyIsInBvc3RmaXgiLCJ0aHVtYiIsIiRnaG9zdCIsInNldEJpZ0ltYWdlIiwiJGltZyIsIiRpbWFnZSIsInRpbW91dHMiLCJuYXR1cmFsV2lkdGgiLCJuYXR1cmFsSGVpZ2h0IiwiaGlkZUxvYWRpbmciLCIkaWZyYW1lIiwiRGF0ZSIsImdldFRpbWUiLCIkd3JhcCIsImZyYW1lV2lkdGgiLCJmcmFtZUhlaWdodCIsInNjcm9sbFdpZHRoIiwiJGNvbnRlbnRzIiwiY29udGVudHMiLCJjb250ZW50V2luZG93IiwiY2VpbCIsInByZXBlbmQiLCJlbXB0eSIsIiRwbGFjZWhvbGRlciIsImFmdGVyIiwiJHNtYWxsQnRuIiwiJHNwaW5uZXIiLCJlZmZlY3QiLCJlZmZlY3RDbGFzc05hbWUiLCJzdGFydCIsImdldFRodW1iUG9zIiwiaXNFbGVtZW50VmlzaWJsZSIsImVsZW1lbnRSZWN0IiwicGFyZW50UmVjdHMiLCJ2aXNpYmxlSW5BbGxQYXJlbnRzIiwicGFyZW50RWxlbWVudCIsImV2ZXJ5IiwicGFyZW50UmVjdCIsInZpc2libGVQaXhlbFgiLCJ2aXNpYmxlUGl4ZWxZIiwidGh1bWJQb3MiLCJzbGlkZVBvcyIsInByb21pc2UiLCJzaWJsaW5ncyIsImlzVmlzaWJsZSIsImRvbmUiLCJjbGVhblVwIiwibmFtZSIsImFyZ3MiLCJmb3JjZSIsIiRjYXB0aW9uIiwiaXNIaWRkZW5Db250cm9scyIsInRvZ2dsZUNvbnRyb2xzIiwidmVyc2lvbiIsImNvbW1hbmQiLCJvcGVuIiwiYWxsIiwiY3JlYXRlVG91Y2giLCJ1c2UzZCIsImRpdiIsImdldFByb3BlcnR5VmFsdWUiLCJkb2N1bWVudE1vZGUiLCJtYXRyaXgiLCJ0cmFuc1JlZ2V4IiwidHJhbnNSZXoiLCJleGVjIiwicHJvcHMiLCJsZWF2ZUFuaW1hdGlvbk5hbWUiLCJfcnVuIiwiZm9ybWF0IiwicGFyYW1zIiwicGFyYW0iLCJ5b3V0dWJlIiwibWF0Y2hlciIsImF1dG9wbGF5IiwiYXV0b2hpZGUiLCJmcyIsInJlbCIsImhkIiwid21vZGUiLCJlbmFibGVqc2FwaSIsImh0bWw1IiwicGFyYW1QbGFjZSIsInZpbWVvIiwic2hvd190aXRsZSIsInNob3dfYnlsaW5lIiwic2hvd19wb3J0cmFpdCIsImZ1bGxzY3JlZW4iLCJhcGkiLCJtZXRhY2FmZSIsImRhaWx5bW90aW9uIiwiYWRkaXRpb25hbEluZm9zIiwidmluZSIsImluc3RhZ3JhbSIsImdtYXBfcGxhY2UiLCJnbWFwX3NlYXJjaCIsInVybFBhcmFtcyIsInBhcmFtT2JqIiwicHJvdmlkZXIiLCJwcm92aWRlck5hbWUiLCJwcm92aWRlck9wdHMiLCJkZWNvZGVVUklDb21wb25lbnQiLCJjb250ZW50UHJvdmlkZXIiLCJjYW5jZWxBRnJhbWUiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsIndlYmtpdENhbmNlbEFuaW1hdGlvbkZyYW1lIiwibW96Q2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJvQ2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJwb2ludGVycyIsInJlc3VsdCIsInRvdWNoZXMiLCJjaGFuZ2VkVG91Y2hlcyIsInBhZ2VYIiwicGFnZVkiLCJjbGllbnRYIiwiY2xpZW50WSIsImRpc3RhbmNlIiwicG9pbnQyIiwicG9pbnQxIiwid2hhdCIsInNxcnQiLCJwb3ciLCJpc0NsaWNrYWJsZSIsImdldCIsIm9uY2xpY2siLCJhdHRzIiwiYXR0cmlidXRlcyIsInN1YnN0ciIsImhhc1Njcm9sbGJhcnMiLCJvdmVyZmxvd1kiLCJvdmVyZmxvd1giLCJob3Jpem9udGFsIiwiaXNTY3JvbGxhYmxlIiwiR3Vlc3R1cmVzIiwiJGJnIiwiYmciLCIkc3RhZ2UiLCJvbnRvdWNoc3RhcnQiLCJpc1RvdWNoRGV2aWNlIiwicmVhbFBvaW50cyIsInN0YXJ0UG9pbnRzIiwic3RhcnRFdmVudCIsImNhblRhcCIsImlzUGFubmluZyIsImlzU3dpcGluZyIsImlzWm9vbWluZyIsImlzU2Nyb2xsaW5nIiwic2xpZGVyU3RhcnRQb3MiLCJzbGlkZXJMYXN0UG9zIiwiY29udGVudFN0YXJ0UG9zIiwiY29udGVudExhc3RQb3MiLCJzdGFydFRpbWUiLCJkaXN0YW5jZVgiLCJkaXN0YW5jZVkiLCJvbnNjcm9sbCIsImNlbnRlclBvaW50U3RhcnRYIiwiY2VudGVyUG9pbnRTdGFydFkiLCJwZXJjZW50YWdlT2ZJbWFnZUF0UGluY2hQb2ludFgiLCJwZXJjZW50YWdlT2ZJbWFnZUF0UGluY2hQb2ludFkiLCJzdGFydERpc3RhbmNlQmV0d2VlbkZpbmdlcnMiLCJvbnRvdWNobW92ZSIsIm5ld1BvaW50cyIsIm9uU3dpcGUiLCJvblBhbiIsIm9uWm9vbSIsInN3aXBpbmciLCJhbmdsZSIsImF0YW4yIiwiUEkiLCJpblRyYW5zaXRpb24iLCJyZXF1ZXN0SWQiLCJsaW1pdE1vdmVtZW50IiwiY3VycmVudE9mZnNldFgiLCJjdXJyZW50T2Zmc2V0WSIsImN1cnJlbnRXaWR0aCIsImN1cnJlbnRIZWlnaHQiLCJtaW5UcmFuc2xhdGVYIiwibWluVHJhbnNsYXRlWSIsIm1heFRyYW5zbGF0ZVgiLCJtYXhUcmFuc2xhdGVZIiwibmV3T2Zmc2V0WCIsIm5ld09mZnNldFkiLCJsaW1pdFBvc2l0aW9uIiwibmV3V2lkdGgiLCJuZXdIZWlnaHQiLCJlbmREaXN0YW5jZUJldHdlZW5GaW5nZXJzIiwicGluY2hSYXRpbyIsInRyYW5zbGF0ZUZyb21ab29taW5nWCIsInRyYW5zbGF0ZUZyb21ab29taW5nWSIsImNlbnRlclBvaW50RW5kWCIsImNlbnRlclBvaW50RW5kWSIsInRyYW5zbGF0ZUZyb21UcmFuc2xhdGluZ1giLCJ0cmFuc2xhdGVGcm9tVHJhbnNsYXRpbmdZIiwibmV3UG9zIiwib250b3VjaGVuZCIsImRNcyIsInBhbm5pbmciLCJ6b29taW5nIiwiZW5kUG9pbnRzIiwib25UYXAiLCJ2ZWxvY2l0eVgiLCJ2ZWxvY2l0eVkiLCJzcGVlZFgiLCJlbmRQYW5uaW5nIiwiZW5kWm9vbWluZyIsImVuZFN3aXBpbmciLCJsZW4iLCJyZXNldCIsInRhcFgiLCJ0YXBZIiwid2hlcmUiLCJwcmVmaXgiLCJhZGRCYWNrIiwidGFwcGVkIiwidGltZXIiLCIkYnV0dG9uIiwic2V0Iiwia2V5cHJlc3MiLCJoaWRkZW4iLCJmbk1hcCIsInZhbCIsIkZ1bGxTY3JlZW4iLCJyZXF1ZXN0IiwiZWxlbSIsInJlcXVlc3RGdWxsc2NyZWVuIiwiQUxMT1dfS0VZQk9BUkRfSU5QVVQiLCJleGl0IiwiZXhpdEZ1bGxzY3JlZW4iLCJpc0Z1bGxzY3JlZW4iLCJCb29sZWFuIiwiZnVsbHNjcmVlbkVsZW1lbnQiLCJmdWxsc2NyZWVuRW5hYmxlZCIsImZ1bGxzY3JlZW5jaGFuZ2UiLCJGYW5jeVRodW1icyIsIiRncmlkIiwiJGxpc3QiLCJUaHVtYnMiLCJzZWNvbmQiLCJsaXN0IiwidGh1bWJXaWR0aCIsInRodW1iSGVpZ2h0Iiwid2lkdGhSYXRpbyIsImhlaWdodFJhdGlvIiwic2hhcmUiLCJlc2NhcGVIdG1sIiwic3RyaW5nIiwiZW50aXR5TWFwIiwibG9jYXRpb24iLCJlbmNvZGVVUklDb21wb25lbnQiLCJ0ZXh0IiwiaHJlZiIsImVzY2FwZVNlbGVjdG9yIiwic2VsIiwicmNzc2VzY2FwZSIsImZjc3Nlc2NhcGUiLCJjaCIsImFzQ29kZVBvaW50IiwiY2hhckNvZGVBdCIsInNob3VsZENyZWF0ZUhpc3RvcnkiLCJjdXJyZW50SGFzaCIsInRpbWVySUQiLCJwYXJzZVVybCIsInBvcCIsImdhbGxlcnkiLCJ0cmlnZ2VyRnJvbVVybCIsImdldEdhbGxlcnlJRCIsIm9yaWdIYXNoIiwiaGlzdG9yeSIsInBhdGhuYW1lIiwic2VhcmNoIiwicmVwbGFjZVN0YXRlIiwicHJldlRpbWUiLCJjdXJyVGltZSIsImRlbHRhWSIsImRlbHRhWCIsIndoZWVsRGVsdGEiLCJkZXRhaWwiLCJ1bmRmIiwiTWl4SXRVcCIsIl9leGVjQWN0aW9uIiwic2VsZWN0b3JzIiwiZWZmZWN0cyIsImVhc2luZyIsInBlcnNwZWN0aXZlRGlzdGFuY2UiLCJwZXJzcGVjdGl2ZU9yaWdpbiIsInF1ZXVlIiwicXVldWVMaW1pdCIsImFuaW1hdGVDaGFuZ2VMYXlvdXQiLCJhbmltYXRlUmVzaXplQ29udGFpbmVyIiwiYW5pbWF0ZVJlc2l6ZVRhcmdldHMiLCJzdGFnZ2VyU2VxdWVuY2UiLCJyZXZlcnNlT3V0IiwiY2FsbGJhY2tzIiwib25NaXhMb2FkIiwib25NaXhTdGFydCIsIm9uTWl4QnVzeSIsIm9uTWl4RW5kIiwib25NaXhGYWlsIiwiX3VzZXIiLCJjb250cm9scyIsImxpdmUiLCJ0b2dnbGVGaWx0ZXJCdXR0b25zIiwidG9nZ2xlTG9naWMiLCJhY3RpdmVDbGFzcyIsImNvbnRhaW5lckNsYXNzIiwiY29udGFpbmVyQ2xhc3NGYWlsIiwiXyRib2R5IiwiXyRjb250YWluZXIiLCJfJHRhcmdldHMiLCJfJHBhcmVudCIsIl8kc29ydEJ1dHRvbnMiLCJfJGZpbHRlckJ1dHRvbnMiLCJfc3Vja01vZGUiLCJfbWl4aW5nIiwiX3NvcnRpbmciLCJfY2xpY2tpbmciLCJfbG9hZGluZyIsIl9jaGFuZ2luZ0xheW91dCIsIl9jaGFuZ2luZ0NsYXNzIiwiX2NoYW5naW5nRGlzcGxheSIsIl9vcmlnT3JkZXIiLCJfc3RhcnRPcmRlciIsIl9uZXdPcmRlciIsIl9hY3RpdmVGaWx0ZXIiLCJfdG9nZ2xlQXJyYXkiLCJfdG9nZ2xlU3RyaW5nIiwiX2FjdGl2ZVNvcnQiLCJfbmV3U29ydCIsIl9zdGFydEhlaWdodCIsIl9uZXdIZWlnaHQiLCJfaW5jUGFkZGluZyIsIl9uZXdEaXNwbGF5IiwiX25ld0NsYXNzIiwiX3RhcmdldHNCb3VuZCIsIl90YXJnZXRzRG9uZSIsIl9xdWV1ZSIsIl8kc2hvdyIsIl8kaGlkZSIsIl9pbnN0YW5jZXMiLCJfaGFuZGxlZCIsIl9ib3VuZCIsIl9hY3Rpb25zIiwiX2ZpbHRlcnMiLCJleHRlbnNpb24iLCJhZGRBY3Rpb24iLCJob29rIiwiZnVuYyIsInByaW9yaXR5IiwiX2FkZEhvb2siLCJhZGRGaWx0ZXIiLCJjb2xsZWN0aW9uIiwiZG9tTm9kZSIsImNvbmZpZyIsIl9kb21Ob2RlIiwiX2lkIiwiX3BsYXRmb3JtRGV0ZWN0IiwiX2JyYWtlIiwiX2dldFByZWZpeGVkQ1NTIiwiX3JlZnJlc2giLCJfcGFyc2VTb3J0IiwiX25ld1NvcnRTdHJpbmciLCJfcHJpbnRTb3J0IiwiX2JpbmRIYW5kbGVycyIsIl9idWlsZFRvZ2dsZUFycmF5IiwiX3VwZGF0ZUNvbnRyb2xzIiwiX2J1aWxkU3RhdGUiLCJfZ29NaXgiLCJ2ZW5kb3JzVHJhbnMiLCJ2ZW5kb3JzUkFGIiwiY2hyb21lIiwiYXBwVmVyc2lvbiIsImZmIiwiSW5zdGFsbFRyaWdnZXIiLCJ2ZW5kb3IiLCJ0cmFuc1ByZWZpeCIsIl9jaHJvbWUiLCJfZmYiLCJfcHJlZml4IiwiX3ZlbmRvciIsImF0b2IiLCJnZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIm9iamVjdCIsIm5leHRFbGVtZW50U2libGluZyIsImRlZmluZVByb3BlcnR5IiwibmV4dFNpYmxpbmciLCJkYXRhc2V0IiwiZGF0YU5hbWUiLCJfaGVscGVycyIsIl9jYW1lbENhc2UiLCJtaXhQYXJlbnQiLCJmaWx0ZXJzIiwic29ydHMiLCJfcHJvY2Vzc0NsaWNrIiwidHJhY2tDbGljayIsInByb3RvIiwibmR4Iiwic2VwZXJhdG9yIiwiZ3JlcCIsIl9zdGF0ZSIsImFjdGl2ZUZpbHRlciIsIm11bHRpIiwib3V0cHV0IiwiYWRkIiwiYXJyYXlTaHVmZmxlIiwib2xkQXJyYXkiLCJuZXdBcnJheSIsIm9yZGVyIiwiX2NvbXBhcmUiLCJkZXB0aCIsImdldERhdGEiLCJhdHRyQSIsImF0dHJCIiwiZnJhZyIsIndoaXRlU3BhY2UiLCJmaXJzdENoaWxkIiwiaW5zZXJ0QmVmb3JlIiwiY3JlYXRlVGV4dE5vZGUiLCJzb3J0U3RyaW5nIiwicnVsZXMiLCJuZXdTb3J0IiwicnVsZSIsInJ1bGVPYmoiLCJfZXhlY0ZpbHRlciIsIl9wYXJzZUVmZmVjdHMiLCJ0cmFuc2Zvcm1JbiIsInRyYW5zZm9ybU91dCIsImV4dHJhY3QiLCJyZXZlcnNlIiwicHJvcEluZGV4IiwibmVnYXRlIiwiaW52ZXJ0IiwiYnVpbGRUcmFuc2Zvcm0iLCJ0cmFuc2Zvcm1zIiwiZGVmIiwiaW52ZXJ0ZWQiLCJzdGFnZ2VyIiwic3RhZ2dlckR1cmF0aW9uIiwiZnV0dXJlIiwic3RhdGUiLCJhY3RpdmVTb3J0IiwiZmFpbCIsIiR0YXJnZXRzIiwiJHNob3ciLCIkaGlkZSIsInRvdGFsVGFyZ2V0cyIsInRvdGFsU2hvdyIsInRvdGFsSGlkZSIsInBoYXNlMSIsImNocm9tZUZpeCIsIl9zZXRJbnRlciIsInBoYXNlMiIsInBhZ2VZT2Zmc2V0IiwicGFnZVhPZmZzZXQiLCJkb2NIZWlnaHQiLCJfZ2V0SW50ZXJNaXhEYXRhIiwiX3NldEZpbmFsIiwiX2dldEZpbmFsTWl4RGF0YSIsInNjcm9sbFRvIiwiX3ByZXBUYXJnZXRzIiwicGhhc2UzIiwiX2FuaW1hdGVUYXJnZXRzIiwiX2NsZWFuVXAiLCJncmlkIiwicGxhY2Vob2xkZXIiLCJyZXBsYWNlQ2hpbGQiLCJmdXR1cmVTdGF0ZSIsIl9nZXRPcmlnTWl4RGF0YSIsIl9nZXRUYXJnZXREYXRhIiwiZWxTdHlsZSIsIm9mZnNldExlZnQiLCJwYXJlbnRTdHlsZSIsImJveFNpemluZyIsInBhcmVudEJTIiwiXyR0b0hpZGUiLCJfJHRvU2hvdyIsIl8kcHJlIiwicmVtb3ZlU3R5bGUiLCJ0cmFuc2Zvcm1DU1MiLCJfaW4iLCJfb3V0IiwiZmluYWxXaWR0aCIsImZpbmFsSGVpZ2h0IiwiaW50ZXJXaWR0aCIsImZpbmFsTWFyZ2luUmlnaHQiLCJpbnRlckhlaWdodCIsImZpbmFsTWFyZ2luQm90dG9tIiwib3JpZ1Bvc1giLCJpbnRlclBvc1giLCJvcmlnUG9zWSIsImludGVyUG9zWSIsIm9yaWdXaWR0aCIsIm9yaWdIZWlnaHQiLCJvcmlnTWFyZ2luUmlnaHQiLCJvcmlnTWFyZ2luQm90dG9tIiwiZmluYWxQb3NYIiwiZmluYWxQb3NZIiwiX2dldERlbGF5IiwidG9TaG93Q1NTIiwiX2JpbmRUYXJnZXREb25lIiwidG9IaWRlQ1NTIiwiYm91bmQiLCJfdGFyZ2V0RG9uZSIsInRhcmdldFN0eWxlcyIsInVuQnJha2UiLCJtdWx0aU1peCIsInByb3BlcnR5IiwicHJlZml4VmFsdWUiLCJzdHlsZXMiLCJfcGFyc2VNdWx0aU1peEFyZ3MiLCJhcmciLCJfcGFyc2VJbnNlcnRBcmdzIiwiJG9iamVjdCIsIl9pc0VsZW1lbnQiLCJtZXRob2ROYW1lIiwiaXNQb3N0IiwiY29udGV4dCIsImlzRW1wdHlPYmplY3QiLCJpc01peGluZyIsImNoYW5nZUxheW91dCIsImdldE9wdGlvbiIsImdldFByb3BlcnR5IiwicGFydHMiLCJsYXN0Iiwic2V0T3B0aW9ucyIsImZvcmNlUmVmcmVzaCIsImhpZGVBbGwiLCJtaXhJdFVwIiwiZGF0YVJldHVybiIsImVhY2hSZXR1cm4iLCJfaW5zdGFudGlhdGUiLCJyYW5kIiwicmVtb3ZlTmFtZWRJdGVtIiwiT3dsIiwiRGVmYXVsdHMiLCJfaGFuZGxlcnMiLCJfcGx1Z2lucyIsIl9zdXByZXNzIiwiX2N1cnJlbnQiLCJfc3BlZWQiLCJfY29vcmRpbmF0ZXMiLCJfYnJlYWtwb2ludCIsIl93aWR0aCIsIl9pdGVtcyIsIl9jbG9uZXMiLCJfbWVyZ2VycyIsIl93aWR0aHMiLCJfaW52YWxpZGF0ZWQiLCJfcGlwZSIsIl9kcmFnIiwidGltZSIsInBvaW50ZXIiLCJfc3RhdGVzIiwidGFncyIsIlBsdWdpbnMiLCJwbHVnaW4iLCJXb3JrZXJzIiwid29ya2VyIiwic2V0dXAiLCJpbml0aWFsaXplIiwiY2VudGVyIiwicmV3aW5kIiwibW91c2VEcmFnIiwidG91Y2hEcmFnIiwicHVsbERyYWciLCJmcmVlRHJhZyIsInN0YWdlUGFkZGluZyIsIm1lcmdlIiwibWVyZ2VGaXQiLCJhdXRvV2lkdGgiLCJzdGFydFBvc2l0aW9uIiwicnRsIiwic21hcnRTcGVlZCIsImZsdWlkU3BlZWQiLCJkcmFnRW5kU3BlZWQiLCJyZXNwb25zaXZlIiwicmVzcG9uc2l2ZVJlZnJlc2hSYXRlIiwicmVzcG9uc2l2ZUJhc2VFbGVtZW50IiwiZmFsbGJhY2tFYXNpbmciLCJpbmZvIiwibmVzdGVkSXRlbVNlbGVjdG9yIiwiaXRlbUVsZW1lbnQiLCJzdGFnZUVsZW1lbnQiLCJyZWZyZXNoQ2xhc3MiLCJsb2FkZWRDbGFzcyIsImxvYWRpbmdDbGFzcyIsInJ0bENsYXNzIiwicmVzcG9uc2l2ZUNsYXNzIiwiZHJhZ0NsYXNzIiwiaXRlbUNsYXNzIiwic3RhZ2VDbGFzcyIsInN0YWdlT3V0ZXJDbGFzcyIsImdyYWJDbGFzcyIsIldpZHRoIiwiRGVmYXVsdCIsIklubmVyIiwiT3V0ZXIiLCJUeXBlIiwiU3RhdGUiLCJjYWNoZSIsInJlbGF0aXZlIiwidG9GaXhlZCIsIml0ZXJhdG9yIiwid2lkdGhzIiwiY2xvbmVzIiwidmlldyIsInJlcGVhdCIsIm5vcm1hbGl6ZSIsIm91dGVySFRNTCIsInByZXBlbmRUbyIsImNvb3JkaW5hdGVzIiwibWluaW11bSIsIm1heGltdW0iLCJiZWdpbiIsImlubmVyIiwib3V0ZXIiLCJvcCIsImltZ3MiLCJuZXN0ZWRTZWxlY3RvciIsInByZWxvYWRBdXRvV2lkdGhJbWFnZXMiLCJub3QiLCJpbnZhbGlkYXRlIiwicmVnaXN0ZXJFdmVudEhhbmRsZXJzIiwib3ZlcndyaXRlcyIsImJyZWFrcG9pbnQiLCJOdW1iZXIiLCJvcHRpb25zTG9naWMiLCJwcmVwYXJlIiwib25UaHJvdHRsZWRSZXNpemUiLCJyZXNpemVUaW1lciIsIm9uUmVzaXplIiwib25EcmFnU3RhcnQiLCJvbkRyYWdFbmQiLCJkZWx0YSIsImRpZmZlcmVuY2UiLCJvbkRyYWdNb3ZlIiwicHVsbCIsImNvb3JkaW5hdGUiLCJ0cmFuc2Zvcm0zZCIsInBhcnQiLCJzdXBwcmVzcyIsInJlbGVhc2UiLCJyZWNpcHJvY2FsSXRlbXNXaWR0aCIsImVsZW1lbnRXaWR0aCIsIm1lcmdlcnMiLCJvZGQiLCJldmVuIiwibXVsdGlwbGllciIsIm5ld1Bvc2l0aW9uIiwiZmFjdG9yIiwicmV2ZXJ0Iiwib3JpZ2luYWxUYXJnZXQiLCJiZWZvcmUiLCJpbWFnZXMiLCJJbWFnZSIsInVud3JhcCIsImNhcHR1cmUiLCJzdGF0dXMiLCJjb3VudCIsIm9uVHJpZ2dlciIsInJlZ2lzdGVyIiwib3dsIiwiX2RlZmF1bHQiLCJ0YWciLCJldmVudHMiLCJudW1iZXIiLCJvd2xDYXJvdXNlbCIsIiR0aGlzIiwiWmVwdG8iLCJBdXRvUmVmcmVzaCIsIl9jb3JlIiwiX2ludGVydmFsIiwiX3Zpc2libGUiLCJhdXRvUmVmcmVzaCIsIndhdGNoIiwiYXV0b1JlZnJlc2hJbnRlcnZhbCIsImdldE93blByb3BlcnR5TmFtZXMiLCJMYXp5IiwiX2xvYWRlZCIsImxhenlMb2FkIiwiJGVsZW1lbnRzIiwiaGFuZGxlcnMiLCJBdXRvSGVpZ2h0IiwiYXV0b0hlaWdodCIsImF1dG9IZWlnaHRDbGFzcyIsInZpc2libGUiLCJ0b0FycmF5IiwiaGVpZ2h0cyIsIm1heGhlaWdodCIsIlZpZGVvIiwiX3ZpZGVvcyIsIl9wbGF5aW5nIiwidmlkZW8iLCJpc0luRnVsbFNjcmVlbiIsImZldGNoIiwicGxheSIsInZpZGVvSGVpZ2h0IiwidmlkZW9XaWR0aCIsInRodW1ibmFpbCIsInRuTGluayIsImljb24iLCJwYXRoIiwiZGltZW5zaW9ucyIsImN1c3RvbVRuIiwic3JjVHlwZSIsImxhenlDbGFzcyIsImpzb25wIiwiZGF0YVR5cGUiLCJ0aHVtYm5haWxfbGFyZ2UiLCJmcmFtZWdyYWJfdXJsIiwibW96RnVsbFNjcmVlbkVsZW1lbnQiLCJ3ZWJraXRGdWxsc2NyZWVuRWxlbWVudCIsIkFuaW1hdGUiLCJzY29wZSIsImNvcmUiLCJzd2FwcGluZyIsImFuaW1hdGVPdXQiLCJhbmltYXRlSW4iLCJzd2FwIiwiaW5jb21pbmciLCJvdXRnb2luZyIsIkF1dG9wbGF5IiwiX3RpbWVvdXQiLCJfcGF1c2VkIiwiX3NldEF1dG9QbGF5SW50ZXJ2YWwiLCJhdXRvcGxheUhvdmVyUGF1c2UiLCJhdXRvcGxheVRpbWVvdXQiLCJhdXRvcGxheVNwZWVkIiwiX2dldE5leHRUaW1lb3V0IiwiTmF2aWdhdGlvbiIsIl9pbml0aWFsaXplZCIsIl9wYWdlcyIsIl9jb250cm9scyIsIl90ZW1wbGF0ZXMiLCJfb3ZlcnJpZGVzIiwiZG90c0RhdGEiLCJkb3RDbGFzcyIsImRyYXciLCJuYXYiLCJuYXZUZXh0IiwibmF2U3BlZWQiLCJuYXZFbGVtZW50IiwibmF2Q29udGFpbmVyIiwibmF2Q29udGFpbmVyQ2xhc3MiLCJuYXZDbGFzcyIsInNsaWRlQnkiLCJkb3RzQ2xhc3MiLCJkb3RzIiwiZG90c0VhY2giLCJkb3RzU3BlZWQiLCJkb3RzQ29udGFpbmVyIiwib3ZlcnJpZGUiLCIkcmVsYXRpdmUiLCIkcHJldmlvdXMiLCIkbmV4dCIsIiRhYnNvbHV0ZSIsImNvbnRyb2wiLCJvdmVyaWRlcyIsImxvd2VyIiwidXBwZXIiLCJkaXNhYmxlZCIsInBhZ2UiLCJzdWNjZXNzb3IiLCJzdGFuZGFyZCIsIkhhc2giLCJfaGFzaGVzIiwiVVJMaGFzaExpc3RlbmVyIiwicHJlZml4ZXMiLCJXZWJraXRBbmltYXRpb24iLCJNb3pBbmltYXRpb24iLCJPQW5pbWF0aW9uIiwidGVzdHMiLCJjc3N0cmFuc2Zvcm1zIiwiY3NzdHJhbnNmb3JtczNkIiwiY3NzdHJhbnNpdGlvbnMiLCJjc3NhbmltYXRpb25zIiwicHJlZml4ZWQiLCJoYW5kbGVQcmVsb2FkZXIiLCJmYWRlT3V0IiwiaGVhZGVyU3R5bGUiLCJ3aW5kb3dwb3MiLCJzaXRlSGVhZGVyIiwic2l0ZUhlYWRlckhlaWdodCIsInNjcm9sbExpbmsiLCJmYWRlSW4iLCJmaW5hbERhdGUiLCJjb3VudGRvd24iLCJzdHJmdGltZSIsIiR0IiwiY291bnROdW0iLCJzdGVwIiwiVG91Y2hTcGluIiwidmVydGljYWxidXR0b25zIiwib3V0ZXJCb3giLCJzbGlkZVVwIiwic2xpZGVEb3duIiwic29ydGFibGVNYXNvbnJ5Iiwid2luRG93IiwiJGZpbHRlciIsIm1hc29ucnkiLCJhbmltYXRpb25PcHRpb25zIiwiZXJyIiwiZmlsdGVySXRlbUEiLCJvcGVuRWZmZWN0IiwiY2xvc2VFZmZlY3QiLCJoZWxwZXJzIiwid293IiwiV09XIiwiYm94Q2xhc3MiLCJhbmltYXRlQ2xhc3MiLCJjb250YWN0Rm9ybSIsInN1Ym1pdCIsImVtYWlsIiwicGhvbmUiLCJXZWFrTWFwIiwiTW96V2Vha01hcCIsImtleXMiLCJ2YWx1ZXMiLCJNdXRhdGlvbk9ic2VydmVyIiwiV2Via2l0TXV0YXRpb25PYnNlcnZlciIsIk1vek11dGF0aW9uT2JzZXJ2ZXIiLCJ3YXJuIiwibm90U3VwcG9ydGVkIiwib2JzZXJ2ZSIsInNjcm9sbENhbGxiYWNrIiwic2Nyb2xsSGFuZGxlciIsInNjcm9sbGVkIiwidXRpbCIsImFuaW1hdGlvbk5hbWVDYWNoZSIsImZpbmlzaGVkIiwic3RvcHBlZCIsImJveGVzIiwicmVzZXRTdHlsZSIsImFwcGx5U3R5bGUiLCJhZGRlZE5vZGVzIiwiZG9TeW5jIiwiY2hpbGRMaXN0Iiwic3VidHJlZSIsInN5bmMiLCJjdXN0b21TdHlsZSIsInNldEF0dHJpYnV0ZSIsImNhY2hlQW5pbWF0aW9uTmFtZSIsInZpc2liaWxpdHkiLCJ2ZW5kb3JTZXQiLCJhbmltYXRpb25EZWxheSIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiYW5pbWF0aW9uTmFtZSIsImNhY2hlZEFuaW1hdGlvbk5hbWUiLCJ2ZW5kb3JzIiwidmVuZG9yQ1NTIiwiZ2V0UHJvcGVydHlDU1NWYWx1ZSIsImNzc1RleHQiLCJvZmZzZXRQYXJlbnQiLCJfdXRpbCIsInJlcXVpcmUiLCJnbG9iYWwiXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGdCQUFRLG9CQUFvQjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUFpQiw0QkFBNEI7QUFDN0M7QUFDQTtBQUNBLDBCQUFrQiwyQkFBMkI7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esa0RBQTBDLGdDQUFnQztBQUMxRTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGdFQUF3RCxrQkFBa0I7QUFDMUU7QUFDQSx5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Ozs7Ozs7Ozs7O0FDQUEsdUMiLCJmaWxlIjoic2l0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIGluc3RhbGwgYSBKU09OUCBjYWxsYmFjayBmb3IgY2h1bmsgbG9hZGluZ1xuIFx0ZnVuY3Rpb24gd2VicGFja0pzb25wQ2FsbGJhY2soZGF0YSkge1xuIFx0XHR2YXIgY2h1bmtJZHMgPSBkYXRhWzBdO1xuIFx0XHR2YXIgbW9yZU1vZHVsZXMgPSBkYXRhWzFdO1xuIFx0XHR2YXIgZXhlY3V0ZU1vZHVsZXMgPSBkYXRhWzJdO1xuXG4gXHRcdC8vIGFkZCBcIm1vcmVNb2R1bGVzXCIgdG8gdGhlIG1vZHVsZXMgb2JqZWN0LFxuIFx0XHQvLyB0aGVuIGZsYWcgYWxsIFwiY2h1bmtJZHNcIiBhcyBsb2FkZWQgYW5kIGZpcmUgY2FsbGJhY2tcbiBcdFx0dmFyIG1vZHVsZUlkLCBjaHVua0lkLCBpID0gMCwgcmVzb2x2ZXMgPSBbXTtcbiBcdFx0Zm9yKDtpIDwgY2h1bmtJZHMubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRjaHVua0lkID0gY2h1bmtJZHNbaV07XG4gXHRcdFx0aWYoaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdKSB7XG4gXHRcdFx0XHRyZXNvbHZlcy5wdXNoKGluc3RhbGxlZENodW5rc1tjaHVua0lkXVswXSk7XG4gXHRcdFx0fVxuIFx0XHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9IDA7XG4gXHRcdH1cbiBcdFx0Zm9yKG1vZHVsZUlkIGluIG1vcmVNb2R1bGVzKSB7XG4gXHRcdFx0aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vcmVNb2R1bGVzLCBtb2R1bGVJZCkpIHtcbiBcdFx0XHRcdG1vZHVsZXNbbW9kdWxlSWRdID0gbW9yZU1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRcdH1cbiBcdFx0fVxuIFx0XHRpZihwYXJlbnRKc29ucEZ1bmN0aW9uKSBwYXJlbnRKc29ucEZ1bmN0aW9uKGRhdGEpO1xuXG4gXHRcdHdoaWxlKHJlc29sdmVzLmxlbmd0aCkge1xuIFx0XHRcdHJlc29sdmVzLnNoaWZ0KCkoKTtcbiBcdFx0fVxuXG4gXHRcdC8vIGFkZCBlbnRyeSBtb2R1bGVzIGZyb20gbG9hZGVkIGNodW5rIHRvIGRlZmVycmVkIGxpc3RcbiBcdFx0ZGVmZXJyZWRNb2R1bGVzLnB1c2guYXBwbHkoZGVmZXJyZWRNb2R1bGVzLCBleGVjdXRlTW9kdWxlcyB8fCBbXSk7XG5cbiBcdFx0Ly8gcnVuIGRlZmVycmVkIG1vZHVsZXMgd2hlbiBhbGwgY2h1bmtzIHJlYWR5XG4gXHRcdHJldHVybiBjaGVja0RlZmVycmVkTW9kdWxlcygpO1xuIFx0fTtcbiBcdGZ1bmN0aW9uIGNoZWNrRGVmZXJyZWRNb2R1bGVzKCkge1xuIFx0XHR2YXIgcmVzdWx0O1xuIFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgZGVmZXJyZWRNb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0dmFyIGRlZmVycmVkTW9kdWxlID0gZGVmZXJyZWRNb2R1bGVzW2ldO1xuIFx0XHRcdHZhciBmdWxmaWxsZWQgPSB0cnVlO1xuIFx0XHRcdGZvcih2YXIgaiA9IDE7IGogPCBkZWZlcnJlZE1vZHVsZS5sZW5ndGg7IGorKykge1xuIFx0XHRcdFx0dmFyIGRlcElkID0gZGVmZXJyZWRNb2R1bGVbal07XG4gXHRcdFx0XHRpZihpbnN0YWxsZWRDaHVua3NbZGVwSWRdICE9PSAwKSBmdWxmaWxsZWQgPSBmYWxzZTtcbiBcdFx0XHR9XG4gXHRcdFx0aWYoZnVsZmlsbGVkKSB7XG4gXHRcdFx0XHRkZWZlcnJlZE1vZHVsZXMuc3BsaWNlKGktLSwgMSk7XG4gXHRcdFx0XHRyZXN1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IGRlZmVycmVkTW9kdWxlWzBdKTtcbiBcdFx0XHR9XG4gXHRcdH1cbiBcdFx0cmV0dXJuIHJlc3VsdDtcbiBcdH1cblxuIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3NcbiBcdC8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuIFx0Ly8gUHJvbWlzZSA9IGNodW5rIGxvYWRpbmcsIDAgPSBjaHVuayBsb2FkZWRcbiBcdHZhciBpbnN0YWxsZWRDaHVua3MgPSB7XG4gXHRcdFwic2l0ZVwiOiAwXG4gXHR9O1xuXG4gXHR2YXIgZGVmZXJyZWRNb2R1bGVzID0gW107XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiL2J1aWxkL1wiO1xuXG4gXHR2YXIganNvbnBBcnJheSA9IHdpbmRvd1tcIndlYnBhY2tKc29ucFwiXSA9IHdpbmRvd1tcIndlYnBhY2tKc29ucFwiXSB8fCBbXTtcbiBcdHZhciBvbGRKc29ucEZ1bmN0aW9uID0ganNvbnBBcnJheS5wdXNoLmJpbmQoanNvbnBBcnJheSk7XG4gXHRqc29ucEFycmF5LnB1c2ggPSB3ZWJwYWNrSnNvbnBDYWxsYmFjaztcbiBcdGpzb25wQXJyYXkgPSBqc29ucEFycmF5LnNsaWNlKCk7XG4gXHRmb3IodmFyIGkgPSAwOyBpIDwganNvbnBBcnJheS5sZW5ndGg7IGkrKykgd2VicGFja0pzb25wQ2FsbGJhY2soanNvbnBBcnJheVtpXSk7XG4gXHR2YXIgcGFyZW50SnNvbnBGdW5jdGlvbiA9IG9sZEpzb25wRnVuY3Rpb247XG5cblxuIFx0Ly8gYWRkIGVudHJ5IG1vZHVsZSB0byBkZWZlcnJlZCBsaXN0XG4gXHRkZWZlcnJlZE1vZHVsZXMucHVzaChbXCIuL3NyYy9SZXNvdXJjZXMvdmlld3MvdGhlbWUvYXNzZXRzL21haW4uanNcIixcInZlbmRvcnN+c2l0ZVwiXSk7XG4gXHQvLyBydW4gZGVmZXJyZWQgbW9kdWxlcyB3aGVuIHJlYWR5XG4gXHRyZXR1cm4gY2hlY2tEZWZlcnJlZE1vZHVsZXMoKTtcbiIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpbiIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpbiIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpbiIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpbiIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpbiIsIi8qXHJcbiAqIGpRdWVyeS5hcHBlYXJcclxuICogaHR0cHM6Ly9naXRodWIuY29tL2JhczJrL2pxdWVyeS5hcHBlYXIvXHJcbiAqIGh0dHA6Ly9jb2RlLmdvb2dsZS5jb20vcC9qcXVlcnktYXBwZWFyL1xyXG4gKiBodHRwOi8vYmFzMmsucnUvXHJcbiAqXHJcbiAqIENvcHlyaWdodCAoYykgMjAwOSBNaWNoYWVsIEhpeHNvblxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTItMjAxNCBBbGV4YW5kZXIgQnJvdmlrb3ZcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIChodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocClcclxuICovXHJcbihmdW5jdGlvbigkKSB7XHJcbiAgICAkLmZuLmFwcGVhciA9IGZ1bmN0aW9uKGZuLCBvcHRpb25zKSB7XHJcblxyXG4gICAgICAgIHZhciBzZXR0aW5ncyA9ICQuZXh0ZW5kKHtcclxuXHJcbiAgICAgICAgICAgIC8vYXJiaXRyYXJ5IGRhdGEgdG8gcGFzcyB0byBmblxyXG4gICAgICAgICAgICBkYXRhOiB1bmRlZmluZWQsXHJcblxyXG4gICAgICAgICAgICAvL2NhbGwgZm4gb25seSBvbiB0aGUgZmlyc3QgYXBwZWFyP1xyXG4gICAgICAgICAgICBvbmU6IHRydWUsXHJcblxyXG4gICAgICAgICAgICAvLyBYICYgWSBhY2N1cmFjeVxyXG4gICAgICAgICAgICBhY2NYOiAwLFxyXG4gICAgICAgICAgICBhY2NZOiAwXHJcblxyXG4gICAgICAgIH0sIG9wdGlvbnMpO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgdmFyIHQgPSAkKHRoaXMpO1xyXG5cclxuICAgICAgICAgICAgLy93aGV0aGVyIHRoZSBlbGVtZW50IGlzIGN1cnJlbnRseSB2aXNpYmxlXHJcbiAgICAgICAgICAgIHQuYXBwZWFyZWQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIGlmICghZm4pIHtcclxuXHJcbiAgICAgICAgICAgICAgICAvL3RyaWdnZXIgdGhlIGN1c3RvbSBldmVudFxyXG4gICAgICAgICAgICAgICAgdC50cmlnZ2VyKCdhcHBlYXInLCBzZXR0aW5ncy5kYXRhKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFyIHcgPSAkKHdpbmRvdyk7XHJcblxyXG4gICAgICAgICAgICAvL2ZpcmVzIHRoZSBhcHBlYXIgZXZlbnQgd2hlbiBhcHByb3ByaWF0ZVxyXG4gICAgICAgICAgICB2YXIgY2hlY2sgPSBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAvL2lzIHRoZSBlbGVtZW50IGhpZGRlbj9cclxuICAgICAgICAgICAgICAgIGlmICghdC5pcygnOnZpc2libGUnKSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL2l0IGJlY2FtZSBoaWRkZW5cclxuICAgICAgICAgICAgICAgICAgICB0LmFwcGVhcmVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vaXMgdGhlIGVsZW1lbnQgaW5zaWRlIHRoZSB2aXNpYmxlIHdpbmRvdz9cclxuICAgICAgICAgICAgICAgIHZhciBhID0gdy5zY3JvbGxMZWZ0KCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgYiA9IHcuc2Nyb2xsVG9wKCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgbyA9IHQub2Zmc2V0KCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgeCA9IG8ubGVmdDtcclxuICAgICAgICAgICAgICAgIHZhciB5ID0gby50b3A7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGF4ID0gc2V0dGluZ3MuYWNjWDtcclxuICAgICAgICAgICAgICAgIHZhciBheSA9IHNldHRpbmdzLmFjY1k7XHJcbiAgICAgICAgICAgICAgICB2YXIgdGggPSB0LmhlaWdodCgpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHdoID0gdy5oZWlnaHQoKTtcclxuICAgICAgICAgICAgICAgIHZhciB0dyA9IHQud2lkdGgoKTtcclxuICAgICAgICAgICAgICAgIHZhciB3dyA9IHcud2lkdGgoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoeSArIHRoICsgYXkgPj0gYiAmJlxyXG4gICAgICAgICAgICAgICAgICAgIHkgPD0gYiArIHdoICsgYXkgJiZcclxuICAgICAgICAgICAgICAgICAgICB4ICsgdHcgKyBheCA+PSBhICYmXHJcbiAgICAgICAgICAgICAgICAgICAgeCA8PSBhICsgd3cgKyBheCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL3RyaWdnZXIgdGhlIGN1c3RvbSBldmVudFxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdC5hcHBlYXJlZCkgdC50cmlnZ2VyKCdhcHBlYXInLCBzZXR0aW5ncy5kYXRhKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL2l0IHNjcm9sbGVkIG91dCBvZiB2aWV3XHJcbiAgICAgICAgICAgICAgICAgICAgdC5hcHBlYXJlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy9jcmVhdGUgYSBtb2RpZmllZCBmbiB3aXRoIHNvbWUgYWRkaXRpb25hbCBsb2dpY1xyXG4gICAgICAgICAgICB2YXIgbW9kaWZpZWRGbiA9IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgIC8vbWFyayB0aGUgZWxlbWVudCBhcyB2aXNpYmxlXHJcbiAgICAgICAgICAgICAgICB0LmFwcGVhcmVkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAvL2lzIHRoaXMgc3VwcG9zZWQgdG8gaGFwcGVuIG9ubHkgb25jZT9cclxuICAgICAgICAgICAgICAgIGlmIChzZXR0aW5ncy5vbmUpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy9yZW1vdmUgdGhlIGNoZWNrXHJcbiAgICAgICAgICAgICAgICAgICAgdy51bmJpbmQoJ3Njcm9sbCcsIGNoZWNrKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaSA9ICQuaW5BcnJheShjaGVjaywgJC5mbi5hcHBlYXIuY2hlY2tzKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaSA+PSAwKSAkLmZuLmFwcGVhci5jaGVja3Muc3BsaWNlKGksIDEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vdHJpZ2dlciB0aGUgb3JpZ2luYWwgZm5cclxuICAgICAgICAgICAgICAgIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvL2JpbmQgdGhlIG1vZGlmaWVkIGZuIHRvIHRoZSBlbGVtZW50XHJcbiAgICAgICAgICAgIGlmIChzZXR0aW5ncy5vbmUpIHQub25lKCdhcHBlYXInLCBzZXR0aW5ncy5kYXRhLCBtb2RpZmllZEZuKTtcclxuICAgICAgICAgICAgZWxzZSB0LmJpbmQoJ2FwcGVhcicsIHNldHRpbmdzLmRhdGEsIG1vZGlmaWVkRm4pO1xyXG5cclxuICAgICAgICAgICAgLy9jaGVjayB3aGVuZXZlciB0aGUgd2luZG93IHNjcm9sbHNcclxuICAgICAgICAgICAgdy5zY3JvbGwoY2hlY2spO1xyXG5cclxuICAgICAgICAgICAgLy9jaGVjayB3aGVuZXZlciB0aGUgZG9tIGNoYW5nZXNcclxuICAgICAgICAgICAgJC5mbi5hcHBlYXIuY2hlY2tzLnB1c2goY2hlY2spO1xyXG5cclxuICAgICAgICAgICAgLy9jaGVjayBub3dcclxuICAgICAgICAgICAgKGNoZWNrKSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICAvL2tlZXAgYSBxdWV1ZSBvZiBhcHBlYXJhbmNlIGNoZWNrc1xyXG4gICAgJC5leHRlbmQoJC5mbi5hcHBlYXIsIHtcclxuXHJcbiAgICAgICAgY2hlY2tzOiBbXSxcclxuICAgICAgICB0aW1lb3V0OiBudWxsLFxyXG5cclxuICAgICAgICAvL3Byb2Nlc3MgdGhlIHF1ZXVlXHJcbiAgICAgICAgY2hlY2tBbGw6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIgbGVuZ3RoID0gJC5mbi5hcHBlYXIuY2hlY2tzLmxlbmd0aDtcclxuICAgICAgICAgICAgaWYgKGxlbmd0aCA+IDApIHdoaWxlIChsZW5ndGgtLSkgKCQuZm4uYXBwZWFyLmNoZWNrc1tsZW5ndGhdKSgpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8vY2hlY2sgdGhlIHF1ZXVlIGFzeW5jaHJvbm91c2x5XHJcbiAgICAgICAgcnVuOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKCQuZm4uYXBwZWFyLnRpbWVvdXQpIGNsZWFyVGltZW91dCgkLmZuLmFwcGVhci50aW1lb3V0KTtcclxuICAgICAgICAgICAgJC5mbi5hcHBlYXIudGltZW91dCA9IHNldFRpbWVvdXQoJC5mbi5hcHBlYXIuY2hlY2tBbGwsIDIwKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAvL3J1biBjaGVja3Mgd2hlbiB0aGVzZSBtZXRob2RzIGFyZSBjYWxsZWRcclxuICAgICQuZWFjaChbJ2FwcGVuZCcsICdwcmVwZW5kJywgJ2FmdGVyJywgJ2JlZm9yZScsICdhdHRyJyxcclxuICAgICAgICAncmVtb3ZlQXR0cicsICdhZGRDbGFzcycsICdyZW1vdmVDbGFzcycsICd0b2dnbGVDbGFzcycsXHJcbiAgICAgICAgJ3JlbW92ZScsICdjc3MnLCAnc2hvdycsICdoaWRlJ10sIGZ1bmN0aW9uKGksIG4pIHtcclxuICAgICAgICB2YXIgb2xkID0gJC5mbltuXTtcclxuICAgICAgICBpZiAob2xkKSB7XHJcbiAgICAgICAgICAgICQuZm5bbl0gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHZhciByID0gb2xkLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgICAgICAgICAkLmZuLmFwcGVhci5ydW4oKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiByO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG59KShqUXVlcnkpO1xyXG4iLCIvKiFcclxuICogQm9vdHN0cmFwIHYzLjMuNyAoaHR0cDovL2dldGJvb3RzdHJhcC5jb20pXHJcbiAqIENvcHlyaWdodCAyMDExLTIwMTYgVHdpdHRlciwgSW5jLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcclxuICovXHJcbmlmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBqUXVlcnkpdGhyb3cgbmV3IEVycm9yKFwiQm9vdHN0cmFwJ3MgSmF2YVNjcmlwdCByZXF1aXJlcyBqUXVlcnlcIik7K2Z1bmN0aW9uKGEpe1widXNlIHN0cmljdFwiO3ZhciBiPWEuZm4uanF1ZXJ5LnNwbGl0KFwiIFwiKVswXS5zcGxpdChcIi5cIik7aWYoYlswXTwyJiZiWzFdPDl8fDE9PWJbMF0mJjk9PWJbMV0mJmJbMl08MXx8YlswXT4zKXRocm93IG5ldyBFcnJvcihcIkJvb3RzdHJhcCdzIEphdmFTY3JpcHQgcmVxdWlyZXMgalF1ZXJ5IHZlcnNpb24gMS45LjEgb3IgaGlnaGVyLCBidXQgbG93ZXIgdGhhbiB2ZXJzaW9uIDRcIil9KGpRdWVyeSksK2Z1bmN0aW9uKGEpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGIoKXt2YXIgYT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYm9vdHN0cmFwXCIpLGI9e1dlYmtpdFRyYW5zaXRpb246XCJ3ZWJraXRUcmFuc2l0aW9uRW5kXCIsTW96VHJhbnNpdGlvbjpcInRyYW5zaXRpb25lbmRcIixPVHJhbnNpdGlvbjpcIm9UcmFuc2l0aW9uRW5kIG90cmFuc2l0aW9uZW5kXCIsdHJhbnNpdGlvbjpcInRyYW5zaXRpb25lbmRcIn07Zm9yKHZhciBjIGluIGIpaWYodm9pZCAwIT09YS5zdHlsZVtjXSlyZXR1cm57ZW5kOmJbY119O3JldHVybiExfWEuZm4uZW11bGF0ZVRyYW5zaXRpb25FbmQ9ZnVuY3Rpb24oYil7dmFyIGM9ITEsZD10aGlzO2EodGhpcykub25lKFwiYnNUcmFuc2l0aW9uRW5kXCIsZnVuY3Rpb24oKXtjPSEwfSk7dmFyIGU9ZnVuY3Rpb24oKXtjfHxhKGQpLnRyaWdnZXIoYS5zdXBwb3J0LnRyYW5zaXRpb24uZW5kKX07cmV0dXJuIHNldFRpbWVvdXQoZSxiKSx0aGlzfSxhKGZ1bmN0aW9uKCl7YS5zdXBwb3J0LnRyYW5zaXRpb249YigpLGEuc3VwcG9ydC50cmFuc2l0aW9uJiYoYS5ldmVudC5zcGVjaWFsLmJzVHJhbnNpdGlvbkVuZD17YmluZFR5cGU6YS5zdXBwb3J0LnRyYW5zaXRpb24uZW5kLGRlbGVnYXRlVHlwZTphLnN1cHBvcnQudHJhbnNpdGlvbi5lbmQsaGFuZGxlOmZ1bmN0aW9uKGIpe2lmKGEoYi50YXJnZXQpLmlzKHRoaXMpKXJldHVybiBiLmhhbmRsZU9iai5oYW5kbGVyLmFwcGx5KHRoaXMsYXJndW1lbnRzKX19KX0pfShqUXVlcnkpLCtmdW5jdGlvbihhKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBiKGIpe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgYz1hKHRoaXMpLGU9Yy5kYXRhKFwiYnMuYWxlcnRcIik7ZXx8Yy5kYXRhKFwiYnMuYWxlcnRcIixlPW5ldyBkKHRoaXMpKSxcInN0cmluZ1wiPT10eXBlb2YgYiYmZVtiXS5jYWxsKGMpfSl9dmFyIGM9J1tkYXRhLWRpc21pc3M9XCJhbGVydFwiXScsZD1mdW5jdGlvbihiKXthKGIpLm9uKFwiY2xpY2tcIixjLHRoaXMuY2xvc2UpfTtkLlZFUlNJT049XCIzLjMuN1wiLGQuVFJBTlNJVElPTl9EVVJBVElPTj0xNTAsZC5wcm90b3R5cGUuY2xvc2U9ZnVuY3Rpb24oYil7ZnVuY3Rpb24gYygpe2cuZGV0YWNoKCkudHJpZ2dlcihcImNsb3NlZC5icy5hbGVydFwiKS5yZW1vdmUoKX12YXIgZT1hKHRoaXMpLGY9ZS5hdHRyKFwiZGF0YS10YXJnZXRcIik7Znx8KGY9ZS5hdHRyKFwiaHJlZlwiKSxmPWYmJmYucmVwbGFjZSgvLiooPz0jW15cXHNdKiQpLyxcIlwiKSk7dmFyIGc9YShcIiNcIj09PWY/W106Zik7YiYmYi5wcmV2ZW50RGVmYXVsdCgpLGcubGVuZ3RofHwoZz1lLmNsb3Nlc3QoXCIuYWxlcnRcIikpLGcudHJpZ2dlcihiPWEuRXZlbnQoXCJjbG9zZS5icy5hbGVydFwiKSksYi5pc0RlZmF1bHRQcmV2ZW50ZWQoKXx8KGcucmVtb3ZlQ2xhc3MoXCJpblwiKSxhLnN1cHBvcnQudHJhbnNpdGlvbiYmZy5oYXNDbGFzcyhcImZhZGVcIik/Zy5vbmUoXCJic1RyYW5zaXRpb25FbmRcIixjKS5lbXVsYXRlVHJhbnNpdGlvbkVuZChkLlRSQU5TSVRJT05fRFVSQVRJT04pOmMoKSl9O3ZhciBlPWEuZm4uYWxlcnQ7YS5mbi5hbGVydD1iLGEuZm4uYWxlcnQuQ29uc3RydWN0b3I9ZCxhLmZuLmFsZXJ0Lm5vQ29uZmxpY3Q9ZnVuY3Rpb24oKXtyZXR1cm4gYS5mbi5hbGVydD1lLHRoaXN9LGEoZG9jdW1lbnQpLm9uKFwiY2xpY2suYnMuYWxlcnQuZGF0YS1hcGlcIixjLGQucHJvdG90eXBlLmNsb3NlKX0oalF1ZXJ5KSwrZnVuY3Rpb24oYSl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gYihiKXtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIGQ9YSh0aGlzKSxlPWQuZGF0YShcImJzLmJ1dHRvblwiKSxmPVwib2JqZWN0XCI9PXR5cGVvZiBiJiZiO2V8fGQuZGF0YShcImJzLmJ1dHRvblwiLGU9bmV3IGModGhpcyxmKSksXCJ0b2dnbGVcIj09Yj9lLnRvZ2dsZSgpOmImJmUuc2V0U3RhdGUoYil9KX12YXIgYz1mdW5jdGlvbihiLGQpe3RoaXMuJGVsZW1lbnQ9YShiKSx0aGlzLm9wdGlvbnM9YS5leHRlbmQoe30sYy5ERUZBVUxUUyxkKSx0aGlzLmlzTG9hZGluZz0hMX07Yy5WRVJTSU9OPVwiMy4zLjdcIixjLkRFRkFVTFRTPXtsb2FkaW5nVGV4dDpcImxvYWRpbmcuLi5cIn0sYy5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24oYil7dmFyIGM9XCJkaXNhYmxlZFwiLGQ9dGhpcy4kZWxlbWVudCxlPWQuaXMoXCJpbnB1dFwiKT9cInZhbFwiOlwiaHRtbFwiLGY9ZC5kYXRhKCk7Yis9XCJUZXh0XCIsbnVsbD09Zi5yZXNldFRleHQmJmQuZGF0YShcInJlc2V0VGV4dFwiLGRbZV0oKSksc2V0VGltZW91dChhLnByb3h5KGZ1bmN0aW9uKCl7ZFtlXShudWxsPT1mW2JdP3RoaXMub3B0aW9uc1tiXTpmW2JdKSxcImxvYWRpbmdUZXh0XCI9PWI/KHRoaXMuaXNMb2FkaW5nPSEwLGQuYWRkQ2xhc3MoYykuYXR0cihjLGMpLnByb3AoYywhMCkpOnRoaXMuaXNMb2FkaW5nJiYodGhpcy5pc0xvYWRpbmc9ITEsZC5yZW1vdmVDbGFzcyhjKS5yZW1vdmVBdHRyKGMpLnByb3AoYywhMSkpfSx0aGlzKSwwKX0sYy5wcm90b3R5cGUudG9nZ2xlPWZ1bmN0aW9uKCl7dmFyIGE9ITAsYj10aGlzLiRlbGVtZW50LmNsb3Nlc3QoJ1tkYXRhLXRvZ2dsZT1cImJ1dHRvbnNcIl0nKTtpZihiLmxlbmd0aCl7dmFyIGM9dGhpcy4kZWxlbWVudC5maW5kKFwiaW5wdXRcIik7XCJyYWRpb1wiPT1jLnByb3AoXCJ0eXBlXCIpPyhjLnByb3AoXCJjaGVja2VkXCIpJiYoYT0hMSksYi5maW5kKFwiLmFjdGl2ZVwiKS5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKSx0aGlzLiRlbGVtZW50LmFkZENsYXNzKFwiYWN0aXZlXCIpKTpcImNoZWNrYm94XCI9PWMucHJvcChcInR5cGVcIikmJihjLnByb3AoXCJjaGVja2VkXCIpIT09dGhpcy4kZWxlbWVudC5oYXNDbGFzcyhcImFjdGl2ZVwiKSYmKGE9ITEpLHRoaXMuJGVsZW1lbnQudG9nZ2xlQ2xhc3MoXCJhY3RpdmVcIikpLGMucHJvcChcImNoZWNrZWRcIix0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKFwiYWN0aXZlXCIpKSxhJiZjLnRyaWdnZXIoXCJjaGFuZ2VcIil9ZWxzZSB0aGlzLiRlbGVtZW50LmF0dHIoXCJhcmlhLXByZXNzZWRcIiwhdGhpcy4kZWxlbWVudC5oYXNDbGFzcyhcImFjdGl2ZVwiKSksdGhpcy4kZWxlbWVudC50b2dnbGVDbGFzcyhcImFjdGl2ZVwiKX07dmFyIGQ9YS5mbi5idXR0b247YS5mbi5idXR0b249YixhLmZuLmJ1dHRvbi5Db25zdHJ1Y3Rvcj1jLGEuZm4uYnV0dG9uLm5vQ29uZmxpY3Q9ZnVuY3Rpb24oKXtyZXR1cm4gYS5mbi5idXR0b249ZCx0aGlzfSxhKGRvY3VtZW50KS5vbihcImNsaWNrLmJzLmJ1dHRvbi5kYXRhLWFwaVwiLCdbZGF0YS10b2dnbGVePVwiYnV0dG9uXCJdJyxmdW5jdGlvbihjKXt2YXIgZD1hKGMudGFyZ2V0KS5jbG9zZXN0KFwiLmJ0blwiKTtiLmNhbGwoZCxcInRvZ2dsZVwiKSxhKGMudGFyZ2V0KS5pcygnaW5wdXRbdHlwZT1cInJhZGlvXCJdLCBpbnB1dFt0eXBlPVwiY2hlY2tib3hcIl0nKXx8KGMucHJldmVudERlZmF1bHQoKSxkLmlzKFwiaW5wdXQsYnV0dG9uXCIpP2QudHJpZ2dlcihcImZvY3VzXCIpOmQuZmluZChcImlucHV0OnZpc2libGUsYnV0dG9uOnZpc2libGVcIikuZmlyc3QoKS50cmlnZ2VyKFwiZm9jdXNcIikpfSkub24oXCJmb2N1cy5icy5idXR0b24uZGF0YS1hcGkgYmx1ci5icy5idXR0b24uZGF0YS1hcGlcIiwnW2RhdGEtdG9nZ2xlXj1cImJ1dHRvblwiXScsZnVuY3Rpb24oYil7YShiLnRhcmdldCkuY2xvc2VzdChcIi5idG5cIikudG9nZ2xlQ2xhc3MoXCJmb2N1c1wiLC9eZm9jdXMoaW4pPyQvLnRlc3QoYi50eXBlKSl9KX0oalF1ZXJ5KSwrZnVuY3Rpb24oYSl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gYihiKXtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIGQ9YSh0aGlzKSxlPWQuZGF0YShcImJzLmNhcm91c2VsXCIpLGY9YS5leHRlbmQoe30sYy5ERUZBVUxUUyxkLmRhdGEoKSxcIm9iamVjdFwiPT10eXBlb2YgYiYmYiksZz1cInN0cmluZ1wiPT10eXBlb2YgYj9iOmYuc2xpZGU7ZXx8ZC5kYXRhKFwiYnMuY2Fyb3VzZWxcIixlPW5ldyBjKHRoaXMsZikpLFwibnVtYmVyXCI9PXR5cGVvZiBiP2UudG8oYik6Zz9lW2ddKCk6Zi5pbnRlcnZhbCYmZS5wYXVzZSgpLmN5Y2xlKCl9KX12YXIgYz1mdW5jdGlvbihiLGMpe3RoaXMuJGVsZW1lbnQ9YShiKSx0aGlzLiRpbmRpY2F0b3JzPXRoaXMuJGVsZW1lbnQuZmluZChcIi5jYXJvdXNlbC1pbmRpY2F0b3JzXCIpLHRoaXMub3B0aW9ucz1jLHRoaXMucGF1c2VkPW51bGwsdGhpcy5zbGlkaW5nPW51bGwsdGhpcy5pbnRlcnZhbD1udWxsLHRoaXMuJGFjdGl2ZT1udWxsLHRoaXMuJGl0ZW1zPW51bGwsdGhpcy5vcHRpb25zLmtleWJvYXJkJiZ0aGlzLiRlbGVtZW50Lm9uKFwia2V5ZG93bi5icy5jYXJvdXNlbFwiLGEucHJveHkodGhpcy5rZXlkb3duLHRoaXMpKSxcImhvdmVyXCI9PXRoaXMub3B0aW9ucy5wYXVzZSYmIShcIm9udG91Y2hzdGFydFwiaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSYmdGhpcy4kZWxlbWVudC5vbihcIm1vdXNlZW50ZXIuYnMuY2Fyb3VzZWxcIixhLnByb3h5KHRoaXMucGF1c2UsdGhpcykpLm9uKFwibW91c2VsZWF2ZS5icy5jYXJvdXNlbFwiLGEucHJveHkodGhpcy5jeWNsZSx0aGlzKSl9O2MuVkVSU0lPTj1cIjMuMy43XCIsYy5UUkFOU0lUSU9OX0RVUkFUSU9OPTYwMCxjLkRFRkFVTFRTPXtpbnRlcnZhbDo1ZTMscGF1c2U6XCJob3ZlclwiLHdyYXA6ITAsa2V5Ym9hcmQ6ITB9LGMucHJvdG90eXBlLmtleWRvd249ZnVuY3Rpb24oYSl7aWYoIS9pbnB1dHx0ZXh0YXJlYS9pLnRlc3QoYS50YXJnZXQudGFnTmFtZSkpe3N3aXRjaChhLndoaWNoKXtjYXNlIDM3OnRoaXMucHJldigpO2JyZWFrO2Nhc2UgMzk6dGhpcy5uZXh0KCk7YnJlYWs7ZGVmYXVsdDpyZXR1cm59YS5wcmV2ZW50RGVmYXVsdCgpfX0sYy5wcm90b3R5cGUuY3ljbGU9ZnVuY3Rpb24oYil7cmV0dXJuIGJ8fCh0aGlzLnBhdXNlZD0hMSksdGhpcy5pbnRlcnZhbCYmY2xlYXJJbnRlcnZhbCh0aGlzLmludGVydmFsKSx0aGlzLm9wdGlvbnMuaW50ZXJ2YWwmJiF0aGlzLnBhdXNlZCYmKHRoaXMuaW50ZXJ2YWw9c2V0SW50ZXJ2YWwoYS5wcm94eSh0aGlzLm5leHQsdGhpcyksdGhpcy5vcHRpb25zLmludGVydmFsKSksdGhpc30sYy5wcm90b3R5cGUuZ2V0SXRlbUluZGV4PWZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLiRpdGVtcz1hLnBhcmVudCgpLmNoaWxkcmVuKFwiLml0ZW1cIiksdGhpcy4kaXRlbXMuaW5kZXgoYXx8dGhpcy4kYWN0aXZlKX0sYy5wcm90b3R5cGUuZ2V0SXRlbUZvckRpcmVjdGlvbj1mdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMuZ2V0SXRlbUluZGV4KGIpLGQ9XCJwcmV2XCI9PWEmJjA9PT1jfHxcIm5leHRcIj09YSYmYz09dGhpcy4kaXRlbXMubGVuZ3RoLTE7aWYoZCYmIXRoaXMub3B0aW9ucy53cmFwKXJldHVybiBiO3ZhciBlPVwicHJldlwiPT1hPy0xOjEsZj0oYytlKSV0aGlzLiRpdGVtcy5sZW5ndGg7cmV0dXJuIHRoaXMuJGl0ZW1zLmVxKGYpfSxjLnByb3RvdHlwZS50bz1mdW5jdGlvbihhKXt2YXIgYj10aGlzLGM9dGhpcy5nZXRJdGVtSW5kZXgodGhpcy4kYWN0aXZlPXRoaXMuJGVsZW1lbnQuZmluZChcIi5pdGVtLmFjdGl2ZVwiKSk7aWYoIShhPnRoaXMuJGl0ZW1zLmxlbmd0aC0xfHxhPDApKXJldHVybiB0aGlzLnNsaWRpbmc/dGhpcy4kZWxlbWVudC5vbmUoXCJzbGlkLmJzLmNhcm91c2VsXCIsZnVuY3Rpb24oKXtiLnRvKGEpfSk6Yz09YT90aGlzLnBhdXNlKCkuY3ljbGUoKTp0aGlzLnNsaWRlKGE+Yz9cIm5leHRcIjpcInByZXZcIix0aGlzLiRpdGVtcy5lcShhKSl9LGMucHJvdG90eXBlLnBhdXNlPWZ1bmN0aW9uKGIpe3JldHVybiBifHwodGhpcy5wYXVzZWQ9ITApLHRoaXMuJGVsZW1lbnQuZmluZChcIi5uZXh0LCAucHJldlwiKS5sZW5ndGgmJmEuc3VwcG9ydC50cmFuc2l0aW9uJiYodGhpcy4kZWxlbWVudC50cmlnZ2VyKGEuc3VwcG9ydC50cmFuc2l0aW9uLmVuZCksdGhpcy5jeWNsZSghMCkpLHRoaXMuaW50ZXJ2YWw9Y2xlYXJJbnRlcnZhbCh0aGlzLmludGVydmFsKSx0aGlzfSxjLnByb3RvdHlwZS5uZXh0PWZ1bmN0aW9uKCl7aWYoIXRoaXMuc2xpZGluZylyZXR1cm4gdGhpcy5zbGlkZShcIm5leHRcIil9LGMucHJvdG90eXBlLnByZXY9ZnVuY3Rpb24oKXtpZighdGhpcy5zbGlkaW5nKXJldHVybiB0aGlzLnNsaWRlKFwicHJldlwiKX0sYy5wcm90b3R5cGUuc2xpZGU9ZnVuY3Rpb24oYixkKXt2YXIgZT10aGlzLiRlbGVtZW50LmZpbmQoXCIuaXRlbS5hY3RpdmVcIiksZj1kfHx0aGlzLmdldEl0ZW1Gb3JEaXJlY3Rpb24oYixlKSxnPXRoaXMuaW50ZXJ2YWwsaD1cIm5leHRcIj09Yj9cImxlZnRcIjpcInJpZ2h0XCIsaT10aGlzO2lmKGYuaGFzQ2xhc3MoXCJhY3RpdmVcIikpcmV0dXJuIHRoaXMuc2xpZGluZz0hMTt2YXIgaj1mWzBdLGs9YS5FdmVudChcInNsaWRlLmJzLmNhcm91c2VsXCIse3JlbGF0ZWRUYXJnZXQ6aixkaXJlY3Rpb246aH0pO2lmKHRoaXMuJGVsZW1lbnQudHJpZ2dlcihrKSwhay5pc0RlZmF1bHRQcmV2ZW50ZWQoKSl7aWYodGhpcy5zbGlkaW5nPSEwLGcmJnRoaXMucGF1c2UoKSx0aGlzLiRpbmRpY2F0b3JzLmxlbmd0aCl7dGhpcy4kaW5kaWNhdG9ycy5maW5kKFwiLmFjdGl2ZVwiKS5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKTt2YXIgbD1hKHRoaXMuJGluZGljYXRvcnMuY2hpbGRyZW4oKVt0aGlzLmdldEl0ZW1JbmRleChmKV0pO2wmJmwuYWRkQ2xhc3MoXCJhY3RpdmVcIil9dmFyIG09YS5FdmVudChcInNsaWQuYnMuY2Fyb3VzZWxcIix7cmVsYXRlZFRhcmdldDpqLGRpcmVjdGlvbjpofSk7cmV0dXJuIGEuc3VwcG9ydC50cmFuc2l0aW9uJiZ0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKFwic2xpZGVcIik/KGYuYWRkQ2xhc3MoYiksZlswXS5vZmZzZXRXaWR0aCxlLmFkZENsYXNzKGgpLGYuYWRkQ2xhc3MoaCksZS5vbmUoXCJic1RyYW5zaXRpb25FbmRcIixmdW5jdGlvbigpe2YucmVtb3ZlQ2xhc3MoW2IsaF0uam9pbihcIiBcIikpLmFkZENsYXNzKFwiYWN0aXZlXCIpLGUucmVtb3ZlQ2xhc3MoW1wiYWN0aXZlXCIsaF0uam9pbihcIiBcIikpLGkuc2xpZGluZz0hMSxzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7aS4kZWxlbWVudC50cmlnZ2VyKG0pfSwwKX0pLmVtdWxhdGVUcmFuc2l0aW9uRW5kKGMuVFJBTlNJVElPTl9EVVJBVElPTikpOihlLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpLGYuYWRkQ2xhc3MoXCJhY3RpdmVcIiksdGhpcy5zbGlkaW5nPSExLHRoaXMuJGVsZW1lbnQudHJpZ2dlcihtKSksZyYmdGhpcy5jeWNsZSgpLHRoaXN9fTt2YXIgZD1hLmZuLmNhcm91c2VsO2EuZm4uY2Fyb3VzZWw9YixhLmZuLmNhcm91c2VsLkNvbnN0cnVjdG9yPWMsYS5mbi5jYXJvdXNlbC5ub0NvbmZsaWN0PWZ1bmN0aW9uKCl7cmV0dXJuIGEuZm4uY2Fyb3VzZWw9ZCx0aGlzfTt2YXIgZT1mdW5jdGlvbihjKXt2YXIgZCxlPWEodGhpcyksZj1hKGUuYXR0cihcImRhdGEtdGFyZ2V0XCIpfHwoZD1lLmF0dHIoXCJocmVmXCIpKSYmZC5yZXBsYWNlKC8uKig/PSNbXlxcc10rJCkvLFwiXCIpKTtpZihmLmhhc0NsYXNzKFwiY2Fyb3VzZWxcIikpe3ZhciBnPWEuZXh0ZW5kKHt9LGYuZGF0YSgpLGUuZGF0YSgpKSxoPWUuYXR0cihcImRhdGEtc2xpZGUtdG9cIik7aCYmKGcuaW50ZXJ2YWw9ITEpLGIuY2FsbChmLGcpLGgmJmYuZGF0YShcImJzLmNhcm91c2VsXCIpLnRvKGgpLGMucHJldmVudERlZmF1bHQoKX19O2EoZG9jdW1lbnQpLm9uKFwiY2xpY2suYnMuY2Fyb3VzZWwuZGF0YS1hcGlcIixcIltkYXRhLXNsaWRlXVwiLGUpLm9uKFwiY2xpY2suYnMuY2Fyb3VzZWwuZGF0YS1hcGlcIixcIltkYXRhLXNsaWRlLXRvXVwiLGUpLGEod2luZG93KS5vbihcImxvYWRcIixmdW5jdGlvbigpe2EoJ1tkYXRhLXJpZGU9XCJjYXJvdXNlbFwiXScpLmVhY2goZnVuY3Rpb24oKXt2YXIgYz1hKHRoaXMpO2IuY2FsbChjLGMuZGF0YSgpKX0pfSl9KGpRdWVyeSksK2Z1bmN0aW9uKGEpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGIoYil7dmFyIGMsZD1iLmF0dHIoXCJkYXRhLXRhcmdldFwiKXx8KGM9Yi5hdHRyKFwiaHJlZlwiKSkmJmMucmVwbGFjZSgvLiooPz0jW15cXHNdKyQpLyxcIlwiKTtyZXR1cm4gYShkKX1mdW5jdGlvbiBjKGIpe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgYz1hKHRoaXMpLGU9Yy5kYXRhKFwiYnMuY29sbGFwc2VcIiksZj1hLmV4dGVuZCh7fSxkLkRFRkFVTFRTLGMuZGF0YSgpLFwib2JqZWN0XCI9PXR5cGVvZiBiJiZiKTshZSYmZi50b2dnbGUmJi9zaG93fGhpZGUvLnRlc3QoYikmJihmLnRvZ2dsZT0hMSksZXx8Yy5kYXRhKFwiYnMuY29sbGFwc2VcIixlPW5ldyBkKHRoaXMsZikpLFwic3RyaW5nXCI9PXR5cGVvZiBiJiZlW2JdKCl9KX12YXIgZD1mdW5jdGlvbihiLGMpe3RoaXMuJGVsZW1lbnQ9YShiKSx0aGlzLm9wdGlvbnM9YS5leHRlbmQoe30sZC5ERUZBVUxUUyxjKSx0aGlzLiR0cmlnZ2VyPWEoJ1tkYXRhLXRvZ2dsZT1cImNvbGxhcHNlXCJdW2hyZWY9XCIjJytiLmlkKydcIl0sW2RhdGEtdG9nZ2xlPVwiY29sbGFwc2VcIl1bZGF0YS10YXJnZXQ9XCIjJytiLmlkKydcIl0nKSx0aGlzLnRyYW5zaXRpb25pbmc9bnVsbCx0aGlzLm9wdGlvbnMucGFyZW50P3RoaXMuJHBhcmVudD10aGlzLmdldFBhcmVudCgpOnRoaXMuYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzKHRoaXMuJGVsZW1lbnQsdGhpcy4kdHJpZ2dlciksdGhpcy5vcHRpb25zLnRvZ2dsZSYmdGhpcy50b2dnbGUoKX07ZC5WRVJTSU9OPVwiMy4zLjdcIixkLlRSQU5TSVRJT05fRFVSQVRJT049MzUwLGQuREVGQVVMVFM9e3RvZ2dsZTohMH0sZC5wcm90b3R5cGUuZGltZW5zaW9uPWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy4kZWxlbWVudC5oYXNDbGFzcyhcIndpZHRoXCIpO3JldHVybiBhP1wid2lkdGhcIjpcImhlaWdodFwifSxkLnByb3RvdHlwZS5zaG93PWZ1bmN0aW9uKCl7aWYoIXRoaXMudHJhbnNpdGlvbmluZyYmIXRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoXCJpblwiKSl7dmFyIGIsZT10aGlzLiRwYXJlbnQmJnRoaXMuJHBhcmVudC5jaGlsZHJlbihcIi5wYW5lbFwiKS5jaGlsZHJlbihcIi5pbiwgLmNvbGxhcHNpbmdcIik7aWYoIShlJiZlLmxlbmd0aCYmKGI9ZS5kYXRhKFwiYnMuY29sbGFwc2VcIiksYiYmYi50cmFuc2l0aW9uaW5nKSkpe3ZhciBmPWEuRXZlbnQoXCJzaG93LmJzLmNvbGxhcHNlXCIpO2lmKHRoaXMuJGVsZW1lbnQudHJpZ2dlcihmKSwhZi5pc0RlZmF1bHRQcmV2ZW50ZWQoKSl7ZSYmZS5sZW5ndGgmJihjLmNhbGwoZSxcImhpZGVcIiksYnx8ZS5kYXRhKFwiYnMuY29sbGFwc2VcIixudWxsKSk7dmFyIGc9dGhpcy5kaW1lbnNpb24oKTt0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKFwiY29sbGFwc2VcIikuYWRkQ2xhc3MoXCJjb2xsYXBzaW5nXCIpW2ddKDApLmF0dHIoXCJhcmlhLWV4cGFuZGVkXCIsITApLHRoaXMuJHRyaWdnZXIucmVtb3ZlQ2xhc3MoXCJjb2xsYXBzZWRcIikuYXR0cihcImFyaWEtZXhwYW5kZWRcIiwhMCksdGhpcy50cmFuc2l0aW9uaW5nPTE7dmFyIGg9ZnVuY3Rpb24oKXt0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKFwiY29sbGFwc2luZ1wiKS5hZGRDbGFzcyhcImNvbGxhcHNlIGluXCIpW2ddKFwiXCIpLHRoaXMudHJhbnNpdGlvbmluZz0wLHRoaXMuJGVsZW1lbnQudHJpZ2dlcihcInNob3duLmJzLmNvbGxhcHNlXCIpfTtpZighYS5zdXBwb3J0LnRyYW5zaXRpb24pcmV0dXJuIGguY2FsbCh0aGlzKTt2YXIgaT1hLmNhbWVsQ2FzZShbXCJzY3JvbGxcIixnXS5qb2luKFwiLVwiKSk7dGhpcy4kZWxlbWVudC5vbmUoXCJic1RyYW5zaXRpb25FbmRcIixhLnByb3h5KGgsdGhpcykpLmVtdWxhdGVUcmFuc2l0aW9uRW5kKGQuVFJBTlNJVElPTl9EVVJBVElPTilbZ10odGhpcy4kZWxlbWVudFswXVtpXSl9fX19LGQucHJvdG90eXBlLmhpZGU9ZnVuY3Rpb24oKXtpZighdGhpcy50cmFuc2l0aW9uaW5nJiZ0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKFwiaW5cIikpe3ZhciBiPWEuRXZlbnQoXCJoaWRlLmJzLmNvbGxhcHNlXCIpO2lmKHRoaXMuJGVsZW1lbnQudHJpZ2dlcihiKSwhYi5pc0RlZmF1bHRQcmV2ZW50ZWQoKSl7dmFyIGM9dGhpcy5kaW1lbnNpb24oKTt0aGlzLiRlbGVtZW50W2NdKHRoaXMuJGVsZW1lbnRbY10oKSlbMF0ub2Zmc2V0SGVpZ2h0LHRoaXMuJGVsZW1lbnQuYWRkQ2xhc3MoXCJjb2xsYXBzaW5nXCIpLnJlbW92ZUNsYXNzKFwiY29sbGFwc2UgaW5cIikuYXR0cihcImFyaWEtZXhwYW5kZWRcIiwhMSksdGhpcy4kdHJpZ2dlci5hZGRDbGFzcyhcImNvbGxhcHNlZFwiKS5hdHRyKFwiYXJpYS1leHBhbmRlZFwiLCExKSx0aGlzLnRyYW5zaXRpb25pbmc9MTt2YXIgZT1mdW5jdGlvbigpe3RoaXMudHJhbnNpdGlvbmluZz0wLHRoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3MoXCJjb2xsYXBzaW5nXCIpLmFkZENsYXNzKFwiY29sbGFwc2VcIikudHJpZ2dlcihcImhpZGRlbi5icy5jb2xsYXBzZVwiKX07cmV0dXJuIGEuc3VwcG9ydC50cmFuc2l0aW9uP3ZvaWQgdGhpcy4kZWxlbWVudFtjXSgwKS5vbmUoXCJic1RyYW5zaXRpb25FbmRcIixhLnByb3h5KGUsdGhpcykpLmVtdWxhdGVUcmFuc2l0aW9uRW5kKGQuVFJBTlNJVElPTl9EVVJBVElPTik6ZS5jYWxsKHRoaXMpfX19LGQucHJvdG90eXBlLnRvZ2dsZT1mdW5jdGlvbigpe3RoaXNbdGhpcy4kZWxlbWVudC5oYXNDbGFzcyhcImluXCIpP1wiaGlkZVwiOlwic2hvd1wiXSgpfSxkLnByb3RvdHlwZS5nZXRQYXJlbnQ9ZnVuY3Rpb24oKXtyZXR1cm4gYSh0aGlzLm9wdGlvbnMucGFyZW50KS5maW5kKCdbZGF0YS10b2dnbGU9XCJjb2xsYXBzZVwiXVtkYXRhLXBhcmVudD1cIicrdGhpcy5vcHRpb25zLnBhcmVudCsnXCJdJykuZWFjaChhLnByb3h5KGZ1bmN0aW9uKGMsZCl7dmFyIGU9YShkKTt0aGlzLmFkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyhiKGUpLGUpfSx0aGlzKSkuZW5kKCl9LGQucHJvdG90eXBlLmFkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcz1mdW5jdGlvbihhLGIpe3ZhciBjPWEuaGFzQ2xhc3MoXCJpblwiKTthLmF0dHIoXCJhcmlhLWV4cGFuZGVkXCIsYyksYi50b2dnbGVDbGFzcyhcImNvbGxhcHNlZFwiLCFjKS5hdHRyKFwiYXJpYS1leHBhbmRlZFwiLGMpfTt2YXIgZT1hLmZuLmNvbGxhcHNlO2EuZm4uY29sbGFwc2U9YyxhLmZuLmNvbGxhcHNlLkNvbnN0cnVjdG9yPWQsYS5mbi5jb2xsYXBzZS5ub0NvbmZsaWN0PWZ1bmN0aW9uKCl7cmV0dXJuIGEuZm4uY29sbGFwc2U9ZSx0aGlzfSxhKGRvY3VtZW50KS5vbihcImNsaWNrLmJzLmNvbGxhcHNlLmRhdGEtYXBpXCIsJ1tkYXRhLXRvZ2dsZT1cImNvbGxhcHNlXCJdJyxmdW5jdGlvbihkKXt2YXIgZT1hKHRoaXMpO2UuYXR0cihcImRhdGEtdGFyZ2V0XCIpfHxkLnByZXZlbnREZWZhdWx0KCk7dmFyIGY9YihlKSxnPWYuZGF0YShcImJzLmNvbGxhcHNlXCIpLGg9Zz9cInRvZ2dsZVwiOmUuZGF0YSgpO2MuY2FsbChmLGgpfSl9KGpRdWVyeSksK2Z1bmN0aW9uKGEpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGIoYil7dmFyIGM9Yi5hdHRyKFwiZGF0YS10YXJnZXRcIik7Y3x8KGM9Yi5hdHRyKFwiaHJlZlwiKSxjPWMmJi8jW0EtWmEtel0vLnRlc3QoYykmJmMucmVwbGFjZSgvLiooPz0jW15cXHNdKiQpLyxcIlwiKSk7dmFyIGQ9YyYmYShjKTtyZXR1cm4gZCYmZC5sZW5ndGg/ZDpiLnBhcmVudCgpfWZ1bmN0aW9uIGMoYyl7YyYmMz09PWMud2hpY2h8fChhKGUpLnJlbW92ZSgpLGEoZikuZWFjaChmdW5jdGlvbigpe3ZhciBkPWEodGhpcyksZT1iKGQpLGY9e3JlbGF0ZWRUYXJnZXQ6dGhpc307ZS5oYXNDbGFzcyhcIm9wZW5cIikmJihjJiZcImNsaWNrXCI9PWMudHlwZSYmL2lucHV0fHRleHRhcmVhL2kudGVzdChjLnRhcmdldC50YWdOYW1lKSYmYS5jb250YWlucyhlWzBdLGMudGFyZ2V0KXx8KGUudHJpZ2dlcihjPWEuRXZlbnQoXCJoaWRlLmJzLmRyb3Bkb3duXCIsZikpLGMuaXNEZWZhdWx0UHJldmVudGVkKCl8fChkLmF0dHIoXCJhcmlhLWV4cGFuZGVkXCIsXCJmYWxzZVwiKSxlLnJlbW92ZUNsYXNzKFwib3BlblwiKS50cmlnZ2VyKGEuRXZlbnQoXCJoaWRkZW4uYnMuZHJvcGRvd25cIixmKSkpKSl9KSl9ZnVuY3Rpb24gZChiKXtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIGM9YSh0aGlzKSxkPWMuZGF0YShcImJzLmRyb3Bkb3duXCIpO2R8fGMuZGF0YShcImJzLmRyb3Bkb3duXCIsZD1uZXcgZyh0aGlzKSksXCJzdHJpbmdcIj09dHlwZW9mIGImJmRbYl0uY2FsbChjKX0pfXZhciBlPVwiLmRyb3Bkb3duLWJhY2tkcm9wXCIsZj0nW2RhdGEtdG9nZ2xlPVwiZHJvcGRvd25cIl0nLGc9ZnVuY3Rpb24oYil7YShiKS5vbihcImNsaWNrLmJzLmRyb3Bkb3duXCIsdGhpcy50b2dnbGUpfTtnLlZFUlNJT049XCIzLjMuN1wiLGcucHJvdG90eXBlLnRvZ2dsZT1mdW5jdGlvbihkKXt2YXIgZT1hKHRoaXMpO2lmKCFlLmlzKFwiLmRpc2FibGVkLCA6ZGlzYWJsZWRcIikpe3ZhciBmPWIoZSksZz1mLmhhc0NsYXNzKFwib3BlblwiKTtpZihjKCksIWcpe1wib250b3VjaHN0YXJ0XCJpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQmJiFmLmNsb3Nlc3QoXCIubmF2YmFyLW5hdlwiKS5sZW5ndGgmJmEoZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSkuYWRkQ2xhc3MoXCJkcm9wZG93bi1iYWNrZHJvcFwiKS5pbnNlcnRBZnRlcihhKHRoaXMpKS5vbihcImNsaWNrXCIsYyk7dmFyIGg9e3JlbGF0ZWRUYXJnZXQ6dGhpc307aWYoZi50cmlnZ2VyKGQ9YS5FdmVudChcInNob3cuYnMuZHJvcGRvd25cIixoKSksZC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSlyZXR1cm47ZS50cmlnZ2VyKFwiZm9jdXNcIikuYXR0cihcImFyaWEtZXhwYW5kZWRcIixcInRydWVcIiksZi50b2dnbGVDbGFzcyhcIm9wZW5cIikudHJpZ2dlcihhLkV2ZW50KFwic2hvd24uYnMuZHJvcGRvd25cIixoKSl9cmV0dXJuITF9fSxnLnByb3RvdHlwZS5rZXlkb3duPWZ1bmN0aW9uKGMpe2lmKC8oMzh8NDB8Mjd8MzIpLy50ZXN0KGMud2hpY2gpJiYhL2lucHV0fHRleHRhcmVhL2kudGVzdChjLnRhcmdldC50YWdOYW1lKSl7dmFyIGQ9YSh0aGlzKTtpZihjLnByZXZlbnREZWZhdWx0KCksYy5zdG9wUHJvcGFnYXRpb24oKSwhZC5pcyhcIi5kaXNhYmxlZCwgOmRpc2FibGVkXCIpKXt2YXIgZT1iKGQpLGc9ZS5oYXNDbGFzcyhcIm9wZW5cIik7aWYoIWcmJjI3IT1jLndoaWNofHxnJiYyNz09Yy53aGljaClyZXR1cm4gMjc9PWMud2hpY2gmJmUuZmluZChmKS50cmlnZ2VyKFwiZm9jdXNcIiksZC50cmlnZ2VyKFwiY2xpY2tcIik7dmFyIGg9XCIgbGk6bm90KC5kaXNhYmxlZCk6dmlzaWJsZSBhXCIsaT1lLmZpbmQoXCIuZHJvcGRvd24tbWVudVwiK2gpO2lmKGkubGVuZ3RoKXt2YXIgaj1pLmluZGV4KGMudGFyZ2V0KTszOD09Yy53aGljaCYmaj4wJiZqLS0sNDA9PWMud2hpY2gmJmo8aS5sZW5ndGgtMSYmaisrLH5qfHwoaj0wKSxpLmVxKGopLnRyaWdnZXIoXCJmb2N1c1wiKX19fX07dmFyIGg9YS5mbi5kcm9wZG93bjthLmZuLmRyb3Bkb3duPWQsYS5mbi5kcm9wZG93bi5Db25zdHJ1Y3Rvcj1nLGEuZm4uZHJvcGRvd24ubm9Db25mbGljdD1mdW5jdGlvbigpe3JldHVybiBhLmZuLmRyb3Bkb3duPWgsdGhpc30sYShkb2N1bWVudCkub24oXCJjbGljay5icy5kcm9wZG93bi5kYXRhLWFwaVwiLGMpLm9uKFwiY2xpY2suYnMuZHJvcGRvd24uZGF0YS1hcGlcIixcIi5kcm9wZG93biBmb3JtXCIsZnVuY3Rpb24oYSl7YS5zdG9wUHJvcGFnYXRpb24oKX0pLm9uKFwiY2xpY2suYnMuZHJvcGRvd24uZGF0YS1hcGlcIixmLGcucHJvdG90eXBlLnRvZ2dsZSkub24oXCJrZXlkb3duLmJzLmRyb3Bkb3duLmRhdGEtYXBpXCIsZixnLnByb3RvdHlwZS5rZXlkb3duKS5vbihcImtleWRvd24uYnMuZHJvcGRvd24uZGF0YS1hcGlcIixcIi5kcm9wZG93bi1tZW51XCIsZy5wcm90b3R5cGUua2V5ZG93bil9KGpRdWVyeSksK2Z1bmN0aW9uKGEpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGIoYixkKXtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIGU9YSh0aGlzKSxmPWUuZGF0YShcImJzLm1vZGFsXCIpLGc9YS5leHRlbmQoe30sYy5ERUZBVUxUUyxlLmRhdGEoKSxcIm9iamVjdFwiPT10eXBlb2YgYiYmYik7Znx8ZS5kYXRhKFwiYnMubW9kYWxcIixmPW5ldyBjKHRoaXMsZykpLFwic3RyaW5nXCI9PXR5cGVvZiBiP2ZbYl0oZCk6Zy5zaG93JiZmLnNob3coZCl9KX12YXIgYz1mdW5jdGlvbihiLGMpe3RoaXMub3B0aW9ucz1jLHRoaXMuJGJvZHk9YShkb2N1bWVudC5ib2R5KSx0aGlzLiRlbGVtZW50PWEoYiksdGhpcy4kZGlhbG9nPXRoaXMuJGVsZW1lbnQuZmluZChcIi5tb2RhbC1kaWFsb2dcIiksdGhpcy4kYmFja2Ryb3A9bnVsbCx0aGlzLmlzU2hvd249bnVsbCx0aGlzLm9yaWdpbmFsQm9keVBhZD1udWxsLHRoaXMuc2Nyb2xsYmFyV2lkdGg9MCx0aGlzLmlnbm9yZUJhY2tkcm9wQ2xpY2s9ITEsdGhpcy5vcHRpb25zLnJlbW90ZSYmdGhpcy4kZWxlbWVudC5maW5kKFwiLm1vZGFsLWNvbnRlbnRcIikubG9hZCh0aGlzLm9wdGlvbnMucmVtb3RlLGEucHJveHkoZnVuY3Rpb24oKXt0aGlzLiRlbGVtZW50LnRyaWdnZXIoXCJsb2FkZWQuYnMubW9kYWxcIil9LHRoaXMpKX07Yy5WRVJTSU9OPVwiMy4zLjdcIixjLlRSQU5TSVRJT05fRFVSQVRJT049MzAwLGMuQkFDS0RST1BfVFJBTlNJVElPTl9EVVJBVElPTj0xNTAsYy5ERUZBVUxUUz17YmFja2Ryb3A6ITAsa2V5Ym9hcmQ6ITAsc2hvdzohMH0sYy5wcm90b3R5cGUudG9nZ2xlPWZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmlzU2hvd24/dGhpcy5oaWRlKCk6dGhpcy5zaG93KGEpfSxjLnByb3RvdHlwZS5zaG93PWZ1bmN0aW9uKGIpe3ZhciBkPXRoaXMsZT1hLkV2ZW50KFwic2hvdy5icy5tb2RhbFwiLHtyZWxhdGVkVGFyZ2V0OmJ9KTt0aGlzLiRlbGVtZW50LnRyaWdnZXIoZSksdGhpcy5pc1Nob3dufHxlLmlzRGVmYXVsdFByZXZlbnRlZCgpfHwodGhpcy5pc1Nob3duPSEwLHRoaXMuY2hlY2tTY3JvbGxiYXIoKSx0aGlzLnNldFNjcm9sbGJhcigpLHRoaXMuJGJvZHkuYWRkQ2xhc3MoXCJtb2RhbC1vcGVuXCIpLHRoaXMuZXNjYXBlKCksdGhpcy5yZXNpemUoKSx0aGlzLiRlbGVtZW50Lm9uKFwiY2xpY2suZGlzbWlzcy5icy5tb2RhbFwiLCdbZGF0YS1kaXNtaXNzPVwibW9kYWxcIl0nLGEucHJveHkodGhpcy5oaWRlLHRoaXMpKSx0aGlzLiRkaWFsb2cub24oXCJtb3VzZWRvd24uZGlzbWlzcy5icy5tb2RhbFwiLGZ1bmN0aW9uKCl7ZC4kZWxlbWVudC5vbmUoXCJtb3VzZXVwLmRpc21pc3MuYnMubW9kYWxcIixmdW5jdGlvbihiKXthKGIudGFyZ2V0KS5pcyhkLiRlbGVtZW50KSYmKGQuaWdub3JlQmFja2Ryb3BDbGljaz0hMCl9KX0pLHRoaXMuYmFja2Ryb3AoZnVuY3Rpb24oKXt2YXIgZT1hLnN1cHBvcnQudHJhbnNpdGlvbiYmZC4kZWxlbWVudC5oYXNDbGFzcyhcImZhZGVcIik7ZC4kZWxlbWVudC5wYXJlbnQoKS5sZW5ndGh8fGQuJGVsZW1lbnQuYXBwZW5kVG8oZC4kYm9keSksZC4kZWxlbWVudC5zaG93KCkuc2Nyb2xsVG9wKDApLGQuYWRqdXN0RGlhbG9nKCksZSYmZC4kZWxlbWVudFswXS5vZmZzZXRXaWR0aCxkLiRlbGVtZW50LmFkZENsYXNzKFwiaW5cIiksZC5lbmZvcmNlRm9jdXMoKTt2YXIgZj1hLkV2ZW50KFwic2hvd24uYnMubW9kYWxcIix7cmVsYXRlZFRhcmdldDpifSk7ZT9kLiRkaWFsb2cub25lKFwiYnNUcmFuc2l0aW9uRW5kXCIsZnVuY3Rpb24oKXtkLiRlbGVtZW50LnRyaWdnZXIoXCJmb2N1c1wiKS50cmlnZ2VyKGYpfSkuZW11bGF0ZVRyYW5zaXRpb25FbmQoYy5UUkFOU0lUSU9OX0RVUkFUSU9OKTpkLiRlbGVtZW50LnRyaWdnZXIoXCJmb2N1c1wiKS50cmlnZ2VyKGYpfSkpfSxjLnByb3RvdHlwZS5oaWRlPWZ1bmN0aW9uKGIpe2ImJmIucHJldmVudERlZmF1bHQoKSxiPWEuRXZlbnQoXCJoaWRlLmJzLm1vZGFsXCIpLHRoaXMuJGVsZW1lbnQudHJpZ2dlcihiKSx0aGlzLmlzU2hvd24mJiFiLmlzRGVmYXVsdFByZXZlbnRlZCgpJiYodGhpcy5pc1Nob3duPSExLHRoaXMuZXNjYXBlKCksdGhpcy5yZXNpemUoKSxhKGRvY3VtZW50KS5vZmYoXCJmb2N1c2luLmJzLm1vZGFsXCIpLHRoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3MoXCJpblwiKS5vZmYoXCJjbGljay5kaXNtaXNzLmJzLm1vZGFsXCIpLm9mZihcIm1vdXNldXAuZGlzbWlzcy5icy5tb2RhbFwiKSx0aGlzLiRkaWFsb2cub2ZmKFwibW91c2Vkb3duLmRpc21pc3MuYnMubW9kYWxcIiksYS5zdXBwb3J0LnRyYW5zaXRpb24mJnRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoXCJmYWRlXCIpP3RoaXMuJGVsZW1lbnQub25lKFwiYnNUcmFuc2l0aW9uRW5kXCIsYS5wcm94eSh0aGlzLmhpZGVNb2RhbCx0aGlzKSkuZW11bGF0ZVRyYW5zaXRpb25FbmQoYy5UUkFOU0lUSU9OX0RVUkFUSU9OKTp0aGlzLmhpZGVNb2RhbCgpKX0sYy5wcm90b3R5cGUuZW5mb3JjZUZvY3VzPWZ1bmN0aW9uKCl7YShkb2N1bWVudCkub2ZmKFwiZm9jdXNpbi5icy5tb2RhbFwiKS5vbihcImZvY3VzaW4uYnMubW9kYWxcIixhLnByb3h5KGZ1bmN0aW9uKGEpe2RvY3VtZW50PT09YS50YXJnZXR8fHRoaXMuJGVsZW1lbnRbMF09PT1hLnRhcmdldHx8dGhpcy4kZWxlbWVudC5oYXMoYS50YXJnZXQpLmxlbmd0aHx8dGhpcy4kZWxlbWVudC50cmlnZ2VyKFwiZm9jdXNcIil9LHRoaXMpKX0sYy5wcm90b3R5cGUuZXNjYXBlPWZ1bmN0aW9uKCl7dGhpcy5pc1Nob3duJiZ0aGlzLm9wdGlvbnMua2V5Ym9hcmQ/dGhpcy4kZWxlbWVudC5vbihcImtleWRvd24uZGlzbWlzcy5icy5tb2RhbFwiLGEucHJveHkoZnVuY3Rpb24oYSl7Mjc9PWEud2hpY2gmJnRoaXMuaGlkZSgpfSx0aGlzKSk6dGhpcy5pc1Nob3dufHx0aGlzLiRlbGVtZW50Lm9mZihcImtleWRvd24uZGlzbWlzcy5icy5tb2RhbFwiKX0sYy5wcm90b3R5cGUucmVzaXplPWZ1bmN0aW9uKCl7dGhpcy5pc1Nob3duP2Eod2luZG93KS5vbihcInJlc2l6ZS5icy5tb2RhbFwiLGEucHJveHkodGhpcy5oYW5kbGVVcGRhdGUsdGhpcykpOmEod2luZG93KS5vZmYoXCJyZXNpemUuYnMubW9kYWxcIil9LGMucHJvdG90eXBlLmhpZGVNb2RhbD1mdW5jdGlvbigpe3ZhciBhPXRoaXM7dGhpcy4kZWxlbWVudC5oaWRlKCksdGhpcy5iYWNrZHJvcChmdW5jdGlvbigpe2EuJGJvZHkucmVtb3ZlQ2xhc3MoXCJtb2RhbC1vcGVuXCIpLGEucmVzZXRBZGp1c3RtZW50cygpLGEucmVzZXRTY3JvbGxiYXIoKSxhLiRlbGVtZW50LnRyaWdnZXIoXCJoaWRkZW4uYnMubW9kYWxcIil9KX0sYy5wcm90b3R5cGUucmVtb3ZlQmFja2Ryb3A9ZnVuY3Rpb24oKXt0aGlzLiRiYWNrZHJvcCYmdGhpcy4kYmFja2Ryb3AucmVtb3ZlKCksdGhpcy4kYmFja2Ryb3A9bnVsbH0sYy5wcm90b3R5cGUuYmFja2Ryb3A9ZnVuY3Rpb24oYil7dmFyIGQ9dGhpcyxlPXRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoXCJmYWRlXCIpP1wiZmFkZVwiOlwiXCI7aWYodGhpcy5pc1Nob3duJiZ0aGlzLm9wdGlvbnMuYmFja2Ryb3Ape3ZhciBmPWEuc3VwcG9ydC50cmFuc2l0aW9uJiZlO2lmKHRoaXMuJGJhY2tkcm9wPWEoZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSkuYWRkQ2xhc3MoXCJtb2RhbC1iYWNrZHJvcCBcIitlKS5hcHBlbmRUbyh0aGlzLiRib2R5KSx0aGlzLiRlbGVtZW50Lm9uKFwiY2xpY2suZGlzbWlzcy5icy5tb2RhbFwiLGEucHJveHkoZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuaWdub3JlQmFja2Ryb3BDbGljaz92b2lkKHRoaXMuaWdub3JlQmFja2Ryb3BDbGljaz0hMSk6dm9pZChhLnRhcmdldD09PWEuY3VycmVudFRhcmdldCYmKFwic3RhdGljXCI9PXRoaXMub3B0aW9ucy5iYWNrZHJvcD90aGlzLiRlbGVtZW50WzBdLmZvY3VzKCk6dGhpcy5oaWRlKCkpKX0sdGhpcykpLGYmJnRoaXMuJGJhY2tkcm9wWzBdLm9mZnNldFdpZHRoLHRoaXMuJGJhY2tkcm9wLmFkZENsYXNzKFwiaW5cIiksIWIpcmV0dXJuO2Y/dGhpcy4kYmFja2Ryb3Aub25lKFwiYnNUcmFuc2l0aW9uRW5kXCIsYikuZW11bGF0ZVRyYW5zaXRpb25FbmQoYy5CQUNLRFJPUF9UUkFOU0lUSU9OX0RVUkFUSU9OKTpiKCl9ZWxzZSBpZighdGhpcy5pc1Nob3duJiZ0aGlzLiRiYWNrZHJvcCl7dGhpcy4kYmFja2Ryb3AucmVtb3ZlQ2xhc3MoXCJpblwiKTt2YXIgZz1mdW5jdGlvbigpe2QucmVtb3ZlQmFja2Ryb3AoKSxiJiZiKCl9O2Euc3VwcG9ydC50cmFuc2l0aW9uJiZ0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKFwiZmFkZVwiKT90aGlzLiRiYWNrZHJvcC5vbmUoXCJic1RyYW5zaXRpb25FbmRcIixnKS5lbXVsYXRlVHJhbnNpdGlvbkVuZChjLkJBQ0tEUk9QX1RSQU5TSVRJT05fRFVSQVRJT04pOmcoKX1lbHNlIGImJmIoKX0sYy5wcm90b3R5cGUuaGFuZGxlVXBkYXRlPWZ1bmN0aW9uKCl7dGhpcy5hZGp1c3REaWFsb2coKX0sYy5wcm90b3R5cGUuYWRqdXN0RGlhbG9nPWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy4kZWxlbWVudFswXS5zY3JvbGxIZWlnaHQ+ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodDt0aGlzLiRlbGVtZW50LmNzcyh7cGFkZGluZ0xlZnQ6IXRoaXMuYm9keUlzT3ZlcmZsb3dpbmcmJmE/dGhpcy5zY3JvbGxiYXJXaWR0aDpcIlwiLHBhZGRpbmdSaWdodDp0aGlzLmJvZHlJc092ZXJmbG93aW5nJiYhYT90aGlzLnNjcm9sbGJhcldpZHRoOlwiXCJ9KX0sYy5wcm90b3R5cGUucmVzZXRBZGp1c3RtZW50cz1mdW5jdGlvbigpe3RoaXMuJGVsZW1lbnQuY3NzKHtwYWRkaW5nTGVmdDpcIlwiLHBhZGRpbmdSaWdodDpcIlwifSl9LGMucHJvdG90eXBlLmNoZWNrU2Nyb2xsYmFyPWZ1bmN0aW9uKCl7dmFyIGE9d2luZG93LmlubmVyV2lkdGg7aWYoIWEpe3ZhciBiPWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTthPWIucmlnaHQtTWF0aC5hYnMoYi5sZWZ0KX10aGlzLmJvZHlJc092ZXJmbG93aW5nPWRvY3VtZW50LmJvZHkuY2xpZW50V2lkdGg8YSx0aGlzLnNjcm9sbGJhcldpZHRoPXRoaXMubWVhc3VyZVNjcm9sbGJhcigpfSxjLnByb3RvdHlwZS5zZXRTY3JvbGxiYXI9ZnVuY3Rpb24oKXt2YXIgYT1wYXJzZUludCh0aGlzLiRib2R5LmNzcyhcInBhZGRpbmctcmlnaHRcIil8fDAsMTApO3RoaXMub3JpZ2luYWxCb2R5UGFkPWRvY3VtZW50LmJvZHkuc3R5bGUucGFkZGluZ1JpZ2h0fHxcIlwiLHRoaXMuYm9keUlzT3ZlcmZsb3dpbmcmJnRoaXMuJGJvZHkuY3NzKFwicGFkZGluZy1yaWdodFwiLGErdGhpcy5zY3JvbGxiYXJXaWR0aCl9LGMucHJvdG90eXBlLnJlc2V0U2Nyb2xsYmFyPWZ1bmN0aW9uKCl7dGhpcy4kYm9keS5jc3MoXCJwYWRkaW5nLXJpZ2h0XCIsdGhpcy5vcmlnaW5hbEJvZHlQYWQpfSxjLnByb3RvdHlwZS5tZWFzdXJlU2Nyb2xsYmFyPWZ1bmN0aW9uKCl7dmFyIGE9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTthLmNsYXNzTmFtZT1cIm1vZGFsLXNjcm9sbGJhci1tZWFzdXJlXCIsdGhpcy4kYm9keS5hcHBlbmQoYSk7dmFyIGI9YS5vZmZzZXRXaWR0aC1hLmNsaWVudFdpZHRoO3JldHVybiB0aGlzLiRib2R5WzBdLnJlbW92ZUNoaWxkKGEpLGJ9O3ZhciBkPWEuZm4ubW9kYWw7YS5mbi5tb2RhbD1iLGEuZm4ubW9kYWwuQ29uc3RydWN0b3I9YyxhLmZuLm1vZGFsLm5vQ29uZmxpY3Q9ZnVuY3Rpb24oKXtyZXR1cm4gYS5mbi5tb2RhbD1kLHRoaXN9LGEoZG9jdW1lbnQpLm9uKFwiY2xpY2suYnMubW9kYWwuZGF0YS1hcGlcIiwnW2RhdGEtdG9nZ2xlPVwibW9kYWxcIl0nLGZ1bmN0aW9uKGMpe3ZhciBkPWEodGhpcyksZT1kLmF0dHIoXCJocmVmXCIpLGY9YShkLmF0dHIoXCJkYXRhLXRhcmdldFwiKXx8ZSYmZS5yZXBsYWNlKC8uKig/PSNbXlxcc10rJCkvLFwiXCIpKSxnPWYuZGF0YShcImJzLm1vZGFsXCIpP1widG9nZ2xlXCI6YS5leHRlbmQoe3JlbW90ZTohLyMvLnRlc3QoZSkmJmV9LGYuZGF0YSgpLGQuZGF0YSgpKTtkLmlzKFwiYVwiKSYmYy5wcmV2ZW50RGVmYXVsdCgpLGYub25lKFwic2hvdy5icy5tb2RhbFwiLGZ1bmN0aW9uKGEpe2EuaXNEZWZhdWx0UHJldmVudGVkKCl8fGYub25lKFwiaGlkZGVuLmJzLm1vZGFsXCIsZnVuY3Rpb24oKXtkLmlzKFwiOnZpc2libGVcIikmJmQudHJpZ2dlcihcImZvY3VzXCIpfSl9KSxiLmNhbGwoZixnLHRoaXMpfSl9KGpRdWVyeSksK2Z1bmN0aW9uKGEpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGIoYil7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciBkPWEodGhpcyksZT1kLmRhdGEoXCJicy50b29sdGlwXCIpLGY9XCJvYmplY3RcIj09dHlwZW9mIGImJmI7IWUmJi9kZXN0cm95fGhpZGUvLnRlc3QoYil8fChlfHxkLmRhdGEoXCJicy50b29sdGlwXCIsZT1uZXcgYyh0aGlzLGYpKSxcInN0cmluZ1wiPT10eXBlb2YgYiYmZVtiXSgpKX0pfXZhciBjPWZ1bmN0aW9uKGEsYil7dGhpcy50eXBlPW51bGwsdGhpcy5vcHRpb25zPW51bGwsdGhpcy5lbmFibGVkPW51bGwsdGhpcy50aW1lb3V0PW51bGwsdGhpcy5ob3ZlclN0YXRlPW51bGwsdGhpcy4kZWxlbWVudD1udWxsLHRoaXMuaW5TdGF0ZT1udWxsLHRoaXMuaW5pdChcInRvb2x0aXBcIixhLGIpfTtjLlZFUlNJT049XCIzLjMuN1wiLGMuVFJBTlNJVElPTl9EVVJBVElPTj0xNTAsYy5ERUZBVUxUUz17YW5pbWF0aW9uOiEwLHBsYWNlbWVudDpcInRvcFwiLHNlbGVjdG9yOiExLHRlbXBsYXRlOic8ZGl2IGNsYXNzPVwidG9vbHRpcFwiIHJvbGU9XCJ0b29sdGlwXCI+PGRpdiBjbGFzcz1cInRvb2x0aXAtYXJyb3dcIj48L2Rpdj48ZGl2IGNsYXNzPVwidG9vbHRpcC1pbm5lclwiPjwvZGl2PjwvZGl2PicsdHJpZ2dlcjpcImhvdmVyIGZvY3VzXCIsdGl0bGU6XCJcIixkZWxheTowLGh0bWw6ITEsY29udGFpbmVyOiExLHZpZXdwb3J0OntzZWxlY3RvcjpcImJvZHlcIixwYWRkaW5nOjB9fSxjLnByb3RvdHlwZS5pbml0PWZ1bmN0aW9uKGIsYyxkKXtpZih0aGlzLmVuYWJsZWQ9ITAsdGhpcy50eXBlPWIsdGhpcy4kZWxlbWVudD1hKGMpLHRoaXMub3B0aW9ucz10aGlzLmdldE9wdGlvbnMoZCksdGhpcy4kdmlld3BvcnQ9dGhpcy5vcHRpb25zLnZpZXdwb3J0JiZhKGEuaXNGdW5jdGlvbih0aGlzLm9wdGlvbnMudmlld3BvcnQpP3RoaXMub3B0aW9ucy52aWV3cG9ydC5jYWxsKHRoaXMsdGhpcy4kZWxlbWVudCk6dGhpcy5vcHRpb25zLnZpZXdwb3J0LnNlbGVjdG9yfHx0aGlzLm9wdGlvbnMudmlld3BvcnQpLHRoaXMuaW5TdGF0ZT17Y2xpY2s6ITEsaG92ZXI6ITEsZm9jdXM6ITF9LHRoaXMuJGVsZW1lbnRbMF1pbnN0YW5jZW9mIGRvY3VtZW50LmNvbnN0cnVjdG9yJiYhdGhpcy5vcHRpb25zLnNlbGVjdG9yKXRocm93IG5ldyBFcnJvcihcImBzZWxlY3RvcmAgb3B0aW9uIG11c3QgYmUgc3BlY2lmaWVkIHdoZW4gaW5pdGlhbGl6aW5nIFwiK3RoaXMudHlwZStcIiBvbiB0aGUgd2luZG93LmRvY3VtZW50IG9iamVjdCFcIik7Zm9yKHZhciBlPXRoaXMub3B0aW9ucy50cmlnZ2VyLnNwbGl0KFwiIFwiKSxmPWUubGVuZ3RoO2YtLTspe3ZhciBnPWVbZl07aWYoXCJjbGlja1wiPT1nKXRoaXMuJGVsZW1lbnQub24oXCJjbGljay5cIit0aGlzLnR5cGUsdGhpcy5vcHRpb25zLnNlbGVjdG9yLGEucHJveHkodGhpcy50b2dnbGUsdGhpcykpO2Vsc2UgaWYoXCJtYW51YWxcIiE9Zyl7dmFyIGg9XCJob3ZlclwiPT1nP1wibW91c2VlbnRlclwiOlwiZm9jdXNpblwiLGk9XCJob3ZlclwiPT1nP1wibW91c2VsZWF2ZVwiOlwiZm9jdXNvdXRcIjt0aGlzLiRlbGVtZW50Lm9uKGgrXCIuXCIrdGhpcy50eXBlLHRoaXMub3B0aW9ucy5zZWxlY3RvcixhLnByb3h5KHRoaXMuZW50ZXIsdGhpcykpLHRoaXMuJGVsZW1lbnQub24oaStcIi5cIit0aGlzLnR5cGUsdGhpcy5vcHRpb25zLnNlbGVjdG9yLGEucHJveHkodGhpcy5sZWF2ZSx0aGlzKSl9fXRoaXMub3B0aW9ucy5zZWxlY3Rvcj90aGlzLl9vcHRpb25zPWEuZXh0ZW5kKHt9LHRoaXMub3B0aW9ucyx7dHJpZ2dlcjpcIm1hbnVhbFwiLHNlbGVjdG9yOlwiXCJ9KTp0aGlzLmZpeFRpdGxlKCl9LGMucHJvdG90eXBlLmdldERlZmF1bHRzPWZ1bmN0aW9uKCl7cmV0dXJuIGMuREVGQVVMVFN9LGMucHJvdG90eXBlLmdldE9wdGlvbnM9ZnVuY3Rpb24oYil7cmV0dXJuIGI9YS5leHRlbmQoe30sdGhpcy5nZXREZWZhdWx0cygpLHRoaXMuJGVsZW1lbnQuZGF0YSgpLGIpLGIuZGVsYXkmJlwibnVtYmVyXCI9PXR5cGVvZiBiLmRlbGF5JiYoYi5kZWxheT17c2hvdzpiLmRlbGF5LGhpZGU6Yi5kZWxheX0pLGJ9LGMucHJvdG90eXBlLmdldERlbGVnYXRlT3B0aW9ucz1mdW5jdGlvbigpe3ZhciBiPXt9LGM9dGhpcy5nZXREZWZhdWx0cygpO3JldHVybiB0aGlzLl9vcHRpb25zJiZhLmVhY2godGhpcy5fb3B0aW9ucyxmdW5jdGlvbihhLGQpe2NbYV0hPWQmJihiW2FdPWQpfSksYn0sYy5wcm90b3R5cGUuZW50ZXI9ZnVuY3Rpb24oYil7dmFyIGM9YiBpbnN0YW5jZW9mIHRoaXMuY29uc3RydWN0b3I/YjphKGIuY3VycmVudFRhcmdldCkuZGF0YShcImJzLlwiK3RoaXMudHlwZSk7cmV0dXJuIGN8fChjPW5ldyB0aGlzLmNvbnN0cnVjdG9yKGIuY3VycmVudFRhcmdldCx0aGlzLmdldERlbGVnYXRlT3B0aW9ucygpKSxhKGIuY3VycmVudFRhcmdldCkuZGF0YShcImJzLlwiK3RoaXMudHlwZSxjKSksYiBpbnN0YW5jZW9mIGEuRXZlbnQmJihjLmluU3RhdGVbXCJmb2N1c2luXCI9PWIudHlwZT9cImZvY3VzXCI6XCJob3ZlclwiXT0hMCksYy50aXAoKS5oYXNDbGFzcyhcImluXCIpfHxcImluXCI9PWMuaG92ZXJTdGF0ZT92b2lkKGMuaG92ZXJTdGF0ZT1cImluXCIpOihjbGVhclRpbWVvdXQoYy50aW1lb3V0KSxjLmhvdmVyU3RhdGU9XCJpblwiLGMub3B0aW9ucy5kZWxheSYmYy5vcHRpb25zLmRlbGF5LnNob3c/dm9pZChjLnRpbWVvdXQ9c2V0VGltZW91dChmdW5jdGlvbigpe1wiaW5cIj09Yy5ob3ZlclN0YXRlJiZjLnNob3coKX0sYy5vcHRpb25zLmRlbGF5LnNob3cpKTpjLnNob3coKSl9LGMucHJvdG90eXBlLmlzSW5TdGF0ZVRydWU9ZnVuY3Rpb24oKXtmb3IodmFyIGEgaW4gdGhpcy5pblN0YXRlKWlmKHRoaXMuaW5TdGF0ZVthXSlyZXR1cm4hMDtyZXR1cm4hMX0sYy5wcm90b3R5cGUubGVhdmU9ZnVuY3Rpb24oYil7dmFyIGM9YiBpbnN0YW5jZW9mIHRoaXMuY29uc3RydWN0b3I/YjphKGIuY3VycmVudFRhcmdldCkuZGF0YShcImJzLlwiK3RoaXMudHlwZSk7aWYoY3x8KGM9bmV3IHRoaXMuY29uc3RydWN0b3IoYi5jdXJyZW50VGFyZ2V0LHRoaXMuZ2V0RGVsZWdhdGVPcHRpb25zKCkpLGEoYi5jdXJyZW50VGFyZ2V0KS5kYXRhKFwiYnMuXCIrdGhpcy50eXBlLGMpKSxiIGluc3RhbmNlb2YgYS5FdmVudCYmKGMuaW5TdGF0ZVtcImZvY3Vzb3V0XCI9PWIudHlwZT9cImZvY3VzXCI6XCJob3ZlclwiXT0hMSksIWMuaXNJblN0YXRlVHJ1ZSgpKXJldHVybiBjbGVhclRpbWVvdXQoYy50aW1lb3V0KSxjLmhvdmVyU3RhdGU9XCJvdXRcIixjLm9wdGlvbnMuZGVsYXkmJmMub3B0aW9ucy5kZWxheS5oaWRlP3ZvaWQoYy50aW1lb3V0PXNldFRpbWVvdXQoZnVuY3Rpb24oKXtcIm91dFwiPT1jLmhvdmVyU3RhdGUmJmMuaGlkZSgpfSxjLm9wdGlvbnMuZGVsYXkuaGlkZSkpOmMuaGlkZSgpfSxjLnByb3RvdHlwZS5zaG93PWZ1bmN0aW9uKCl7dmFyIGI9YS5FdmVudChcInNob3cuYnMuXCIrdGhpcy50eXBlKTtpZih0aGlzLmhhc0NvbnRlbnQoKSYmdGhpcy5lbmFibGVkKXt0aGlzLiRlbGVtZW50LnRyaWdnZXIoYik7dmFyIGQ9YS5jb250YWlucyh0aGlzLiRlbGVtZW50WzBdLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LHRoaXMuJGVsZW1lbnRbMF0pO2lmKGIuaXNEZWZhdWx0UHJldmVudGVkKCl8fCFkKXJldHVybjt2YXIgZT10aGlzLGY9dGhpcy50aXAoKSxnPXRoaXMuZ2V0VUlEKHRoaXMudHlwZSk7dGhpcy5zZXRDb250ZW50KCksZi5hdHRyKFwiaWRcIixnKSx0aGlzLiRlbGVtZW50LmF0dHIoXCJhcmlhLWRlc2NyaWJlZGJ5XCIsZyksdGhpcy5vcHRpb25zLmFuaW1hdGlvbiYmZi5hZGRDbGFzcyhcImZhZGVcIik7dmFyIGg9XCJmdW5jdGlvblwiPT10eXBlb2YgdGhpcy5vcHRpb25zLnBsYWNlbWVudD90aGlzLm9wdGlvbnMucGxhY2VtZW50LmNhbGwodGhpcyxmWzBdLHRoaXMuJGVsZW1lbnRbMF0pOnRoaXMub3B0aW9ucy5wbGFjZW1lbnQsaT0vXFxzP2F1dG8/XFxzPy9pLGo9aS50ZXN0KGgpO2omJihoPWgucmVwbGFjZShpLFwiXCIpfHxcInRvcFwiKSxmLmRldGFjaCgpLmNzcyh7dG9wOjAsbGVmdDowLGRpc3BsYXk6XCJibG9ja1wifSkuYWRkQ2xhc3MoaCkuZGF0YShcImJzLlwiK3RoaXMudHlwZSx0aGlzKSx0aGlzLm9wdGlvbnMuY29udGFpbmVyP2YuYXBwZW5kVG8odGhpcy5vcHRpb25zLmNvbnRhaW5lcik6Zi5pbnNlcnRBZnRlcih0aGlzLiRlbGVtZW50KSx0aGlzLiRlbGVtZW50LnRyaWdnZXIoXCJpbnNlcnRlZC5icy5cIit0aGlzLnR5cGUpO3ZhciBrPXRoaXMuZ2V0UG9zaXRpb24oKSxsPWZbMF0ub2Zmc2V0V2lkdGgsbT1mWzBdLm9mZnNldEhlaWdodDtpZihqKXt2YXIgbj1oLG89dGhpcy5nZXRQb3NpdGlvbih0aGlzLiR2aWV3cG9ydCk7aD1cImJvdHRvbVwiPT1oJiZrLmJvdHRvbSttPm8uYm90dG9tP1widG9wXCI6XCJ0b3BcIj09aCYmay50b3AtbTxvLnRvcD9cImJvdHRvbVwiOlwicmlnaHRcIj09aCYmay5yaWdodCtsPm8ud2lkdGg/XCJsZWZ0XCI6XCJsZWZ0XCI9PWgmJmsubGVmdC1sPG8ubGVmdD9cInJpZ2h0XCI6aCxmLnJlbW92ZUNsYXNzKG4pLmFkZENsYXNzKGgpfXZhciBwPXRoaXMuZ2V0Q2FsY3VsYXRlZE9mZnNldChoLGssbCxtKTt0aGlzLmFwcGx5UGxhY2VtZW50KHAsaCk7dmFyIHE9ZnVuY3Rpb24oKXt2YXIgYT1lLmhvdmVyU3RhdGU7ZS4kZWxlbWVudC50cmlnZ2VyKFwic2hvd24uYnMuXCIrZS50eXBlKSxlLmhvdmVyU3RhdGU9bnVsbCxcIm91dFwiPT1hJiZlLmxlYXZlKGUpfTthLnN1cHBvcnQudHJhbnNpdGlvbiYmdGhpcy4kdGlwLmhhc0NsYXNzKFwiZmFkZVwiKT9mLm9uZShcImJzVHJhbnNpdGlvbkVuZFwiLHEpLmVtdWxhdGVUcmFuc2l0aW9uRW5kKGMuVFJBTlNJVElPTl9EVVJBVElPTik6cSgpfX0sYy5wcm90b3R5cGUuYXBwbHlQbGFjZW1lbnQ9ZnVuY3Rpb24oYixjKXt2YXIgZD10aGlzLnRpcCgpLGU9ZFswXS5vZmZzZXRXaWR0aCxmPWRbMF0ub2Zmc2V0SGVpZ2h0LGc9cGFyc2VJbnQoZC5jc3MoXCJtYXJnaW4tdG9wXCIpLDEwKSxoPXBhcnNlSW50KGQuY3NzKFwibWFyZ2luLWxlZnRcIiksMTApO2lzTmFOKGcpJiYoZz0wKSxpc05hTihoKSYmKGg9MCksYi50b3ArPWcsYi5sZWZ0Kz1oLGEub2Zmc2V0LnNldE9mZnNldChkWzBdLGEuZXh0ZW5kKHt1c2luZzpmdW5jdGlvbihhKXtkLmNzcyh7dG9wOk1hdGgucm91bmQoYS50b3ApLGxlZnQ6TWF0aC5yb3VuZChhLmxlZnQpfSl9fSxiKSwwKSxkLmFkZENsYXNzKFwiaW5cIik7dmFyIGk9ZFswXS5vZmZzZXRXaWR0aCxqPWRbMF0ub2Zmc2V0SGVpZ2h0O1widG9wXCI9PWMmJmohPWYmJihiLnRvcD1iLnRvcCtmLWopO3ZhciBrPXRoaXMuZ2V0Vmlld3BvcnRBZGp1c3RlZERlbHRhKGMsYixpLGopO2subGVmdD9iLmxlZnQrPWsubGVmdDpiLnRvcCs9ay50b3A7dmFyIGw9L3RvcHxib3R0b20vLnRlc3QoYyksbT1sPzIqay5sZWZ0LWUraToyKmsudG9wLWYraixuPWw/XCJvZmZzZXRXaWR0aFwiOlwib2Zmc2V0SGVpZ2h0XCI7ZC5vZmZzZXQoYiksdGhpcy5yZXBsYWNlQXJyb3cobSxkWzBdW25dLGwpfSxjLnByb3RvdHlwZS5yZXBsYWNlQXJyb3c9ZnVuY3Rpb24oYSxiLGMpe3RoaXMuYXJyb3coKS5jc3MoYz9cImxlZnRcIjpcInRvcFwiLDUwKigxLWEvYikrXCIlXCIpLmNzcyhjP1widG9wXCI6XCJsZWZ0XCIsXCJcIil9LGMucHJvdG90eXBlLnNldENvbnRlbnQ9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLnRpcCgpLGI9dGhpcy5nZXRUaXRsZSgpO2EuZmluZChcIi50b29sdGlwLWlubmVyXCIpW3RoaXMub3B0aW9ucy5odG1sP1wiaHRtbFwiOlwidGV4dFwiXShiKSxhLnJlbW92ZUNsYXNzKFwiZmFkZSBpbiB0b3AgYm90dG9tIGxlZnQgcmlnaHRcIil9LGMucHJvdG90eXBlLmhpZGU9ZnVuY3Rpb24oYil7ZnVuY3Rpb24gZCgpe1wiaW5cIiE9ZS5ob3ZlclN0YXRlJiZmLmRldGFjaCgpLGUuJGVsZW1lbnQmJmUuJGVsZW1lbnQucmVtb3ZlQXR0cihcImFyaWEtZGVzY3JpYmVkYnlcIikudHJpZ2dlcihcImhpZGRlbi5icy5cIitlLnR5cGUpLGImJmIoKX12YXIgZT10aGlzLGY9YSh0aGlzLiR0aXApLGc9YS5FdmVudChcImhpZGUuYnMuXCIrdGhpcy50eXBlKTtpZih0aGlzLiRlbGVtZW50LnRyaWdnZXIoZyksIWcuaXNEZWZhdWx0UHJldmVudGVkKCkpcmV0dXJuIGYucmVtb3ZlQ2xhc3MoXCJpblwiKSxhLnN1cHBvcnQudHJhbnNpdGlvbiYmZi5oYXNDbGFzcyhcImZhZGVcIik/Zi5vbmUoXCJic1RyYW5zaXRpb25FbmRcIixkKS5lbXVsYXRlVHJhbnNpdGlvbkVuZChjLlRSQU5TSVRJT05fRFVSQVRJT04pOmQoKSx0aGlzLmhvdmVyU3RhdGU9bnVsbCx0aGlzfSxjLnByb3RvdHlwZS5maXhUaXRsZT1mdW5jdGlvbigpe3ZhciBhPXRoaXMuJGVsZW1lbnQ7KGEuYXR0cihcInRpdGxlXCIpfHxcInN0cmluZ1wiIT10eXBlb2YgYS5hdHRyKFwiZGF0YS1vcmlnaW5hbC10aXRsZVwiKSkmJmEuYXR0cihcImRhdGEtb3JpZ2luYWwtdGl0bGVcIixhLmF0dHIoXCJ0aXRsZVwiKXx8XCJcIikuYXR0cihcInRpdGxlXCIsXCJcIil9LGMucHJvdG90eXBlLmhhc0NvbnRlbnQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5nZXRUaXRsZSgpfSxjLnByb3RvdHlwZS5nZXRQb3NpdGlvbj1mdW5jdGlvbihiKXtiPWJ8fHRoaXMuJGVsZW1lbnQ7dmFyIGM9YlswXSxkPVwiQk9EWVwiPT1jLnRhZ05hbWUsZT1jLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO251bGw9PWUud2lkdGgmJihlPWEuZXh0ZW5kKHt9LGUse3dpZHRoOmUucmlnaHQtZS5sZWZ0LGhlaWdodDplLmJvdHRvbS1lLnRvcH0pKTt2YXIgZj13aW5kb3cuU1ZHRWxlbWVudCYmYyBpbnN0YW5jZW9mIHdpbmRvdy5TVkdFbGVtZW50LGc9ZD97dG9wOjAsbGVmdDowfTpmP251bGw6Yi5vZmZzZXQoKSxoPXtzY3JvbGw6ZD9kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wfHxkb2N1bWVudC5ib2R5LnNjcm9sbFRvcDpiLnNjcm9sbFRvcCgpfSxpPWQ/e3dpZHRoOmEod2luZG93KS53aWR0aCgpLGhlaWdodDphKHdpbmRvdykuaGVpZ2h0KCl9Om51bGw7cmV0dXJuIGEuZXh0ZW5kKHt9LGUsaCxpLGcpfSxjLnByb3RvdHlwZS5nZXRDYWxjdWxhdGVkT2Zmc2V0PWZ1bmN0aW9uKGEsYixjLGQpe3JldHVyblwiYm90dG9tXCI9PWE/e3RvcDpiLnRvcCtiLmhlaWdodCxsZWZ0OmIubGVmdCtiLndpZHRoLzItYy8yfTpcInRvcFwiPT1hP3t0b3A6Yi50b3AtZCxsZWZ0OmIubGVmdCtiLndpZHRoLzItYy8yfTpcImxlZnRcIj09YT97dG9wOmIudG9wK2IuaGVpZ2h0LzItZC8yLGxlZnQ6Yi5sZWZ0LWN9Ont0b3A6Yi50b3ArYi5oZWlnaHQvMi1kLzIsbGVmdDpiLmxlZnQrYi53aWR0aH19LGMucHJvdG90eXBlLmdldFZpZXdwb3J0QWRqdXN0ZWREZWx0YT1mdW5jdGlvbihhLGIsYyxkKXt2YXIgZT17dG9wOjAsbGVmdDowfTtpZighdGhpcy4kdmlld3BvcnQpcmV0dXJuIGU7dmFyIGY9dGhpcy5vcHRpb25zLnZpZXdwb3J0JiZ0aGlzLm9wdGlvbnMudmlld3BvcnQucGFkZGluZ3x8MCxnPXRoaXMuZ2V0UG9zaXRpb24odGhpcy4kdmlld3BvcnQpO2lmKC9yaWdodHxsZWZ0Ly50ZXN0KGEpKXt2YXIgaD1iLnRvcC1mLWcuc2Nyb2xsLGk9Yi50b3ArZi1nLnNjcm9sbCtkO2g8Zy50b3A/ZS50b3A9Zy50b3AtaDppPmcudG9wK2cuaGVpZ2h0JiYoZS50b3A9Zy50b3ArZy5oZWlnaHQtaSl9ZWxzZXt2YXIgaj1iLmxlZnQtZixrPWIubGVmdCtmK2M7ajxnLmxlZnQ/ZS5sZWZ0PWcubGVmdC1qOms+Zy5yaWdodCYmKGUubGVmdD1nLmxlZnQrZy53aWR0aC1rKX1yZXR1cm4gZX0sYy5wcm90b3R5cGUuZ2V0VGl0bGU9ZnVuY3Rpb24oKXt2YXIgYSxiPXRoaXMuJGVsZW1lbnQsYz10aGlzLm9wdGlvbnM7cmV0dXJuIGE9Yi5hdHRyKFwiZGF0YS1vcmlnaW5hbC10aXRsZVwiKXx8KFwiZnVuY3Rpb25cIj09dHlwZW9mIGMudGl0bGU/Yy50aXRsZS5jYWxsKGJbMF0pOmMudGl0bGUpfSxjLnByb3RvdHlwZS5nZXRVSUQ9ZnVuY3Rpb24oYSl7ZG8gYSs9fn4oMWU2Kk1hdGgucmFuZG9tKCkpO3doaWxlKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGEpKTtyZXR1cm4gYX0sYy5wcm90b3R5cGUudGlwPWZ1bmN0aW9uKCl7aWYoIXRoaXMuJHRpcCYmKHRoaXMuJHRpcD1hKHRoaXMub3B0aW9ucy50ZW1wbGF0ZSksMSE9dGhpcy4kdGlwLmxlbmd0aCkpdGhyb3cgbmV3IEVycm9yKHRoaXMudHlwZStcIiBgdGVtcGxhdGVgIG9wdGlvbiBtdXN0IGNvbnNpc3Qgb2YgZXhhY3RseSAxIHRvcC1sZXZlbCBlbGVtZW50IVwiKTtyZXR1cm4gdGhpcy4kdGlwfSxjLnByb3RvdHlwZS5hcnJvdz1mdW5jdGlvbigpe3JldHVybiB0aGlzLiRhcnJvdz10aGlzLiRhcnJvd3x8dGhpcy50aXAoKS5maW5kKFwiLnRvb2x0aXAtYXJyb3dcIil9LGMucHJvdG90eXBlLmVuYWJsZT1mdW5jdGlvbigpe3RoaXMuZW5hYmxlZD0hMH0sYy5wcm90b3R5cGUuZGlzYWJsZT1mdW5jdGlvbigpe3RoaXMuZW5hYmxlZD0hMX0sYy5wcm90b3R5cGUudG9nZ2xlRW5hYmxlZD1mdW5jdGlvbigpe3RoaXMuZW5hYmxlZD0hdGhpcy5lbmFibGVkfSxjLnByb3RvdHlwZS50b2dnbGU9ZnVuY3Rpb24oYil7dmFyIGM9dGhpcztiJiYoYz1hKGIuY3VycmVudFRhcmdldCkuZGF0YShcImJzLlwiK3RoaXMudHlwZSksY3x8KGM9bmV3IHRoaXMuY29uc3RydWN0b3IoYi5jdXJyZW50VGFyZ2V0LHRoaXMuZ2V0RGVsZWdhdGVPcHRpb25zKCkpLGEoYi5jdXJyZW50VGFyZ2V0KS5kYXRhKFwiYnMuXCIrdGhpcy50eXBlLGMpKSksYj8oYy5pblN0YXRlLmNsaWNrPSFjLmluU3RhdGUuY2xpY2ssYy5pc0luU3RhdGVUcnVlKCk/Yy5lbnRlcihjKTpjLmxlYXZlKGMpKTpjLnRpcCgpLmhhc0NsYXNzKFwiaW5cIik/Yy5sZWF2ZShjKTpjLmVudGVyKGMpfSxjLnByb3RvdHlwZS5kZXN0cm95PWZ1bmN0aW9uKCl7dmFyIGE9dGhpcztjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0KSx0aGlzLmhpZGUoZnVuY3Rpb24oKXthLiRlbGVtZW50Lm9mZihcIi5cIithLnR5cGUpLnJlbW92ZURhdGEoXCJicy5cIithLnR5cGUpLGEuJHRpcCYmYS4kdGlwLmRldGFjaCgpLGEuJHRpcD1udWxsLGEuJGFycm93PW51bGwsYS4kdmlld3BvcnQ9bnVsbCxhLiRlbGVtZW50PW51bGx9KX07dmFyIGQ9YS5mbi50b29sdGlwO2EuZm4udG9vbHRpcD1iLGEuZm4udG9vbHRpcC5Db25zdHJ1Y3Rvcj1jLGEuZm4udG9vbHRpcC5ub0NvbmZsaWN0PWZ1bmN0aW9uKCl7cmV0dXJuIGEuZm4udG9vbHRpcD1kLHRoaXN9fShqUXVlcnkpLCtmdW5jdGlvbihhKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBiKGIpe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgZD1hKHRoaXMpLGU9ZC5kYXRhKFwiYnMucG9wb3ZlclwiKSxmPVwib2JqZWN0XCI9PXR5cGVvZiBiJiZiOyFlJiYvZGVzdHJveXxoaWRlLy50ZXN0KGIpfHwoZXx8ZC5kYXRhKFwiYnMucG9wb3ZlclwiLGU9bmV3IGModGhpcyxmKSksXCJzdHJpbmdcIj09dHlwZW9mIGImJmVbYl0oKSl9KX12YXIgYz1mdW5jdGlvbihhLGIpe3RoaXMuaW5pdChcInBvcG92ZXJcIixhLGIpfTtpZighYS5mbi50b29sdGlwKXRocm93IG5ldyBFcnJvcihcIlBvcG92ZXIgcmVxdWlyZXMgdG9vbHRpcC5qc1wiKTtjLlZFUlNJT049XCIzLjMuN1wiLGMuREVGQVVMVFM9YS5leHRlbmQoe30sYS5mbi50b29sdGlwLkNvbnN0cnVjdG9yLkRFRkFVTFRTLHtwbGFjZW1lbnQ6XCJyaWdodFwiLHRyaWdnZXI6XCJjbGlja1wiLGNvbnRlbnQ6XCJcIix0ZW1wbGF0ZTonPGRpdiBjbGFzcz1cInBvcG92ZXJcIiByb2xlPVwidG9vbHRpcFwiPjxkaXYgY2xhc3M9XCJhcnJvd1wiPjwvZGl2PjxoMyBjbGFzcz1cInBvcG92ZXItdGl0bGVcIj48L2gzPjxkaXYgY2xhc3M9XCJwb3BvdmVyLWNvbnRlbnRcIj48L2Rpdj48L2Rpdj4nfSksYy5wcm90b3R5cGU9YS5leHRlbmQoe30sYS5mbi50b29sdGlwLkNvbnN0cnVjdG9yLnByb3RvdHlwZSksYy5wcm90b3R5cGUuY29uc3RydWN0b3I9YyxjLnByb3RvdHlwZS5nZXREZWZhdWx0cz1mdW5jdGlvbigpe3JldHVybiBjLkRFRkFVTFRTfSxjLnByb3RvdHlwZS5zZXRDb250ZW50PWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy50aXAoKSxiPXRoaXMuZ2V0VGl0bGUoKSxjPXRoaXMuZ2V0Q29udGVudCgpO2EuZmluZChcIi5wb3BvdmVyLXRpdGxlXCIpW3RoaXMub3B0aW9ucy5odG1sP1wiaHRtbFwiOlwidGV4dFwiXShiKSxhLmZpbmQoXCIucG9wb3Zlci1jb250ZW50XCIpLmNoaWxkcmVuKCkuZGV0YWNoKCkuZW5kKClbdGhpcy5vcHRpb25zLmh0bWw/XCJzdHJpbmdcIj09dHlwZW9mIGM/XCJodG1sXCI6XCJhcHBlbmRcIjpcInRleHRcIl0oYyksYS5yZW1vdmVDbGFzcyhcImZhZGUgdG9wIGJvdHRvbSBsZWZ0IHJpZ2h0IGluXCIpLGEuZmluZChcIi5wb3BvdmVyLXRpdGxlXCIpLmh0bWwoKXx8YS5maW5kKFwiLnBvcG92ZXItdGl0bGVcIikuaGlkZSgpfSxjLnByb3RvdHlwZS5oYXNDb250ZW50PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZ2V0VGl0bGUoKXx8dGhpcy5nZXRDb250ZW50KCl9LGMucHJvdG90eXBlLmdldENvbnRlbnQ9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLiRlbGVtZW50LGI9dGhpcy5vcHRpb25zO3JldHVybiBhLmF0dHIoXCJkYXRhLWNvbnRlbnRcIil8fChcImZ1bmN0aW9uXCI9PXR5cGVvZiBiLmNvbnRlbnQ/Yi5jb250ZW50LmNhbGwoYVswXSk6Yi5jb250ZW50KX0sYy5wcm90b3R5cGUuYXJyb3c9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy4kYXJyb3c9dGhpcy4kYXJyb3d8fHRoaXMudGlwKCkuZmluZChcIi5hcnJvd1wiKX07dmFyIGQ9YS5mbi5wb3BvdmVyO2EuZm4ucG9wb3Zlcj1iLGEuZm4ucG9wb3Zlci5Db25zdHJ1Y3Rvcj1jLGEuZm4ucG9wb3Zlci5ub0NvbmZsaWN0PWZ1bmN0aW9uKCl7cmV0dXJuIGEuZm4ucG9wb3Zlcj1kLHRoaXN9fShqUXVlcnkpLCtmdW5jdGlvbihhKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBiKGMsZCl7dGhpcy4kYm9keT1hKGRvY3VtZW50LmJvZHkpLHRoaXMuJHNjcm9sbEVsZW1lbnQ9YShhKGMpLmlzKGRvY3VtZW50LmJvZHkpP3dpbmRvdzpjKSx0aGlzLm9wdGlvbnM9YS5leHRlbmQoe30sYi5ERUZBVUxUUyxkKSx0aGlzLnNlbGVjdG9yPSh0aGlzLm9wdGlvbnMudGFyZ2V0fHxcIlwiKStcIiAubmF2IGxpID4gYVwiLHRoaXMub2Zmc2V0cz1bXSx0aGlzLnRhcmdldHM9W10sdGhpcy5hY3RpdmVUYXJnZXQ9bnVsbCx0aGlzLnNjcm9sbEhlaWdodD0wLHRoaXMuJHNjcm9sbEVsZW1lbnQub24oXCJzY3JvbGwuYnMuc2Nyb2xsc3B5XCIsYS5wcm94eSh0aGlzLnByb2Nlc3MsdGhpcykpLHRoaXMucmVmcmVzaCgpLHRoaXMucHJvY2VzcygpfWZ1bmN0aW9uIGMoYyl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciBkPWEodGhpcyksZT1kLmRhdGEoXCJicy5zY3JvbGxzcHlcIiksZj1cIm9iamVjdFwiPT10eXBlb2YgYyYmYztlfHxkLmRhdGEoXCJicy5zY3JvbGxzcHlcIixlPW5ldyBiKHRoaXMsZikpLFwic3RyaW5nXCI9PXR5cGVvZiBjJiZlW2NdKCl9KX1iLlZFUlNJT049XCIzLjMuN1wiLGIuREVGQVVMVFM9e29mZnNldDoxMH0sYi5wcm90b3R5cGUuZ2V0U2Nyb2xsSGVpZ2h0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuJHNjcm9sbEVsZW1lbnRbMF0uc2Nyb2xsSGVpZ2h0fHxNYXRoLm1heCh0aGlzLiRib2R5WzBdLnNjcm9sbEhlaWdodCxkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsSGVpZ2h0KX0sYi5wcm90b3R5cGUucmVmcmVzaD1mdW5jdGlvbigpe3ZhciBiPXRoaXMsYz1cIm9mZnNldFwiLGQ9MDt0aGlzLm9mZnNldHM9W10sdGhpcy50YXJnZXRzPVtdLHRoaXMuc2Nyb2xsSGVpZ2h0PXRoaXMuZ2V0U2Nyb2xsSGVpZ2h0KCksYS5pc1dpbmRvdyh0aGlzLiRzY3JvbGxFbGVtZW50WzBdKXx8KGM9XCJwb3NpdGlvblwiLGQ9dGhpcy4kc2Nyb2xsRWxlbWVudC5zY3JvbGxUb3AoKSksdGhpcy4kYm9keS5maW5kKHRoaXMuc2VsZWN0b3IpLm1hcChmdW5jdGlvbigpe3ZhciBiPWEodGhpcyksZT1iLmRhdGEoXCJ0YXJnZXRcIil8fGIuYXR0cihcImhyZWZcIiksZj0vXiMuLy50ZXN0KGUpJiZhKGUpO3JldHVybiBmJiZmLmxlbmd0aCYmZi5pcyhcIjp2aXNpYmxlXCIpJiZbW2ZbY10oKS50b3ArZCxlXV18fG51bGx9KS5zb3J0KGZ1bmN0aW9uKGEsYil7cmV0dXJuIGFbMF0tYlswXX0pLmVhY2goZnVuY3Rpb24oKXtiLm9mZnNldHMucHVzaCh0aGlzWzBdKSxiLnRhcmdldHMucHVzaCh0aGlzWzFdKX0pfSxiLnByb3RvdHlwZS5wcm9jZXNzPWZ1bmN0aW9uKCl7dmFyIGEsYj10aGlzLiRzY3JvbGxFbGVtZW50LnNjcm9sbFRvcCgpK3RoaXMub3B0aW9ucy5vZmZzZXQsYz10aGlzLmdldFNjcm9sbEhlaWdodCgpLGQ9dGhpcy5vcHRpb25zLm9mZnNldCtjLXRoaXMuJHNjcm9sbEVsZW1lbnQuaGVpZ2h0KCksZT10aGlzLm9mZnNldHMsZj10aGlzLnRhcmdldHMsZz10aGlzLmFjdGl2ZVRhcmdldDtpZih0aGlzLnNjcm9sbEhlaWdodCE9YyYmdGhpcy5yZWZyZXNoKCksYj49ZClyZXR1cm4gZyE9KGE9ZltmLmxlbmd0aC0xXSkmJnRoaXMuYWN0aXZhdGUoYSk7aWYoZyYmYjxlWzBdKXJldHVybiB0aGlzLmFjdGl2ZVRhcmdldD1udWxsLHRoaXMuY2xlYXIoKTtmb3IoYT1lLmxlbmd0aDthLS07KWchPWZbYV0mJmI+PWVbYV0mJih2b2lkIDA9PT1lW2ErMV18fGI8ZVthKzFdKSYmdGhpcy5hY3RpdmF0ZShmW2FdKX0sYi5wcm90b3R5cGUuYWN0aXZhdGU9ZnVuY3Rpb24oYil7XHJcbnRoaXMuYWN0aXZlVGFyZ2V0PWIsdGhpcy5jbGVhcigpO3ZhciBjPXRoaXMuc2VsZWN0b3IrJ1tkYXRhLXRhcmdldD1cIicrYisnXCJdLCcrdGhpcy5zZWxlY3RvcisnW2hyZWY9XCInK2IrJ1wiXScsZD1hKGMpLnBhcmVudHMoXCJsaVwiKS5hZGRDbGFzcyhcImFjdGl2ZVwiKTtkLnBhcmVudChcIi5kcm9wZG93bi1tZW51XCIpLmxlbmd0aCYmKGQ9ZC5jbG9zZXN0KFwibGkuZHJvcGRvd25cIikuYWRkQ2xhc3MoXCJhY3RpdmVcIikpLGQudHJpZ2dlcihcImFjdGl2YXRlLmJzLnNjcm9sbHNweVwiKX0sYi5wcm90b3R5cGUuY2xlYXI9ZnVuY3Rpb24oKXthKHRoaXMuc2VsZWN0b3IpLnBhcmVudHNVbnRpbCh0aGlzLm9wdGlvbnMudGFyZ2V0LFwiLmFjdGl2ZVwiKS5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKX07dmFyIGQ9YS5mbi5zY3JvbGxzcHk7YS5mbi5zY3JvbGxzcHk9YyxhLmZuLnNjcm9sbHNweS5Db25zdHJ1Y3Rvcj1iLGEuZm4uc2Nyb2xsc3B5Lm5vQ29uZmxpY3Q9ZnVuY3Rpb24oKXtyZXR1cm4gYS5mbi5zY3JvbGxzcHk9ZCx0aGlzfSxhKHdpbmRvdykub24oXCJsb2FkLmJzLnNjcm9sbHNweS5kYXRhLWFwaVwiLGZ1bmN0aW9uKCl7YSgnW2RhdGEtc3B5PVwic2Nyb2xsXCJdJykuZWFjaChmdW5jdGlvbigpe3ZhciBiPWEodGhpcyk7Yy5jYWxsKGIsYi5kYXRhKCkpfSl9KX0oalF1ZXJ5KSwrZnVuY3Rpb24oYSl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gYihiKXtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIGQ9YSh0aGlzKSxlPWQuZGF0YShcImJzLnRhYlwiKTtlfHxkLmRhdGEoXCJicy50YWJcIixlPW5ldyBjKHRoaXMpKSxcInN0cmluZ1wiPT10eXBlb2YgYiYmZVtiXSgpfSl9dmFyIGM9ZnVuY3Rpb24oYil7dGhpcy5lbGVtZW50PWEoYil9O2MuVkVSU0lPTj1cIjMuMy43XCIsYy5UUkFOU0lUSU9OX0RVUkFUSU9OPTE1MCxjLnByb3RvdHlwZS5zaG93PWZ1bmN0aW9uKCl7dmFyIGI9dGhpcy5lbGVtZW50LGM9Yi5jbG9zZXN0KFwidWw6bm90KC5kcm9wZG93bi1tZW51KVwiKSxkPWIuZGF0YShcInRhcmdldFwiKTtpZihkfHwoZD1iLmF0dHIoXCJocmVmXCIpLGQ9ZCYmZC5yZXBsYWNlKC8uKig/PSNbXlxcc10qJCkvLFwiXCIpKSwhYi5wYXJlbnQoXCJsaVwiKS5oYXNDbGFzcyhcImFjdGl2ZVwiKSl7dmFyIGU9Yy5maW5kKFwiLmFjdGl2ZTpsYXN0IGFcIiksZj1hLkV2ZW50KFwiaGlkZS5icy50YWJcIix7cmVsYXRlZFRhcmdldDpiWzBdfSksZz1hLkV2ZW50KFwic2hvdy5icy50YWJcIix7cmVsYXRlZFRhcmdldDplWzBdfSk7aWYoZS50cmlnZ2VyKGYpLGIudHJpZ2dlcihnKSwhZy5pc0RlZmF1bHRQcmV2ZW50ZWQoKSYmIWYuaXNEZWZhdWx0UHJldmVudGVkKCkpe3ZhciBoPWEoZCk7dGhpcy5hY3RpdmF0ZShiLmNsb3Nlc3QoXCJsaVwiKSxjKSx0aGlzLmFjdGl2YXRlKGgsaC5wYXJlbnQoKSxmdW5jdGlvbigpe2UudHJpZ2dlcih7dHlwZTpcImhpZGRlbi5icy50YWJcIixyZWxhdGVkVGFyZ2V0OmJbMF19KSxiLnRyaWdnZXIoe3R5cGU6XCJzaG93bi5icy50YWJcIixyZWxhdGVkVGFyZ2V0OmVbMF19KX0pfX19LGMucHJvdG90eXBlLmFjdGl2YXRlPWZ1bmN0aW9uKGIsZCxlKXtmdW5jdGlvbiBmKCl7Zy5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKS5maW5kKFwiPiAuZHJvcGRvd24tbWVudSA+IC5hY3RpdmVcIikucmVtb3ZlQ2xhc3MoXCJhY3RpdmVcIikuZW5kKCkuZmluZCgnW2RhdGEtdG9nZ2xlPVwidGFiXCJdJykuYXR0cihcImFyaWEtZXhwYW5kZWRcIiwhMSksYi5hZGRDbGFzcyhcImFjdGl2ZVwiKS5maW5kKCdbZGF0YS10b2dnbGU9XCJ0YWJcIl0nKS5hdHRyKFwiYXJpYS1leHBhbmRlZFwiLCEwKSxoPyhiWzBdLm9mZnNldFdpZHRoLGIuYWRkQ2xhc3MoXCJpblwiKSk6Yi5yZW1vdmVDbGFzcyhcImZhZGVcIiksYi5wYXJlbnQoXCIuZHJvcGRvd24tbWVudVwiKS5sZW5ndGgmJmIuY2xvc2VzdChcImxpLmRyb3Bkb3duXCIpLmFkZENsYXNzKFwiYWN0aXZlXCIpLmVuZCgpLmZpbmQoJ1tkYXRhLXRvZ2dsZT1cInRhYlwiXScpLmF0dHIoXCJhcmlhLWV4cGFuZGVkXCIsITApLGUmJmUoKX12YXIgZz1kLmZpbmQoXCI+IC5hY3RpdmVcIiksaD1lJiZhLnN1cHBvcnQudHJhbnNpdGlvbiYmKGcubGVuZ3RoJiZnLmhhc0NsYXNzKFwiZmFkZVwiKXx8ISFkLmZpbmQoXCI+IC5mYWRlXCIpLmxlbmd0aCk7Zy5sZW5ndGgmJmg/Zy5vbmUoXCJic1RyYW5zaXRpb25FbmRcIixmKS5lbXVsYXRlVHJhbnNpdGlvbkVuZChjLlRSQU5TSVRJT05fRFVSQVRJT04pOmYoKSxnLnJlbW92ZUNsYXNzKFwiaW5cIil9O3ZhciBkPWEuZm4udGFiO2EuZm4udGFiPWIsYS5mbi50YWIuQ29uc3RydWN0b3I9YyxhLmZuLnRhYi5ub0NvbmZsaWN0PWZ1bmN0aW9uKCl7cmV0dXJuIGEuZm4udGFiPWQsdGhpc307dmFyIGU9ZnVuY3Rpb24oYyl7Yy5wcmV2ZW50RGVmYXVsdCgpLGIuY2FsbChhKHRoaXMpLFwic2hvd1wiKX07YShkb2N1bWVudCkub24oXCJjbGljay5icy50YWIuZGF0YS1hcGlcIiwnW2RhdGEtdG9nZ2xlPVwidGFiXCJdJyxlKS5vbihcImNsaWNrLmJzLnRhYi5kYXRhLWFwaVwiLCdbZGF0YS10b2dnbGU9XCJwaWxsXCJdJyxlKX0oalF1ZXJ5KSwrZnVuY3Rpb24oYSl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gYihiKXtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIGQ9YSh0aGlzKSxlPWQuZGF0YShcImJzLmFmZml4XCIpLGY9XCJvYmplY3RcIj09dHlwZW9mIGImJmI7ZXx8ZC5kYXRhKFwiYnMuYWZmaXhcIixlPW5ldyBjKHRoaXMsZikpLFwic3RyaW5nXCI9PXR5cGVvZiBiJiZlW2JdKCl9KX12YXIgYz1mdW5jdGlvbihiLGQpe3RoaXMub3B0aW9ucz1hLmV4dGVuZCh7fSxjLkRFRkFVTFRTLGQpLHRoaXMuJHRhcmdldD1hKHRoaXMub3B0aW9ucy50YXJnZXQpLm9uKFwic2Nyb2xsLmJzLmFmZml4LmRhdGEtYXBpXCIsYS5wcm94eSh0aGlzLmNoZWNrUG9zaXRpb24sdGhpcykpLm9uKFwiY2xpY2suYnMuYWZmaXguZGF0YS1hcGlcIixhLnByb3h5KHRoaXMuY2hlY2tQb3NpdGlvbldpdGhFdmVudExvb3AsdGhpcykpLHRoaXMuJGVsZW1lbnQ9YShiKSx0aGlzLmFmZml4ZWQ9bnVsbCx0aGlzLnVucGluPW51bGwsdGhpcy5waW5uZWRPZmZzZXQ9bnVsbCx0aGlzLmNoZWNrUG9zaXRpb24oKX07Yy5WRVJTSU9OPVwiMy4zLjdcIixjLlJFU0VUPVwiYWZmaXggYWZmaXgtdG9wIGFmZml4LWJvdHRvbVwiLGMuREVGQVVMVFM9e29mZnNldDowLHRhcmdldDp3aW5kb3d9LGMucHJvdG90eXBlLmdldFN0YXRlPWZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPXRoaXMuJHRhcmdldC5zY3JvbGxUb3AoKSxmPXRoaXMuJGVsZW1lbnQub2Zmc2V0KCksZz10aGlzLiR0YXJnZXQuaGVpZ2h0KCk7aWYobnVsbCE9YyYmXCJ0b3BcIj09dGhpcy5hZmZpeGVkKXJldHVybiBlPGMmJlwidG9wXCI7aWYoXCJib3R0b21cIj09dGhpcy5hZmZpeGVkKXJldHVybiBudWxsIT1jPyEoZSt0aGlzLnVucGluPD1mLnRvcCkmJlwiYm90dG9tXCI6IShlK2c8PWEtZCkmJlwiYm90dG9tXCI7dmFyIGg9bnVsbD09dGhpcy5hZmZpeGVkLGk9aD9lOmYudG9wLGo9aD9nOmI7cmV0dXJuIG51bGwhPWMmJmU8PWM/XCJ0b3BcIjpudWxsIT1kJiZpK2o+PWEtZCYmXCJib3R0b21cIn0sYy5wcm90b3R5cGUuZ2V0UGlubmVkT2Zmc2V0PWZ1bmN0aW9uKCl7aWYodGhpcy5waW5uZWRPZmZzZXQpcmV0dXJuIHRoaXMucGlubmVkT2Zmc2V0O3RoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3MoYy5SRVNFVCkuYWRkQ2xhc3MoXCJhZmZpeFwiKTt2YXIgYT10aGlzLiR0YXJnZXQuc2Nyb2xsVG9wKCksYj10aGlzLiRlbGVtZW50Lm9mZnNldCgpO3JldHVybiB0aGlzLnBpbm5lZE9mZnNldD1iLnRvcC1hfSxjLnByb3RvdHlwZS5jaGVja1Bvc2l0aW9uV2l0aEV2ZW50TG9vcD1mdW5jdGlvbigpe3NldFRpbWVvdXQoYS5wcm94eSh0aGlzLmNoZWNrUG9zaXRpb24sdGhpcyksMSl9LGMucHJvdG90eXBlLmNoZWNrUG9zaXRpb249ZnVuY3Rpb24oKXtpZih0aGlzLiRlbGVtZW50LmlzKFwiOnZpc2libGVcIikpe3ZhciBiPXRoaXMuJGVsZW1lbnQuaGVpZ2h0KCksZD10aGlzLm9wdGlvbnMub2Zmc2V0LGU9ZC50b3AsZj1kLmJvdHRvbSxnPU1hdGgubWF4KGEoZG9jdW1lbnQpLmhlaWdodCgpLGEoZG9jdW1lbnQuYm9keSkuaGVpZ2h0KCkpO1wib2JqZWN0XCIhPXR5cGVvZiBkJiYoZj1lPWQpLFwiZnVuY3Rpb25cIj09dHlwZW9mIGUmJihlPWQudG9wKHRoaXMuJGVsZW1lbnQpKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBmJiYoZj1kLmJvdHRvbSh0aGlzLiRlbGVtZW50KSk7dmFyIGg9dGhpcy5nZXRTdGF0ZShnLGIsZSxmKTtpZih0aGlzLmFmZml4ZWQhPWgpe251bGwhPXRoaXMudW5waW4mJnRoaXMuJGVsZW1lbnQuY3NzKFwidG9wXCIsXCJcIik7dmFyIGk9XCJhZmZpeFwiKyhoP1wiLVwiK2g6XCJcIiksaj1hLkV2ZW50KGkrXCIuYnMuYWZmaXhcIik7aWYodGhpcy4kZWxlbWVudC50cmlnZ2VyKGopLGouaXNEZWZhdWx0UHJldmVudGVkKCkpcmV0dXJuO3RoaXMuYWZmaXhlZD1oLHRoaXMudW5waW49XCJib3R0b21cIj09aD90aGlzLmdldFBpbm5lZE9mZnNldCgpOm51bGwsdGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcyhjLlJFU0VUKS5hZGRDbGFzcyhpKS50cmlnZ2VyKGkucmVwbGFjZShcImFmZml4XCIsXCJhZmZpeGVkXCIpK1wiLmJzLmFmZml4XCIpfVwiYm90dG9tXCI9PWgmJnRoaXMuJGVsZW1lbnQub2Zmc2V0KHt0b3A6Zy1iLWZ9KX19O3ZhciBkPWEuZm4uYWZmaXg7YS5mbi5hZmZpeD1iLGEuZm4uYWZmaXguQ29uc3RydWN0b3I9YyxhLmZuLmFmZml4Lm5vQ29uZmxpY3Q9ZnVuY3Rpb24oKXtyZXR1cm4gYS5mbi5hZmZpeD1kLHRoaXN9LGEod2luZG93KS5vbihcImxvYWRcIixmdW5jdGlvbigpe2EoJ1tkYXRhLXNweT1cImFmZml4XCJdJykuZWFjaChmdW5jdGlvbigpe3ZhciBjPWEodGhpcyksZD1jLmRhdGEoKTtkLm9mZnNldD1kLm9mZnNldHx8e30sbnVsbCE9ZC5vZmZzZXRCb3R0b20mJihkLm9mZnNldC5ib3R0b209ZC5vZmZzZXRCb3R0b20pLG51bGwhPWQub2Zmc2V0VG9wJiYoZC5vZmZzZXQudG9wPWQub2Zmc2V0VG9wKSxiLmNhbGwoYyxkKX0pfSl9KGpRdWVyeSk7IiwiXHJcbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbnJlQ0FQVENIQVxyXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xyXG4vL3dpbmRvdy5vbmxvYWQgPSByZUNBUFRDSEFMb2FkO1xyXG5cclxuQ2FwdGNoYSA9IHtcclxuXHJcblx0a2V5IDogXCI2TGRtYTZ3VUFBQUFBR2ZSOHdXVzBBel9wMjh2cTMxR3hlZUNKczFTXCIsXHJcblx0Y2FwdGNoYUVsZW1lbnQgOiBcIiNjYXB0Y2hhX3Rva2VuX3NyY1wiLFxyXG5cclxuXHRsb2FkIDogZnVuY3Rpb24gKCkge1xyXG5cdFx0aWYgKCQoXCIjY29udGFjdC1mb3JtXCIpLmxlbmd0aCkge1xyXG5cdFx0XHRsZXQgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XHJcblx0XHRcdHNjcmlwdC50eXBlID0gJ3RleHQvamF2YXNjcmlwdCc7XHJcblx0XHRcdHNjcmlwdC5zcmMgPSAnaHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9yZWNhcHRjaGEvYXBpLmpzP3JlbmRlcj0nK0NhcHRjaGEua2V5O1xyXG5cdFx0XHRpZiAoJChDYXB0Y2hhLmNhcHRjaGFFbGVtZW50KS5sZW5ndGgpIHtcclxuXHRcdFx0XHRzY3JpcHQub25sb2FkID0gZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRcdFx0Z3JlY2FwdGNoYS5yZWFkeShmdW5jdGlvbiAoKSB7XHJcblx0XHRcdFx0XHRcdGdyZWNhcHRjaGEuZXhlY3V0ZSgnNkxkbWE2d1VBQUFBQUdmUjh3V1cwQXpfcDI4dnEzMUd4ZWVDSnMxUycsIHthY3Rpb246ICdob21lcGFnZSd9KS50aGVuKGZ1bmN0aW9uICh0b2tlbikge1xyXG5cdFx0XHRcdFx0XHRcdCQoQ2FwdGNoYS5jYXB0Y2hhRWxlbWVudCkuYXR0cigndmFsdWUnLCB0b2tlbik7XHJcblx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0fTtcclxuXHRcdFx0fVxyXG5cdFx0XHRkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxufTtcclxuXHJcblxyXG4iLCIvKiFcclxuICogSXNvdG9wZSBQQUNLQUdFRCB2Mi4xLjFcclxuICogRmlsdGVyICYgc29ydCBtYWdpY2FsIGxheW91dHNcclxuICogaHR0cDovL2lzb3RvcGUubWV0YWZpenp5LmNvXHJcbiAqL1xyXG5cclxuKGZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUoKXt9ZnVuY3Rpb24gaSh0KXtmdW5jdGlvbiBpKGUpe2UucHJvdG90eXBlLm9wdGlvbnx8KGUucHJvdG90eXBlLm9wdGlvbj1mdW5jdGlvbihlKXt0LmlzUGxhaW5PYmplY3QoZSkmJih0aGlzLm9wdGlvbnM9dC5leHRlbmQoITAsdGhpcy5vcHRpb25zLGUpKX0pfWZ1bmN0aW9uIG4oZSxpKXt0LmZuW2VdPWZ1bmN0aW9uKG4pe2lmKFwic3RyaW5nXCI9PXR5cGVvZiBuKXtmb3IodmFyIHM9by5jYWxsKGFyZ3VtZW50cywxKSxhPTAsdT10aGlzLmxlbmd0aDt1PmE7YSsrKXt2YXIgcD10aGlzW2FdLGg9dC5kYXRhKHAsZSk7aWYoaClpZih0LmlzRnVuY3Rpb24oaFtuXSkmJlwiX1wiIT09bi5jaGFyQXQoMCkpe3ZhciBmPWhbbl0uYXBwbHkoaCxzKTtpZih2b2lkIDAhPT1mKXJldHVybiBmfWVsc2UgcihcIm5vIHN1Y2ggbWV0aG9kICdcIituK1wiJyBmb3IgXCIrZStcIiBpbnN0YW5jZVwiKTtlbHNlIHIoXCJjYW5ub3QgY2FsbCBtZXRob2RzIG9uIFwiK2UrXCIgcHJpb3IgdG8gaW5pdGlhbGl6YXRpb247IFwiK1wiYXR0ZW1wdGVkIHRvIGNhbGwgJ1wiK24rXCInXCIpfXJldHVybiB0aGlzfXJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgbz10LmRhdGEodGhpcyxlKTtvPyhvLm9wdGlvbihuKSxvLl9pbml0KCkpOihvPW5ldyBpKHRoaXMsbiksdC5kYXRhKHRoaXMsZSxvKSl9KX19aWYodCl7dmFyIHI9XCJ1bmRlZmluZWRcIj09dHlwZW9mIGNvbnNvbGU/ZTpmdW5jdGlvbih0KXtjb25zb2xlLmVycm9yKHQpfTtyZXR1cm4gdC5icmlkZ2V0PWZ1bmN0aW9uKHQsZSl7aShlKSxuKHQsZSl9LHQuYnJpZGdldH19dmFyIG89QXJyYXkucHJvdG90eXBlLnNsaWNlO1wiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoXCJqcXVlcnktYnJpZGdldC9qcXVlcnkuYnJpZGdldFwiLFtcImpxdWVyeVwiXSxpKTpcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cz9pKHJlcXVpcmUoXCJqcXVlcnlcIikpOmkodC5qUXVlcnkpfSkod2luZG93KSxmdW5jdGlvbih0KXtmdW5jdGlvbiBlKGUpe3ZhciBpPXQuZXZlbnQ7cmV0dXJuIGkudGFyZ2V0PWkudGFyZ2V0fHxpLnNyY0VsZW1lbnR8fGUsaX12YXIgaT1kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsbz1mdW5jdGlvbigpe307aS5hZGRFdmVudExpc3RlbmVyP289ZnVuY3Rpb24odCxlLGkpe3QuYWRkRXZlbnRMaXN0ZW5lcihlLGksITEpfTppLmF0dGFjaEV2ZW50JiYobz1mdW5jdGlvbih0LGksbyl7dFtpK29dPW8uaGFuZGxlRXZlbnQ/ZnVuY3Rpb24oKXt2YXIgaT1lKHQpO28uaGFuZGxlRXZlbnQuY2FsbChvLGkpfTpmdW5jdGlvbigpe3ZhciBpPWUodCk7by5jYWxsKHQsaSl9LHQuYXR0YWNoRXZlbnQoXCJvblwiK2ksdFtpK29dKX0pO3ZhciBuPWZ1bmN0aW9uKCl7fTtpLnJlbW92ZUV2ZW50TGlzdGVuZXI/bj1mdW5jdGlvbih0LGUsaSl7dC5yZW1vdmVFdmVudExpc3RlbmVyKGUsaSwhMSl9OmkuZGV0YWNoRXZlbnQmJihuPWZ1bmN0aW9uKHQsZSxpKXt0LmRldGFjaEV2ZW50KFwib25cIitlLHRbZStpXSk7dHJ5e2RlbGV0ZSB0W2UraV19Y2F0Y2gobyl7dFtlK2ldPXZvaWQgMH19KTt2YXIgcj17YmluZDpvLHVuYmluZDpufTtcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFwiZXZlbnRpZS9ldmVudGllXCIscik6XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHM/bW9kdWxlLmV4cG9ydHM9cjp0LmV2ZW50aWU9cn0odGhpcyksZnVuY3Rpb24odCl7ZnVuY3Rpb24gZSh0KXtcImZ1bmN0aW9uXCI9PXR5cGVvZiB0JiYoZS5pc1JlYWR5P3QoKTpzLnB1c2godCkpfWZ1bmN0aW9uIGkodCl7dmFyIGk9XCJyZWFkeXN0YXRlY2hhbmdlXCI9PT10LnR5cGUmJlwiY29tcGxldGVcIiE9PXIucmVhZHlTdGF0ZTtlLmlzUmVhZHl8fGl8fG8oKX1mdW5jdGlvbiBvKCl7ZS5pc1JlYWR5PSEwO2Zvcih2YXIgdD0wLGk9cy5sZW5ndGg7aT50O3QrKyl7dmFyIG89c1t0XTtvKCl9fWZ1bmN0aW9uIG4obil7cmV0dXJuXCJjb21wbGV0ZVwiPT09ci5yZWFkeVN0YXRlP28oKToobi5iaW5kKHIsXCJET01Db250ZW50TG9hZGVkXCIsaSksbi5iaW5kKHIsXCJyZWFkeXN0YXRlY2hhbmdlXCIsaSksbi5iaW5kKHQsXCJsb2FkXCIsaSkpLGV9dmFyIHI9dC5kb2N1bWVudCxzPVtdO2UuaXNSZWFkeT0hMSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFwiZG9jLXJlYWR5L2RvYy1yZWFkeVwiLFtcImV2ZW50aWUvZXZlbnRpZVwiXSxuKTpcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cz9tb2R1bGUuZXhwb3J0cz1uKHJlcXVpcmUoXCJldmVudGllXCIpKTp0LmRvY1JlYWR5PW4odC5ldmVudGllKX0od2luZG93KSxmdW5jdGlvbigpe2Z1bmN0aW9uIHQoKXt9ZnVuY3Rpb24gZSh0LGUpe2Zvcih2YXIgaT10Lmxlbmd0aDtpLS07KWlmKHRbaV0ubGlzdGVuZXI9PT1lKXJldHVybiBpO3JldHVybi0xfWZ1bmN0aW9uIGkodCl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXNbdF0uYXBwbHkodGhpcyxhcmd1bWVudHMpfX12YXIgbz10LnByb3RvdHlwZSxuPXRoaXMscj1uLkV2ZW50RW1pdHRlcjtvLmdldExpc3RlbmVycz1mdW5jdGlvbih0KXt2YXIgZSxpLG89dGhpcy5fZ2V0RXZlbnRzKCk7aWYodCBpbnN0YW5jZW9mIFJlZ0V4cCl7ZT17fTtmb3IoaSBpbiBvKW8uaGFzT3duUHJvcGVydHkoaSkmJnQudGVzdChpKSYmKGVbaV09b1tpXSl9ZWxzZSBlPW9bdF18fChvW3RdPVtdKTtyZXR1cm4gZX0sby5mbGF0dGVuTGlzdGVuZXJzPWZ1bmN0aW9uKHQpe3ZhciBlLGk9W107Zm9yKGU9MDt0Lmxlbmd0aD5lO2UrPTEpaS5wdXNoKHRbZV0ubGlzdGVuZXIpO3JldHVybiBpfSxvLmdldExpc3RlbmVyc0FzT2JqZWN0PWZ1bmN0aW9uKHQpe3ZhciBlLGk9dGhpcy5nZXRMaXN0ZW5lcnModCk7cmV0dXJuIGkgaW5zdGFuY2VvZiBBcnJheSYmKGU9e30sZVt0XT1pKSxlfHxpfSxvLmFkZExpc3RlbmVyPWZ1bmN0aW9uKHQsaSl7dmFyIG8sbj10aGlzLmdldExpc3RlbmVyc0FzT2JqZWN0KHQpLHI9XCJvYmplY3RcIj09dHlwZW9mIGk7Zm9yKG8gaW4gbiluLmhhc093blByb3BlcnR5KG8pJiYtMT09PWUobltvXSxpKSYmbltvXS5wdXNoKHI/aTp7bGlzdGVuZXI6aSxvbmNlOiExfSk7cmV0dXJuIHRoaXN9LG8ub249aShcImFkZExpc3RlbmVyXCIpLG8uYWRkT25jZUxpc3RlbmVyPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuYWRkTGlzdGVuZXIodCx7bGlzdGVuZXI6ZSxvbmNlOiEwfSl9LG8ub25jZT1pKFwiYWRkT25jZUxpc3RlbmVyXCIpLG8uZGVmaW5lRXZlbnQ9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuZ2V0TGlzdGVuZXJzKHQpLHRoaXN9LG8uZGVmaW5lRXZlbnRzPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT0wO3QubGVuZ3RoPmU7ZSs9MSl0aGlzLmRlZmluZUV2ZW50KHRbZV0pO3JldHVybiB0aGlzfSxvLnJlbW92ZUxpc3RlbmVyPWZ1bmN0aW9uKHQsaSl7dmFyIG8sbixyPXRoaXMuZ2V0TGlzdGVuZXJzQXNPYmplY3QodCk7Zm9yKG4gaW4gcilyLmhhc093blByb3BlcnR5KG4pJiYobz1lKHJbbl0saSksLTEhPT1vJiZyW25dLnNwbGljZShvLDEpKTtyZXR1cm4gdGhpc30sby5vZmY9aShcInJlbW92ZUxpc3RlbmVyXCIpLG8uYWRkTGlzdGVuZXJzPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMubWFuaXB1bGF0ZUxpc3RlbmVycyghMSx0LGUpfSxvLnJlbW92ZUxpc3RlbmVycz1mdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLm1hbmlwdWxhdGVMaXN0ZW5lcnMoITAsdCxlKX0sby5tYW5pcHVsYXRlTGlzdGVuZXJzPWZ1bmN0aW9uKHQsZSxpKXt2YXIgbyxuLHI9dD90aGlzLnJlbW92ZUxpc3RlbmVyOnRoaXMuYWRkTGlzdGVuZXIscz10P3RoaXMucmVtb3ZlTGlzdGVuZXJzOnRoaXMuYWRkTGlzdGVuZXJzO2lmKFwib2JqZWN0XCIhPXR5cGVvZiBlfHxlIGluc3RhbmNlb2YgUmVnRXhwKWZvcihvPWkubGVuZ3RoO28tLTspci5jYWxsKHRoaXMsZSxpW29dKTtlbHNlIGZvcihvIGluIGUpZS5oYXNPd25Qcm9wZXJ0eShvKSYmKG49ZVtvXSkmJihcImZ1bmN0aW9uXCI9PXR5cGVvZiBuP3IuY2FsbCh0aGlzLG8sbik6cy5jYWxsKHRoaXMsbyxuKSk7cmV0dXJuIHRoaXN9LG8ucmVtb3ZlRXZlbnQ9ZnVuY3Rpb24odCl7dmFyIGUsaT10eXBlb2YgdCxvPXRoaXMuX2dldEV2ZW50cygpO2lmKFwic3RyaW5nXCI9PT1pKWRlbGV0ZSBvW3RdO2Vsc2UgaWYodCBpbnN0YW5jZW9mIFJlZ0V4cClmb3IoZSBpbiBvKW8uaGFzT3duUHJvcGVydHkoZSkmJnQudGVzdChlKSYmZGVsZXRlIG9bZV07ZWxzZSBkZWxldGUgdGhpcy5fZXZlbnRzO3JldHVybiB0aGlzfSxvLnJlbW92ZUFsbExpc3RlbmVycz1pKFwicmVtb3ZlRXZlbnRcIiksby5lbWl0RXZlbnQ9ZnVuY3Rpb24odCxlKXt2YXIgaSxvLG4scixzPXRoaXMuZ2V0TGlzdGVuZXJzQXNPYmplY3QodCk7Zm9yKG4gaW4gcylpZihzLmhhc093blByb3BlcnR5KG4pKWZvcihvPXNbbl0ubGVuZ3RoO28tLTspaT1zW25dW29dLGkub25jZT09PSEwJiZ0aGlzLnJlbW92ZUxpc3RlbmVyKHQsaS5saXN0ZW5lcikscj1pLmxpc3RlbmVyLmFwcGx5KHRoaXMsZXx8W10pLHI9PT10aGlzLl9nZXRPbmNlUmV0dXJuVmFsdWUoKSYmdGhpcy5yZW1vdmVMaXN0ZW5lcih0LGkubGlzdGVuZXIpO3JldHVybiB0aGlzfSxvLnRyaWdnZXI9aShcImVtaXRFdmVudFwiKSxvLmVtaXQ9ZnVuY3Rpb24odCl7dmFyIGU9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDEpO3JldHVybiB0aGlzLmVtaXRFdmVudCh0LGUpfSxvLnNldE9uY2VSZXR1cm5WYWx1ZT1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5fb25jZVJldHVyblZhbHVlPXQsdGhpc30sby5fZ2V0T25jZVJldHVyblZhbHVlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaGFzT3duUHJvcGVydHkoXCJfb25jZVJldHVyblZhbHVlXCIpP3RoaXMuX29uY2VSZXR1cm5WYWx1ZTohMH0sby5fZ2V0RXZlbnRzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2V2ZW50c3x8KHRoaXMuX2V2ZW50cz17fSl9LHQubm9Db25mbGljdD1mdW5jdGlvbigpe3JldHVybiBuLkV2ZW50RW1pdHRlcj1yLHR9LFwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoXCJldmVudEVtaXR0ZXIvRXZlbnRFbWl0dGVyXCIsW10sZnVuY3Rpb24oKXtyZXR1cm4gdH0pOlwib2JqZWN0XCI9PXR5cGVvZiBtb2R1bGUmJm1vZHVsZS5leHBvcnRzP21vZHVsZS5leHBvcnRzPXQ6bi5FdmVudEVtaXR0ZXI9dH0uY2FsbCh0aGlzKSxmdW5jdGlvbih0KXtmdW5jdGlvbiBlKHQpe2lmKHQpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiBvW3RdKXJldHVybiB0O3Q9dC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSt0LnNsaWNlKDEpO2Zvcih2YXIgZSxuPTAscj1pLmxlbmd0aDtyPm47bisrKWlmKGU9aVtuXSt0LFwic3RyaW5nXCI9PXR5cGVvZiBvW2VdKXJldHVybiBlfX12YXIgaT1cIldlYmtpdCBNb3ogbXMgTXMgT1wiLnNwbGl0KFwiIFwiKSxvPWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZTtcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFwiZ2V0LXN0eWxlLXByb3BlcnR5L2dldC1zdHlsZS1wcm9wZXJ0eVwiLFtdLGZ1bmN0aW9uKCl7cmV0dXJuIGV9KTpcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cz9tb2R1bGUuZXhwb3J0cz1lOnQuZ2V0U3R5bGVQcm9wZXJ0eT1lfSh3aW5kb3cpLGZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUodCl7dmFyIGU9cGFyc2VGbG9hdCh0KSxpPS0xPT09dC5pbmRleE9mKFwiJVwiKSYmIWlzTmFOKGUpO3JldHVybiBpJiZlfWZ1bmN0aW9uIGkoKXt9ZnVuY3Rpb24gbygpe2Zvcih2YXIgdD17d2lkdGg6MCxoZWlnaHQ6MCxpbm5lcldpZHRoOjAsaW5uZXJIZWlnaHQ6MCxvdXRlcldpZHRoOjAsb3V0ZXJIZWlnaHQ6MH0sZT0wLGk9cy5sZW5ndGg7aT5lO2UrKyl7dmFyIG89c1tlXTt0W29dPTB9cmV0dXJuIHR9ZnVuY3Rpb24gbihpKXtmdW5jdGlvbiBuKCl7aWYoIWQpe2Q9ITA7dmFyIG89dC5nZXRDb21wdXRlZFN0eWxlO2lmKHA9ZnVuY3Rpb24oKXt2YXIgdD1vP2Z1bmN0aW9uKHQpe3JldHVybiBvKHQsbnVsbCl9OmZ1bmN0aW9uKHQpe3JldHVybiB0LmN1cnJlbnRTdHlsZX07cmV0dXJuIGZ1bmN0aW9uKGUpe3ZhciBpPXQoZSk7cmV0dXJuIGl8fHIoXCJTdHlsZSByZXR1cm5lZCBcIitpK1wiLiBBcmUgeW91IHJ1bm5pbmcgdGhpcyBjb2RlIGluIGEgaGlkZGVuIGlmcmFtZSBvbiBGaXJlZm94PyBcIitcIlNlZSBodHRwOi8vYml0Lmx5L2dldHNpemVidWcxXCIpLGl9fSgpLGg9aShcImJveFNpemluZ1wiKSl7dmFyIG49ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtuLnN0eWxlLndpZHRoPVwiMjAwcHhcIixuLnN0eWxlLnBhZGRpbmc9XCIxcHggMnB4IDNweCA0cHhcIixuLnN0eWxlLmJvcmRlclN0eWxlPVwic29saWRcIixuLnN0eWxlLmJvcmRlcldpZHRoPVwiMXB4IDJweCAzcHggNHB4XCIsbi5zdHlsZVtoXT1cImJvcmRlci1ib3hcIjt2YXIgcz1kb2N1bWVudC5ib2R5fHxkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7cy5hcHBlbmRDaGlsZChuKTt2YXIgYT1wKG4pO2Y9MjAwPT09ZShhLndpZHRoKSxzLnJlbW92ZUNoaWxkKG4pfX19ZnVuY3Rpb24gYSh0KXtpZihuKCksXCJzdHJpbmdcIj09dHlwZW9mIHQmJih0PWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodCkpLHQmJlwib2JqZWN0XCI9PXR5cGVvZiB0JiZ0Lm5vZGVUeXBlKXt2YXIgaT1wKHQpO2lmKFwibm9uZVwiPT09aS5kaXNwbGF5KXJldHVybiBvKCk7dmFyIHI9e307ci53aWR0aD10Lm9mZnNldFdpZHRoLHIuaGVpZ2h0PXQub2Zmc2V0SGVpZ2h0O2Zvcih2YXIgYT1yLmlzQm9yZGVyQm94PSEoIWh8fCFpW2hdfHxcImJvcmRlci1ib3hcIiE9PWlbaF0pLGQ9MCxsPXMubGVuZ3RoO2w+ZDtkKyspe3ZhciBjPXNbZF0seT1pW2NdO3k9dSh0LHkpO3ZhciBtPXBhcnNlRmxvYXQoeSk7cltjXT1pc05hTihtKT8wOm19dmFyIGc9ci5wYWRkaW5nTGVmdCtyLnBhZGRpbmdSaWdodCx2PXIucGFkZGluZ1RvcCtyLnBhZGRpbmdCb3R0b20sXz1yLm1hcmdpbkxlZnQrci5tYXJnaW5SaWdodCxJPXIubWFyZ2luVG9wK3IubWFyZ2luQm90dG9tLEw9ci5ib3JkZXJMZWZ0V2lkdGgrci5ib3JkZXJSaWdodFdpZHRoLHo9ci5ib3JkZXJUb3BXaWR0aCtyLmJvcmRlckJvdHRvbVdpZHRoLGI9YSYmZix4PWUoaS53aWR0aCk7eCE9PSExJiYoci53aWR0aD14KyhiPzA6ZytMKSk7dmFyIFM9ZShpLmhlaWdodCk7cmV0dXJuIFMhPT0hMSYmKHIuaGVpZ2h0PVMrKGI/MDp2K3opKSxyLmlubmVyV2lkdGg9ci53aWR0aC0oZytMKSxyLmlubmVySGVpZ2h0PXIuaGVpZ2h0LSh2K3opLHIub3V0ZXJXaWR0aD1yLndpZHRoK18sci5vdXRlckhlaWdodD1yLmhlaWdodCtJLHJ9fWZ1bmN0aW9uIHUoZSxpKXtpZih0LmdldENvbXB1dGVkU3R5bGV8fC0xPT09aS5pbmRleE9mKFwiJVwiKSlyZXR1cm4gaTt2YXIgbz1lLnN0eWxlLG49by5sZWZ0LHI9ZS5ydW50aW1lU3R5bGUscz1yJiZyLmxlZnQ7cmV0dXJuIHMmJihyLmxlZnQ9ZS5jdXJyZW50U3R5bGUubGVmdCksby5sZWZ0PWksaT1vLnBpeGVsTGVmdCxvLmxlZnQ9bixzJiYoci5sZWZ0PXMpLGl9dmFyIHAsaCxmLGQ9ITE7cmV0dXJuIGF9dmFyIHI9XCJ1bmRlZmluZWRcIj09dHlwZW9mIGNvbnNvbGU/aTpmdW5jdGlvbih0KXtjb25zb2xlLmVycm9yKHQpfSxzPVtcInBhZGRpbmdMZWZ0XCIsXCJwYWRkaW5nUmlnaHRcIixcInBhZGRpbmdUb3BcIixcInBhZGRpbmdCb3R0b21cIixcIm1hcmdpbkxlZnRcIixcIm1hcmdpblJpZ2h0XCIsXCJtYXJnaW5Ub3BcIixcIm1hcmdpbkJvdHRvbVwiLFwiYm9yZGVyTGVmdFdpZHRoXCIsXCJib3JkZXJSaWdodFdpZHRoXCIsXCJib3JkZXJUb3BXaWR0aFwiLFwiYm9yZGVyQm90dG9tV2lkdGhcIl07XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShcImdldC1zaXplL2dldC1zaXplXCIsW1wiZ2V0LXN0eWxlLXByb3BlcnR5L2dldC1zdHlsZS1wcm9wZXJ0eVwiXSxuKTpcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cz9tb2R1bGUuZXhwb3J0cz1uKHJlcXVpcmUoXCJkZXNhbmRyby1nZXQtc3R5bGUtcHJvcGVydHlcIikpOnQuZ2V0U2l6ZT1uKHQuZ2V0U3R5bGVQcm9wZXJ0eSl9KHdpbmRvdyksZnVuY3Rpb24odCl7ZnVuY3Rpb24gZSh0LGUpe3JldHVybiB0W3NdKGUpfWZ1bmN0aW9uIGkodCl7aWYoIXQucGFyZW50Tm9kZSl7dmFyIGU9ZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO2UuYXBwZW5kQ2hpbGQodCl9fWZ1bmN0aW9uIG8odCxlKXtpKHQpO2Zvcih2YXIgbz10LnBhcmVudE5vZGUucXVlcnlTZWxlY3RvckFsbChlKSxuPTAscj1vLmxlbmd0aDtyPm47bisrKWlmKG9bbl09PT10KXJldHVybiEwO3JldHVybiExfWZ1bmN0aW9uIG4odCxvKXtyZXR1cm4gaSh0KSxlKHQsbyl9dmFyIHIscz1mdW5jdGlvbigpe2lmKHQubWF0Y2hlc1NlbGVjdG9yKXJldHVyblwibWF0Y2hlc1NlbGVjdG9yXCI7Zm9yKHZhciBlPVtcIndlYmtpdFwiLFwibW96XCIsXCJtc1wiLFwib1wiXSxpPTAsbz1lLmxlbmd0aDtvPmk7aSsrKXt2YXIgbj1lW2ldLHI9bitcIk1hdGNoZXNTZWxlY3RvclwiO2lmKHRbcl0pcmV0dXJuIHJ9fSgpO2lmKHMpe3ZhciBhPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksdT1lKGEsXCJkaXZcIik7cj11P2U6bn1lbHNlIHI9bztcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFwibWF0Y2hlcy1zZWxlY3Rvci9tYXRjaGVzLXNlbGVjdG9yXCIsW10sZnVuY3Rpb24oKXtyZXR1cm4gcn0pOlwib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzP21vZHVsZS5leHBvcnRzPXI6d2luZG93Lm1hdGNoZXNTZWxlY3Rvcj1yfShFbGVtZW50LnByb3RvdHlwZSksZnVuY3Rpb24odCl7ZnVuY3Rpb24gZSh0LGUpe2Zvcih2YXIgaSBpbiBlKXRbaV09ZVtpXTtyZXR1cm4gdH1mdW5jdGlvbiBpKHQpe2Zvcih2YXIgZSBpbiB0KXJldHVybiExO3JldHVybiBlPW51bGwsITB9ZnVuY3Rpb24gbyh0KXtyZXR1cm4gdC5yZXBsYWNlKC8oW0EtWl0pL2csZnVuY3Rpb24odCl7cmV0dXJuXCItXCIrdC50b0xvd2VyQ2FzZSgpfSl9ZnVuY3Rpb24gbih0LG4scil7ZnVuY3Rpb24gYSh0LGUpe3QmJih0aGlzLmVsZW1lbnQ9dCx0aGlzLmxheW91dD1lLHRoaXMucG9zaXRpb249e3g6MCx5OjB9LHRoaXMuX2NyZWF0ZSgpKX12YXIgdT1yKFwidHJhbnNpdGlvblwiKSxwPXIoXCJ0cmFuc2Zvcm1cIiksaD11JiZwLGY9ISFyKFwicGVyc3BlY3RpdmVcIiksZD17V2Via2l0VHJhbnNpdGlvbjpcIndlYmtpdFRyYW5zaXRpb25FbmRcIixNb3pUcmFuc2l0aW9uOlwidHJhbnNpdGlvbmVuZFwiLE9UcmFuc2l0aW9uOlwib3RyYW5zaXRpb25lbmRcIix0cmFuc2l0aW9uOlwidHJhbnNpdGlvbmVuZFwifVt1XSxsPVtcInRyYW5zZm9ybVwiLFwidHJhbnNpdGlvblwiLFwidHJhbnNpdGlvbkR1cmF0aW9uXCIsXCJ0cmFuc2l0aW9uUHJvcGVydHlcIl0sYz1mdW5jdGlvbigpe2Zvcih2YXIgdD17fSxlPTAsaT1sLmxlbmd0aDtpPmU7ZSsrKXt2YXIgbz1sW2VdLG49cihvKTtuJiZuIT09byYmKHRbb109bil9cmV0dXJuIHR9KCk7ZShhLnByb3RvdHlwZSx0LnByb3RvdHlwZSksYS5wcm90b3R5cGUuX2NyZWF0ZT1mdW5jdGlvbigpe3RoaXMuX3RyYW5zbj17aW5nUHJvcGVydGllczp7fSxjbGVhbjp7fSxvbkVuZDp7fX0sdGhpcy5jc3Moe3Bvc2l0aW9uOlwiYWJzb2x1dGVcIn0pfSxhLnByb3RvdHlwZS5oYW5kbGVFdmVudD1mdW5jdGlvbih0KXt2YXIgZT1cIm9uXCIrdC50eXBlO3RoaXNbZV0mJnRoaXNbZV0odCl9LGEucHJvdG90eXBlLmdldFNpemU9ZnVuY3Rpb24oKXt0aGlzLnNpemU9bih0aGlzLmVsZW1lbnQpfSxhLnByb3RvdHlwZS5jc3M9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5lbGVtZW50LnN0eWxlO2Zvcih2YXIgaSBpbiB0KXt2YXIgbz1jW2ldfHxpO2Vbb109dFtpXX19LGEucHJvdG90eXBlLmdldFBvc2l0aW9uPWZ1bmN0aW9uKCl7dmFyIHQ9cyh0aGlzLmVsZW1lbnQpLGU9dGhpcy5sYXlvdXQub3B0aW9ucyxpPWUuaXNPcmlnaW5MZWZ0LG89ZS5pc09yaWdpblRvcCxuPXBhcnNlSW50KHRbaT9cImxlZnRcIjpcInJpZ2h0XCJdLDEwKSxyPXBhcnNlSW50KHRbbz9cInRvcFwiOlwiYm90dG9tXCJdLDEwKTtuPWlzTmFOKG4pPzA6bixyPWlzTmFOKHIpPzA6cjt2YXIgYT10aGlzLmxheW91dC5zaXplO24tPWk/YS5wYWRkaW5nTGVmdDphLnBhZGRpbmdSaWdodCxyLT1vP2EucGFkZGluZ1RvcDphLnBhZGRpbmdCb3R0b20sdGhpcy5wb3NpdGlvbi54PW4sdGhpcy5wb3NpdGlvbi55PXJ9LGEucHJvdG90eXBlLmxheW91dFBvc2l0aW9uPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5sYXlvdXQuc2l6ZSxlPXRoaXMubGF5b3V0Lm9wdGlvbnMsaT17fTtlLmlzT3JpZ2luTGVmdD8oaS5sZWZ0PXRoaXMucG9zaXRpb24ueCt0LnBhZGRpbmdMZWZ0K1wicHhcIixpLnJpZ2h0PVwiXCIpOihpLnJpZ2h0PXRoaXMucG9zaXRpb24ueCt0LnBhZGRpbmdSaWdodCtcInB4XCIsaS5sZWZ0PVwiXCIpLGUuaXNPcmlnaW5Ub3A/KGkudG9wPXRoaXMucG9zaXRpb24ueSt0LnBhZGRpbmdUb3ArXCJweFwiLGkuYm90dG9tPVwiXCIpOihpLmJvdHRvbT10aGlzLnBvc2l0aW9uLnkrdC5wYWRkaW5nQm90dG9tK1wicHhcIixpLnRvcD1cIlwiKSx0aGlzLmNzcyhpKSx0aGlzLmVtaXRFdmVudChcImxheW91dFwiLFt0aGlzXSl9O3ZhciB5PWY/ZnVuY3Rpb24odCxlKXtyZXR1cm5cInRyYW5zbGF0ZTNkKFwiK3QrXCJweCwgXCIrZStcInB4LCAwKVwifTpmdW5jdGlvbih0LGUpe3JldHVyblwidHJhbnNsYXRlKFwiK3QrXCJweCwgXCIrZStcInB4KVwifTthLnByb3RvdHlwZS5fdHJhbnNpdGlvblRvPWZ1bmN0aW9uKHQsZSl7dGhpcy5nZXRQb3NpdGlvbigpO3ZhciBpPXRoaXMucG9zaXRpb24ueCxvPXRoaXMucG9zaXRpb24ueSxuPXBhcnNlSW50KHQsMTApLHI9cGFyc2VJbnQoZSwxMCkscz1uPT09dGhpcy5wb3NpdGlvbi54JiZyPT09dGhpcy5wb3NpdGlvbi55O2lmKHRoaXMuc2V0UG9zaXRpb24odCxlKSxzJiYhdGhpcy5pc1RyYW5zaXRpb25pbmcpcmV0dXJuIHRoaXMubGF5b3V0UG9zaXRpb24oKSx2b2lkIDA7dmFyIGE9dC1pLHU9ZS1vLHA9e30saD10aGlzLmxheW91dC5vcHRpb25zO2E9aC5pc09yaWdpbkxlZnQ/YTotYSx1PWguaXNPcmlnaW5Ub3A/dTotdSxwLnRyYW5zZm9ybT15KGEsdSksdGhpcy50cmFuc2l0aW9uKHt0bzpwLG9uVHJhbnNpdGlvbkVuZDp7dHJhbnNmb3JtOnRoaXMubGF5b3V0UG9zaXRpb259LGlzQ2xlYW5pbmc6ITB9KX0sYS5wcm90b3R5cGUuZ29Ubz1mdW5jdGlvbih0LGUpe3RoaXMuc2V0UG9zaXRpb24odCxlKSx0aGlzLmxheW91dFBvc2l0aW9uKCl9LGEucHJvdG90eXBlLm1vdmVUbz1oP2EucHJvdG90eXBlLl90cmFuc2l0aW9uVG86YS5wcm90b3R5cGUuZ29UbyxhLnByb3RvdHlwZS5zZXRQb3NpdGlvbj1mdW5jdGlvbih0LGUpe3RoaXMucG9zaXRpb24ueD1wYXJzZUludCh0LDEwKSx0aGlzLnBvc2l0aW9uLnk9cGFyc2VJbnQoZSwxMCl9LGEucHJvdG90eXBlLl9ub25UcmFuc2l0aW9uPWZ1bmN0aW9uKHQpe3RoaXMuY3NzKHQudG8pLHQuaXNDbGVhbmluZyYmdGhpcy5fcmVtb3ZlU3R5bGVzKHQudG8pO2Zvcih2YXIgZSBpbiB0Lm9uVHJhbnNpdGlvbkVuZCl0Lm9uVHJhbnNpdGlvbkVuZFtlXS5jYWxsKHRoaXMpfSxhLnByb3RvdHlwZS5fdHJhbnNpdGlvbj1mdW5jdGlvbih0KXtpZighcGFyc2VGbG9hdCh0aGlzLmxheW91dC5vcHRpb25zLnRyYW5zaXRpb25EdXJhdGlvbikpcmV0dXJuIHRoaXMuX25vblRyYW5zaXRpb24odCksdm9pZCAwO3ZhciBlPXRoaXMuX3RyYW5zbjtmb3IodmFyIGkgaW4gdC5vblRyYW5zaXRpb25FbmQpZS5vbkVuZFtpXT10Lm9uVHJhbnNpdGlvbkVuZFtpXTtmb3IoaSBpbiB0LnRvKWUuaW5nUHJvcGVydGllc1tpXT0hMCx0LmlzQ2xlYW5pbmcmJihlLmNsZWFuW2ldPSEwKTtpZih0LmZyb20pe3RoaXMuY3NzKHQuZnJvbSk7dmFyIG89dGhpcy5lbGVtZW50Lm9mZnNldEhlaWdodDtvPW51bGx9dGhpcy5lbmFibGVUcmFuc2l0aW9uKHQudG8pLHRoaXMuY3NzKHQudG8pLHRoaXMuaXNUcmFuc2l0aW9uaW5nPSEwfTt2YXIgbT1wJiZvKHApK1wiLG9wYWNpdHlcIjthLnByb3RvdHlwZS5lbmFibGVUcmFuc2l0aW9uPWZ1bmN0aW9uKCl7dGhpcy5pc1RyYW5zaXRpb25pbmd8fCh0aGlzLmNzcyh7dHJhbnNpdGlvblByb3BlcnR5Om0sdHJhbnNpdGlvbkR1cmF0aW9uOnRoaXMubGF5b3V0Lm9wdGlvbnMudHJhbnNpdGlvbkR1cmF0aW9ufSksdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoZCx0aGlzLCExKSl9LGEucHJvdG90eXBlLnRyYW5zaXRpb249YS5wcm90b3R5cGVbdT9cIl90cmFuc2l0aW9uXCI6XCJfbm9uVHJhbnNpdGlvblwiXSxhLnByb3RvdHlwZS5vbndlYmtpdFRyYW5zaXRpb25FbmQ9ZnVuY3Rpb24odCl7dGhpcy5vbnRyYW5zaXRpb25lbmQodCl9LGEucHJvdG90eXBlLm9ub3RyYW5zaXRpb25lbmQ9ZnVuY3Rpb24odCl7dGhpcy5vbnRyYW5zaXRpb25lbmQodCl9O3ZhciBnPXtcIi13ZWJraXQtdHJhbnNmb3JtXCI6XCJ0cmFuc2Zvcm1cIixcIi1tb3otdHJhbnNmb3JtXCI6XCJ0cmFuc2Zvcm1cIixcIi1vLXRyYW5zZm9ybVwiOlwidHJhbnNmb3JtXCJ9O2EucHJvdG90eXBlLm9udHJhbnNpdGlvbmVuZD1mdW5jdGlvbih0KXtpZih0LnRhcmdldD09PXRoaXMuZWxlbWVudCl7dmFyIGU9dGhpcy5fdHJhbnNuLG89Z1t0LnByb3BlcnR5TmFtZV18fHQucHJvcGVydHlOYW1lO2lmKGRlbGV0ZSBlLmluZ1Byb3BlcnRpZXNbb10saShlLmluZ1Byb3BlcnRpZXMpJiZ0aGlzLmRpc2FibGVUcmFuc2l0aW9uKCksbyBpbiBlLmNsZWFuJiYodGhpcy5lbGVtZW50LnN0eWxlW3QucHJvcGVydHlOYW1lXT1cIlwiLGRlbGV0ZSBlLmNsZWFuW29dKSxvIGluIGUub25FbmQpe3ZhciBuPWUub25FbmRbb107bi5jYWxsKHRoaXMpLGRlbGV0ZSBlLm9uRW5kW29dfXRoaXMuZW1pdEV2ZW50KFwidHJhbnNpdGlvbkVuZFwiLFt0aGlzXSl9fSxhLnByb3RvdHlwZS5kaXNhYmxlVHJhbnNpdGlvbj1mdW5jdGlvbigpe3RoaXMucmVtb3ZlVHJhbnNpdGlvblN0eWxlcygpLHRoaXMuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGQsdGhpcywhMSksdGhpcy5pc1RyYW5zaXRpb25pbmc9ITF9LGEucHJvdG90eXBlLl9yZW1vdmVTdHlsZXM9ZnVuY3Rpb24odCl7dmFyIGU9e307Zm9yKHZhciBpIGluIHQpZVtpXT1cIlwiO3RoaXMuY3NzKGUpfTt2YXIgdj17dHJhbnNpdGlvblByb3BlcnR5OlwiXCIsdHJhbnNpdGlvbkR1cmF0aW9uOlwiXCJ9O3JldHVybiBhLnByb3RvdHlwZS5yZW1vdmVUcmFuc2l0aW9uU3R5bGVzPWZ1bmN0aW9uKCl7dGhpcy5jc3Modil9LGEucHJvdG90eXBlLnJlbW92ZUVsZW09ZnVuY3Rpb24oKXt0aGlzLmVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmVsZW1lbnQpLHRoaXMuZW1pdEV2ZW50KFwicmVtb3ZlXCIsW3RoaXNdKX0sYS5wcm90b3R5cGUucmVtb3ZlPWZ1bmN0aW9uKCl7aWYoIXV8fCFwYXJzZUZsb2F0KHRoaXMubGF5b3V0Lm9wdGlvbnMudHJhbnNpdGlvbkR1cmF0aW9uKSlyZXR1cm4gdGhpcy5yZW1vdmVFbGVtKCksdm9pZCAwO3ZhciB0PXRoaXM7dGhpcy5vbihcInRyYW5zaXRpb25FbmRcIixmdW5jdGlvbigpe3JldHVybiB0LnJlbW92ZUVsZW0oKSwhMH0pLHRoaXMuaGlkZSgpfSxhLnByb3RvdHlwZS5yZXZlYWw9ZnVuY3Rpb24oKXtkZWxldGUgdGhpcy5pc0hpZGRlbix0aGlzLmNzcyh7ZGlzcGxheTpcIlwifSk7dmFyIHQ9dGhpcy5sYXlvdXQub3B0aW9uczt0aGlzLnRyYW5zaXRpb24oe2Zyb206dC5oaWRkZW5TdHlsZSx0bzp0LnZpc2libGVTdHlsZSxpc0NsZWFuaW5nOiEwfSl9LGEucHJvdG90eXBlLmhpZGU9ZnVuY3Rpb24oKXt0aGlzLmlzSGlkZGVuPSEwLHRoaXMuY3NzKHtkaXNwbGF5OlwiXCJ9KTt2YXIgdD10aGlzLmxheW91dC5vcHRpb25zO3RoaXMudHJhbnNpdGlvbih7ZnJvbTp0LnZpc2libGVTdHlsZSx0bzp0LmhpZGRlblN0eWxlLGlzQ2xlYW5pbmc6ITAsb25UcmFuc2l0aW9uRW5kOntvcGFjaXR5OmZ1bmN0aW9uKCl7dGhpcy5pc0hpZGRlbiYmdGhpcy5jc3Moe2Rpc3BsYXk6XCJub25lXCJ9KX19fSl9LGEucHJvdG90eXBlLmRlc3Ryb3k9ZnVuY3Rpb24oKXt0aGlzLmNzcyh7cG9zaXRpb246XCJcIixsZWZ0OlwiXCIscmlnaHQ6XCJcIix0b3A6XCJcIixib3R0b206XCJcIix0cmFuc2l0aW9uOlwiXCIsdHJhbnNmb3JtOlwiXCJ9KX0sYX12YXIgcj10LmdldENvbXB1dGVkU3R5bGUscz1yP2Z1bmN0aW9uKHQpe3JldHVybiByKHQsbnVsbCl9OmZ1bmN0aW9uKHQpe3JldHVybiB0LmN1cnJlbnRTdHlsZX07XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShcIm91dGxheWVyL2l0ZW1cIixbXCJldmVudEVtaXR0ZXIvRXZlbnRFbWl0dGVyXCIsXCJnZXQtc2l6ZS9nZXQtc2l6ZVwiLFwiZ2V0LXN0eWxlLXByb3BlcnR5L2dldC1zdHlsZS1wcm9wZXJ0eVwiXSxuKTpcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cz9tb2R1bGUuZXhwb3J0cz1uKHJlcXVpcmUoXCJ3b2xmeTg3LWV2ZW50ZW1pdHRlclwiKSxyZXF1aXJlKFwiZ2V0LXNpemVcIikscmVxdWlyZShcImRlc2FuZHJvLWdldC1zdHlsZS1wcm9wZXJ0eVwiKSk6KHQuT3V0bGF5ZXI9e30sdC5PdXRsYXllci5JdGVtPW4odC5FdmVudEVtaXR0ZXIsdC5nZXRTaXplLHQuZ2V0U3R5bGVQcm9wZXJ0eSkpfSh3aW5kb3cpLGZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUodCxlKXtmb3IodmFyIGkgaW4gZSl0W2ldPWVbaV07cmV0dXJuIHR9ZnVuY3Rpb24gaSh0KXtyZXR1cm5cIltvYmplY3QgQXJyYXldXCI9PT1mLmNhbGwodCl9ZnVuY3Rpb24gbyh0KXt2YXIgZT1bXTtpZihpKHQpKWU9dDtlbHNlIGlmKHQmJlwibnVtYmVyXCI9PXR5cGVvZiB0Lmxlbmd0aClmb3IodmFyIG89MCxuPXQubGVuZ3RoO24+bztvKyspZS5wdXNoKHRbb10pO2Vsc2UgZS5wdXNoKHQpO3JldHVybiBlfWZ1bmN0aW9uIG4odCxlKXt2YXIgaT1sKGUsdCk7LTEhPT1pJiZlLnNwbGljZShpLDEpfWZ1bmN0aW9uIHIodCl7cmV0dXJuIHQucmVwbGFjZSgvKC4pKFtBLVpdKS9nLGZ1bmN0aW9uKHQsZSxpKXtyZXR1cm4gZStcIi1cIitpfSkudG9Mb3dlckNhc2UoKX1mdW5jdGlvbiBzKGkscyxmLGwsYyx5KXtmdW5jdGlvbiBtKHQsaSl7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHQmJih0PWEucXVlcnlTZWxlY3Rvcih0KSksIXR8fCFkKHQpKXJldHVybiB1JiZ1LmVycm9yKFwiQmFkIFwiK3RoaXMuY29uc3RydWN0b3IubmFtZXNwYWNlK1wiIGVsZW1lbnQ6IFwiK3QpLHZvaWQgMDt0aGlzLmVsZW1lbnQ9dCx0aGlzLm9wdGlvbnM9ZSh7fSx0aGlzLmNvbnN0cnVjdG9yLmRlZmF1bHRzKSx0aGlzLm9wdGlvbihpKTt2YXIgbz0rK2c7dGhpcy5lbGVtZW50Lm91dGxheWVyR1VJRD1vLHZbb109dGhpcyx0aGlzLl9jcmVhdGUoKSx0aGlzLm9wdGlvbnMuaXNJbml0TGF5b3V0JiZ0aGlzLmxheW91dCgpfXZhciBnPTAsdj17fTtyZXR1cm4gbS5uYW1lc3BhY2U9XCJvdXRsYXllclwiLG0uSXRlbT15LG0uZGVmYXVsdHM9e2NvbnRhaW5lclN0eWxlOntwb3NpdGlvbjpcInJlbGF0aXZlXCJ9LGlzSW5pdExheW91dDohMCxpc09yaWdpbkxlZnQ6ITAsaXNPcmlnaW5Ub3A6ITAsaXNSZXNpemVCb3VuZDohMCxpc1Jlc2l6aW5nQ29udGFpbmVyOiEwLHRyYW5zaXRpb25EdXJhdGlvbjpcIjFzXCIsaGlkZGVuU3R5bGU6e29wYWNpdHk6MCx0cmFuc2Zvcm06XCJzY2FsZSgwLjAwNSkgcm90YXRlWCgxODBkZWcpXCJ9LHZpc2libGVTdHlsZTp7b3BhY2l0eToxLHRyYW5zZm9ybTpcInNjYWxlKDEpIHJvdGF0ZVgoMGRlZylcIn19LGUobS5wcm90b3R5cGUsZi5wcm90b3R5cGUpLG0ucHJvdG90eXBlLm9wdGlvbj1mdW5jdGlvbih0KXtlKHRoaXMub3B0aW9ucyx0KX0sbS5wcm90b3R5cGUuX2NyZWF0ZT1mdW5jdGlvbigpe3RoaXMucmVsb2FkSXRlbXMoKSx0aGlzLnN0YW1wcz1bXSx0aGlzLnN0YW1wKHRoaXMub3B0aW9ucy5zdGFtcCksZSh0aGlzLmVsZW1lbnQuc3R5bGUsdGhpcy5vcHRpb25zLmNvbnRhaW5lclN0eWxlKSx0aGlzLm9wdGlvbnMuaXNSZXNpemVCb3VuZCYmdGhpcy5iaW5kUmVzaXplKCl9LG0ucHJvdG90eXBlLnJlbG9hZEl0ZW1zPWZ1bmN0aW9uKCl7dGhpcy5pdGVtcz10aGlzLl9pdGVtaXplKHRoaXMuZWxlbWVudC5jaGlsZHJlbil9LG0ucHJvdG90eXBlLl9pdGVtaXplPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10aGlzLl9maWx0ZXJGaW5kSXRlbUVsZW1lbnRzKHQpLGk9dGhpcy5jb25zdHJ1Y3Rvci5JdGVtLG89W10sbj0wLHI9ZS5sZW5ndGg7cj5uO24rKyl7dmFyIHM9ZVtuXSxhPW5ldyBpKHMsdGhpcyk7by5wdXNoKGEpfXJldHVybiBvfSxtLnByb3RvdHlwZS5fZmlsdGVyRmluZEl0ZW1FbGVtZW50cz1mdW5jdGlvbih0KXt0PW8odCk7Zm9yKHZhciBlPXRoaXMub3B0aW9ucy5pdGVtU2VsZWN0b3IsaT1bXSxuPTAscj10Lmxlbmd0aDtyPm47bisrKXt2YXIgcz10W25dO2lmKGQocykpaWYoZSl7YyhzLGUpJiZpLnB1c2gocyk7Zm9yKHZhciBhPXMucXVlcnlTZWxlY3RvckFsbChlKSx1PTAscD1hLmxlbmd0aDtwPnU7dSsrKWkucHVzaChhW3VdKX1lbHNlIGkucHVzaChzKX1yZXR1cm4gaX0sbS5wcm90b3R5cGUuZ2V0SXRlbUVsZW1lbnRzPWZ1bmN0aW9uKCl7Zm9yKHZhciB0PVtdLGU9MCxpPXRoaXMuaXRlbXMubGVuZ3RoO2k+ZTtlKyspdC5wdXNoKHRoaXMuaXRlbXNbZV0uZWxlbWVudCk7cmV0dXJuIHR9LG0ucHJvdG90eXBlLmxheW91dD1mdW5jdGlvbigpe3RoaXMuX3Jlc2V0TGF5b3V0KCksdGhpcy5fbWFuYWdlU3RhbXBzKCk7dmFyIHQ9dm9pZCAwIT09dGhpcy5vcHRpb25zLmlzTGF5b3V0SW5zdGFudD90aGlzLm9wdGlvbnMuaXNMYXlvdXRJbnN0YW50OiF0aGlzLl9pc0xheW91dEluaXRlZDt0aGlzLmxheW91dEl0ZW1zKHRoaXMuaXRlbXMsdCksdGhpcy5faXNMYXlvdXRJbml0ZWQ9ITB9LG0ucHJvdG90eXBlLl9pbml0PW0ucHJvdG90eXBlLmxheW91dCxtLnByb3RvdHlwZS5fcmVzZXRMYXlvdXQ9ZnVuY3Rpb24oKXt0aGlzLmdldFNpemUoKX0sbS5wcm90b3R5cGUuZ2V0U2l6ZT1mdW5jdGlvbigpe3RoaXMuc2l6ZT1sKHRoaXMuZWxlbWVudCl9LG0ucHJvdG90eXBlLl9nZXRNZWFzdXJlbWVudD1mdW5jdGlvbih0LGUpe3ZhciBpLG89dGhpcy5vcHRpb25zW3RdO28/KFwic3RyaW5nXCI9PXR5cGVvZiBvP2k9dGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3Iobyk6ZChvKSYmKGk9byksdGhpc1t0XT1pP2woaSlbZV06byk6dGhpc1t0XT0wfSxtLnByb3RvdHlwZS5sYXlvdXRJdGVtcz1mdW5jdGlvbih0LGUpe3Q9dGhpcy5fZ2V0SXRlbXNGb3JMYXlvdXQodCksdGhpcy5fbGF5b3V0SXRlbXModCxlKSx0aGlzLl9wb3N0TGF5b3V0KCl9LG0ucHJvdG90eXBlLl9nZXRJdGVtc0ZvckxheW91dD1mdW5jdGlvbih0KXtmb3IodmFyIGU9W10saT0wLG89dC5sZW5ndGg7bz5pO2krKyl7dmFyIG49dFtpXTtuLmlzSWdub3JlZHx8ZS5wdXNoKG4pfXJldHVybiBlfSxtLnByb3RvdHlwZS5fbGF5b3V0SXRlbXM9ZnVuY3Rpb24odCxlKXtmdW5jdGlvbiBpKCl7by5lbWl0RXZlbnQoXCJsYXlvdXRDb21wbGV0ZVwiLFtvLHRdKX12YXIgbz10aGlzO2lmKCF0fHwhdC5sZW5ndGgpcmV0dXJuIGkoKSx2b2lkIDA7dGhpcy5faXRlbXNPbih0LFwibGF5b3V0XCIsaSk7Zm9yKHZhciBuPVtdLHI9MCxzPXQubGVuZ3RoO3M+cjtyKyspe3ZhciBhPXRbcl0sdT10aGlzLl9nZXRJdGVtTGF5b3V0UG9zaXRpb24oYSk7dS5pdGVtPWEsdS5pc0luc3RhbnQ9ZXx8YS5pc0xheW91dEluc3RhbnQsbi5wdXNoKHUpfXRoaXMuX3Byb2Nlc3NMYXlvdXRRdWV1ZShuKX0sbS5wcm90b3R5cGUuX2dldEl0ZW1MYXlvdXRQb3NpdGlvbj1mdW5jdGlvbigpe3JldHVybnt4OjAseTowfX0sbS5wcm90b3R5cGUuX3Byb2Nlc3NMYXlvdXRRdWV1ZT1mdW5jdGlvbih0KXtmb3IodmFyIGU9MCxpPXQubGVuZ3RoO2k+ZTtlKyspe3ZhciBvPXRbZV07dGhpcy5fcG9zaXRpb25JdGVtKG8uaXRlbSxvLngsby55LG8uaXNJbnN0YW50KX19LG0ucHJvdG90eXBlLl9wb3NpdGlvbkl0ZW09ZnVuY3Rpb24odCxlLGksbyl7bz90LmdvVG8oZSxpKTp0Lm1vdmVUbyhlLGkpfSxtLnByb3RvdHlwZS5fcG9zdExheW91dD1mdW5jdGlvbigpe3RoaXMucmVzaXplQ29udGFpbmVyKCl9LG0ucHJvdG90eXBlLnJlc2l6ZUNvbnRhaW5lcj1mdW5jdGlvbigpe2lmKHRoaXMub3B0aW9ucy5pc1Jlc2l6aW5nQ29udGFpbmVyKXt2YXIgdD10aGlzLl9nZXRDb250YWluZXJTaXplKCk7dCYmKHRoaXMuX3NldENvbnRhaW5lck1lYXN1cmUodC53aWR0aCwhMCksdGhpcy5fc2V0Q29udGFpbmVyTWVhc3VyZSh0LmhlaWdodCwhMSkpfX0sbS5wcm90b3R5cGUuX2dldENvbnRhaW5lclNpemU9aCxtLnByb3RvdHlwZS5fc2V0Q29udGFpbmVyTWVhc3VyZT1mdW5jdGlvbih0LGUpe2lmKHZvaWQgMCE9PXQpe3ZhciBpPXRoaXMuc2l6ZTtpLmlzQm9yZGVyQm94JiYodCs9ZT9pLnBhZGRpbmdMZWZ0K2kucGFkZGluZ1JpZ2h0K2kuYm9yZGVyTGVmdFdpZHRoK2kuYm9yZGVyUmlnaHRXaWR0aDppLnBhZGRpbmdCb3R0b20raS5wYWRkaW5nVG9wK2kuYm9yZGVyVG9wV2lkdGgraS5ib3JkZXJCb3R0b21XaWR0aCksdD1NYXRoLm1heCh0LDApLHRoaXMuZWxlbWVudC5zdHlsZVtlP1wid2lkdGhcIjpcImhlaWdodFwiXT10K1wicHhcIn19LG0ucHJvdG90eXBlLl9pdGVtc09uPWZ1bmN0aW9uKHQsZSxpKXtmdW5jdGlvbiBvKCl7cmV0dXJuIG4rKyxuPT09ciYmaS5jYWxsKHMpLCEwfWZvcih2YXIgbj0wLHI9dC5sZW5ndGgscz10aGlzLGE9MCx1PXQubGVuZ3RoO3U+YTthKyspe3ZhciBwPXRbYV07cC5vbihlLG8pfX0sbS5wcm90b3R5cGUuaWdub3JlPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuZ2V0SXRlbSh0KTtlJiYoZS5pc0lnbm9yZWQ9ITApfSxtLnByb3RvdHlwZS51bmlnbm9yZT1mdW5jdGlvbih0KXt2YXIgZT10aGlzLmdldEl0ZW0odCk7ZSYmZGVsZXRlIGUuaXNJZ25vcmVkfSxtLnByb3RvdHlwZS5zdGFtcD1mdW5jdGlvbih0KXtpZih0PXRoaXMuX2ZpbmQodCkpe3RoaXMuc3RhbXBzPXRoaXMuc3RhbXBzLmNvbmNhdCh0KTtmb3IodmFyIGU9MCxpPXQubGVuZ3RoO2k+ZTtlKyspe3ZhciBvPXRbZV07dGhpcy5pZ25vcmUobyl9fX0sbS5wcm90b3R5cGUudW5zdGFtcD1mdW5jdGlvbih0KXtpZih0PXRoaXMuX2ZpbmQodCkpZm9yKHZhciBlPTAsaT10Lmxlbmd0aDtpPmU7ZSsrKXt2YXIgbz10W2VdO24obyx0aGlzLnN0YW1wcyksdGhpcy51bmlnbm9yZShvKX19LG0ucHJvdG90eXBlLl9maW5kPWZ1bmN0aW9uKHQpe3JldHVybiB0PyhcInN0cmluZ1wiPT10eXBlb2YgdCYmKHQ9dGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodCkpLHQ9byh0KSk6dm9pZCAwfSxtLnByb3RvdHlwZS5fbWFuYWdlU3RhbXBzPWZ1bmN0aW9uKCl7aWYodGhpcy5zdGFtcHMmJnRoaXMuc3RhbXBzLmxlbmd0aCl7dGhpcy5fZ2V0Qm91bmRpbmdSZWN0KCk7Zm9yKHZhciB0PTAsZT10aGlzLnN0YW1wcy5sZW5ndGg7ZT50O3QrKyl7dmFyIGk9dGhpcy5zdGFtcHNbdF07dGhpcy5fbWFuYWdlU3RhbXAoaSl9fX0sbS5wcm90b3R5cGUuX2dldEJvdW5kaW5nUmVjdD1mdW5jdGlvbigpe3ZhciB0PXRoaXMuZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxlPXRoaXMuc2l6ZTt0aGlzLl9ib3VuZGluZ1JlY3Q9e2xlZnQ6dC5sZWZ0K2UucGFkZGluZ0xlZnQrZS5ib3JkZXJMZWZ0V2lkdGgsdG9wOnQudG9wK2UucGFkZGluZ1RvcCtlLmJvcmRlclRvcFdpZHRoLHJpZ2h0OnQucmlnaHQtKGUucGFkZGluZ1JpZ2h0K2UuYm9yZGVyUmlnaHRXaWR0aCksYm90dG9tOnQuYm90dG9tLShlLnBhZGRpbmdCb3R0b20rZS5ib3JkZXJCb3R0b21XaWR0aCl9fSxtLnByb3RvdHlwZS5fbWFuYWdlU3RhbXA9aCxtLnByb3RvdHlwZS5fZ2V0RWxlbWVudE9mZnNldD1mdW5jdGlvbih0KXt2YXIgZT10LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLGk9dGhpcy5fYm91bmRpbmdSZWN0LG89bCh0KSxuPXtsZWZ0OmUubGVmdC1pLmxlZnQtby5tYXJnaW5MZWZ0LHRvcDplLnRvcC1pLnRvcC1vLm1hcmdpblRvcCxyaWdodDppLnJpZ2h0LWUucmlnaHQtby5tYXJnaW5SaWdodCxib3R0b206aS5ib3R0b20tZS5ib3R0b20tby5tYXJnaW5Cb3R0b219O3JldHVybiBufSxtLnByb3RvdHlwZS5oYW5kbGVFdmVudD1mdW5jdGlvbih0KXt2YXIgZT1cIm9uXCIrdC50eXBlO3RoaXNbZV0mJnRoaXNbZV0odCl9LG0ucHJvdG90eXBlLmJpbmRSZXNpemU9ZnVuY3Rpb24oKXt0aGlzLmlzUmVzaXplQm91bmR8fChpLmJpbmQodCxcInJlc2l6ZVwiLHRoaXMpLHRoaXMuaXNSZXNpemVCb3VuZD0hMCl9LG0ucHJvdG90eXBlLnVuYmluZFJlc2l6ZT1mdW5jdGlvbigpe3RoaXMuaXNSZXNpemVCb3VuZCYmaS51bmJpbmQodCxcInJlc2l6ZVwiLHRoaXMpLHRoaXMuaXNSZXNpemVCb3VuZD0hMX0sbS5wcm90b3R5cGUub25yZXNpemU9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KCl7ZS5yZXNpemUoKSxkZWxldGUgZS5yZXNpemVUaW1lb3V0fXRoaXMucmVzaXplVGltZW91dCYmY2xlYXJUaW1lb3V0KHRoaXMucmVzaXplVGltZW91dCk7dmFyIGU9dGhpczt0aGlzLnJlc2l6ZVRpbWVvdXQ9c2V0VGltZW91dCh0LDEwMCl9LG0ucHJvdG90eXBlLnJlc2l6ZT1mdW5jdGlvbigpe3RoaXMuaXNSZXNpemVCb3VuZCYmdGhpcy5uZWVkc1Jlc2l6ZUxheW91dCgpJiZ0aGlzLmxheW91dCgpfSxtLnByb3RvdHlwZS5uZWVkc1Jlc2l6ZUxheW91dD1mdW5jdGlvbigpe3ZhciB0PWwodGhpcy5lbGVtZW50KSxlPXRoaXMuc2l6ZSYmdDtyZXR1cm4gZSYmdC5pbm5lcldpZHRoIT09dGhpcy5zaXplLmlubmVyV2lkdGh9LG0ucHJvdG90eXBlLmFkZEl0ZW1zPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuX2l0ZW1pemUodCk7cmV0dXJuIGUubGVuZ3RoJiYodGhpcy5pdGVtcz10aGlzLml0ZW1zLmNvbmNhdChlKSksZX0sbS5wcm90b3R5cGUuYXBwZW5kZWQ9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5hZGRJdGVtcyh0KTtlLmxlbmd0aCYmKHRoaXMubGF5b3V0SXRlbXMoZSwhMCksdGhpcy5yZXZlYWwoZSkpfSxtLnByb3RvdHlwZS5wcmVwZW5kZWQ9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5faXRlbWl6ZSh0KTtpZihlLmxlbmd0aCl7dmFyIGk9dGhpcy5pdGVtcy5zbGljZSgwKTt0aGlzLml0ZW1zPWUuY29uY2F0KGkpLHRoaXMuX3Jlc2V0TGF5b3V0KCksdGhpcy5fbWFuYWdlU3RhbXBzKCksdGhpcy5sYXlvdXRJdGVtcyhlLCEwKSx0aGlzLnJldmVhbChlKSx0aGlzLmxheW91dEl0ZW1zKGkpfX0sbS5wcm90b3R5cGUucmV2ZWFsPWZ1bmN0aW9uKHQpe3ZhciBlPXQmJnQubGVuZ3RoO2lmKGUpZm9yKHZhciBpPTA7ZT5pO2krKyl7dmFyIG89dFtpXTtvLnJldmVhbCgpfX0sbS5wcm90b3R5cGUuaGlkZT1mdW5jdGlvbih0KXt2YXIgZT10JiZ0Lmxlbmd0aDtpZihlKWZvcih2YXIgaT0wO2U+aTtpKyspe3ZhciBvPXRbaV07by5oaWRlKCl9fSxtLnByb3RvdHlwZS5nZXRJdGVtPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT0wLGk9dGhpcy5pdGVtcy5sZW5ndGg7aT5lO2UrKyl7dmFyIG89dGhpcy5pdGVtc1tlXTtpZihvLmVsZW1lbnQ9PT10KXJldHVybiBvfX0sbS5wcm90b3R5cGUuZ2V0SXRlbXM9ZnVuY3Rpb24odCl7aWYodCYmdC5sZW5ndGgpe2Zvcih2YXIgZT1bXSxpPTAsbz10Lmxlbmd0aDtvPmk7aSsrKXt2YXIgbj10W2ldLHI9dGhpcy5nZXRJdGVtKG4pO3ImJmUucHVzaChyKX1yZXR1cm4gZX19LG0ucHJvdG90eXBlLnJlbW92ZT1mdW5jdGlvbih0KXt0PW8odCk7dmFyIGU9dGhpcy5nZXRJdGVtcyh0KTtpZihlJiZlLmxlbmd0aCl7dGhpcy5faXRlbXNPbihlLFwicmVtb3ZlXCIsZnVuY3Rpb24oKXt0aGlzLmVtaXRFdmVudChcInJlbW92ZUNvbXBsZXRlXCIsW3RoaXMsZV0pfSk7Zm9yKHZhciBpPTAscj1lLmxlbmd0aDtyPmk7aSsrKXt2YXIgcz1lW2ldO3MucmVtb3ZlKCksbihzLHRoaXMuaXRlbXMpfX19LG0ucHJvdG90eXBlLmRlc3Ryb3k9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmVsZW1lbnQuc3R5bGU7dC5oZWlnaHQ9XCJcIix0LnBvc2l0aW9uPVwiXCIsdC53aWR0aD1cIlwiO2Zvcih2YXIgZT0wLGk9dGhpcy5pdGVtcy5sZW5ndGg7aT5lO2UrKyl7dmFyIG89dGhpcy5pdGVtc1tlXTtvLmRlc3Ryb3koKX10aGlzLnVuYmluZFJlc2l6ZSgpO3ZhciBuPXRoaXMuZWxlbWVudC5vdXRsYXllckdVSUQ7ZGVsZXRlIHZbbl0sZGVsZXRlIHRoaXMuZWxlbWVudC5vdXRsYXllckdVSUQscCYmcC5yZW1vdmVEYXRhKHRoaXMuZWxlbWVudCx0aGlzLmNvbnN0cnVjdG9yLm5hbWVzcGFjZSl9LG0uZGF0YT1mdW5jdGlvbih0KXt2YXIgZT10JiZ0Lm91dGxheWVyR1VJRDtyZXR1cm4gZSYmdltlXX0sbS5jcmVhdGU9ZnVuY3Rpb24odCxpKXtmdW5jdGlvbiBvKCl7bS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9cmV0dXJuIE9iamVjdC5jcmVhdGU/by5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShtLnByb3RvdHlwZSk6ZShvLnByb3RvdHlwZSxtLnByb3RvdHlwZSksby5wcm90b3R5cGUuY29uc3RydWN0b3I9byxvLmRlZmF1bHRzPWUoe30sbS5kZWZhdWx0cyksZShvLmRlZmF1bHRzLGkpLG8ucHJvdG90eXBlLnNldHRpbmdzPXt9LG8ubmFtZXNwYWNlPXQsby5kYXRhPW0uZGF0YSxvLkl0ZW09ZnVuY3Rpb24oKXt5LmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sby5JdGVtLnByb3RvdHlwZT1uZXcgeSxzKGZ1bmN0aW9uKCl7Zm9yKHZhciBlPXIodCksaT1hLnF1ZXJ5U2VsZWN0b3JBbGwoXCIuanMtXCIrZSksbj1cImRhdGEtXCIrZStcIi1vcHRpb25zXCIscz0wLGg9aS5sZW5ndGg7aD5zO3MrKyl7dmFyIGYsZD1pW3NdLGw9ZC5nZXRBdHRyaWJ1dGUobik7dHJ5e2Y9bCYmSlNPTi5wYXJzZShsKX1jYXRjaChjKXt1JiZ1LmVycm9yKFwiRXJyb3IgcGFyc2luZyBcIituK1wiIG9uIFwiK2Qubm9kZU5hbWUudG9Mb3dlckNhc2UoKSsoZC5pZD9cIiNcIitkLmlkOlwiXCIpK1wiOiBcIitjKTtjb250aW51ZX12YXIgeT1uZXcgbyhkLGYpO3AmJnAuZGF0YShkLHQseSl9fSkscCYmcC5icmlkZ2V0JiZwLmJyaWRnZXQodCxvKSxvfSxtLkl0ZW09eSxtfXZhciBhPXQuZG9jdW1lbnQsdT10LmNvbnNvbGUscD10LmpRdWVyeSxoPWZ1bmN0aW9uKCl7fSxmPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcsZD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBIVE1MRWxlbWVudHx8XCJvYmplY3RcIj09dHlwZW9mIEhUTUxFbGVtZW50P2Z1bmN0aW9uKHQpe3JldHVybiB0IGluc3RhbmNlb2YgSFRNTEVsZW1lbnR9OmZ1bmN0aW9uKHQpe3JldHVybiB0JiZcIm9iamVjdFwiPT10eXBlb2YgdCYmMT09PXQubm9kZVR5cGUmJlwic3RyaW5nXCI9PXR5cGVvZiB0Lm5vZGVOYW1lfSxsPUFycmF5LnByb3RvdHlwZS5pbmRleE9mP2Z1bmN0aW9uKHQsZSl7cmV0dXJuIHQuaW5kZXhPZihlKX06ZnVuY3Rpb24odCxlKXtmb3IodmFyIGk9MCxvPXQubGVuZ3RoO28+aTtpKyspaWYodFtpXT09PWUpcmV0dXJuIGk7cmV0dXJuLTF9O1wiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoXCJvdXRsYXllci9vdXRsYXllclwiLFtcImV2ZW50aWUvZXZlbnRpZVwiLFwiZG9jLXJlYWR5L2RvYy1yZWFkeVwiLFwiZXZlbnRFbWl0dGVyL0V2ZW50RW1pdHRlclwiLFwiZ2V0LXNpemUvZ2V0LXNpemVcIixcIm1hdGNoZXMtc2VsZWN0b3IvbWF0Y2hlcy1zZWxlY3RvclwiLFwiLi9pdGVtXCJdLHMpOlwib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzP21vZHVsZS5leHBvcnRzPXMocmVxdWlyZShcImV2ZW50aWVcIikscmVxdWlyZShcImRvYy1yZWFkeVwiKSxyZXF1aXJlKFwid29sZnk4Ny1ldmVudGVtaXR0ZXJcIikscmVxdWlyZShcImdldC1zaXplXCIpLHJlcXVpcmUoXCJkZXNhbmRyby1tYXRjaGVzLXNlbGVjdG9yXCIpLHJlcXVpcmUoXCIuL2l0ZW1cIikpOnQuT3V0bGF5ZXI9cyh0LmV2ZW50aWUsdC5kb2NSZWFkeSx0LkV2ZW50RW1pdHRlcix0LmdldFNpemUsdC5tYXRjaGVzU2VsZWN0b3IsdC5PdXRsYXllci5JdGVtKX0od2luZG93KSxmdW5jdGlvbih0KXtmdW5jdGlvbiBlKHQpe2Z1bmN0aW9uIGUoKXt0Lkl0ZW0uYXBwbHkodGhpcyxhcmd1bWVudHMpfWUucHJvdG90eXBlPW5ldyB0Lkl0ZW0sZS5wcm90b3R5cGUuX2NyZWF0ZT1mdW5jdGlvbigpe3RoaXMuaWQ9dGhpcy5sYXlvdXQuaXRlbUdVSUQrKyx0Lkl0ZW0ucHJvdG90eXBlLl9jcmVhdGUuY2FsbCh0aGlzKSx0aGlzLnNvcnREYXRhPXt9fSxlLnByb3RvdHlwZS51cGRhdGVTb3J0RGF0YT1mdW5jdGlvbigpe2lmKCF0aGlzLmlzSWdub3JlZCl7dGhpcy5zb3J0RGF0YS5pZD10aGlzLmlkLHRoaXMuc29ydERhdGFbXCJvcmlnaW5hbC1vcmRlclwiXT10aGlzLmlkLHRoaXMuc29ydERhdGEucmFuZG9tPU1hdGgucmFuZG9tKCk7dmFyIHQ9dGhpcy5sYXlvdXQub3B0aW9ucy5nZXRTb3J0RGF0YSxlPXRoaXMubGF5b3V0Ll9zb3J0ZXJzO2Zvcih2YXIgaSBpbiB0KXt2YXIgbz1lW2ldO3RoaXMuc29ydERhdGFbaV09byh0aGlzLmVsZW1lbnQsdGhpcyl9fX07dmFyIGk9ZS5wcm90b3R5cGUuZGVzdHJveTtyZXR1cm4gZS5wcm90b3R5cGUuZGVzdHJveT1mdW5jdGlvbigpe2kuYXBwbHkodGhpcyxhcmd1bWVudHMpLHRoaXMuY3NzKHtkaXNwbGF5OlwiXCJ9KX0sZX1cImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFwiaXNvdG9wZS9qcy9pdGVtXCIsW1wib3V0bGF5ZXIvb3V0bGF5ZXJcIl0sZSk6XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHM/bW9kdWxlLmV4cG9ydHM9ZShyZXF1aXJlKFwib3V0bGF5ZXJcIikpOih0Lklzb3RvcGU9dC5Jc290b3BlfHx7fSx0Lklzb3RvcGUuSXRlbT1lKHQuT3V0bGF5ZXIpKX0od2luZG93KSxmdW5jdGlvbih0KXtmdW5jdGlvbiBlKHQsZSl7ZnVuY3Rpb24gaSh0KXt0aGlzLmlzb3RvcGU9dCx0JiYodGhpcy5vcHRpb25zPXQub3B0aW9uc1t0aGlzLm5hbWVzcGFjZV0sdGhpcy5lbGVtZW50PXQuZWxlbWVudCx0aGlzLml0ZW1zPXQuZmlsdGVyZWRJdGVtcyx0aGlzLnNpemU9dC5zaXplKX1yZXR1cm4gZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiBlLnByb3RvdHlwZVt0XS5hcHBseSh0aGlzLmlzb3RvcGUsYXJndW1lbnRzKX19Zm9yKHZhciBvPVtcIl9yZXNldExheW91dFwiLFwiX2dldEl0ZW1MYXlvdXRQb3NpdGlvblwiLFwiX21hbmFnZVN0YW1wXCIsXCJfZ2V0Q29udGFpbmVyU2l6ZVwiLFwiX2dldEVsZW1lbnRPZmZzZXRcIixcIm5lZWRzUmVzaXplTGF5b3V0XCJdLG49MCxyPW8ubGVuZ3RoO3I+bjtuKyspe3ZhciBzPW9bbl07aS5wcm90b3R5cGVbc109dChzKX19KCksaS5wcm90b3R5cGUubmVlZHNWZXJ0aWNhbFJlc2l6ZUxheW91dD1mdW5jdGlvbigpe3ZhciBlPXQodGhpcy5pc290b3BlLmVsZW1lbnQpLGk9dGhpcy5pc290b3BlLnNpemUmJmU7cmV0dXJuIGkmJmUuaW5uZXJIZWlnaHQhPT10aGlzLmlzb3RvcGUuc2l6ZS5pbm5lckhlaWdodH0saS5wcm90b3R5cGUuX2dldE1lYXN1cmVtZW50PWZ1bmN0aW9uKCl7dGhpcy5pc290b3BlLl9nZXRNZWFzdXJlbWVudC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LGkucHJvdG90eXBlLmdldENvbHVtbldpZHRoPWZ1bmN0aW9uKCl7dGhpcy5nZXRTZWdtZW50U2l6ZShcImNvbHVtblwiLFwiV2lkdGhcIil9LGkucHJvdG90eXBlLmdldFJvd0hlaWdodD1mdW5jdGlvbigpe3RoaXMuZ2V0U2VnbWVudFNpemUoXCJyb3dcIixcIkhlaWdodFwiKX0saS5wcm90b3R5cGUuZ2V0U2VnbWVudFNpemU9ZnVuY3Rpb24odCxlKXt2YXIgaT10K2Usbz1cIm91dGVyXCIrZTtpZih0aGlzLl9nZXRNZWFzdXJlbWVudChpLG8pLCF0aGlzW2ldKXt2YXIgbj10aGlzLmdldEZpcnN0SXRlbVNpemUoKTt0aGlzW2ldPW4mJm5bb118fHRoaXMuaXNvdG9wZS5zaXplW1wiaW5uZXJcIitlXX19LGkucHJvdG90eXBlLmdldEZpcnN0SXRlbVNpemU9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmlzb3RvcGUuZmlsdGVyZWRJdGVtc1swXTtyZXR1cm4gZSYmZS5lbGVtZW50JiZ0KGUuZWxlbWVudCl9LGkucHJvdG90eXBlLmxheW91dD1mdW5jdGlvbigpe3RoaXMuaXNvdG9wZS5sYXlvdXQuYXBwbHkodGhpcy5pc290b3BlLGFyZ3VtZW50cyl9LGkucHJvdG90eXBlLmdldFNpemU9ZnVuY3Rpb24oKXt0aGlzLmlzb3RvcGUuZ2V0U2l6ZSgpLHRoaXMuc2l6ZT10aGlzLmlzb3RvcGUuc2l6ZX0saS5tb2Rlcz17fSxpLmNyZWF0ZT1mdW5jdGlvbih0LGUpe2Z1bmN0aW9uIG8oKXtpLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1yZXR1cm4gby5wcm90b3R5cGU9bmV3IGksZSYmKG8ub3B0aW9ucz1lKSxvLnByb3RvdHlwZS5uYW1lc3BhY2U9dCxpLm1vZGVzW3RdPW8sb30saX1cImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFwiaXNvdG9wZS9qcy9sYXlvdXQtbW9kZVwiLFtcImdldC1zaXplL2dldC1zaXplXCIsXCJvdXRsYXllci9vdXRsYXllclwiXSxlKTpcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cz9tb2R1bGUuZXhwb3J0cz1lKHJlcXVpcmUoXCJnZXQtc2l6ZVwiKSxyZXF1aXJlKFwib3V0bGF5ZXJcIikpOih0Lklzb3RvcGU9dC5Jc290b3BlfHx7fSx0Lklzb3RvcGUuTGF5b3V0TW9kZT1lKHQuZ2V0U2l6ZSx0Lk91dGxheWVyKSl9KHdpbmRvdyksZnVuY3Rpb24odCl7ZnVuY3Rpb24gZSh0LGUpe3ZhciBvPXQuY3JlYXRlKFwibWFzb25yeVwiKTtyZXR1cm4gby5wcm90b3R5cGUuX3Jlc2V0TGF5b3V0PWZ1bmN0aW9uKCl7dGhpcy5nZXRTaXplKCksdGhpcy5fZ2V0TWVhc3VyZW1lbnQoXCJjb2x1bW5XaWR0aFwiLFwib3V0ZXJXaWR0aFwiKSx0aGlzLl9nZXRNZWFzdXJlbWVudChcImd1dHRlclwiLFwib3V0ZXJXaWR0aFwiKSx0aGlzLm1lYXN1cmVDb2x1bW5zKCk7dmFyIHQ9dGhpcy5jb2xzO2Zvcih0aGlzLmNvbFlzPVtdO3QtLTspdGhpcy5jb2xZcy5wdXNoKDApO3RoaXMubWF4WT0wfSxvLnByb3RvdHlwZS5tZWFzdXJlQ29sdW1ucz1mdW5jdGlvbigpe2lmKHRoaXMuZ2V0Q29udGFpbmVyV2lkdGgoKSwhdGhpcy5jb2x1bW5XaWR0aCl7dmFyIHQ9dGhpcy5pdGVtc1swXSxpPXQmJnQuZWxlbWVudDt0aGlzLmNvbHVtbldpZHRoPWkmJmUoaSkub3V0ZXJXaWR0aHx8dGhpcy5jb250YWluZXJXaWR0aH10aGlzLmNvbHVtbldpZHRoKz10aGlzLmd1dHRlcix0aGlzLmNvbHM9TWF0aC5mbG9vcigodGhpcy5jb250YWluZXJXaWR0aCt0aGlzLmd1dHRlcikvdGhpcy5jb2x1bW5XaWR0aCksdGhpcy5jb2xzPU1hdGgubWF4KHRoaXMuY29scywxKX0sby5wcm90b3R5cGUuZ2V0Q29udGFpbmVyV2lkdGg9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLm9wdGlvbnMuaXNGaXRXaWR0aD90aGlzLmVsZW1lbnQucGFyZW50Tm9kZTp0aGlzLmVsZW1lbnQsaT1lKHQpO3RoaXMuY29udGFpbmVyV2lkdGg9aSYmaS5pbm5lcldpZHRofSxvLnByb3RvdHlwZS5fZ2V0SXRlbUxheW91dFBvc2l0aW9uPWZ1bmN0aW9uKHQpe3QuZ2V0U2l6ZSgpO3ZhciBlPXQuc2l6ZS5vdXRlcldpZHRoJXRoaXMuY29sdW1uV2lkdGgsbz1lJiYxPmU/XCJyb3VuZFwiOlwiY2VpbFwiLG49TWF0aFtvXSh0LnNpemUub3V0ZXJXaWR0aC90aGlzLmNvbHVtbldpZHRoKTtuPU1hdGgubWluKG4sdGhpcy5jb2xzKTtmb3IodmFyIHI9dGhpcy5fZ2V0Q29sR3JvdXAobikscz1NYXRoLm1pbi5hcHBseShNYXRoLHIpLGE9aShyLHMpLHU9e3g6dGhpcy5jb2x1bW5XaWR0aCphLHk6c30scD1zK3Quc2l6ZS5vdXRlckhlaWdodCxoPXRoaXMuY29scysxLXIubGVuZ3RoLGY9MDtoPmY7ZisrKXRoaXMuY29sWXNbYStmXT1wO3JldHVybiB1fSxvLnByb3RvdHlwZS5fZ2V0Q29sR3JvdXA9ZnVuY3Rpb24odCl7aWYoMj50KXJldHVybiB0aGlzLmNvbFlzO2Zvcih2YXIgZT1bXSxpPXRoaXMuY29scysxLXQsbz0wO2k+bztvKyspe3ZhciBuPXRoaXMuY29sWXMuc2xpY2UobyxvK3QpO2Vbb109TWF0aC5tYXguYXBwbHkoTWF0aCxuKX1yZXR1cm4gZX0sby5wcm90b3R5cGUuX21hbmFnZVN0YW1wPWZ1bmN0aW9uKHQpe3ZhciBpPWUodCksbz10aGlzLl9nZXRFbGVtZW50T2Zmc2V0KHQpLG49dGhpcy5vcHRpb25zLmlzT3JpZ2luTGVmdD9vLmxlZnQ6by5yaWdodCxyPW4raS5vdXRlcldpZHRoLHM9TWF0aC5mbG9vcihuL3RoaXMuY29sdW1uV2lkdGgpO3M9TWF0aC5tYXgoMCxzKTt2YXIgYT1NYXRoLmZsb29yKHIvdGhpcy5jb2x1bW5XaWR0aCk7YS09ciV0aGlzLmNvbHVtbldpZHRoPzA6MSxhPU1hdGgubWluKHRoaXMuY29scy0xLGEpO2Zvcih2YXIgdT0odGhpcy5vcHRpb25zLmlzT3JpZ2luVG9wP28udG9wOm8uYm90dG9tKStpLm91dGVySGVpZ2h0LHA9czthPj1wO3ArKyl0aGlzLmNvbFlzW3BdPU1hdGgubWF4KHUsdGhpcy5jb2xZc1twXSl9LG8ucHJvdG90eXBlLl9nZXRDb250YWluZXJTaXplPWZ1bmN0aW9uKCl7dGhpcy5tYXhZPU1hdGgubWF4LmFwcGx5KE1hdGgsdGhpcy5jb2xZcyk7dmFyIHQ9e2hlaWdodDp0aGlzLm1heFl9O3JldHVybiB0aGlzLm9wdGlvbnMuaXNGaXRXaWR0aCYmKHQud2lkdGg9dGhpcy5fZ2V0Q29udGFpbmVyRml0V2lkdGgoKSksdH0sby5wcm90b3R5cGUuX2dldENvbnRhaW5lckZpdFdpZHRoPWZ1bmN0aW9uKCl7Zm9yKHZhciB0PTAsZT10aGlzLmNvbHM7LS1lJiYwPT09dGhpcy5jb2xZc1tlXTspdCsrO3JldHVybih0aGlzLmNvbHMtdCkqdGhpcy5jb2x1bW5XaWR0aC10aGlzLmd1dHRlcn0sby5wcm90b3R5cGUubmVlZHNSZXNpemVMYXlvdXQ9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmNvbnRhaW5lcldpZHRoO3JldHVybiB0aGlzLmdldENvbnRhaW5lcldpZHRoKCksdCE9PXRoaXMuY29udGFpbmVyV2lkdGh9LG99dmFyIGk9QXJyYXkucHJvdG90eXBlLmluZGV4T2Y/ZnVuY3Rpb24odCxlKXtyZXR1cm4gdC5pbmRleE9mKGUpfTpmdW5jdGlvbih0LGUpe2Zvcih2YXIgaT0wLG89dC5sZW5ndGg7bz5pO2krKyl7dmFyIG49dFtpXTtpZihuPT09ZSlyZXR1cm4gaX1yZXR1cm4tMX07XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShcIm1hc29ucnkvbWFzb25yeVwiLFtcIm91dGxheWVyL291dGxheWVyXCIsXCJnZXQtc2l6ZS9nZXQtc2l6ZVwiXSxlKTpcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cz9tb2R1bGUuZXhwb3J0cz1lKHJlcXVpcmUoXCJvdXRsYXllclwiKSxyZXF1aXJlKFwiZ2V0LXNpemVcIikpOnQuTWFzb25yeT1lKHQuT3V0bGF5ZXIsdC5nZXRTaXplKX0od2luZG93KSxmdW5jdGlvbih0KXtmdW5jdGlvbiBlKHQsZSl7Zm9yKHZhciBpIGluIGUpdFtpXT1lW2ldO3JldHVybiB0fWZ1bmN0aW9uIGkodCxpKXt2YXIgbz10LmNyZWF0ZShcIm1hc29ucnlcIiksbj1vLnByb3RvdHlwZS5fZ2V0RWxlbWVudE9mZnNldCxyPW8ucHJvdG90eXBlLmxheW91dCxzPW8ucHJvdG90eXBlLl9nZXRNZWFzdXJlbWVudDtlKG8ucHJvdG90eXBlLGkucHJvdG90eXBlKSxvLnByb3RvdHlwZS5fZ2V0RWxlbWVudE9mZnNldD1uLG8ucHJvdG90eXBlLmxheW91dD1yLG8ucHJvdG90eXBlLl9nZXRNZWFzdXJlbWVudD1zO3ZhciBhPW8ucHJvdG90eXBlLm1lYXN1cmVDb2x1bW5zO28ucHJvdG90eXBlLm1lYXN1cmVDb2x1bW5zPWZ1bmN0aW9uKCl7dGhpcy5pdGVtcz10aGlzLmlzb3RvcGUuZmlsdGVyZWRJdGVtcyxhLmNhbGwodGhpcyl9O3ZhciB1PW8ucHJvdG90eXBlLl9tYW5hZ2VTdGFtcDtyZXR1cm4gby5wcm90b3R5cGUuX21hbmFnZVN0YW1wPWZ1bmN0aW9uKCl7dGhpcy5vcHRpb25zLmlzT3JpZ2luTGVmdD10aGlzLmlzb3RvcGUub3B0aW9ucy5pc09yaWdpbkxlZnQsdGhpcy5vcHRpb25zLmlzT3JpZ2luVG9wPXRoaXMuaXNvdG9wZS5vcHRpb25zLmlzT3JpZ2luVG9wLHUuYXBwbHkodGhpcyxhcmd1bWVudHMpfSxvfVwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoXCJpc290b3BlL2pzL2xheW91dC1tb2Rlcy9tYXNvbnJ5XCIsW1wiLi4vbGF5b3V0LW1vZGVcIixcIm1hc29ucnkvbWFzb25yeVwiXSxpKTpcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cz9tb2R1bGUuZXhwb3J0cz1pKHJlcXVpcmUoXCIuLi9sYXlvdXQtbW9kZVwiKSxyZXF1aXJlKFwibWFzb25yeS1sYXlvdXRcIikpOmkodC5Jc290b3BlLkxheW91dE1vZGUsdC5NYXNvbnJ5KX0od2luZG93KSxmdW5jdGlvbih0KXtmdW5jdGlvbiBlKHQpe3ZhciBlPXQuY3JlYXRlKFwiZml0Um93c1wiKTtyZXR1cm4gZS5wcm90b3R5cGUuX3Jlc2V0TGF5b3V0PWZ1bmN0aW9uKCl7dGhpcy54PTAsdGhpcy55PTAsdGhpcy5tYXhZPTAsdGhpcy5fZ2V0TWVhc3VyZW1lbnQoXCJndXR0ZXJcIixcIm91dGVyV2lkdGhcIil9LGUucHJvdG90eXBlLl9nZXRJdGVtTGF5b3V0UG9zaXRpb249ZnVuY3Rpb24odCl7dC5nZXRTaXplKCk7dmFyIGU9dC5zaXplLm91dGVyV2lkdGgrdGhpcy5ndXR0ZXIsaT10aGlzLmlzb3RvcGUuc2l6ZS5pbm5lcldpZHRoK3RoaXMuZ3V0dGVyOzAhPT10aGlzLngmJmUrdGhpcy54PmkmJih0aGlzLng9MCx0aGlzLnk9dGhpcy5tYXhZKTt2YXIgbz17eDp0aGlzLngseTp0aGlzLnl9O3JldHVybiB0aGlzLm1heFk9TWF0aC5tYXgodGhpcy5tYXhZLHRoaXMueSt0LnNpemUub3V0ZXJIZWlnaHQpLHRoaXMueCs9ZSxvfSxlLnByb3RvdHlwZS5fZ2V0Q29udGFpbmVyU2l6ZT1mdW5jdGlvbigpe3JldHVybntoZWlnaHQ6dGhpcy5tYXhZfX0sZX1cImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFwiaXNvdG9wZS9qcy9sYXlvdXQtbW9kZXMvZml0LXJvd3NcIixbXCIuLi9sYXlvdXQtbW9kZVwiXSxlKTpcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cz9tb2R1bGUuZXhwb3J0cz1lKHJlcXVpcmUoXCIuLi9sYXlvdXQtbW9kZVwiKSk6ZSh0Lklzb3RvcGUuTGF5b3V0TW9kZSl9KHdpbmRvdyksZnVuY3Rpb24odCl7ZnVuY3Rpb24gZSh0KXt2YXIgZT10LmNyZWF0ZShcInZlcnRpY2FsXCIse2hvcml6b250YWxBbGlnbm1lbnQ6MH0pO3JldHVybiBlLnByb3RvdHlwZS5fcmVzZXRMYXlvdXQ9ZnVuY3Rpb24oKXt0aGlzLnk9MH0sZS5wcm90b3R5cGUuX2dldEl0ZW1MYXlvdXRQb3NpdGlvbj1mdW5jdGlvbih0KXt0LmdldFNpemUoKTt2YXIgZT0odGhpcy5pc290b3BlLnNpemUuaW5uZXJXaWR0aC10LnNpemUub3V0ZXJXaWR0aCkqdGhpcy5vcHRpb25zLmhvcml6b250YWxBbGlnbm1lbnQsaT10aGlzLnk7cmV0dXJuIHRoaXMueSs9dC5zaXplLm91dGVySGVpZ2h0LHt4OmUseTppfX0sZS5wcm90b3R5cGUuX2dldENvbnRhaW5lclNpemU9ZnVuY3Rpb24oKXtyZXR1cm57aGVpZ2h0OnRoaXMueX19LGV9XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShcImlzb3RvcGUvanMvbGF5b3V0LW1vZGVzL3ZlcnRpY2FsXCIsW1wiLi4vbGF5b3V0LW1vZGVcIl0sZSk6XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHM/bW9kdWxlLmV4cG9ydHM9ZShyZXF1aXJlKFwiLi4vbGF5b3V0LW1vZGVcIikpOmUodC5Jc290b3BlLkxheW91dE1vZGUpfSh3aW5kb3cpLGZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUodCxlKXtmb3IodmFyIGkgaW4gZSl0W2ldPWVbaV07cmV0dXJuIHR9ZnVuY3Rpb24gaSh0KXtyZXR1cm5cIltvYmplY3QgQXJyYXldXCI9PT1oLmNhbGwodCl9ZnVuY3Rpb24gbyh0KXt2YXIgZT1bXTtpZihpKHQpKWU9dDtlbHNlIGlmKHQmJlwibnVtYmVyXCI9PXR5cGVvZiB0Lmxlbmd0aClmb3IodmFyIG89MCxuPXQubGVuZ3RoO24+bztvKyspZS5wdXNoKHRbb10pO2Vsc2UgZS5wdXNoKHQpO3JldHVybiBlfWZ1bmN0aW9uIG4odCxlKXt2YXIgaT1mKGUsdCk7LTEhPT1pJiZlLnNwbGljZShpLDEpfWZ1bmN0aW9uIHIodCxpLHIsdSxoKXtmdW5jdGlvbiBmKHQsZSl7cmV0dXJuIGZ1bmN0aW9uKGksbyl7Zm9yKHZhciBuPTAscj10Lmxlbmd0aDtyPm47bisrKXt2YXIgcz10W25dLGE9aS5zb3J0RGF0YVtzXSx1PW8uc29ydERhdGFbc107aWYoYT51fHx1PmEpe3ZhciBwPXZvaWQgMCE9PWVbc10/ZVtzXTplLGg9cD8xOi0xO3JldHVybihhPnU/MTotMSkqaH19cmV0dXJuIDB9fXZhciBkPXQuY3JlYXRlKFwiaXNvdG9wZVwiLHtsYXlvdXRNb2RlOlwibWFzb25yeVwiLGlzSlF1ZXJ5RmlsdGVyaW5nOiEwLHNvcnRBc2NlbmRpbmc6ITB9KTtkLkl0ZW09dSxkLkxheW91dE1vZGU9aCxkLnByb3RvdHlwZS5fY3JlYXRlPWZ1bmN0aW9uKCl7dGhpcy5pdGVtR1VJRD0wLHRoaXMuX3NvcnRlcnM9e30sdGhpcy5fZ2V0U29ydGVycygpLHQucHJvdG90eXBlLl9jcmVhdGUuY2FsbCh0aGlzKSx0aGlzLm1vZGVzPXt9LHRoaXMuZmlsdGVyZWRJdGVtcz10aGlzLml0ZW1zLHRoaXMuc29ydEhpc3Rvcnk9W1wib3JpZ2luYWwtb3JkZXJcIl07Zm9yKHZhciBlIGluIGgubW9kZXMpdGhpcy5faW5pdExheW91dE1vZGUoZSl9LGQucHJvdG90eXBlLnJlbG9hZEl0ZW1zPWZ1bmN0aW9uKCl7dGhpcy5pdGVtR1VJRD0wLHQucHJvdG90eXBlLnJlbG9hZEl0ZW1zLmNhbGwodGhpcyl9LGQucHJvdG90eXBlLl9pdGVtaXplPWZ1bmN0aW9uKCl7Zm9yKHZhciBlPXQucHJvdG90eXBlLl9pdGVtaXplLmFwcGx5KHRoaXMsYXJndW1lbnRzKSxpPTAsbz1lLmxlbmd0aDtvPmk7aSsrKXt2YXIgbj1lW2ldO24uaWQ9dGhpcy5pdGVtR1VJRCsrfXJldHVybiB0aGlzLl91cGRhdGVJdGVtc1NvcnREYXRhKGUpLGVcclxufSxkLnByb3RvdHlwZS5faW5pdExheW91dE1vZGU9ZnVuY3Rpb24odCl7dmFyIGk9aC5tb2Rlc1t0XSxvPXRoaXMub3B0aW9uc1t0XXx8e307dGhpcy5vcHRpb25zW3RdPWkub3B0aW9ucz9lKGkub3B0aW9ucyxvKTpvLHRoaXMubW9kZXNbdF09bmV3IGkodGhpcyl9LGQucHJvdG90eXBlLmxheW91dD1mdW5jdGlvbigpe3JldHVybiF0aGlzLl9pc0xheW91dEluaXRlZCYmdGhpcy5vcHRpb25zLmlzSW5pdExheW91dD8odGhpcy5hcnJhbmdlKCksdm9pZCAwKToodGhpcy5fbGF5b3V0KCksdm9pZCAwKX0sZC5wcm90b3R5cGUuX2xheW91dD1mdW5jdGlvbigpe3ZhciB0PXRoaXMuX2dldElzSW5zdGFudCgpO3RoaXMuX3Jlc2V0TGF5b3V0KCksdGhpcy5fbWFuYWdlU3RhbXBzKCksdGhpcy5sYXlvdXRJdGVtcyh0aGlzLmZpbHRlcmVkSXRlbXMsdCksdGhpcy5faXNMYXlvdXRJbml0ZWQ9ITB9LGQucHJvdG90eXBlLmFycmFuZ2U9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gZSgpe28ucmV2ZWFsKGkubmVlZFJldmVhbCksby5oaWRlKGkubmVlZEhpZGUpfXRoaXMub3B0aW9uKHQpLHRoaXMuX2dldElzSW5zdGFudCgpO3ZhciBpPXRoaXMuX2ZpbHRlcih0aGlzLml0ZW1zKTt0aGlzLmZpbHRlcmVkSXRlbXM9aS5tYXRjaGVzO3ZhciBvPXRoaXM7dGhpcy5faXNJbnN0YW50P3RoaXMuX25vVHJhbnNpdGlvbihlKTplKCksdGhpcy5fc29ydCgpLHRoaXMuX2xheW91dCgpfSxkLnByb3RvdHlwZS5faW5pdD1kLnByb3RvdHlwZS5hcnJhbmdlLGQucHJvdG90eXBlLl9nZXRJc0luc3RhbnQ9ZnVuY3Rpb24oKXt2YXIgdD12b2lkIDAhPT10aGlzLm9wdGlvbnMuaXNMYXlvdXRJbnN0YW50P3RoaXMub3B0aW9ucy5pc0xheW91dEluc3RhbnQ6IXRoaXMuX2lzTGF5b3V0SW5pdGVkO3JldHVybiB0aGlzLl9pc0luc3RhbnQ9dCx0fSxkLnByb3RvdHlwZS5fZmlsdGVyPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMub3B0aW9ucy5maWx0ZXI7ZT1lfHxcIipcIjtmb3IodmFyIGk9W10sbz1bXSxuPVtdLHI9dGhpcy5fZ2V0RmlsdGVyVGVzdChlKSxzPTAsYT10Lmxlbmd0aDthPnM7cysrKXt2YXIgdT10W3NdO2lmKCF1LmlzSWdub3JlZCl7dmFyIHA9cih1KTtwJiZpLnB1c2godSkscCYmdS5pc0hpZGRlbj9vLnB1c2godSk6cHx8dS5pc0hpZGRlbnx8bi5wdXNoKHUpfX1yZXR1cm57bWF0Y2hlczppLG5lZWRSZXZlYWw6byxuZWVkSGlkZTpufX0sZC5wcm90b3R5cGUuX2dldEZpbHRlclRlc3Q9ZnVuY3Rpb24odCl7cmV0dXJuIHMmJnRoaXMub3B0aW9ucy5pc0pRdWVyeUZpbHRlcmluZz9mdW5jdGlvbihlKXtyZXR1cm4gcyhlLmVsZW1lbnQpLmlzKHQpfTpcImZ1bmN0aW9uXCI9PXR5cGVvZiB0P2Z1bmN0aW9uKGUpe3JldHVybiB0KGUuZWxlbWVudCl9OmZ1bmN0aW9uKGUpe3JldHVybiByKGUuZWxlbWVudCx0KX19LGQucHJvdG90eXBlLnVwZGF0ZVNvcnREYXRhPWZ1bmN0aW9uKHQpe3ZhciBlO3Q/KHQ9byh0KSxlPXRoaXMuZ2V0SXRlbXModCkpOmU9dGhpcy5pdGVtcyx0aGlzLl9nZXRTb3J0ZXJzKCksdGhpcy5fdXBkYXRlSXRlbXNTb3J0RGF0YShlKX0sZC5wcm90b3R5cGUuX2dldFNvcnRlcnM9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLm9wdGlvbnMuZ2V0U29ydERhdGE7Zm9yKHZhciBlIGluIHQpe3ZhciBpPXRbZV07dGhpcy5fc29ydGVyc1tlXT1sKGkpfX0sZC5wcm90b3R5cGUuX3VwZGF0ZUl0ZW1zU29ydERhdGE9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPXQmJnQubGVuZ3RoLGk9MDtlJiZlPmk7aSsrKXt2YXIgbz10W2ldO28udXBkYXRlU29ydERhdGEoKX19O3ZhciBsPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0KXtpZihcInN0cmluZ1wiIT10eXBlb2YgdClyZXR1cm4gdDt2YXIgaT1hKHQpLnNwbGl0KFwiIFwiKSxvPWlbMF0sbj1vLm1hdGNoKC9eXFxbKC4rKVxcXSQvKSxyPW4mJm5bMV0scz1lKHIsbyksdT1kLnNvcnREYXRhUGFyc2Vyc1tpWzFdXTtyZXR1cm4gdD11P2Z1bmN0aW9uKHQpe3JldHVybiB0JiZ1KHModCkpfTpmdW5jdGlvbih0KXtyZXR1cm4gdCYmcyh0KX19ZnVuY3Rpb24gZSh0LGUpe3ZhciBpO3JldHVybiBpPXQ/ZnVuY3Rpb24oZSl7cmV0dXJuIGUuZ2V0QXR0cmlidXRlKHQpfTpmdW5jdGlvbih0KXt2YXIgaT10LnF1ZXJ5U2VsZWN0b3IoZSk7cmV0dXJuIGkmJnAoaSl9fXJldHVybiB0fSgpO2Quc29ydERhdGFQYXJzZXJzPXtwYXJzZUludDpmdW5jdGlvbih0KXtyZXR1cm4gcGFyc2VJbnQodCwxMCl9LHBhcnNlRmxvYXQ6ZnVuY3Rpb24odCl7cmV0dXJuIHBhcnNlRmxvYXQodCl9fSxkLnByb3RvdHlwZS5fc29ydD1mdW5jdGlvbigpe3ZhciB0PXRoaXMub3B0aW9ucy5zb3J0Qnk7aWYodCl7dmFyIGU9W10uY29uY2F0LmFwcGx5KHQsdGhpcy5zb3J0SGlzdG9yeSksaT1mKGUsdGhpcy5vcHRpb25zLnNvcnRBc2NlbmRpbmcpO3RoaXMuZmlsdGVyZWRJdGVtcy5zb3J0KGkpLHQhPT10aGlzLnNvcnRIaXN0b3J5WzBdJiZ0aGlzLnNvcnRIaXN0b3J5LnVuc2hpZnQodCl9fSxkLnByb3RvdHlwZS5fbW9kZT1mdW5jdGlvbigpe3ZhciB0PXRoaXMub3B0aW9ucy5sYXlvdXRNb2RlLGU9dGhpcy5tb2Rlc1t0XTtpZighZSl0aHJvdyBFcnJvcihcIk5vIGxheW91dCBtb2RlOiBcIit0KTtyZXR1cm4gZS5vcHRpb25zPXRoaXMub3B0aW9uc1t0XSxlfSxkLnByb3RvdHlwZS5fcmVzZXRMYXlvdXQ9ZnVuY3Rpb24oKXt0LnByb3RvdHlwZS5fcmVzZXRMYXlvdXQuY2FsbCh0aGlzKSx0aGlzLl9tb2RlKCkuX3Jlc2V0TGF5b3V0KCl9LGQucHJvdG90eXBlLl9nZXRJdGVtTGF5b3V0UG9zaXRpb249ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuX21vZGUoKS5fZ2V0SXRlbUxheW91dFBvc2l0aW9uKHQpfSxkLnByb3RvdHlwZS5fbWFuYWdlU3RhbXA9ZnVuY3Rpb24odCl7dGhpcy5fbW9kZSgpLl9tYW5hZ2VTdGFtcCh0KX0sZC5wcm90b3R5cGUuX2dldENvbnRhaW5lclNpemU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fbW9kZSgpLl9nZXRDb250YWluZXJTaXplKCl9LGQucHJvdG90eXBlLm5lZWRzUmVzaXplTGF5b3V0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX21vZGUoKS5uZWVkc1Jlc2l6ZUxheW91dCgpfSxkLnByb3RvdHlwZS5hcHBlbmRlZD1mdW5jdGlvbih0KXt2YXIgZT10aGlzLmFkZEl0ZW1zKHQpO2lmKGUubGVuZ3RoKXt2YXIgaT10aGlzLl9maWx0ZXJSZXZlYWxBZGRlZChlKTt0aGlzLmZpbHRlcmVkSXRlbXM9dGhpcy5maWx0ZXJlZEl0ZW1zLmNvbmNhdChpKX19LGQucHJvdG90eXBlLnByZXBlbmRlZD1mdW5jdGlvbih0KXt2YXIgZT10aGlzLl9pdGVtaXplKHQpO2lmKGUubGVuZ3RoKXt0aGlzLl9yZXNldExheW91dCgpLHRoaXMuX21hbmFnZVN0YW1wcygpO3ZhciBpPXRoaXMuX2ZpbHRlclJldmVhbEFkZGVkKGUpO3RoaXMubGF5b3V0SXRlbXModGhpcy5maWx0ZXJlZEl0ZW1zKSx0aGlzLmZpbHRlcmVkSXRlbXM9aS5jb25jYXQodGhpcy5maWx0ZXJlZEl0ZW1zKSx0aGlzLml0ZW1zPWUuY29uY2F0KHRoaXMuaXRlbXMpfX0sZC5wcm90b3R5cGUuX2ZpbHRlclJldmVhbEFkZGVkPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuX2ZpbHRlcih0KTtyZXR1cm4gdGhpcy5oaWRlKGUubmVlZEhpZGUpLHRoaXMucmV2ZWFsKGUubWF0Y2hlcyksdGhpcy5sYXlvdXRJdGVtcyhlLm1hdGNoZXMsITApLGUubWF0Y2hlc30sZC5wcm90b3R5cGUuaW5zZXJ0PWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuYWRkSXRlbXModCk7aWYoZS5sZW5ndGgpe3ZhciBpLG8sbj1lLmxlbmd0aDtmb3IoaT0wO24+aTtpKyspbz1lW2ldLHRoaXMuZWxlbWVudC5hcHBlbmRDaGlsZChvLmVsZW1lbnQpO3ZhciByPXRoaXMuX2ZpbHRlcihlKS5tYXRjaGVzO2ZvcihpPTA7bj5pO2krKyllW2ldLmlzTGF5b3V0SW5zdGFudD0hMDtmb3IodGhpcy5hcnJhbmdlKCksaT0wO24+aTtpKyspZGVsZXRlIGVbaV0uaXNMYXlvdXRJbnN0YW50O3RoaXMucmV2ZWFsKHIpfX07dmFyIGM9ZC5wcm90b3R5cGUucmVtb3ZlO3JldHVybiBkLnByb3RvdHlwZS5yZW1vdmU9ZnVuY3Rpb24odCl7dD1vKHQpO3ZhciBlPXRoaXMuZ2V0SXRlbXModCk7aWYoYy5jYWxsKHRoaXMsdCksZSYmZS5sZW5ndGgpZm9yKHZhciBpPTAscj1lLmxlbmd0aDtyPmk7aSsrKXt2YXIgcz1lW2ldO24ocyx0aGlzLmZpbHRlcmVkSXRlbXMpfX0sZC5wcm90b3R5cGUuc2h1ZmZsZT1mdW5jdGlvbigpe2Zvcih2YXIgdD0wLGU9dGhpcy5pdGVtcy5sZW5ndGg7ZT50O3QrKyl7dmFyIGk9dGhpcy5pdGVtc1t0XTtpLnNvcnREYXRhLnJhbmRvbT1NYXRoLnJhbmRvbSgpfXRoaXMub3B0aW9ucy5zb3J0Qnk9XCJyYW5kb21cIix0aGlzLl9zb3J0KCksdGhpcy5fbGF5b3V0KCl9LGQucHJvdG90eXBlLl9ub1RyYW5zaXRpb249ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5vcHRpb25zLnRyYW5zaXRpb25EdXJhdGlvbjt0aGlzLm9wdGlvbnMudHJhbnNpdGlvbkR1cmF0aW9uPTA7dmFyIGk9dC5jYWxsKHRoaXMpO3JldHVybiB0aGlzLm9wdGlvbnMudHJhbnNpdGlvbkR1cmF0aW9uPWUsaX0sZC5wcm90b3R5cGUuZ2V0RmlsdGVyZWRJdGVtRWxlbWVudHM9ZnVuY3Rpb24oKXtmb3IodmFyIHQ9W10sZT0wLGk9dGhpcy5maWx0ZXJlZEl0ZW1zLmxlbmd0aDtpPmU7ZSsrKXQucHVzaCh0aGlzLmZpbHRlcmVkSXRlbXNbZV0uZWxlbWVudCk7cmV0dXJuIHR9LGR9dmFyIHM9dC5qUXVlcnksYT1TdHJpbmcucHJvdG90eXBlLnRyaW0/ZnVuY3Rpb24odCl7cmV0dXJuIHQudHJpbSgpfTpmdW5jdGlvbih0KXtyZXR1cm4gdC5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLFwiXCIpfSx1PWRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxwPXUudGV4dENvbnRlbnQ/ZnVuY3Rpb24odCl7cmV0dXJuIHQudGV4dENvbnRlbnR9OmZ1bmN0aW9uKHQpe3JldHVybiB0LmlubmVyVGV4dH0saD1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLGY9QXJyYXkucHJvdG90eXBlLmluZGV4T2Y/ZnVuY3Rpb24odCxlKXtyZXR1cm4gdC5pbmRleE9mKGUpfTpmdW5jdGlvbih0LGUpe2Zvcih2YXIgaT0wLG89dC5sZW5ndGg7bz5pO2krKylpZih0W2ldPT09ZSlyZXR1cm4gaTtyZXR1cm4tMX07XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShbXCJvdXRsYXllci9vdXRsYXllclwiLFwiZ2V0LXNpemUvZ2V0LXNpemVcIixcIm1hdGNoZXMtc2VsZWN0b3IvbWF0Y2hlcy1zZWxlY3RvclwiLFwiaXNvdG9wZS9qcy9pdGVtXCIsXCJpc290b3BlL2pzL2xheW91dC1tb2RlXCIsXCJpc290b3BlL2pzL2xheW91dC1tb2Rlcy9tYXNvbnJ5XCIsXCJpc290b3BlL2pzL2xheW91dC1tb2Rlcy9maXQtcm93c1wiLFwiaXNvdG9wZS9qcy9sYXlvdXQtbW9kZXMvdmVydGljYWxcIl0scik6XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHM/bW9kdWxlLmV4cG9ydHM9cihyZXF1aXJlKFwib3V0bGF5ZXJcIikscmVxdWlyZShcImdldC1zaXplXCIpLHJlcXVpcmUoXCJkZXNhbmRyby1tYXRjaGVzLXNlbGVjdG9yXCIpLHJlcXVpcmUoXCIuL2l0ZW1cIikscmVxdWlyZShcIi4vbGF5b3V0LW1vZGVcIikscmVxdWlyZShcIi4vbGF5b3V0LW1vZGVzL21hc29ucnlcIikscmVxdWlyZShcIi4vbGF5b3V0LW1vZGVzL2ZpdC1yb3dzXCIpLHJlcXVpcmUoXCIuL2xheW91dC1tb2Rlcy92ZXJ0aWNhbFwiKSk6dC5Jc290b3BlPXIodC5PdXRsYXllcix0LmdldFNpemUsdC5tYXRjaGVzU2VsZWN0b3IsdC5Jc290b3BlLkl0ZW0sdC5Jc290b3BlLkxheW91dE1vZGUpfSh3aW5kb3cpOyIsIi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbi8vIGZhbmN5Qm94IHYzLjIuMTBcclxuLy9cclxuLy8gTGljZW5zZWQgR1BMdjMgZm9yIG9wZW4gc291cmNlIHVzZVxyXG4vLyBvciBmYW5jeUJveCBDb21tZXJjaWFsIExpY2Vuc2UgZm9yIGNvbW1lcmNpYWwgdXNlXHJcbi8vXHJcbi8vIGh0dHA6Ly9mYW5jeWFwcHMuY29tL2ZhbmN5Ym94L1xyXG4vLyBDb3B5cmlnaHQgMjAxNyBmYW5jeUFwcHNcclxuLy9cclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuOyhmdW5jdGlvbiAod2luZG93LCBkb2N1bWVudCwgJCwgdW5kZWZpbmVkKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgLy8gSWYgdGhlcmUncyBubyBqUXVlcnksIGZhbmN5Qm94IGNhbid0IHdvcmtcclxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgaWYgKCAhJCApIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ2hlY2sgaWYgZmFuY3lCb3ggaXMgYWxyZWFkeSBpbml0aWFsaXplZFxyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgIGlmICggJC5mbi5mYW5jeWJveCApIHtcclxuXHJcbiAgICAgICAgaWYgKCAnY29uc29sZScgaW4gd2luZG93ICkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyggJ2ZhbmN5Qm94IGFscmVhZHkgaW5pdGlhbGl6ZWQnICk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUHJpdmF0ZSBkZWZhdWx0IHNldHRpbmdzXHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICB2YXIgZGVmYXVsdHMgPSB7XHJcblxyXG4gICAgICAgIC8vIEVuYWJsZSBpbmZpbml0ZSBnYWxsZXJ5IG5hdmlnYXRpb25cclxuICAgICAgICBsb29wIDogZmFsc2UsXHJcblxyXG4gICAgICAgIC8vIFNwYWNlIGFyb3VuZCBpbWFnZSwgaWdub3JlZCBpZiB6b29tZWQtaW4gb3Igdmlld3BvcnQgd2lkdGggaXMgc21hbGxlciB0aGFuIDgwMHB4XHJcbiAgICAgICAgbWFyZ2luIDogWzQ0LCAwXSxcclxuXHJcbiAgICAgICAgLy8gSG9yaXpvbnRhbCBzcGFjZSBiZXR3ZWVuIHNsaWRlc1xyXG4gICAgICAgIGd1dHRlciA6IDUwLFxyXG5cclxuICAgICAgICAvLyBFbmFibGUga2V5Ym9hcmQgbmF2aWdhdGlvblxyXG4gICAgICAgIGtleWJvYXJkIDogdHJ1ZSxcclxuXHJcbiAgICAgICAgLy8gU2hvdWxkIGRpc3BsYXkgbmF2aWdhdGlvbiBhcnJvd3MgYXQgdGhlIHNjcmVlbiBlZGdlc1xyXG4gICAgICAgIGFycm93cyA6IHRydWUsXHJcblxyXG4gICAgICAgIC8vIFNob3VsZCBkaXNwbGF5IGluZm9iYXIgKGNvdW50ZXIgYW5kIGFycm93cyBhdCB0aGUgdG9wKVxyXG4gICAgICAgIGluZm9iYXIgOiB0cnVlLFxyXG5cclxuICAgICAgICAvLyBTaG91bGQgZGlzcGxheSB0b29sYmFyIChidXR0b25zIGF0IHRoZSB0b3ApXHJcbiAgICAgICAgdG9vbGJhciA6IHRydWUsXHJcblxyXG4gICAgICAgIC8vIFdoYXQgYnV0dG9ucyBzaG91bGQgYXBwZWFyIGluIHRoZSB0b3AgcmlnaHQgY29ybmVyLlxyXG4gICAgICAgIC8vIEJ1dHRvbnMgd2lsbCBiZSBjcmVhdGVkIHVzaW5nIHRlbXBsYXRlcyBmcm9tIGBidG5UcGxgIG9wdGlvblxyXG4gICAgICAgIC8vIGFuZCB0aGV5IHdpbGwgYmUgcGxhY2VkIGludG8gdG9vbGJhciAoY2xhc3M9XCJmYW5jeWJveC10b29sYmFyXCJgIGVsZW1lbnQpXHJcbiAgICAgICAgYnV0dG9ucyA6IFtcclxuICAgICAgICAgICAgJ3NsaWRlU2hvdycsXHJcbiAgICAgICAgICAgICdmdWxsU2NyZWVuJyxcclxuICAgICAgICAgICAgJ3RodW1icycsXHJcbiAgICAgICAgICAgICdzaGFyZScsXHJcbiAgICAgICAgICAgIC8vJ2Rvd25sb2FkJyxcclxuICAgICAgICAgICAgLy8nem9vbScsXHJcbiAgICAgICAgICAgICdjbG9zZSdcclxuICAgICAgICBdLFxyXG5cclxuICAgICAgICAvLyBEZXRlY3QgXCJpZGxlXCIgdGltZSBpbiBzZWNvbmRzXHJcbiAgICAgICAgaWRsZVRpbWUgOiAzLFxyXG5cclxuICAgICAgICAvLyBTaG91bGQgZGlzcGxheSBidXR0b25zIGF0IHRvcCByaWdodCBjb3JuZXIgb2YgdGhlIGNvbnRlbnRcclxuICAgICAgICAvLyBJZiAnYXV0bycgLSB0aGV5IHdpbGwgYmUgY3JlYXRlZCBmb3IgY29udGVudCBoYXZpbmcgdHlwZSAnaHRtbCcsICdpbmxpbmUnIG9yICdhamF4J1xyXG4gICAgICAgIC8vIFVzZSB0ZW1wbGF0ZSBmcm9tIGBidG5UcGwuc21hbGxCdG5gIGZvciBjdXN0b21pemF0aW9uXHJcbiAgICAgICAgc21hbGxCdG4gOiAnYXV0bycsXHJcblxyXG4gICAgICAgIC8vIERpc2FibGUgcmlnaHQtY2xpY2sgYW5kIHVzZSBzaW1wbGUgaW1hZ2UgcHJvdGVjdGlvbiBmb3IgaW1hZ2VzXHJcbiAgICAgICAgcHJvdGVjdCA6IGZhbHNlLFxyXG5cclxuICAgICAgICAvLyBTaG9ydGN1dCB0byBtYWtlIGNvbnRlbnQgXCJtb2RhbFwiIC0gZGlzYWJsZSBrZXlib2FyZCBuYXZpZ3Rpb24sIGhpZGUgYnV0dG9ucywgZXRjXHJcbiAgICAgICAgbW9kYWwgOiBmYWxzZSxcclxuXHJcbiAgICAgICAgaW1hZ2UgOiB7XHJcblxyXG4gICAgICAgICAgICAvLyBXYWl0IGZvciBpbWFnZXMgdG8gbG9hZCBiZWZvcmUgZGlzcGxheWluZ1xyXG4gICAgICAgICAgICAvLyBSZXF1aXJlcyBwcmVkZWZpbmVkIGltYWdlIGRpbWVuc2lvbnNcclxuICAgICAgICAgICAgLy8gSWYgJ2F1dG8nIC0gd2lsbCB6b29tIGluIHRodW1ibmFpbCBpZiAnd2lkdGgnIGFuZCAnaGVpZ2h0JyBhdHRyaWJ1dGVzIGFyZSBmb3VuZFxyXG4gICAgICAgICAgICBwcmVsb2FkIDogXCJhdXRvXCJcclxuXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgYWpheCA6IHtcclxuXHJcbiAgICAgICAgICAgIC8vIE9iamVjdCBjb250YWluaW5nIHNldHRpbmdzIGZvciBhamF4IHJlcXVlc3RcclxuICAgICAgICAgICAgc2V0dGluZ3MgOiB7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gVGhpcyBoZWxwcyB0byBpbmRpY2F0ZSB0aGF0IHJlcXVlc3QgY29tZXMgZnJvbSB0aGUgbW9kYWxcclxuICAgICAgICAgICAgICAgIC8vIEZlZWwgZnJlZSB0byBjaGFuZ2UgbmFtaW5nXHJcbiAgICAgICAgICAgICAgICBkYXRhIDoge1xyXG4gICAgICAgICAgICAgICAgICAgIGZhbmN5Ym94IDogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGlmcmFtZSA6IHtcclxuXHJcbiAgICAgICAgICAgIC8vIElmcmFtZSB0ZW1wbGF0ZVxyXG4gICAgICAgICAgICB0cGwgOiAnPGlmcmFtZSBpZD1cImZhbmN5Ym94LWZyYW1le3JuZH1cIiBuYW1lPVwiZmFuY3lib3gtZnJhbWV7cm5kfVwiIGNsYXNzPVwiZmFuY3lib3gtaWZyYW1lXCIgZnJhbWVib3JkZXI9XCIwXCIgdnNwYWNlPVwiMFwiIGhzcGFjZT1cIjBcIiB3ZWJraXRBbGxvd0Z1bGxTY3JlZW4gbW96YWxsb3dmdWxsc2NyZWVuIGFsbG93RnVsbFNjcmVlbiBhbGxvd3RyYW5zcGFyZW5jeT1cInRydWVcIiBzcmM9XCJcIj48L2lmcmFtZT4nLFxyXG5cclxuICAgICAgICAgICAgLy8gUHJlbG9hZCBpZnJhbWUgYmVmb3JlIGRpc3BsYXlpbmcgaXRcclxuICAgICAgICAgICAgLy8gVGhpcyBhbGxvd3MgdG8gY2FsY3VsYXRlIGlmcmFtZSBjb250ZW50IHdpZHRoIGFuZCBoZWlnaHRcclxuICAgICAgICAgICAgLy8gKG5vdGU6IER1ZSB0byBcIlNhbWUgT3JpZ2luIFBvbGljeVwiLCB5b3UgY2FuJ3QgZ2V0IGNyb3NzIGRvbWFpbiBkYXRhKS5cclxuICAgICAgICAgICAgcHJlbG9hZCA6IHRydWUsXHJcblxyXG4gICAgICAgICAgICAvLyBDdXN0b20gQ1NTIHN0eWxpbmcgZm9yIGlmcmFtZSB3cmFwcGluZyBlbGVtZW50XHJcbiAgICAgICAgICAgIC8vIFlvdSBjYW4gdXNlIHRoaXMgdG8gc2V0IGN1c3RvbSBpZnJhbWUgZGltZW5zaW9uc1xyXG4gICAgICAgICAgICBjc3MgOiB7fSxcclxuXHJcbiAgICAgICAgICAgIC8vIElmcmFtZSB0YWcgYXR0cmlidXRlc1xyXG4gICAgICAgICAgICBhdHRyIDoge1xyXG4gICAgICAgICAgICAgICAgc2Nyb2xsaW5nIDogJ2F1dG8nXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLy8gRGVmYXVsdCBjb250ZW50IHR5cGUgaWYgY2Fubm90IGJlIGRldGVjdGVkIGF1dG9tYXRpY2FsbHlcclxuICAgICAgICBkZWZhdWx0VHlwZSA6ICdpbWFnZScsXHJcblxyXG4gICAgICAgIC8vIE9wZW4vY2xvc2UgYW5pbWF0aW9uIHR5cGVcclxuICAgICAgICAvLyBQb3NzaWJsZSB2YWx1ZXM6XHJcbiAgICAgICAgLy8gICBmYWxzZSAgICAgICAgICAgIC0gZGlzYWJsZVxyXG4gICAgICAgIC8vICAgXCJ6b29tXCIgICAgICAgICAgIC0gem9vbSBpbWFnZXMgZnJvbS90byB0aHVtYm5haWxcclxuICAgICAgICAvLyAgIFwiZmFkZVwiXHJcbiAgICAgICAgLy8gICBcInpvb20taW4tb3V0XCJcclxuICAgICAgICAvL1xyXG4gICAgICAgIGFuaW1hdGlvbkVmZmVjdCA6IFwiem9vbVwiLFxyXG5cclxuICAgICAgICAvLyBEdXJhdGlvbiBpbiBtcyBmb3Igb3Blbi9jbG9zZSBhbmltYXRpb25cclxuICAgICAgICBhbmltYXRpb25EdXJhdGlvbiA6IDUwMCxcclxuXHJcbiAgICAgICAgLy8gU2hvdWxkIGltYWdlIGNoYW5nZSBvcGFjaXR5IHdoaWxlIHpvb21pbmdcclxuICAgICAgICAvLyBJZiBvcGFjaXR5IGlzIFwiYXV0b1wiLCB0aGVuIG9wYWNpdHkgd2lsbCBiZSBjaGFuZ2VkIGlmIGltYWdlIGFuZCB0aHVtYm5haWwgaGF2ZSBkaWZmZXJlbnQgYXNwZWN0IHJhdGlvc1xyXG4gICAgICAgIHpvb21PcGFjaXR5IDogXCJhdXRvXCIsXHJcblxyXG4gICAgICAgIC8vIFRyYW5zaXRpb24gZWZmZWN0IGJldHdlZW4gc2xpZGVzXHJcbiAgICAgICAgLy9cclxuICAgICAgICAvLyBQb3NzaWJsZSB2YWx1ZXM6XHJcbiAgICAgICAgLy8gICBmYWxzZSAgICAgICAgICAgIC0gZGlzYWJsZVxyXG4gICAgICAgIC8vICAgXCJmYWRlJ1xyXG4gICAgICAgIC8vICAgXCJzbGlkZSdcclxuICAgICAgICAvLyAgIFwiY2lyY3VsYXInXHJcbiAgICAgICAgLy8gICBcInR1YmUnXHJcbiAgICAgICAgLy8gICBcInpvb20taW4tb3V0J1xyXG4gICAgICAgIC8vICAgXCJyb3RhdGUnXHJcbiAgICAgICAgLy9cclxuICAgICAgICB0cmFuc2l0aW9uRWZmZWN0IDogXCJmYWRlXCIsXHJcblxyXG4gICAgICAgIC8vIER1cmF0aW9uIGluIG1zIGZvciB0cmFuc2l0aW9uIGFuaW1hdGlvblxyXG4gICAgICAgIHRyYW5zaXRpb25EdXJhdGlvbiA6IDM2NixcclxuXHJcbiAgICAgICAgLy8gQ3VzdG9tIENTUyBjbGFzcyBmb3Igc2xpZGUgZWxlbWVudFxyXG4gICAgICAgIHNsaWRlQ2xhc3MgOiAnJyxcclxuXHJcbiAgICAgICAgLy8gQ3VzdG9tIENTUyBjbGFzcyBmb3IgbGF5b3V0XHJcbiAgICAgICAgYmFzZUNsYXNzIDogJycsXHJcblxyXG4gICAgICAgIC8vIEJhc2UgdGVtcGxhdGUgZm9yIGxheW91dFxyXG4gICAgICAgIGJhc2VUcGxcdDpcclxuICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJmYW5jeWJveC1jb250YWluZXJcIiByb2xlPVwiZGlhbG9nXCIgdGFiaW5kZXg9XCItMVwiPicgK1xyXG4gICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJmYW5jeWJveC1iZ1wiPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJmYW5jeWJveC1pbm5lclwiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiZmFuY3lib3gtaW5mb2JhclwiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHNwYW4gZGF0YS1mYW5jeWJveC1pbmRleD48L3NwYW4+Jm5ic3A7LyZuYnNwOzxzcGFuIGRhdGEtZmFuY3lib3gtY291bnQ+PC9zcGFuPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cImZhbmN5Ym94LXRvb2xiYXJcIj57e2J1dHRvbnN9fTwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiZmFuY3lib3gtbmF2aWdhdGlvblwiPnt7YXJyb3dzfX08L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cImZhbmN5Ym94LXN0YWdlXCI+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJmYW5jeWJveC1jYXB0aW9uLXdyYXBcIj48ZGl2IGNsYXNzPVwiZmFuY3lib3gtY2FwdGlvblwiPjwvZGl2PjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgJzwvZGl2PicgK1xyXG4gICAgICAgICAgICAnPC9kaXY+JyxcclxuXHJcbiAgICAgICAgLy8gTG9hZGluZyBpbmRpY2F0b3IgdGVtcGxhdGVcclxuICAgICAgICBzcGlubmVyVHBsIDogJzxkaXYgY2xhc3M9XCJmYW5jeWJveC1sb2FkaW5nXCI+PC9kaXY+JyxcclxuXHJcbiAgICAgICAgLy8gRXJyb3IgbWVzc2FnZSB0ZW1wbGF0ZVxyXG4gICAgICAgIGVycm9yVHBsIDogJzxkaXYgY2xhc3M9XCJmYW5jeWJveC1lcnJvclwiPjxwPnt7RVJST1J9fTxwPjwvZGl2PicsXHJcblxyXG4gICAgICAgIGJ0blRwbCA6IHtcclxuXHJcbiAgICAgICAgICAgIGRvd25sb2FkIDogJzxhIGRvd25sb2FkIGRhdGEtZmFuY3lib3gtZG93bmxvYWQgY2xhc3M9XCJmYW5jeWJveC1idXR0b24gZmFuY3lib3gtYnV0dG9uLS1kb3dubG9hZFwiIHRpdGxlPVwie3tET1dOTE9BRH19XCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8c3ZnIHZpZXdCb3g9XCIwIDAgNDAgNDBcIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8cGF0aCBkPVwiTTIwLDIzIEwyMCw4IEwyMCwyMyBMMTMsMTYgTDIwLDIzIEwyNywxNiBMMjAsMjMgTTI2LDI4IEwxMywyOCBMMjcsMjggTDE0LDI4XCIgLz4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzwvc3ZnPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8L2E+JyxcclxuXHJcbiAgICAgICAgICAgIHpvb20gOiAnPGJ1dHRvbiBkYXRhLWZhbmN5Ym94LXpvb20gY2xhc3M9XCJmYW5jeWJveC1idXR0b24gZmFuY3lib3gtYnV0dG9uLS16b29tXCIgdGl0bGU9XCJ7e1pPT019fVwiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHN2ZyB2aWV3Qm94PVwiMCAwIDQwIDQwXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPHBhdGggZD1cIk0gMTgsMTcgbS04LDAgYSA4LDggMCAxLDAgMTYsMCBhIDgsOCAwIDEsMCAtMTYsMCBNMjUsMjMgTDMxLDI5IEwyNSwyM1wiIC8+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8L3N2Zz4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPC9idXR0b24+JyxcclxuXHJcbiAgICAgICAgICAgIGNsb3NlIDogJzxidXR0b24gZGF0YS1mYW5jeWJveC1jbG9zZSBjbGFzcz1cImZhbmN5Ym94LWJ1dHRvbiBmYW5jeWJveC1idXR0b24tLWNsb3NlXCIgdGl0bGU9XCJ7e0NMT1NFfX1cIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxzdmcgdmlld0JveD1cIjAgMCA0MCA0MFwiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxwYXRoIGQ9XCJNMTAsMTAgTDMwLDMwIE0zMCwxMCBMMTAsMzBcIiAvPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPC9zdmc+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzwvYnV0dG9uPicsXHJcblxyXG4gICAgICAgICAgICAvLyBUaGlzIHNtYWxsIGNsb3NlIGJ1dHRvbiB3aWxsIGJlIGFwcGVuZGVkIHRvIHlvdXIgaHRtbC9pbmxpbmUvYWpheCBjb250ZW50IGJ5IGRlZmF1bHQsXHJcbiAgICAgICAgICAgIC8vIGlmIFwic21hbGxCdG5cIiBvcHRpb24gaXMgbm90IHNldCB0byBmYWxzZVxyXG4gICAgICAgICAgICBzbWFsbEJ0biAgIDogJzxidXR0b24gZGF0YS1mYW5jeWJveC1jbG9zZSBjbGFzcz1cImZhbmN5Ym94LWNsb3NlLXNtYWxsXCIgdGl0bGU9XCJ7e0NMT1NFfX1cIj48L2J1dHRvbj4nLFxyXG5cclxuICAgICAgICAgICAgLy8gQXJyb3dzXHJcbiAgICAgICAgICAgIGFycm93TGVmdCA6ICc8YnV0dG9uIGRhdGEtZmFuY3lib3gtcHJldiBjbGFzcz1cImZhbmN5Ym94LWJ1dHRvbiBmYW5jeWJveC1idXR0b24tLWFycm93X2xlZnRcIiB0aXRsZT1cInt7UFJFVn19XCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPHN2ZyB2aWV3Qm94PVwiMCAwIDQwIDQwXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8cGF0aCBkPVwiTTEwLDIwIEwzMCwyMCBMMTAsMjAgTDE4LDI4IEwxMCwyMCBMMTgsMTIgTDEwLDIwXCI+PC9wYXRoPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzwvc3ZnPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICc8L2J1dHRvbj4nLFxyXG5cclxuICAgICAgICAgICAgYXJyb3dSaWdodCA6ICc8YnV0dG9uIGRhdGEtZmFuY3lib3gtbmV4dCBjbGFzcz1cImZhbmN5Ym94LWJ1dHRvbiBmYW5jeWJveC1idXR0b24tLWFycm93X3JpZ2h0XCIgdGl0bGU9XCJ7e05FWFR9fVwiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICc8c3ZnIHZpZXdCb3g9XCIwIDAgNDAgNDBcIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8cGF0aCBkPVwiTTMwLDIwIEwxMCwyMCBMMzAsMjAgTDIyLDI4IEwzMCwyMCBMMjIsMTIgTDMwLDIwXCI+PC9wYXRoPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICc8L3N2Zz4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzwvYnV0dG9uPidcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvLyBDb250YWluZXIgaXMgaW5qZWN0ZWQgaW50byB0aGlzIGVsZW1lbnRcclxuICAgICAgICBwYXJlbnRFbCA6ICdib2R5JyxcclxuXHJcblxyXG4gICAgICAgIC8vIEZvY3VzIGhhbmRsaW5nXHJcbiAgICAgICAgLy8gPT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgLy8gVHJ5IHRvIGZvY3VzIG9uIHRoZSBmaXJzdCBmb2N1c2FibGUgZWxlbWVudCBhZnRlciBvcGVuaW5nXHJcbiAgICAgICAgYXV0b0ZvY3VzIDogZmFsc2UsXHJcblxyXG4gICAgICAgIC8vIFB1dCBmb2N1cyBiYWNrIHRvIGFjdGl2ZSBlbGVtZW50IGFmdGVyIGNsb3NpbmdcclxuICAgICAgICBiYWNrRm9jdXMgOiB0cnVlLFxyXG5cclxuICAgICAgICAvLyBEbyBub3QgbGV0IHVzZXIgdG8gZm9jdXMgb24gZWxlbWVudCBvdXRzaWRlIG1vZGFsIGNvbnRlbnRcclxuICAgICAgICB0cmFwRm9jdXMgOiB0cnVlLFxyXG5cclxuXHJcbiAgICAgICAgLy8gTW9kdWxlIHNwZWNpZmljIG9wdGlvbnNcclxuICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgICAgICBmdWxsU2NyZWVuIDoge1xyXG4gICAgICAgICAgICBhdXRvU3RhcnQgOiBmYWxzZSxcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvLyBTZXQgYHRvdWNoOiBmYWxzZWAgdG8gZGlzYWJsZSBkcmFnZ2luZy9zd2lwaW5nXHJcbiAgICAgICAgdG91Y2ggOiB7XHJcbiAgICAgICAgICAgIHZlcnRpY2FsIDogdHJ1ZSwgIC8vIEFsbG93IHRvIGRyYWcgY29udGVudCB2ZXJ0aWNhbGx5XHJcbiAgICAgICAgICAgIG1vbWVudHVtIDogdHJ1ZSAgIC8vIENvbnRpbnVlIG1vdmVtZW50IGFmdGVyIHJlbGVhc2luZyBtb3VzZS90b3VjaCB3aGVuIHBhbm5pbmdcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvLyBIYXNoIHZhbHVlIHdoZW4gaW5pdGlhbGl6aW5nIG1hbnVhbGx5LFxyXG4gICAgICAgIC8vIHNldCBgZmFsc2VgIHRvIGRpc2FibGUgaGFzaCBjaGFuZ2VcclxuICAgICAgICBoYXNoIDogbnVsbCxcclxuXHJcbiAgICAgICAgLy8gQ3VzdG9taXplIG9yIGFkZCBuZXcgbWVkaWEgdHlwZXNcclxuICAgICAgICAvLyBFeGFtcGxlOlxyXG4gICAgICAgIC8qXHJcbiAgICAgICAgbWVkaWEgOiB7XHJcbiAgICAgICAgICAgIHlvdXR1YmUgOiB7XHJcbiAgICAgICAgICAgICAgICBwYXJhbXMgOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXV0b3BsYXkgOiAwXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgKi9cclxuICAgICAgICBtZWRpYSA6IHt9LFxyXG5cclxuICAgICAgICBzbGlkZVNob3cgOiB7XHJcbiAgICAgICAgICAgIGF1dG9TdGFydCA6IGZhbHNlLFxyXG4gICAgICAgICAgICBzcGVlZCAgICAgOiA0MDAwXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgdGh1bWJzIDoge1xyXG5cdFx0XHRhdXRvU3RhcnQgICA6IGZhbHNlLCAgICAgICAgICAgICAgICAgIC8vIERpc3BsYXkgdGh1bWJuYWlscyBvbiBvcGVuaW5nXHJcblx0XHRcdGhpZGVPbkNsb3NlIDogdHJ1ZSwgICAgICAgICAgICAgICAgICAgLy8gSGlkZSB0aHVtYm5haWwgZ3JpZCB3aGVuIGNsb3NpbmcgYW5pbWF0aW9uIHN0YXJ0c1xyXG5cdFx0XHRwYXJlbnRFbCAgICA6ICcuZmFuY3lib3gtY29udGFpbmVyJywgIC8vIENvbnRhaW5lciBpcyBpbmplY3RlZCBpbnRvIHRoaXMgZWxlbWVudFxyXG5cdFx0XHRheGlzICAgICAgICA6ICd5JyAgICAgICAgICAgICAgICAgICAgIC8vIFZlcnRpY2FsICh5KSBvciBob3Jpem9udGFsICh4KSBzY3JvbGxpbmdcclxuXHRcdH0sXHJcblxyXG4gICAgICAgIC8vIFVzZSBtb3VzZXdoZWVsIHRvIG5hdmlnYXRlIGdhbGxlcnlcclxuICAgICAgICAvLyBJZiAnYXV0bycgLSBlbmFibGVkIGZvciBpbWFnZXMgb25seVxyXG4gICAgICAgIHdoZWVsIDogJ2F1dG8nLFxyXG5cclxuICAgICAgICAvLyBDYWxsYmFja3NcclxuICAgICAgICAvLz09PT09PT09PT1cclxuXHJcbiAgICAgICAgLy8gU2VlIERvY3VtZW50YXRpb24vQVBJL0V2ZW50cyBmb3IgbW9yZSBpbmZvcm1hdGlvblxyXG4gICAgICAgIC8vIEV4YW1wbGU6XHJcbiAgICAgICAgLypcclxuICAgICAgICAgICAgYWZ0ZXJTaG93OiBmdW5jdGlvbiggaW5zdGFuY2UsIGN1cnJlbnQgKSB7XHJcbiAgICAgICAgICAgICAgICAgY29uc29sZS5pbmZvKCAnQ2xpY2tlZCBlbGVtZW50OicgKTtcclxuICAgICAgICAgICAgICAgICBjb25zb2xlLmluZm8oIGN1cnJlbnQub3B0cy4kb3JpZyApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgKi9cclxuXHJcbiAgICAgICAgb25Jbml0ICAgICAgIDogJC5ub29wLCAgLy8gV2hlbiBpbnN0YW5jZSBoYXMgYmVlbiBpbml0aWFsaXplZFxyXG5cclxuICAgICAgICBiZWZvcmVMb2FkICAgOiAkLm5vb3AsICAvLyBCZWZvcmUgdGhlIGNvbnRlbnQgb2YgYSBzbGlkZSBpcyBiZWluZyBsb2FkZWRcclxuICAgICAgICBhZnRlckxvYWQgICAgOiAkLm5vb3AsICAvLyBXaGVuIHRoZSBjb250ZW50IG9mIGEgc2xpZGUgaXMgZG9uZSBsb2FkaW5nXHJcblxyXG4gICAgICAgIGJlZm9yZVNob3cgICA6ICQubm9vcCwgIC8vIEJlZm9yZSBvcGVuIGFuaW1hdGlvbiBzdGFydHNcclxuICAgICAgICBhZnRlclNob3cgICAgOiAkLm5vb3AsICAvLyBXaGVuIGNvbnRlbnQgaXMgZG9uZSBsb2FkaW5nIGFuZCBhbmltYXRpbmdcclxuXHJcbiAgICAgICAgYmVmb3JlQ2xvc2UgIDogJC5ub29wLCAgLy8gQmVmb3JlIHRoZSBpbnN0YW5jZSBhdHRlbXB0cyB0byBjbG9zZS4gUmV0dXJuIGZhbHNlIHRvIGNhbmNlbCB0aGUgY2xvc2UuXHJcbiAgICAgICAgYWZ0ZXJDbG9zZSAgIDogJC5ub29wLCAgLy8gQWZ0ZXIgaW5zdGFuY2UgaGFzIGJlZW4gY2xvc2VkXHJcblxyXG4gICAgICAgIG9uQWN0aXZhdGUgICA6ICQubm9vcCwgIC8vIFdoZW4gaW5zdGFuY2UgaXMgYnJvdWdodCB0byBmcm9udFxyXG4gICAgICAgIG9uRGVhY3RpdmF0ZSA6ICQubm9vcCwgIC8vIFdoZW4gb3RoZXIgaW5zdGFuY2UgaGFzIGJlZW4gYWN0aXZhdGVkXHJcblxyXG5cclxuICAgICAgICAvLyBJbnRlcmFjdGlvblxyXG4gICAgICAgIC8vID09PT09PT09PT09XHJcblxyXG4gICAgICAgIC8vIFVzZSBvcHRpb25zIGJlbG93IHRvIGN1c3RvbWl6ZSB0YWtlbiBhY3Rpb24gd2hlbiB1c2VyIGNsaWNrcyBvciBkb3VibGUgY2xpY2tzIG9uIHRoZSBmYW5jeUJveCBhcmVhLFxyXG4gICAgICAgIC8vIGVhY2ggb3B0aW9uIGNhbiBiZSBzdHJpbmcgb3IgbWV0aG9kIHRoYXQgcmV0dXJucyB2YWx1ZS5cclxuICAgICAgICAvL1xyXG4gICAgICAgIC8vIFBvc3NpYmxlIHZhbHVlczpcclxuICAgICAgICAvLyAgIFwiY2xvc2VcIiAgICAgICAgICAgLSBjbG9zZSBpbnN0YW5jZVxyXG4gICAgICAgIC8vICAgXCJuZXh0XCIgICAgICAgICAgICAtIG1vdmUgdG8gbmV4dCBnYWxsZXJ5IGl0ZW1cclxuICAgICAgICAvLyAgIFwibmV4dE9yQ2xvc2VcIiAgICAgLSBtb3ZlIHRvIG5leHQgZ2FsbGVyeSBpdGVtIG9yIGNsb3NlIGlmIGdhbGxlcnkgaGFzIG9ubHkgb25lIGl0ZW1cclxuICAgICAgICAvLyAgIFwidG9nZ2xlQ29udHJvbHNcIiAgLSBzaG93L2hpZGUgY29udHJvbHNcclxuICAgICAgICAvLyAgIFwiem9vbVwiICAgICAgICAgICAgLSB6b29tIGltYWdlIChpZiBsb2FkZWQpXHJcbiAgICAgICAgLy8gICBmYWxzZSAgICAgICAgICAgICAtIGRvIG5vdGhpbmdcclxuXHJcbiAgICAgICAgLy8gQ2xpY2tlZCBvbiB0aGUgY29udGVudFxyXG4gICAgICAgIGNsaWNrQ29udGVudCA6IGZ1bmN0aW9uKCBjdXJyZW50LCBldmVudCApIHtcclxuICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnQudHlwZSA9PT0gJ2ltYWdlJyA/ICd6b29tJyA6IGZhbHNlO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8vIENsaWNrZWQgb24gdGhlIHNsaWRlXHJcbiAgICAgICAgY2xpY2tTbGlkZSA6ICdjbG9zZScsXHJcblxyXG4gICAgICAgIC8vIENsaWNrZWQgb24gdGhlIGJhY2tncm91bmQgKGJhY2tkcm9wKSBlbGVtZW50XHJcbiAgICAgICAgY2xpY2tPdXRzaWRlIDogJ2Nsb3NlJyxcclxuXHJcbiAgICAgICAgLy8gU2FtZSBhcyBwcmV2aW91cyB0d28sIGJ1dCBmb3IgZG91YmxlIGNsaWNrXHJcbiAgICAgICAgZGJsY2xpY2tDb250ZW50IDogZmFsc2UsXHJcbiAgICAgICAgZGJsY2xpY2tTbGlkZSAgIDogZmFsc2UsXHJcbiAgICAgICAgZGJsY2xpY2tPdXRzaWRlIDogZmFsc2UsXHJcblxyXG5cclxuICAgICAgICAvLyBDdXN0b20gb3B0aW9ucyB3aGVuIG1vYmlsZSBkZXZpY2UgaXMgZGV0ZWN0ZWRcclxuICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgbW9iaWxlIDoge1xyXG4gICAgICAgICAgICBpZGxlVGltZSA6IGZhbHNlLFxyXG4gICAgICAgICAgICBtYXJnaW4gICA6IDAsXHJcblxyXG4gICAgICAgICAgICBjbGlja0NvbnRlbnQgOiBmdW5jdGlvbiggY3VycmVudCwgZXZlbnQgKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY3VycmVudC50eXBlID09PSAnaW1hZ2UnID8gJ3RvZ2dsZUNvbnRyb2xzJyA6IGZhbHNlO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBjbGlja1NsaWRlIDogZnVuY3Rpb24oIGN1cnJlbnQsIGV2ZW50ICkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnQudHlwZSA9PT0gJ2ltYWdlJyA/ICd0b2dnbGVDb250cm9scycgOiAnY2xvc2UnO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBkYmxjbGlja0NvbnRlbnQgOiBmdW5jdGlvbiggY3VycmVudCwgZXZlbnQgKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY3VycmVudC50eXBlID09PSAnaW1hZ2UnID8gJ3pvb20nIDogZmFsc2U7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGRibGNsaWNrU2xpZGUgOiBmdW5jdGlvbiggY3VycmVudCwgZXZlbnQgKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY3VycmVudC50eXBlID09PSAnaW1hZ2UnID8gJ3pvb20nIDogZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuXHJcbiAgICAgICAgLy8gSW50ZXJuYXRpb25hbGl6YXRpb25cclxuICAgICAgICAvLyA9PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgbGFuZyA6ICdlbicsXHJcbiAgICAgICAgaTE4biA6IHtcclxuICAgICAgICAgICAgJ2VuJyA6IHtcclxuICAgICAgICAgICAgICAgIENMT1NFICAgICAgIDogJ0Nsb3NlJyxcclxuICAgICAgICAgICAgICAgIE5FWFQgICAgICAgIDogJ05leHQnLFxyXG4gICAgICAgICAgICAgICAgUFJFViAgICAgICAgOiAnUHJldmlvdXMnLFxyXG4gICAgICAgICAgICAgICAgRVJST1IgICAgICAgOiAnVGhlIHJlcXVlc3RlZCBjb250ZW50IGNhbm5vdCBiZSBsb2FkZWQuIDxici8+IFBsZWFzZSB0cnkgYWdhaW4gbGF0ZXIuJyxcclxuICAgICAgICAgICAgICAgIFBMQVlfU1RBUlQgIDogJ1N0YXJ0IHNsaWRlc2hvdycsXHJcbiAgICAgICAgICAgICAgICBQTEFZX1NUT1AgICA6ICdQYXVzZSBzbGlkZXNob3cnLFxyXG4gICAgICAgICAgICAgICAgRlVMTF9TQ1JFRU4gOiAnRnVsbCBzY3JlZW4nLFxyXG4gICAgICAgICAgICAgICAgVEhVTUJTICAgICAgOiAnVGh1bWJuYWlscycsXHJcbiAgICAgICAgICAgICAgICBET1dOTE9BRCAgICA6ICdEb3dubG9hZCcsXHJcbiAgICAgICAgICAgICAgICBTSEFSRSAgICAgICA6ICdTaGFyZScsXHJcbiAgICAgICAgICAgICAgICBaT09NICAgICAgICA6ICdab29tJ1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAnZGUnIDoge1xyXG4gICAgICAgICAgICAgICAgQ0xPU0UgICAgICAgOiAnU2NobGllc3NlbicsXHJcbiAgICAgICAgICAgICAgICBORVhUICAgICAgICA6ICdXZWl0ZXInLFxyXG4gICAgICAgICAgICAgICAgUFJFViAgICAgICAgOiAnWnVyw7xjaycsXHJcbiAgICAgICAgICAgICAgICBFUlJPUiAgICAgICA6ICdEaWUgYW5nZWZvcmRlcnRlbiBEYXRlbiBrb25udGVuIG5pY2h0IGdlbGFkZW4gd2VyZGVuLiA8YnIvPiBCaXR0ZSB2ZXJzdWNoZW4gU2llIGVzIHNww6R0ZXIgbm9jaG1hbC4nLFxyXG4gICAgICAgICAgICAgICAgUExBWV9TVEFSVCAgOiAnRGlhc2NoYXUgc3RhcnRlbicsXHJcbiAgICAgICAgICAgICAgICBQTEFZX1NUT1AgICA6ICdEaWFzY2hhdSBiZWVuZGVuJyxcclxuICAgICAgICAgICAgICAgIEZVTExfU0NSRUVOIDogJ1ZvbGxiaWxkJyxcclxuICAgICAgICAgICAgICAgIFRIVU1CUyAgICAgIDogJ1ZvcnNjaGF1YmlsZGVyJyxcclxuICAgICAgICAgICAgICAgIERPV05MT0FEICAgIDogJ0hlcnVudGVybGFkZW4nLFxyXG4gICAgICAgICAgICAgICAgU0hBUkUgICAgICAgOiAnVGVpbGVuJyxcclxuICAgICAgICAgICAgICAgIFpPT00gICAgICAgIDogJ01hw59zdGFiJ1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH07XHJcblxyXG4gICAgLy8gRmV3IHVzZWZ1bCB2YXJpYWJsZXMgYW5kIG1ldGhvZHNcclxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgdmFyICRXID0gJCh3aW5kb3cpO1xyXG4gICAgdmFyICREID0gJChkb2N1bWVudCk7XHJcblxyXG4gICAgdmFyIGNhbGxlZCA9IDA7XHJcblxyXG5cclxuICAgIC8vIENoZWNrIGlmIGFuIG9iamVjdCBpcyBhIGpRdWVyeSBvYmplY3QgYW5kIG5vdCBhIG5hdGl2ZSBKYXZhU2NyaXB0IG9iamVjdFxyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgdmFyIGlzUXVlcnkgPSBmdW5jdGlvbiAoIG9iaiApIHtcclxuICAgICAgICByZXR1cm4gb2JqICYmIG9iai5oYXNPd25Qcm9wZXJ0eSAmJiBvYmogaW5zdGFuY2VvZiAkO1xyXG4gICAgfTtcclxuXHJcblxyXG4gICAgLy8gSGFuZGxlIG11bHRpcGxlIGJyb3dzZXJzIGZvciBcInJlcXVlc3RBbmltYXRpb25GcmFtZVwiIGFuZCBcImNhbmNlbEFuaW1hdGlvbkZyYW1lXCJcclxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICB2YXIgcmVxdWVzdEFGcmFtZSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcclxuICAgICAgICAgICAgICAgIHdpbmRvdy53ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcclxuICAgICAgICAgICAgICAgIHdpbmRvdy5tb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcclxuICAgICAgICAgICAgICAgIHdpbmRvdy5vUmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XHJcbiAgICAgICAgICAgICAgICAvLyBpZiBhbGwgZWxzZSBmYWlscywgdXNlIHNldFRpbWVvdXRcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChjYWxsYmFjaykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB3aW5kb3cuc2V0VGltZW91dChjYWxsYmFjaywgMTAwMCAvIDYwKTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICB9KSgpO1xyXG5cclxuXHJcbiAgICAvLyBEZXRlY3QgdGhlIHN1cHBvcnRlZCB0cmFuc2l0aW9uLWVuZCBldmVudCBwcm9wZXJ0eSBuYW1lXHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgdmFyIHRyYW5zaXRpb25FbmQgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciB0LCBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmYWtlZWxlbWVudFwiKTtcclxuXHJcbiAgICAgICAgdmFyIHRyYW5zaXRpb25zID0ge1xyXG4gICAgICAgICAgICBcInRyYW5zaXRpb25cIiAgICAgIDogXCJ0cmFuc2l0aW9uZW5kXCIsXHJcbiAgICAgICAgICAgIFwiT1RyYW5zaXRpb25cIiAgICAgOiBcIm9UcmFuc2l0aW9uRW5kXCIsXHJcbiAgICAgICAgICAgIFwiTW96VHJhbnNpdGlvblwiICAgOiBcInRyYW5zaXRpb25lbmRcIixcclxuICAgICAgICAgICAgXCJXZWJraXRUcmFuc2l0aW9uXCI6IFwid2Via2l0VHJhbnNpdGlvbkVuZFwiXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgZm9yICh0IGluIHRyYW5zaXRpb25zKSB7XHJcbiAgICAgICAgICAgIGlmIChlbC5zdHlsZVt0XSAhPT0gdW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cmFuc2l0aW9uc1t0XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuICd0cmFuc2l0aW9uZW5kJztcclxuICAgIH0pKCk7XHJcblxyXG5cclxuICAgIC8vIEZvcmNlIHJlZHJhdyBvbiBhbiBlbGVtZW50LlxyXG4gICAgLy8gVGhpcyBoZWxwcyBpbiBjYXNlcyB3aGVyZSB0aGUgYnJvd3NlciBkb2Vzbid0IHJlZHJhdyBhbiB1cGRhdGVkIGVsZW1lbnQgcHJvcGVybHkuXHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICB2YXIgZm9yY2VSZWRyYXcgPSBmdW5jdGlvbiggJGVsICkge1xyXG4gICAgICAgIHJldHVybiAoICRlbCAmJiAkZWwubGVuZ3RoICYmICRlbFswXS5vZmZzZXRIZWlnaHQgKTtcclxuICAgIH07XHJcblxyXG5cclxuICAgIC8vIENsYXNzIGRlZmluaXRpb25cclxuICAgIC8vID09PT09PT09PT09PT09PT1cclxuXHJcbiAgICB2YXIgRmFuY3lCb3ggPSBmdW5jdGlvbiggY29udGVudCwgb3B0cywgaW5kZXggKSB7XHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgICAgICBzZWxmLm9wdHMgPSAkLmV4dGVuZCggdHJ1ZSwgeyBpbmRleCA6IGluZGV4IH0sICQuZmFuY3lib3guZGVmYXVsdHMsIG9wdHMgfHwge30gKTtcclxuXHJcbiAgICAgICAgaWYgKCAkLmZhbmN5Ym94LmlzTW9iaWxlICkge1xyXG4gICAgICAgICAgICBzZWxmLm9wdHMgPSAkLmV4dGVuZCggdHJ1ZSwge30sIHNlbGYub3B0cywgc2VsZi5vcHRzLm1vYmlsZSApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gRXhjbHVkZSBidXR0b25zIG9wdGlvbiBmcm9tIGRlZXAgbWVyZ2luZ1xyXG4gICAgICAgIGlmICggb3B0cyAmJiAkLmlzQXJyYXkoIG9wdHMuYnV0dG9ucyApICkge1xyXG4gICAgICAgICAgICBzZWxmLm9wdHMuYnV0dG9ucyA9IG9wdHMuYnV0dG9ucztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNlbGYuaWQgICAgPSBzZWxmLm9wdHMuaWQgfHwgKytjYWxsZWQ7XHJcbiAgICAgICAgc2VsZi5ncm91cCA9IFtdO1xyXG5cclxuICAgICAgICBzZWxmLmN1cnJJbmRleCA9IHBhcnNlSW50KCBzZWxmLm9wdHMuaW5kZXgsIDEwICkgfHwgMDtcclxuICAgICAgICBzZWxmLnByZXZJbmRleCA9IG51bGw7XHJcblxyXG4gICAgICAgIHNlbGYucHJldlBvcyA9IG51bGw7XHJcbiAgICAgICAgc2VsZi5jdXJyUG9zID0gMDtcclxuXHJcbiAgICAgICAgc2VsZi5maXJzdFJ1biA9IG51bGw7XHJcblxyXG4gICAgICAgIC8vIENyZWF0ZSBncm91cCBlbGVtZW50cyBmcm9tIG9yaWdpbmFsIGl0ZW0gY29sbGVjdGlvblxyXG4gICAgICAgIHNlbGYuY3JlYXRlR3JvdXAoIGNvbnRlbnQgKTtcclxuXHJcbiAgICAgICAgaWYgKCAhc2VsZi5ncm91cC5sZW5ndGggKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFNhdmUgbGFzdCBhY3RpdmUgZWxlbWVudCBhbmQgY3VycmVudCBzY3JvbGwgcG9zaXRpb25cclxuICAgICAgICBzZWxmLiRsYXN0Rm9jdXMgPSAkKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpLmJsdXIoKTtcclxuXHJcbiAgICAgICAgLy8gQ29sbGVjdGlvbiBvZiBnYWxsZXJ5IG9iamVjdHNcclxuICAgICAgICBzZWxmLnNsaWRlcyA9IHt9O1xyXG5cclxuICAgICAgICBzZWxmLmluaXQoKTtcclxuICAgIH07XHJcblxyXG4gICAgJC5leHRlbmQoRmFuY3lCb3gucHJvdG90eXBlLCB7XHJcblxyXG4gICAgICAgIC8vIENyZWF0ZSBET00gc3RydWN0dXJlXHJcbiAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgaW5pdCA6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXMsXHJcbiAgICAgICAgICAgICAgICBmaXJzdEl0ZW0gICAgICA9IHNlbGYuZ3JvdXBbIHNlbGYuY3VyckluZGV4IF0sXHJcbiAgICAgICAgICAgICAgICBmaXJzdEl0ZW1PcHRzICA9IGZpcnN0SXRlbS5vcHRzLFxyXG4gICAgICAgICAgICAgICAgc2Nyb2xsYmFyV2lkdGggPSAkLmZhbmN5Ym94LnNjcm9sbGJhcldpZHRoLFxyXG4gICAgICAgICAgICAgICAgJHNjcm9sbERpdixcclxuICAgICAgICAgICAgICAgICRjb250YWluZXIsXHJcbiAgICAgICAgICAgICAgICBidXR0b25TdHI7XHJcblxyXG4gICAgICAgICAgICBzZWxmLnNjcm9sbFRvcCAgPSAkRC5zY3JvbGxUb3AoKTtcclxuICAgICAgICAgICAgc2VsZi5zY3JvbGxMZWZ0ID0gJEQuc2Nyb2xsTGVmdCgpO1xyXG5cclxuXHJcbiAgICAgICAgICAgIC8vIEhpZGUgc2Nyb2xsYmFyc1xyXG4gICAgICAgICAgICAvLyA9PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgICAgIGlmICggISQuZmFuY3lib3guZ2V0SW5zdGFuY2UoKSApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAkKCAnYm9keScgKS5hZGRDbGFzcyggJ2ZhbmN5Ym94LWFjdGl2ZScgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBpT1MgaGFja1xyXG4gICAgICAgICAgICAgICAgaWYgKCAvaVBhZHxpUGhvbmV8aVBvZC8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSAmJiAhd2luZG93Lk1TU3RyZWFtICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBpT1MgaGFzIHByb2JsZW1zIGZvciBpbnB1dCBlbGVtZW50cyBpbnNpZGUgZml4ZWQgY29udGFpbmVycyxcclxuICAgICAgICAgICAgICAgICAgICAvLyB0aGUgd29ya2Fyb3VuZCBpcyB0byBhcHBseSBgcG9zaXRpb246IGZpeGVkYCB0byBgPGJvZHk+YCBlbGVtZW50LFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHVuZm9ydHVuYXRlbHksIHRoaXMgbWFrZXMgaXQgbG9zZSB0aGUgc2Nyb2xsYmFycyBhbmQgZm9yY2VzIGFkZHJlc3MgYmFyIHRvIGFwcGVhci5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBmaXJzdEl0ZW0udHlwZSAhPT0gJ2ltYWdlJyApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJCggJ2JvZHknICkuY3NzKCAndG9wJywgJCggJ2JvZHknICkuc2Nyb2xsVG9wKCkgKiAtMSApLmFkZENsYXNzKCAnZmFuY3lib3gtaW9zZml4JyApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCAhJC5mYW5jeWJveC5pc01vYmlsZSAmJiBkb2N1bWVudC5ib2R5LnNjcm9sbEhlaWdodCA+IHdpbmRvdy5pbm5lckhlaWdodCApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBzY3JvbGxiYXJXaWR0aCA9PT0gdW5kZWZpbmVkICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2Nyb2xsRGl2ID0gJCgnPGRpdiBzdHlsZT1cIndpZHRoOjUwcHg7aGVpZ2h0OjUwcHg7b3ZlcmZsb3c6c2Nyb2xsO1wiIC8+JykuYXBwZW5kVG8oICdib2R5JyApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsYmFyV2lkdGggPSAkLmZhbmN5Ym94LnNjcm9sbGJhcldpZHRoID0gJHNjcm9sbERpdlswXS5vZmZzZXRXaWR0aCAtICRzY3JvbGxEaXZbMF0uY2xpZW50V2lkdGg7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2Nyb2xsRGl2LnJlbW92ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgJCggJ2hlYWQnICkuYXBwZW5kKCAnPHN0eWxlIGlkPVwiZmFuY3lib3gtc3R5bGUtbm9zY3JvbGxcIiB0eXBlPVwidGV4dC9jc3NcIj4uY29tcGVuc2F0ZS1mb3Itc2Nyb2xsYmFyIHsgbWFyZ2luLXJpZ2h0OiAnICsgc2Nyb2xsYmFyV2lkdGggKyAncHg7IH08L3N0eWxlPicgKTtcclxuICAgICAgICAgICAgICAgICAgICAkKCAnYm9keScgKS5hZGRDbGFzcyggJ2NvbXBlbnNhdGUtZm9yLXNjcm9sbGJhcicgKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgIC8vIEJ1aWxkIGh0bWwgbWFya3VwIGFuZCBzZXQgcmVmZXJlbmNlc1xyXG4gICAgICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgICAgIC8vIEJ1aWxkIGh0bWwgY29kZSBmb3IgYnV0dG9ucyBhbmQgaW5zZXJ0IGludG8gbWFpbiB0ZW1wbGF0ZVxyXG4gICAgICAgICAgICBidXR0b25TdHIgPSAnJztcclxuXHJcbiAgICAgICAgICAgICQuZWFjaCggZmlyc3RJdGVtT3B0cy5idXR0b25zLCBmdW5jdGlvbiggaW5kZXgsIHZhbHVlICkge1xyXG4gICAgICAgICAgICAgICAgYnV0dG9uU3RyICs9ICggZmlyc3RJdGVtT3B0cy5idG5UcGxbIHZhbHVlIF0gfHwgJycgKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvLyBDcmVhdGUgbWFya3VwIGZyb20gYmFzZSB0ZW1wbGF0ZSwgaXQgd2lsbCBiZSBpbml0aWFsbHkgaGlkZGVuIHRvXHJcbiAgICAgICAgICAgIC8vIGF2b2lkIHVubmVjZXNzYXJ5IHdvcmsgbGlrZSBwYWludGluZyB3aGlsZSBpbml0aWFsaXppbmcgaXMgbm90IGNvbXBsZXRlXHJcbiAgICAgICAgICAgICRjb250YWluZXIgPSAkKFxyXG4gICAgICAgICAgICAgICAgc2VsZi50cmFuc2xhdGUoIHNlbGYsXHJcbiAgICAgICAgICAgICAgICAgICAgZmlyc3RJdGVtT3B0cy5iYXNlVHBsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKCAnXFx7XFx7YnV0dG9uc1xcfVxcfScsIGJ1dHRvblN0ciApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKCAnXFx7XFx7YXJyb3dzXFx9XFx9JywgZmlyc3RJdGVtT3B0cy5idG5UcGwuYXJyb3dMZWZ0ICsgZmlyc3RJdGVtT3B0cy5idG5UcGwuYXJyb3dSaWdodCApXHJcbiAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgIC5hdHRyKCAnaWQnLCAnZmFuY3lib3gtY29udGFpbmVyLScgKyBzZWxmLmlkIClcclxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcyggJ2ZhbmN5Ym94LWlzLWhpZGRlbicgKVxyXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKCBmaXJzdEl0ZW1PcHRzLmJhc2VDbGFzcyApXHJcbiAgICAgICAgICAgICAgICAuZGF0YSggJ0ZhbmN5Qm94Jywgc2VsZiApXHJcbiAgICAgICAgICAgICAgICAuYXBwZW5kVG8oIGZpcnN0SXRlbU9wdHMucGFyZW50RWwgKTtcclxuXHJcbiAgICAgICAgICAgIC8vIENyZWF0ZSBvYmplY3QgaG9sZGluZyByZWZlcmVuY2VzIHRvIGpRdWVyeSB3cmFwcGVkIG5vZGVzXHJcbiAgICAgICAgICAgIHNlbGYuJHJlZnMgPSB7XHJcbiAgICAgICAgICAgICAgICBjb250YWluZXIgOiAkY29udGFpbmVyXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBbICdiZycsICdpbm5lcicsICdpbmZvYmFyJywgJ3Rvb2xiYXInLCAnc3RhZ2UnLCAnY2FwdGlvbicsICduYXZpZ2F0aW9uJyBdLmZvckVhY2goZnVuY3Rpb24oaXRlbSkge1xyXG4gICAgICAgICAgICAgICAgc2VsZi4kcmVmc1sgaXRlbSBdID0gJGNvbnRhaW5lci5maW5kKCAnLmZhbmN5Ym94LScgKyBpdGVtICk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgc2VsZi50cmlnZ2VyKCAnb25Jbml0JyApO1xyXG5cclxuICAgICAgICAgICAgLy8gRW5hYmxlIGV2ZW50cywgZGVhY3RpdmUgcHJldmlvdXMgaW5zdGFuY2VzXHJcbiAgICAgICAgICAgIHNlbGYuYWN0aXZhdGUoKTtcclxuXHJcbiAgICAgICAgICAgIC8vIEJ1aWxkIHNsaWRlcywgbG9hZCBhbmQgcmV2ZWFsIGNvbnRlbnRcclxuICAgICAgICAgICAgc2VsZi5qdW1wVG8oIHNlbGYuY3VyckluZGV4ICk7XHJcbiAgICAgICAgfSxcclxuXHJcblxyXG4gICAgICAgIC8vIFNpbXBsZSBpMThuIHN1cHBvcnQgLSByZXBsYWNlcyBvYmplY3Qga2V5cyBmb3VuZCBpbiB0ZW1wbGF0ZVxyXG4gICAgICAgIC8vIHdpdGggY29ycmVzcG9uZGluZyB2YWx1ZXNcclxuICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgdHJhbnNsYXRlIDogZnVuY3Rpb24oIG9iaiwgc3RyICkge1xyXG4gICAgICAgICAgICB2YXIgYXJyID0gb2JqLm9wdHMuaTE4blsgb2JqLm9wdHMubGFuZyBdO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHN0ci5yZXBsYWNlKC9cXHtcXHsoXFx3KylcXH1cXH0vZywgZnVuY3Rpb24obWF0Y2gsIG4pIHtcclxuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IGFycltuXTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1hdGNoO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLy8gQ3JlYXRlIGFycmF5IG9mIGdhbGx5IGl0ZW0gb2JqZWN0c1xyXG4gICAgICAgIC8vIENoZWNrIGlmIGVhY2ggb2JqZWN0IGhhcyB2YWxpZCB0eXBlIGFuZCBjb250ZW50XHJcbiAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgY3JlYXRlR3JvdXAgOiBmdW5jdGlvbiAoIGNvbnRlbnQgKSB7XHJcbiAgICAgICAgICAgIHZhciBzZWxmICA9IHRoaXM7XHJcbiAgICAgICAgICAgIHZhciBpdGVtcyA9ICQubWFrZUFycmF5KCBjb250ZW50ICk7XHJcblxyXG4gICAgICAgICAgICAkLmVhY2goaXRlbXMsIGZ1bmN0aW9uKCBpLCBpdGVtICkge1xyXG4gICAgICAgICAgICAgICAgdmFyIG9iaiAgPSB7fSxcclxuICAgICAgICAgICAgICAgICAgICBvcHRzID0ge30sXHJcbiAgICAgICAgICAgICAgICAgICAgJGl0ZW0sXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZSxcclxuICAgICAgICAgICAgICAgICAgICBmb3VuZCxcclxuICAgICAgICAgICAgICAgICAgICBzcmMsXHJcbiAgICAgICAgICAgICAgICAgICAgc3JjUGFydHM7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gU3RlcCAxIC0gTWFrZSBzdXJlIHdlIGhhdmUgYW4gb2JqZWN0XHJcbiAgICAgICAgICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoICQuaXNQbGFpbk9iamVjdCggaXRlbSApICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBXZSBwcm9iYWJseSBoYXZlIG1hbnVhbCB1c2FnZSBoZXJlLCBzb21ldGhpbmcgbGlrZVxyXG4gICAgICAgICAgICAgICAgICAgIC8vICQuZmFuY3lib3gub3BlbiggWyB7IHNyYyA6IFwiaW1hZ2UuanBnXCIsIHR5cGUgOiBcImltYWdlXCIgfSBdIClcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgb2JqICA9IGl0ZW07XHJcbiAgICAgICAgICAgICAgICAgICAgb3B0cyA9IGl0ZW0ub3B0cyB8fCBpdGVtO1xyXG5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoICQudHlwZSggaXRlbSApID09PSAnb2JqZWN0JyAmJiAkKCBpdGVtICkubGVuZ3RoICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBIZXJlIHdlIHByb2JhYmx5IGhhdmUgalF1ZXJ5IGNvbGxlY3Rpb24gcmV0dXJuZWQgYnkgc29tZSBzZWxlY3RvclxyXG4gICAgICAgICAgICAgICAgICAgICRpdGVtID0gJCggaXRlbSApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBvcHRzID0gJGl0ZW0uZGF0YSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIG9wdHMgPSAkLmV4dGVuZCgge30sIG9wdHMsIG9wdHMub3B0aW9ucyB8fCB7fSApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBIZXJlIHdlIHN0b3JlIGNsaWNrZWQgZWxlbWVudFxyXG4gICAgICAgICAgICAgICAgICAgIG9wdHMuJG9yaWcgPSAkaXRlbTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgb2JqLnNyYyA9IG9wdHMuc3JjIHx8ICRpdGVtLmF0dHIoICdocmVmJyApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBBc3N1bWUgdGhhdCBzaW1wbGUgc3ludGF4IGlzIHVzZWQsIGZvciBleGFtcGxlOlxyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgYCQuZmFuY3lib3gub3BlbiggJChcIiN0ZXN0XCIpLCB7fSApO2BcclxuICAgICAgICAgICAgICAgICAgICBpZiAoICFvYmoudHlwZSAmJiAhb2JqLnNyYyApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2JqLnR5cGUgPSAnaW5saW5lJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2JqLnNyYyAgPSBpdGVtO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBBc3N1bWUgd2UgaGF2ZSBhIHNpbXBsZSBodG1sIGNvZGUsIGZvciBleGFtcGxlOlxyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgJC5mYW5jeWJveC5vcGVuKCAnPGRpdj48aDE+SGkhPC9oMT48L2Rpdj4nICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIG9iaiA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZSA6ICdodG1sJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3JjICA6IGl0ZW0gKyAnJ1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIEVhY2ggZ2FsbGVyeSBvYmplY3QgaGFzIGZ1bGwgY29sbGVjdGlvbiBvZiBvcHRpb25zXHJcbiAgICAgICAgICAgICAgICBvYmoub3B0cyA9ICQuZXh0ZW5kKCB0cnVlLCB7fSwgc2VsZi5vcHRzLCBvcHRzICk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gRG8gbm90IG1lcmdlIGJ1dHRvbnMgYXJyYXlcclxuICAgICAgICAgICAgICAgIGlmICggJC5pc0FycmF5KCBvcHRzLmJ1dHRvbnMgKSApIHtcclxuICAgICAgICAgICAgICAgICAgICBvYmoub3B0cy5idXR0b25zID0gb3B0cy5idXR0b25zO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBTdGVwIDIgLSBNYWtlIHN1cmUgd2UgaGF2ZSBjb250ZW50IHR5cGUsIGlmIG5vdCAtIHRyeSB0byBndWVzc1xyXG4gICAgICAgICAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgICAgICAgICB0eXBlID0gb2JqLnR5cGUgfHwgb2JqLm9wdHMudHlwZTtcclxuICAgICAgICAgICAgICAgIHNyYyAgPSBvYmouc3JjIHx8ICcnO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICggIXR5cGUgJiYgc3JjICkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICggc3JjLm1hdGNoKC8oXmRhdGE6aW1hZ2VcXC9bYS16MC05K1xcLz1dKiwpfChcXC4oanAoZXxnfGVnKXxnaWZ8cG5nfGJtcHx3ZWJwfHN2Z3xpY28pKChcXD98IykuKik/JCkvaSkgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUgPSAnaW1hZ2UnO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBzcmMubWF0Y2goL1xcLihwZGYpKChcXD98IykuKik/JC9pKSApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZSA9ICdwZGYnO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBmb3VuZCA9IHNyYy5tYXRjaCgvXFwuKG1wNHxtb3Z8b2d2KSgoXFw/fCMpLiopPyQvaSkgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUgPSAndmlkZW8nO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAhb2JqLm9wdHMudmlkZW9Gb3JtYXQgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmoub3B0cy52aWRlb0Zvcm1hdCA9ICd2aWRlby8nICsgKCBmb3VuZFsxXSA9PT0gJ29ndicgPyAnb2dnJyA6IGZvdW5kWzFdICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICggc3JjLmNoYXJBdCgwKSA9PT0gJyMnICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlID0gJ2lubGluZSc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICggdHlwZSApIHtcclxuICAgICAgICAgICAgICAgICAgICBvYmoudHlwZSA9IHR5cGU7XHJcblxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLnRyaWdnZXIoICdvYmplY3ROZWVkc1R5cGUnLCBvYmogKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICAgICAgICAgLy8gU3RlcCAzIC0gU29tZSBhZGp1c3RtZW50c1xyXG4gICAgICAgICAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgICAgICAgICAgICAgIG9iai5pbmRleCA9IHNlbGYuZ3JvdXAubGVuZ3RoO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmICRvcmlnIGFuZCAkdGh1bWIgb2JqZWN0cyBleGlzdFxyXG4gICAgICAgICAgICAgICAgaWYgKCBvYmoub3B0cy4kb3JpZyAmJiAhb2JqLm9wdHMuJG9yaWcubGVuZ3RoICkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBvYmoub3B0cy4kb3JpZztcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoICFvYmoub3B0cy4kdGh1bWIgJiYgb2JqLm9wdHMuJG9yaWcgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb2JqLm9wdHMuJHRodW1iID0gb2JqLm9wdHMuJG9yaWcuZmluZCggJ2ltZzpmaXJzdCcgKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIG9iai5vcHRzLiR0aHVtYiAmJiAhb2JqLm9wdHMuJHRodW1iLmxlbmd0aCApIHtcclxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgb2JqLm9wdHMuJHRodW1iO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIFwiY2FwdGlvblwiIGlzIGEgXCJzcGVjaWFsXCIgb3B0aW9uLCBpdCBjYW4gYmUgdXNlZCB0byBjdXN0b21pemUgY2FwdGlvbiBwZXIgZ2FsbGVyeSBpdGVtIC4uXHJcbiAgICAgICAgICAgICAgICBpZiAoICQudHlwZSggb2JqLm9wdHMuY2FwdGlvbiApID09PSAnZnVuY3Rpb24nICkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9iai5vcHRzLmNhcHRpb24gPSBvYmoub3B0cy5jYXB0aW9uLmFwcGx5KCBpdGVtLCBbIHNlbGYsIG9iaiBdICk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCAkLnR5cGUoIHNlbGYub3B0cy5jYXB0aW9uICkgPT09ICdmdW5jdGlvbicgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb2JqLm9wdHMuY2FwdGlvbiA9IHNlbGYub3B0cy5jYXB0aW9uLmFwcGx5KCBpdGVtLCBbIHNlbGYsIG9iaiBdICk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHdlIGhhdmUgY2FwdGlvbiBhcyBhIHN0cmluZyBvciBqUXVlcnkgb2JqZWN0XHJcbiAgICAgICAgICAgICAgICBpZiAoICEoIG9iai5vcHRzLmNhcHRpb24gaW5zdGFuY2VvZiAkICkgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb2JqLm9wdHMuY2FwdGlvbiA9IG9iai5vcHRzLmNhcHRpb24gPT09IHVuZGVmaW5lZCA/ICcnIDogb2JqLm9wdHMuY2FwdGlvbiArICcnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHVybCBjb250YWlucyBcImZpbHRlclwiIHVzZWQgdG8gZmlsdGVyIHRoZSBjb250ZW50XHJcbiAgICAgICAgICAgICAgICAvLyBFeGFtcGxlOiBcImFqYXguaHRtbCAjc29tZXRoaW5nXCJcclxuICAgICAgICAgICAgICAgIGlmICggdHlwZSA9PT0gJ2FqYXgnICkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNyY1BhcnRzID0gc3JjLnNwbGl0KC9cXHMrLywgMik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICggc3JjUGFydHMubGVuZ3RoID4gMSApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2JqLnNyYyA9IHNyY1BhcnRzLnNoaWZ0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvYmoub3B0cy5maWx0ZXIgPSBzcmNQYXJ0cy5zaGlmdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIG9iai5vcHRzLnNtYWxsQnRuID09ICdhdXRvJyApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCAkLmluQXJyYXkoIHR5cGUsIFsnaHRtbCcsICdpbmxpbmUnLCAnYWpheCddICkgPiAtMSApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2JqLm9wdHMudG9vbGJhciAgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2JqLm9wdHMuc21hbGxCdG4gPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvYmoub3B0cy5zbWFsbEJ0biA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlIHR5cGUgaXMgXCJwZGZcIiwgdGhlbiBzaW1wbHkgbG9hZCBmaWxlIGludG8gaWZyYW1lXHJcbiAgICAgICAgICAgICAgICBpZiAoIHR5cGUgPT09ICdwZGYnICkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9iai50eXBlID0gJ2lmcmFtZSc7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIG9iai5vcHRzLmlmcmFtZS5wcmVsb2FkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gSGlkZSBhbGwgYnV0dG9ucyBhbmQgZGlzYWJsZSBpbnRlcmFjdGl2aXR5IGZvciBtb2RhbCBpdGVtc1xyXG4gICAgICAgICAgICAgICAgaWYgKCBvYmoub3B0cy5tb2RhbCApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgb2JqLm9wdHMgPSAkLmV4dGVuZCh0cnVlLCBvYmoub3B0cywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBSZW1vdmUgYnV0dG9uc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmZvYmFyIDogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9vbGJhciA6IDAsXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzbWFsbEJ0biA6IDAsXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBEaXNhYmxlIGtleWJvYXJkIG5hdmlnYXRpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAga2V5Ym9hcmQgOiAwLFxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRGlzYWJsZSBzb21lIG1vZHVsZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVTaG93ICA6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bGxTY3JlZW4gOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHVtYnMgICAgIDogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG91Y2ggICAgICA6IDAsXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBEaXNhYmxlIGNsaWNrIGV2ZW50IGhhbmRsZXJzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrQ29udGVudCAgICA6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGlja1NsaWRlICAgICAgOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2tPdXRzaWRlICAgIDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRibGNsaWNrQ29udGVudCA6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYmxjbGlja1NsaWRlICAgOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGJsY2xpY2tPdXRzaWRlIDogZmFsc2VcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gU3RlcCA0IC0gQWRkIHByb2Nlc3NlZCBvYmplY3QgdG8gZ3JvdXBcclxuICAgICAgICAgICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgICAgICAgICAgc2VsZi5ncm91cC5wdXNoKCBvYmogKTtcclxuXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICB9LFxyXG5cclxuXHJcbiAgICAgICAgLy8gQXR0YWNoIGFuIGV2ZW50IGhhbmRsZXIgZnVuY3Rpb25zIGZvcjpcclxuICAgICAgICAvLyAgIC0gbmF2aWdhdGlvbiBidXR0b25zXHJcbiAgICAgICAgLy8gICAtIGJyb3dzZXIgc2Nyb2xsaW5nLCByZXNpemluZztcclxuICAgICAgICAvLyAgIC0gZm9jdXNpbmdcclxuICAgICAgICAvLyAgIC0ga2V5Ym9hcmRcclxuICAgICAgICAvLyAgIC0gZGV0ZWN0IGlkbGVcclxuICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgICAgICBhZGRFdmVudHMgOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgc2VsZi5yZW1vdmVFdmVudHMoKTtcclxuXHJcbiAgICAgICAgICAgIC8vIE1ha2UgbmF2aWdhdGlvbiBlbGVtZW50cyBjbGlja2FibGVcclxuICAgICAgICAgICAgc2VsZi4kcmVmcy5jb250YWluZXIub24oJ2NsaWNrLmZiLWNsb3NlJywgJ1tkYXRhLWZhbmN5Ym94LWNsb3NlXScsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgc2VsZi5jbG9zZSggZSApO1xyXG5cclxuICAgICAgICAgICAgfSkub24oICdjbGljay5mYi1wcmV2IHRvdWNoZW5kLmZiLXByZXYnLCAnW2RhdGEtZmFuY3lib3gtcHJldl0nLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgICAgICAgIHNlbGYucHJldmlvdXMoKTtcclxuXHJcbiAgICAgICAgICAgIH0pLm9uKCAnY2xpY2suZmItbmV4dCB0b3VjaGVuZC5mYi1uZXh0JywgJ1tkYXRhLWZhbmN5Ym94LW5leHRdJywgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBzZWxmLm5leHQoKTtcclxuXHJcbiAgICAgICAgICAgIH0pLm9uKCAnY2xpY2suZmInLCAnW2RhdGEtZmFuY3lib3gtem9vbV0nLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBDbGljayBoYW5kbGVyIGZvciB6b29tIGJ1dHRvblxyXG4gICAgICAgICAgICAgICAgc2VsZlsgc2VsZi5pc1NjYWxlZERvd24oKSA/ICdzY2FsZVRvQWN0dWFsJyA6ICdzY2FsZVRvRml0JyBdKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuXHJcbiAgICAgICAgICAgIC8vIEhhbmRsZSBwYWdlIHNjcm9sbGluZyBhbmQgYnJvd3NlciByZXNpemluZ1xyXG4gICAgICAgICAgICAkVy5vbignb3JpZW50YXRpb25jaGFuZ2UuZmIgcmVzaXplLmZiJywgZnVuY3Rpb24oZSkge1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICggZSAmJiBlLm9yaWdpbmFsRXZlbnQgJiYgZS5vcmlnaW5hbEV2ZW50LnR5cGUgPT09IFwicmVzaXplXCIgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3RBRnJhbWUoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYudXBkYXRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi4kcmVmcy5zdGFnZS5oaWRlKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuJHJlZnMuc3RhZ2Uuc2hvdygpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi51cGRhdGUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9LCA2MDApO1xyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgLy8gVHJhcCBrZXlib2FyZCBmb2N1cyBpbnNpZGUgb2YgdGhlIG1vZGFsLCBzbyB0aGUgdXNlciBkb2VzIG5vdCBhY2NpZGVudGFsbHkgdGFiIG91dHNpZGUgb2YgdGhlIG1vZGFsXHJcbiAgICAgICAgICAgIC8vIChhLmsuYS4gXCJlc2NhcGluZyB0aGUgbW9kYWxcIilcclxuICAgICAgICAgICAgJEQub24oJ2ZvY3VzaW4uZmInLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaW5zdGFuY2UgPSAkLmZhbmN5Ym94ID8gJC5mYW5jeWJveC5nZXRJbnN0YW5jZSgpIDogbnVsbDtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIGluc3RhbmNlLmlzQ2xvc2luZyB8fCAhaW5zdGFuY2UuY3VycmVudCB8fCAhaW5zdGFuY2UuY3VycmVudC5vcHRzLnRyYXBGb2N1cyB8fCAkKCBlLnRhcmdldCApLmhhc0NsYXNzKCAnZmFuY3lib3gtY29udGFpbmVyJyApIHx8ICQoIGUudGFyZ2V0ICkuaXMoIGRvY3VtZW50ICkgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICggaW5zdGFuY2UgJiYgJCggZS50YXJnZXQgKS5jc3MoICdwb3NpdGlvbicgKSAhPT0gJ2ZpeGVkJyAmJiAhaW5zdGFuY2UuJHJlZnMuY29udGFpbmVyLmhhcyggZS50YXJnZXQgKS5sZW5ndGggKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2UuZm9jdXMoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gU29tZXRpbWVzIHBhZ2UgZ2V0cyBzY3JvbGxlZCwgc2V0IGl0IGJhY2tcclxuICAgICAgICAgICAgICAgICAgICAkVy5zY3JvbGxUb3AoIHNlbGYuc2Nyb2xsVG9wICkuc2Nyb2xsTGVmdCggc2VsZi5zY3JvbGxMZWZ0ICk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuXHJcbiAgICAgICAgICAgIC8vIEVuYWJsZSBrZXlib2FyZCBuYXZpZ2F0aW9uXHJcbiAgICAgICAgICAgICRELm9uKCdrZXlkb3duLmZiJywgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50ID0gc2VsZi5jdXJyZW50LFxyXG4gICAgICAgICAgICAgICAgICAgIGtleWNvZGUgPSBlLmtleUNvZGUgfHwgZS53aGljaDtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoICFjdXJyZW50IHx8ICFjdXJyZW50Lm9wdHMua2V5Ym9hcmQgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICggJChlLnRhcmdldCkuaXMoJ2lucHV0JykgfHwgJChlLnRhcmdldCkuaXMoJ3RleHRhcmVhJykgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIEJhY2tzcGFjZSBhbmQgRXNjIGtleXNcclxuICAgICAgICAgICAgICAgIGlmICgga2V5Y29kZSA9PT0gOCB8fCBrZXljb2RlID09PSAyNyApIHtcclxuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuY2xvc2UoIGUgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIExlZnQgYXJyb3cgYW5kIFVwIGFycm93XHJcbiAgICAgICAgICAgICAgICBpZiAoIGtleWNvZGUgPT09IDM3IHx8IGtleWNvZGUgPT09IDM4ICkge1xyXG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5wcmV2aW91cygpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gUmlnaCBhcnJvdyBhbmQgRG93biBhcnJvd1xyXG4gICAgICAgICAgICAgICAgaWYgKCBrZXljb2RlID09PSAzOSB8fCBrZXljb2RlID09PSA0MCApIHtcclxuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYubmV4dCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgc2VsZi50cmlnZ2VyKCdhZnRlcktleWRvd24nLCBlLCBrZXljb2RlKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG5cclxuICAgICAgICAgICAgLy8gSGlkZSBjb250cm9scyBhZnRlciBzb21lIGluYWN0aXZpdHkgcGVyaW9kXHJcbiAgICAgICAgICAgIGlmICggc2VsZi5ncm91cFsgc2VsZi5jdXJySW5kZXggXS5vcHRzLmlkbGVUaW1lICkge1xyXG4gICAgICAgICAgICAgICAgc2VsZi5pZGxlU2Vjb25kc0NvdW50ZXIgPSAwO1xyXG5cclxuICAgICAgICAgICAgICAgICRELm9uKCdtb3VzZW1vdmUuZmItaWRsZSBtb3VzZWxlYXZlLmZiLWlkbGUgbW91c2Vkb3duLmZiLWlkbGUgdG91Y2hzdGFydC5mYi1pZGxlIHRvdWNobW92ZS5mYi1pZGxlIHNjcm9sbC5mYi1pZGxlIGtleWRvd24uZmItaWRsZScsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLmlkbGVTZWNvbmRzQ291bnRlciA9IDA7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICggc2VsZi5pc0lkbGUgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2hvd0NvbnRyb2xzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBzZWxmLmlzSWRsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgc2VsZi5pZGxlSW50ZXJ2YWwgPSB3aW5kb3cuc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5pZGxlU2Vjb25kc0NvdW50ZXIrKztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBzZWxmLmlkbGVTZWNvbmRzQ291bnRlciA+PSBzZWxmLmdyb3VwWyBzZWxmLmN1cnJJbmRleCBdLm9wdHMuaWRsZVRpbWUgJiYgIXNlbGYuaXNEcmFnZ2luZyApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5pc0lkbGUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmlkbGVTZWNvbmRzQ291bnRlciA9IDA7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmhpZGVDb250cm9scygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9LCAxMDAwKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9LFxyXG5cclxuXHJcbiAgICAgICAgLy8gUmVtb3ZlIGV2ZW50cyBhZGRlZCBieSB0aGUgY29yZVxyXG4gICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgcmVtb3ZlRXZlbnRzIDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICAgICAgICAgICRXLm9mZiggJ29yaWVudGF0aW9uY2hhbmdlLmZiIHJlc2l6ZS5mYicgKTtcclxuICAgICAgICAgICAgJEQub2ZmKCAnZm9jdXNpbi5mYiBrZXlkb3duLmZiIC5mYi1pZGxlJyApO1xyXG5cclxuICAgICAgICAgICAgdGhpcy4kcmVmcy5jb250YWluZXIub2ZmKCAnLmZiLWNsb3NlIC5mYi1wcmV2IC5mYi1uZXh0JyApO1xyXG5cclxuICAgICAgICAgICAgaWYgKCBzZWxmLmlkbGVJbnRlcnZhbCApIHtcclxuICAgICAgICAgICAgICAgIHdpbmRvdy5jbGVhckludGVydmFsKCBzZWxmLmlkbGVJbnRlcnZhbCApO1xyXG5cclxuICAgICAgICAgICAgICAgIHNlbGYuaWRsZUludGVydmFsID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG5cclxuICAgICAgICAvLyBDaGFuZ2UgdG8gcHJldmlvdXMgZ2FsbGVyeSBpdGVtXHJcbiAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgICAgICBwcmV2aW91cyA6IGZ1bmN0aW9uKCBkdXJhdGlvbiApIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuanVtcFRvKCB0aGlzLmN1cnJQb3MgLSAxLCBkdXJhdGlvbiApO1xyXG4gICAgICAgIH0sXHJcblxyXG5cclxuICAgICAgICAvLyBDaGFuZ2UgdG8gbmV4dCBnYWxsZXJ5IGl0ZW1cclxuICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgbmV4dCA6IGZ1bmN0aW9uKCBkdXJhdGlvbiApIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuanVtcFRvKCB0aGlzLmN1cnJQb3MgKyAxLCBkdXJhdGlvbiApO1xyXG4gICAgICAgIH0sXHJcblxyXG5cclxuICAgICAgICAvLyBTd2l0Y2ggdG8gc2VsZWN0ZWQgZ2FsbGVyeSBpdGVtXHJcbiAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgICAgICBqdW1wVG8gOiBmdW5jdGlvbiAoIHBvcywgZHVyYXRpb24sIHNsaWRlICkge1xyXG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXMsXHJcbiAgICAgICAgICAgICAgICBmaXJzdFJ1bixcclxuICAgICAgICAgICAgICAgIGxvb3AsXHJcbiAgICAgICAgICAgICAgICBjdXJyZW50LFxyXG4gICAgICAgICAgICAgICAgcHJldmlvdXMsXHJcbiAgICAgICAgICAgICAgICBjYW52YXNXaWR0aCxcclxuICAgICAgICAgICAgICAgIGN1cnJlbnRQb3MsXHJcbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uUHJvcHM7XHJcblxyXG4gICAgICAgICAgICB2YXIgZ3JvdXBMZW4gPSBzZWxmLmdyb3VwLmxlbmd0aDtcclxuXHJcbiAgICAgICAgICAgIGlmICggc2VsZi5pc0RyYWdnaW5nIHx8IHNlbGYuaXNDbG9zaW5nIHx8ICggc2VsZi5pc0FuaW1hdGluZyAmJiBzZWxmLmZpcnN0UnVuICkgKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHBvcyAgPSBwYXJzZUludCggcG9zLCAxMCApO1xyXG4gICAgICAgICAgICBsb29wID0gc2VsZi5jdXJyZW50ID8gc2VsZi5jdXJyZW50Lm9wdHMubG9vcCA6IHNlbGYub3B0cy5sb29wO1xyXG5cclxuICAgICAgICAgICAgaWYgKCAhbG9vcCAmJiAoIHBvcyA8IDAgfHwgcG9zID49IGdyb3VwTGVuICkgKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZpcnN0UnVuID0gc2VsZi5maXJzdFJ1biA9ICggc2VsZi5maXJzdFJ1biA9PT0gbnVsbCApO1xyXG5cclxuICAgICAgICAgICAgaWYgKCBncm91cExlbiA8IDIgJiYgIWZpcnN0UnVuICYmICEhc2VsZi5pc0RyYWdnaW5nICkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBwcmV2aW91cyA9IHNlbGYuY3VycmVudDtcclxuXHJcbiAgICAgICAgICAgIHNlbGYucHJldkluZGV4ID0gc2VsZi5jdXJySW5kZXg7XHJcbiAgICAgICAgICAgIHNlbGYucHJldlBvcyAgID0gc2VsZi5jdXJyUG9zO1xyXG5cclxuICAgICAgICAgICAgLy8gQ3JlYXRlIHNsaWRlc1xyXG4gICAgICAgICAgICBjdXJyZW50ID0gc2VsZi5jcmVhdGVTbGlkZSggcG9zICk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIGdyb3VwTGVuID4gMSApIHtcclxuICAgICAgICAgICAgICAgIGlmICggbG9vcCB8fCBjdXJyZW50LmluZGV4ID4gMCApIHtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLmNyZWF0ZVNsaWRlKCBwb3MgLSAxICk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCBsb29wIHx8IGN1cnJlbnQuaW5kZXggPCBncm91cExlbiAtIDEgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5jcmVhdGVTbGlkZSggcG9zICsgMSApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzZWxmLmN1cnJlbnQgICA9IGN1cnJlbnQ7XHJcbiAgICAgICAgICAgIHNlbGYuY3VyckluZGV4ID0gY3VycmVudC5pbmRleDtcclxuICAgICAgICAgICAgc2VsZi5jdXJyUG9zICAgPSBjdXJyZW50LnBvcztcclxuXHJcbiAgICAgICAgICAgIHNlbGYudHJpZ2dlciggJ2JlZm9yZVNob3cnLCBmaXJzdFJ1biApO1xyXG5cclxuICAgICAgICAgICAgc2VsZi51cGRhdGVDb250cm9scygpO1xyXG5cclxuICAgICAgICAgICAgY3VycmVudFBvcyA9ICQuZmFuY3lib3guZ2V0VHJhbnNsYXRlKCBjdXJyZW50LiRzbGlkZSApO1xyXG5cclxuICAgICAgICAgICAgY3VycmVudC5pc01vdmVkICAgICAgICA9ICggY3VycmVudFBvcy5sZWZ0ICE9PSAwIHx8IGN1cnJlbnRQb3MudG9wICE9PSAwICkgJiYgIWN1cnJlbnQuJHNsaWRlLmhhc0NsYXNzKCAnZmFuY3lib3gtYW5pbWF0ZWQnICk7XHJcbiAgICAgICAgICAgIGN1cnJlbnQuZm9yY2VkRHVyYXRpb24gPSB1bmRlZmluZWQ7XHJcblxyXG4gICAgICAgICAgICBpZiAoICQuaXNOdW1lcmljKCBkdXJhdGlvbiApICkge1xyXG4gICAgICAgICAgICAgICAgY3VycmVudC5mb3JjZWREdXJhdGlvbiA9IGR1cmF0aW9uO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZHVyYXRpb24gPSBjdXJyZW50Lm9wdHNbIGZpcnN0UnVuID8gJ2FuaW1hdGlvbkR1cmF0aW9uJyA6ICd0cmFuc2l0aW9uRHVyYXRpb24nIF07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGR1cmF0aW9uID0gcGFyc2VJbnQoIGR1cmF0aW9uLCAxMCApO1xyXG5cclxuICAgICAgICAgICAgLy8gRnJlc2ggc3RhcnQgLSByZXZlYWwgY29udGFpbmVyLCBjdXJyZW50IHNsaWRlIGFuZCBzdGFydCBsb2FkaW5nIGNvbnRlbnRcclxuICAgICAgICAgICAgaWYgKCBmaXJzdFJ1biApIHtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIGN1cnJlbnQub3B0cy5hbmltYXRpb25FZmZlY3QgJiYgZHVyYXRpb24gKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi4kcmVmcy5jb250YWluZXIuY3NzKCAndHJhbnNpdGlvbi1kdXJhdGlvbicsIGR1cmF0aW9uICsgJ21zJyApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHNlbGYuJHJlZnMuY29udGFpbmVyLnJlbW92ZUNsYXNzKCAnZmFuY3lib3gtaXMtaGlkZGVuJyApO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvcmNlUmVkcmF3KCBzZWxmLiRyZWZzLmNvbnRhaW5lciApO1xyXG5cclxuICAgICAgICAgICAgICAgIHNlbGYuJHJlZnMuY29udGFpbmVyLmFkZENsYXNzKCAnZmFuY3lib3gtaXMtb3BlbicgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYWtlIGZpcnN0IHNsaWRlIHZpc2libGUgKHRvIGRpc3BsYXkgbG9hZGluZyBpY29uLCBpZiBuZWVkZWQpXHJcbiAgICAgICAgICAgICAgICBjdXJyZW50LiRzbGlkZS5hZGRDbGFzcyggJ2ZhbmN5Ym94LXNsaWRlLS1jdXJyZW50JyApO1xyXG5cclxuICAgICAgICAgICAgICAgIHNlbGYubG9hZFNsaWRlKCBjdXJyZW50ICk7XHJcblxyXG4gICAgICAgICAgICAgICAgc2VsZi5wcmVsb2FkKCAnaW1hZ2UnICk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBDbGVhbiB1cFxyXG4gICAgICAgICAgICAkLmVhY2goc2VsZi5zbGlkZXMsIGZ1bmN0aW9uKCBpbmRleCwgc2xpZGUgKSB7XHJcbiAgICAgICAgICAgICAgICAkLmZhbmN5Ym94LnN0b3AoIHNsaWRlLiRzbGlkZSApO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vIE1ha2UgY3VycmVudCB0aGF0IHNsaWRlIGlzIHZpc2libGUgZXZlbiBpZiBjb250ZW50IGlzIHN0aWxsIGxvYWRpbmdcclxuICAgICAgICAgICAgY3VycmVudC4kc2xpZGUucmVtb3ZlQ2xhc3MoICdmYW5jeWJveC1zbGlkZS0tbmV4dCBmYW5jeWJveC1zbGlkZS0tcHJldmlvdXMnICkuYWRkQ2xhc3MoICdmYW5jeWJveC1zbGlkZS0tY3VycmVudCcgKTtcclxuXHJcbiAgICAgICAgICAgIC8vIElmIHNsaWRlcyBoYXZlIGJlZW4gZHJhZ2dlZCwgYW5pbWF0ZSB0aGVtIHRvIGNvcnJlY3QgcG9zaXRpb25cclxuICAgICAgICAgICAgaWYgKCBjdXJyZW50LmlzTW92ZWQgKSB7XHJcbiAgICAgICAgICAgICAgICBjYW52YXNXaWR0aCA9IE1hdGgucm91bmQoIGN1cnJlbnQuJHNsaWRlLndpZHRoKCkgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAkLmVhY2goc2VsZi5zbGlkZXMsIGZ1bmN0aW9uKCBpbmRleCwgc2xpZGUgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBvcyA9IHNsaWRlLnBvcyAtIGN1cnJlbnQucG9zO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAkLmZhbmN5Ym94LmFuaW1hdGUoIHNsaWRlLiRzbGlkZSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3AgIDogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGVmdCA6ICggcG9zICogY2FudmFzV2lkdGggKSArICggcG9zICogc2xpZGUub3B0cy5ndXR0ZXIgKVxyXG4gICAgICAgICAgICAgICAgICAgIH0sIGR1cmF0aW9uLCBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlLiRzbGlkZS5yZW1vdmVBdHRyKCdzdHlsZScpLnJlbW92ZUNsYXNzKCAnZmFuY3lib3gtc2xpZGUtLW5leHQgZmFuY3lib3gtc2xpZGUtLXByZXZpb3VzJyApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBzbGlkZS5wb3MgPT09IHNlbGYuY3VyclBvcyApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQuaXNNb3ZlZCA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuY29tcGxldGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgc2VsZi4kcmVmcy5zdGFnZS5jaGlsZHJlbigpLnJlbW92ZUF0dHIoICdzdHlsZScgKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gU3RhcnQgdHJhbnNpdGlvbiB0aGF0IHJldmVhbHMgY3VycmVudCBjb250ZW50XHJcbiAgICAgICAgICAgIC8vIG9yIHdhaXQgd2hlbiBpdCB3aWxsIGJlIGxvYWRlZFxyXG5cclxuICAgICAgICAgICAgaWYgKCBjdXJyZW50LmlzTG9hZGVkICkge1xyXG4gICAgICAgICAgICAgICAgc2VsZi5yZXZlYWxDb250ZW50KCBjdXJyZW50ICk7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgc2VsZi5sb2FkU2xpZGUoIGN1cnJlbnQgKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc2VsZi5wcmVsb2FkKCAnaW1hZ2UnICk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIHByZXZpb3VzLnBvcyA9PT0gY3VycmVudC5wb3MgKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIEhhbmRsZSBwcmV2aW91cyBzbGlkZVxyXG4gICAgICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgICAgIHRyYW5zaXRpb25Qcm9wcyA9ICdmYW5jeWJveC1zbGlkZS0tJyArICggcHJldmlvdXMucG9zID4gY3VycmVudC5wb3MgPyAnbmV4dCcgOiAncHJldmlvdXMnICk7XHJcblxyXG4gICAgICAgICAgICBwcmV2aW91cy4kc2xpZGUucmVtb3ZlQ2xhc3MoICdmYW5jeWJveC1zbGlkZS0tY29tcGxldGUgZmFuY3lib3gtc2xpZGUtLWN1cnJlbnQgZmFuY3lib3gtc2xpZGUtLW5leHQgZmFuY3lib3gtc2xpZGUtLXByZXZpb3VzJyApO1xyXG5cclxuICAgICAgICAgICAgcHJldmlvdXMuaXNDb21wbGV0ZSA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgaWYgKCAhZHVyYXRpb24gfHwgKCAhY3VycmVudC5pc01vdmVkICYmICFjdXJyZW50Lm9wdHMudHJhbnNpdGlvbkVmZmVjdCApICkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIGN1cnJlbnQuaXNNb3ZlZCApIHtcclxuICAgICAgICAgICAgICAgIHByZXZpb3VzLiRzbGlkZS5hZGRDbGFzcyggdHJhbnNpdGlvblByb3BzICk7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgIHRyYW5zaXRpb25Qcm9wcyA9ICdmYW5jeWJveC1hbmltYXRlZCAnICsgdHJhbnNpdGlvblByb3BzICsgJyBmYW5jeWJveC1meC0nICsgY3VycmVudC5vcHRzLnRyYW5zaXRpb25FZmZlY3Q7XHJcblxyXG4gICAgICAgICAgICAgICAgJC5mYW5jeWJveC5hbmltYXRlKCBwcmV2aW91cy4kc2xpZGUsIHRyYW5zaXRpb25Qcm9wcywgZHVyYXRpb24sIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHByZXZpb3VzLiRzbGlkZS5yZW1vdmVDbGFzcyggdHJhbnNpdGlvblByb3BzICkucmVtb3ZlQXR0ciggJ3N0eWxlJyApO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0sXHJcblxyXG5cclxuICAgICAgICAvLyBDcmVhdGUgbmV3IFwic2xpZGVcIiBlbGVtZW50XHJcbiAgICAgICAgLy8gVGhlc2UgYXJlIGdhbGxlcnkgaXRlbXMgIHRoYXQgYXJlIGFjdHVhbGx5IGFkZGVkIHRvIERPTVxyXG4gICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgY3JlYXRlU2xpZGUgOiBmdW5jdGlvbiggcG9zICkge1xyXG5cclxuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgICAgICB2YXIgJHNsaWRlO1xyXG4gICAgICAgICAgICB2YXIgaW5kZXg7XHJcblxyXG4gICAgICAgICAgICBpbmRleCA9IHBvcyAlIHNlbGYuZ3JvdXAubGVuZ3RoO1xyXG4gICAgICAgICAgICBpbmRleCA9IGluZGV4IDwgMCA/IHNlbGYuZ3JvdXAubGVuZ3RoICsgaW5kZXggOiBpbmRleDtcclxuXHJcbiAgICAgICAgICAgIGlmICggIXNlbGYuc2xpZGVzWyBwb3MgXSAmJiBzZWxmLmdyb3VwWyBpbmRleCBdICkge1xyXG4gICAgICAgICAgICAgICAgJHNsaWRlID0gJCgnPGRpdiBjbGFzcz1cImZhbmN5Ym94LXNsaWRlXCI+PC9kaXY+JykuYXBwZW5kVG8oIHNlbGYuJHJlZnMuc3RhZ2UgKTtcclxuXHJcbiAgICAgICAgICAgICAgICBzZWxmLnNsaWRlc1sgcG9zIF0gPSAkLmV4dGVuZCggdHJ1ZSwge30sIHNlbGYuZ3JvdXBbIGluZGV4IF0sIHtcclxuICAgICAgICAgICAgICAgICAgICBwb3MgICAgICA6IHBvcyxcclxuICAgICAgICAgICAgICAgICAgICAkc2xpZGUgICA6ICRzbGlkZSxcclxuICAgICAgICAgICAgICAgICAgICBpc0xvYWRlZCA6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgc2VsZi51cGRhdGVTbGlkZSggc2VsZi5zbGlkZXNbIHBvcyBdICk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBzZWxmLnNsaWRlc1sgcG9zIF07XHJcbiAgICAgICAgfSxcclxuXHJcblxyXG4gICAgICAgIC8vIFNjYWxlIGltYWdlIHRvIHRoZSBhY3R1YWwgc2l6ZSBvZiB0aGUgaW1hZ2VcclxuICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgIHNjYWxlVG9BY3R1YWwgOiBmdW5jdGlvbiggeCwgeSwgZHVyYXRpb24gKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICB2YXIgY3VycmVudCA9IHNlbGYuY3VycmVudDtcclxuICAgICAgICAgICAgdmFyICR3aGF0ICAgPSBjdXJyZW50LiRjb250ZW50O1xyXG5cclxuICAgICAgICAgICAgdmFyIGltZ1BvcywgcG9zWCwgcG9zWSwgc2NhbGVYLCBzY2FsZVk7XHJcblxyXG4gICAgICAgICAgICB2YXIgY2FudmFzV2lkdGggID0gcGFyc2VJbnQoIGN1cnJlbnQuJHNsaWRlLndpZHRoKCksIDEwICk7XHJcbiAgICAgICAgICAgIHZhciBjYW52YXNIZWlnaHQgPSBwYXJzZUludCggY3VycmVudC4kc2xpZGUuaGVpZ2h0KCksIDEwICk7XHJcblxyXG4gICAgICAgICAgICB2YXIgbmV3SW1nV2lkdGggID0gY3VycmVudC53aWR0aDtcclxuICAgICAgICAgICAgdmFyIG5ld0ltZ0hlaWdodCA9IGN1cnJlbnQuaGVpZ2h0O1xyXG5cclxuICAgICAgICAgICAgaWYgKCAhKCBjdXJyZW50LnR5cGUgPT0gJ2ltYWdlJyAmJiAhY3VycmVudC5oYXNFcnJvcikgfHwgISR3aGF0IHx8IHNlbGYuaXNBbmltYXRpbmcgKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICQuZmFuY3lib3guc3RvcCggJHdoYXQgKTtcclxuXHJcbiAgICAgICAgICAgIHNlbGYuaXNBbmltYXRpbmcgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgeCA9IHggPT09IHVuZGVmaW5lZCA/IGNhbnZhc1dpZHRoICAqIDAuNSAgOiB4O1xyXG4gICAgICAgICAgICB5ID0geSA9PT0gdW5kZWZpbmVkID8gY2FudmFzSGVpZ2h0ICogMC41ICA6IHk7XHJcblxyXG4gICAgICAgICAgICBpbWdQb3MgPSAkLmZhbmN5Ym94LmdldFRyYW5zbGF0ZSggJHdoYXQgKTtcclxuXHJcbiAgICAgICAgICAgIHNjYWxlWCAgPSBuZXdJbWdXaWR0aCAgLyBpbWdQb3Mud2lkdGg7XHJcbiAgICAgICAgICAgIHNjYWxlWSAgPSBuZXdJbWdIZWlnaHQgLyBpbWdQb3MuaGVpZ2h0O1xyXG5cclxuICAgICAgICAgICAgLy8gR2V0IGNlbnRlciBwb3NpdGlvbiBmb3Igb3JpZ2luYWwgaW1hZ2VcclxuICAgICAgICAgICAgcG9zWCA9ICggY2FudmFzV2lkdGggKiAwLjUgIC0gbmV3SW1nV2lkdGggKiAwLjUgKTtcclxuICAgICAgICAgICAgcG9zWSA9ICggY2FudmFzSGVpZ2h0ICogMC41IC0gbmV3SW1nSGVpZ2h0ICogMC41ICk7XHJcblxyXG4gICAgICAgICAgICAvLyBNYWtlIHN1cmUgaW1hZ2UgZG9lcyBub3QgbW92ZSBhd2F5IGZyb20gZWRnZXNcclxuICAgICAgICAgICAgaWYgKCBuZXdJbWdXaWR0aCA+IGNhbnZhc1dpZHRoICkge1xyXG4gICAgICAgICAgICAgICAgcG9zWCA9IGltZ1Bvcy5sZWZ0ICogc2NhbGVYIC0gKCAoIHggKiBzY2FsZVggKSAtIHggKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIHBvc1ggPiAwICkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBvc1ggPSAwO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICggcG9zWCA8ICBjYW52YXNXaWR0aCAtIG5ld0ltZ1dpZHRoICkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBvc1ggPSBjYW52YXNXaWR0aCAtIG5ld0ltZ1dpZHRoO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIG5ld0ltZ0hlaWdodCA+IGNhbnZhc0hlaWdodCkge1xyXG4gICAgICAgICAgICAgICAgcG9zWSA9IGltZ1Bvcy50b3AgICogc2NhbGVZIC0gKCAoIHkgKiBzY2FsZVkgKSAtIHkgKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIHBvc1kgPiAwICkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBvc1kgPSAwO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICggcG9zWSA8ICBjYW52YXNIZWlnaHQgLSBuZXdJbWdIZWlnaHQgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcG9zWSA9IGNhbnZhc0hlaWdodCAtIG5ld0ltZ0hlaWdodDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc2VsZi51cGRhdGVDdXJzb3IoIG5ld0ltZ1dpZHRoLCBuZXdJbWdIZWlnaHQgKTtcclxuXHJcbiAgICAgICAgICAgICQuZmFuY3lib3guYW5pbWF0ZSggJHdoYXQsIHtcclxuICAgICAgICAgICAgICAgIHRvcCAgICA6IHBvc1ksXHJcbiAgICAgICAgICAgICAgICBsZWZ0ICAgOiBwb3NYLFxyXG4gICAgICAgICAgICAgICAgc2NhbGVYIDogc2NhbGVYLFxyXG4gICAgICAgICAgICAgICAgc2NhbGVZIDogc2NhbGVZXHJcbiAgICAgICAgICAgIH0sIGR1cmF0aW9uIHx8IDMzMCwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLmlzQW5pbWF0aW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgLy8gU3RvcCBzbGlkZXNob3dcclxuICAgICAgICAgICAgaWYgKCBzZWxmLlNsaWRlU2hvdyAmJiBzZWxmLlNsaWRlU2hvdy5pc0FjdGl2ZSApIHtcclxuICAgICAgICAgICAgICAgIHNlbGYuU2xpZGVTaG93LnN0b3AoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG5cclxuICAgICAgICAvLyBTY2FsZSBpbWFnZSB0byBmaXQgaW5zaWRlIHBhcmVudCBlbGVtZW50XHJcbiAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgICAgICBzY2FsZVRvRml0IDogZnVuY3Rpb24oIGR1cmF0aW9uICkge1xyXG5cclxuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSBzZWxmLmN1cnJlbnQ7XHJcbiAgICAgICAgICAgIHZhciAkd2hhdCAgID0gY3VycmVudC4kY29udGVudDtcclxuICAgICAgICAgICAgdmFyIGVuZDtcclxuXHJcbiAgICAgICAgICAgIGlmICggISggY3VycmVudC50eXBlID09ICdpbWFnZScgJiYgIWN1cnJlbnQuaGFzRXJyb3IpIHx8ICEkd2hhdCB8fCBzZWxmLmlzQW5pbWF0aW5nICkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAkLmZhbmN5Ym94LnN0b3AoICR3aGF0ICk7XHJcblxyXG4gICAgICAgICAgICBzZWxmLmlzQW5pbWF0aW5nID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIGVuZCA9IHNlbGYuZ2V0Rml0UG9zKCBjdXJyZW50ICk7XHJcblxyXG4gICAgICAgICAgICBzZWxmLnVwZGF0ZUN1cnNvciggZW5kLndpZHRoLCBlbmQuaGVpZ2h0ICk7XHJcblxyXG4gICAgICAgICAgICAkLmZhbmN5Ym94LmFuaW1hdGUoICR3aGF0LCB7XHJcbiAgICAgICAgICAgICAgICB0b3AgICAgOiBlbmQudG9wLFxyXG4gICAgICAgICAgICAgICAgbGVmdCAgIDogZW5kLmxlZnQsXHJcbiAgICAgICAgICAgICAgICBzY2FsZVggOiBlbmQud2lkdGggIC8gJHdoYXQud2lkdGgoKSxcclxuICAgICAgICAgICAgICAgIHNjYWxlWSA6IGVuZC5oZWlnaHQgLyAkd2hhdC5oZWlnaHQoKVxyXG4gICAgICAgICAgICB9LCBkdXJhdGlvbiB8fCAzMzAsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgc2VsZi5pc0FuaW1hdGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLy8gQ2FsY3VsYXRlIGltYWdlIHNpemUgdG8gZml0IGluc2lkZSB2aWV3cG9ydFxyXG4gICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgZ2V0Rml0UG9zIDogZnVuY3Rpb24oIHNsaWRlICkge1xyXG4gICAgICAgICAgICB2YXIgc2VsZiAgPSB0aGlzO1xyXG4gICAgICAgICAgICB2YXIgJHdoYXQgPSBzbGlkZS4kY29udGVudDtcclxuXHJcbiAgICAgICAgICAgIHZhciBpbWdXaWR0aCAgPSBzbGlkZS53aWR0aDtcclxuICAgICAgICAgICAgdmFyIGltZ0hlaWdodCA9IHNsaWRlLmhlaWdodDtcclxuXHJcbiAgICAgICAgICAgIHZhciBtYXJnaW4gPSBzbGlkZS5vcHRzLm1hcmdpbjtcclxuXHJcbiAgICAgICAgICAgIHZhciBjYW52YXNXaWR0aCwgY2FudmFzSGVpZ2h0LCBtaW5SYXRpbywgd2lkdGgsIGhlaWdodDtcclxuXHJcbiAgICAgICAgICAgIGlmICggISR3aGF0IHx8ICEkd2hhdC5sZW5ndGggfHwgKCAhaW1nV2lkdGggJiYgIWltZ0hlaWdodCkgKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIENvbnZlcnQgXCJtYXJnaW4gdG8gQ1NTIHN0eWxlOiBbIHRvcCwgcmlnaHQsIGJvdHRvbSwgbGVmdCBdXHJcbiAgICAgICAgICAgIGlmICggJC50eXBlKCBtYXJnaW4gKSA9PT0gXCJudW1iZXJcIiApIHtcclxuICAgICAgICAgICAgICAgIG1hcmdpbiA9IFsgbWFyZ2luLCBtYXJnaW4gXTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCBtYXJnaW4ubGVuZ3RoID09IDIgKSB7XHJcbiAgICAgICAgICAgICAgICBtYXJnaW4gPSBbIG1hcmdpblswXSwgbWFyZ2luWzFdLCBtYXJnaW5bMF0sIG1hcmdpblsxXSBdO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBXZSBjYW4gbm90IHVzZSAkc2xpZGUgd2lkdGggaGVyZSwgYmVjYXVzZSBpdCBjYW4gaGF2ZSBkaWZmZXJlbnQgZGllbWVuc2lvbnMgd2hpbGUgaW4gdHJhbnNpdG9uXHJcbiAgICAgICAgICAgIGNhbnZhc1dpZHRoICA9IHBhcnNlSW50KCBzZWxmLiRyZWZzLnN0YWdlLndpZHRoKCksIDEwICkgIC0gKCBtYXJnaW5bIDEgXSArIG1hcmdpblsgMyBdICk7XHJcbiAgICAgICAgICAgIGNhbnZhc0hlaWdodCA9IHBhcnNlSW50KCBzZWxmLiRyZWZzLnN0YWdlLmhlaWdodCgpLCAxMCApIC0gKCBtYXJnaW5bIDAgXSArIG1hcmdpblsgMiBdICk7XHJcblxyXG4gICAgICAgICAgICBtaW5SYXRpbyA9IE1hdGgubWluKDEsIGNhbnZhc1dpZHRoIC8gaW1nV2lkdGgsIGNhbnZhc0hlaWdodCAvIGltZ0hlaWdodCApO1xyXG5cclxuICAgICAgICAgICAgd2lkdGggID0gTWF0aC5mbG9vciggbWluUmF0aW8gKiBpbWdXaWR0aCApO1xyXG4gICAgICAgICAgICBoZWlnaHQgPSBNYXRoLmZsb29yKCBtaW5SYXRpbyAqIGltZ0hlaWdodCApO1xyXG5cclxuICAgICAgICAgICAgLy8gVXNlIGZsb29yIHJvdW5kaW5nIHRvIG1ha2Ugc3VyZSBpdCByZWFsbHkgZml0c1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgdG9wICAgIDogTWF0aC5mbG9vciggKCBjYW52YXNIZWlnaHQgLSBoZWlnaHQgKSAqIDAuNSApICsgbWFyZ2luWyAwIF0sXHJcbiAgICAgICAgICAgICAgICBsZWZ0ICAgOiBNYXRoLmZsb29yKCAoIGNhbnZhc1dpZHRoICAtIHdpZHRoICkgICogMC41ICkgKyBtYXJnaW5bIDMgXSxcclxuICAgICAgICAgICAgICAgIHdpZHRoICA6IHdpZHRoLFxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0IDogaGVpZ2h0XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgIH0sXHJcblxyXG5cclxuICAgICAgICAvLyBVcGRhdGUgY29udGVudCBzaXplIGFuZCBwb3NpdGlvbiBmb3IgYWxsIHNsaWRlc1xyXG4gICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgdXBkYXRlIDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICAgICAgICAgICQuZWFjaCggc2VsZi5zbGlkZXMsIGZ1bmN0aW9uKCBrZXksIHNsaWRlICkge1xyXG4gICAgICAgICAgICAgICAgc2VsZi51cGRhdGVTbGlkZSggc2xpZGUgKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSxcclxuXHJcblxyXG4gICAgICAgIC8vIFVwZGF0ZSBzbGlkZSBjb250ZW50IHBvc2l0aW9uIGFuZCBzaXplXHJcbiAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgdXBkYXRlU2xpZGUgOiBmdW5jdGlvbiggc2xpZGUsIGR1cmF0aW9uICkge1xyXG4gICAgICAgICAgICB2YXIgc2VsZiAgPSB0aGlzLFxyXG4gICAgICAgICAgICAgICAgJHdoYXQgPSBzbGlkZSAmJiBzbGlkZS4kY29udGVudDtcclxuXHJcbiAgICAgICAgICAgIGlmICggJHdoYXQgJiYgKCBzbGlkZS53aWR0aCB8fCBzbGlkZS5oZWlnaHQgKSApIHtcclxuICAgICAgICAgICAgICAgIHNlbGYuaXNBbmltYXRpbmcgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICAkLmZhbmN5Ym94LnN0b3AoICR3aGF0ICk7XHJcblxyXG4gICAgICAgICAgICAgICAgJC5mYW5jeWJveC5zZXRUcmFuc2xhdGUoICR3aGF0LCBzZWxmLmdldEZpdFBvcyggc2xpZGUgKSApO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICggc2xpZGUucG9zID09PSBzZWxmLmN1cnJQb3MgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi51cGRhdGVDdXJzb3IoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc2xpZGUuJHNsaWRlLnRyaWdnZXIoICdyZWZyZXNoJyApO1xyXG5cclxuICAgICAgICAgICAgc2VsZi50cmlnZ2VyKCAnb25VcGRhdGUnLCBzbGlkZSApO1xyXG5cclxuICAgICAgICB9LFxyXG5cclxuXHJcbiAgICAgICAgLy8gSG9yaXpvbnRhbGx5IGNlbnRlciBzbGlkZVxyXG4gICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgY2VudGVyU2xpZGUgOiBmdW5jdGlvbiggc2xpZGUsIGR1cmF0aW9uICkge1xyXG4gICAgICAgICAgICB2YXIgc2VsZiAgPSB0aGlzLCBjYW52YXNXaWR0aCwgcG9zO1xyXG5cclxuICAgICAgICAgICAgaWYgKCBzZWxmLmN1cnJlbnQgKSB7XHJcbiAgICAgICAgICAgICAgICBjYW52YXNXaWR0aCA9IE1hdGgucm91bmQoIHNsaWRlLiRzbGlkZS53aWR0aCgpICk7XHJcbiAgICAgICAgICAgICAgICBwb3MgPSBzbGlkZS5wb3MgLSBzZWxmLmN1cnJlbnQucG9zO1xyXG5cclxuICAgICAgICAgICAgICAgICQuZmFuY3lib3guYW5pbWF0ZSggc2xpZGUuJHNsaWRlLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9wICA6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgbGVmdCA6ICggcG9zICogY2FudmFzV2lkdGggKSArICggcG9zICogc2xpZGUub3B0cy5ndXR0ZXIgKSxcclxuICAgICAgICAgICAgICAgICAgICBvcGFjaXR5IDogMVxyXG4gICAgICAgICAgICAgICAgfSwgZHVyYXRpb24gPT09IHVuZGVmaW5lZCA/IDAgOiBkdXJhdGlvbiwgbnVsbCwgZmFsc2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcblxyXG4gICAgICAgIC8vIFVwZGF0ZSBjdXJzb3Igc3R5bGUgZGVwZW5kaW5nIGlmIGNvbnRlbnQgY2FuIGJlIHpvb21lZFxyXG4gICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgICAgICB1cGRhdGVDdXJzb3IgOiBmdW5jdGlvbiggbmV4dFdpZHRoLCBuZXh0SGVpZ2h0ICkge1xyXG5cclxuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgICAgICB2YXIgaXNTY2FsZWREb3duO1xyXG5cclxuICAgICAgICAgICAgdmFyICRjb250YWluZXIgPSBzZWxmLiRyZWZzLmNvbnRhaW5lci5yZW1vdmVDbGFzcyggJ2ZhbmN5Ym94LWlzLXpvb21hYmxlIGZhbmN5Ym94LWNhbi16b29tSW4gZmFuY3lib3gtY2FuLWRyYWcgZmFuY3lib3gtY2FuLXpvb21PdXQnICk7XHJcblxyXG4gICAgICAgICAgICBpZiAoICFzZWxmLmN1cnJlbnQgfHwgc2VsZi5pc0Nsb3NpbmcgKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICggc2VsZi5pc1pvb21hYmxlKCkgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgJGNvbnRhaW5lci5hZGRDbGFzcyggJ2ZhbmN5Ym94LWlzLXpvb21hYmxlJyApO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICggbmV4dFdpZHRoICE9PSB1bmRlZmluZWQgJiYgbmV4dEhlaWdodCAhPT0gdW5kZWZpbmVkICkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlzU2NhbGVkRG93biA9IG5leHRXaWR0aCA8IHNlbGYuY3VycmVudC53aWR0aCAmJiBuZXh0SGVpZ2h0IDwgc2VsZi5jdXJyZW50LmhlaWdodDtcclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlzU2NhbGVkRG93biA9IHNlbGYuaXNTY2FsZWREb3duKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCBpc1NjYWxlZERvd24gKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIElmIGltYWdlIGlzIHNjYWxlZCBkb3duLCB0aGVuLCBvYnZpb3VzbHksIGl0IGNhbiBiZSB6b29tZWQgdG8gZnVsbCBzaXplXHJcbiAgICAgICAgICAgICAgICAgICAgJGNvbnRhaW5lci5hZGRDbGFzcyggJ2ZhbmN5Ym94LWNhbi16b29tSW4nICk7XHJcblxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBzZWxmLmN1cnJlbnQub3B0cy50b3VjaCApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIGltYWdlIHNpemUgaXIgbGFyZ2VuIHRoYW4gYXZhaWxhYmxlIGF2YWlsYWJsZSBhbmQgdG91Y2ggbW9kdWxlIGlzIG5vdCBkaXNhYmxlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGVuIHVzZXIgY2FuIGRvIHBhbm5pbmdcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGNvbnRhaW5lci5hZGRDbGFzcyggJ2ZhbmN5Ym94LWNhbi1kcmFnJyApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkY29udGFpbmVyLmFkZENsYXNzKCAnZmFuY3lib3gtY2FuLXpvb21PdXQnICk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIHNlbGYuY3VycmVudC5vcHRzLnRvdWNoICkge1xyXG4gICAgICAgICAgICAgICAgJGNvbnRhaW5lci5hZGRDbGFzcyggJ2ZhbmN5Ym94LWNhbi1kcmFnJyApO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0sXHJcblxyXG5cclxuICAgICAgICAvLyBDaGVjayBpZiBjdXJyZW50IHNsaWRlIGlzIHpvb21hYmxlXHJcbiAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgICAgICBpc1pvb21hYmxlIDogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICB2YXIgY3VycmVudCA9IHNlbGYuY3VycmVudDtcclxuICAgICAgICAgICAgdmFyIGZpdFBvcztcclxuXHJcbiAgICAgICAgICAgIGlmICggIWN1cnJlbnQgfHwgc2VsZi5pc0Nsb3NpbmcgKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIEFzc3VtZSB0aGF0IHNsaWRlIGlzIHpvb21hYmxlIGlmXHJcbiAgICAgICAgICAgIC8vICAgLSBpbWFnZSBpcyBsb2FkZWQgc3VjY2Vzc2Z1bHlcclxuICAgICAgICAgICAgLy8gICAtIGNsaWNrIGFjdGlvbiBpcyBcInpvb21cIlxyXG4gICAgICAgICAgICAvLyAgIC0gYWN0dWFsIHNpemUgb2YgdGhlIGltYWdlIGlzIHNtYWxsZXIgdGhhbiBhdmFpbGFibGUgYXJlYVxyXG4gICAgICAgICAgICBpZiAoIGN1cnJlbnQudHlwZSA9PT0gJ2ltYWdlJyAmJiBjdXJyZW50LmlzTG9hZGVkICYmICFjdXJyZW50Lmhhc0Vycm9yICYmXHJcbiAgICAgICAgICAgICAgICAoIGN1cnJlbnQub3B0cy5jbGlja0NvbnRlbnQgPT09ICd6b29tJyB8fCAoICQuaXNGdW5jdGlvbiggY3VycmVudC5vcHRzLmNsaWNrQ29udGVudCApICYmIGN1cnJlbnQub3B0cy5jbGlja0NvbnRlbnQoIGN1cnJlbnQgKSA9PT0gIFwiem9vbVwiICkgKVxyXG4gICAgICAgICAgICApIHtcclxuXHJcbiAgICAgICAgICAgICAgICBmaXRQb3MgPSBzZWxmLmdldEZpdFBvcyggY3VycmVudCApO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICggY3VycmVudC53aWR0aCA+IGZpdFBvcy53aWR0aCB8fCBjdXJyZW50LmhlaWdodCA+IGZpdFBvcy5oZWlnaHQgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgICAgIH0sXHJcblxyXG5cclxuICAgICAgICAvLyBDaGVjayBpZiBjdXJyZW50IGltYWdlIGRpbWVuc2lvbnMgYXJlIHNtYWxsZXIgdGhhbiBhY3R1YWxcclxuICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgaXNTY2FsZWREb3duIDogZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICB2YXIgY3VycmVudCA9IHNlbGYuY3VycmVudDtcclxuICAgICAgICAgICAgdmFyICR3aGF0ICAgPSBjdXJyZW50LiRjb250ZW50O1xyXG5cclxuICAgICAgICAgICAgdmFyIHJleiA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgaWYgKCAkd2hhdCApIHtcclxuICAgICAgICAgICAgICAgIHJleiA9ICQuZmFuY3lib3guZ2V0VHJhbnNsYXRlKCAkd2hhdCApO1xyXG4gICAgICAgICAgICAgICAgcmV6ID0gcmV6LndpZHRoIDwgY3VycmVudC53aWR0aCB8fCByZXouaGVpZ2h0IDwgY3VycmVudC5oZWlnaHQ7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiByZXo7XHJcblxyXG4gICAgICAgIH0sXHJcblxyXG5cclxuICAgICAgICAvLyBDaGVjayBpZiBpbWFnZSBkaW1lbnNpb25zIGV4Y2VlZCBwYXJlbnQgZWxlbWVudFxyXG4gICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgIGNhblBhbiA6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSBzZWxmLmN1cnJlbnQ7XHJcbiAgICAgICAgICAgIHZhciAkd2hhdCAgID0gY3VycmVudC4kY29udGVudDtcclxuXHJcbiAgICAgICAgICAgIHZhciByZXogPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIGlmICggJHdoYXQgKSB7XHJcbiAgICAgICAgICAgICAgICByZXogPSBzZWxmLmdldEZpdFBvcyggY3VycmVudCApO1xyXG4gICAgICAgICAgICAgICAgcmV6ID0gTWF0aC5hYnMoICR3aGF0LndpZHRoKCkgLSByZXoud2lkdGggKSA+IDEgIHx8IE1hdGguYWJzKCAkd2hhdC5oZWlnaHQoKSAtIHJlei5oZWlnaHQgKSA+IDE7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiByZXo7XHJcblxyXG4gICAgICAgIH0sXHJcblxyXG5cclxuICAgICAgICAvLyBMb2FkIGNvbnRlbnQgaW50byB0aGUgc2xpZGVcclxuICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgbG9hZFNsaWRlIDogZnVuY3Rpb24oIHNsaWRlICkge1xyXG5cclxuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzLCB0eXBlLCAkc2xpZGU7XHJcbiAgICAgICAgICAgIHZhciBhamF4TG9hZDtcclxuXHJcbiAgICAgICAgICAgIGlmICggc2xpZGUuaXNMb2FkaW5nICkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIHNsaWRlLmlzTG9hZGVkICkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzbGlkZS5pc0xvYWRpbmcgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgc2VsZi50cmlnZ2VyKCAnYmVmb3JlTG9hZCcsIHNsaWRlICk7XHJcblxyXG4gICAgICAgICAgICB0eXBlICAgPSBzbGlkZS50eXBlO1xyXG4gICAgICAgICAgICAkc2xpZGUgPSBzbGlkZS4kc2xpZGU7XHJcblxyXG4gICAgICAgICAgICAkc2xpZGVcclxuICAgICAgICAgICAgICAgIC5vZmYoICdyZWZyZXNoJyApXHJcbiAgICAgICAgICAgICAgICAudHJpZ2dlciggJ29uUmVzZXQnIClcclxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcyggJ2ZhbmN5Ym94LXNsaWRlLS0nICsgKCB0eXBlIHx8ICd1bmtub3duJyApIClcclxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcyggc2xpZGUub3B0cy5zbGlkZUNsYXNzICk7XHJcblxyXG4gICAgICAgICAgICAvLyBDcmVhdGUgY29udGVudCBkZXBlbmRpbmcgb24gdGhlIHR5cGVcclxuXHJcbiAgICAgICAgICAgIHN3aXRjaCAoIHR5cGUgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSAnaW1hZ2UnOlxyXG5cclxuICAgICAgICAgICAgICAgICAgICBzZWxmLnNldEltYWdlKCBzbGlkZSApO1xyXG5cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgIGNhc2UgJ2lmcmFtZSc6XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuc2V0SWZyYW1lKCBzbGlkZSApO1xyXG5cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgIGNhc2UgJ2h0bWwnOlxyXG5cclxuICAgICAgICAgICAgICAgICAgICBzZWxmLnNldENvbnRlbnQoIHNsaWRlLCBzbGlkZS5zcmMgfHwgc2xpZGUuY29udGVudCApO1xyXG5cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgIGNhc2UgJ2lubGluZSc6XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICggJCggc2xpZGUuc3JjICkubGVuZ3RoICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNldENvbnRlbnQoIHNsaWRlLCAkKCBzbGlkZS5zcmMgKSApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNldEVycm9yKCBzbGlkZSApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlICdhamF4JzpcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5zaG93TG9hZGluZyggc2xpZGUgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgYWpheExvYWQgPSAkLmFqYXgoICQuZXh0ZW5kKCB7fSwgc2xpZGUub3B0cy5hamF4LnNldHRpbmdzLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybCA6IHNsaWRlLnNyYyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2VzcyA6IGZ1bmN0aW9uICggZGF0YSwgdGV4dFN0YXR1cyApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHRleHRTdGF0dXMgPT09ICdzdWNjZXNzJyApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNldENvbnRlbnQoIHNsaWRlLCBkYXRhICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvciA6IGZ1bmN0aW9uICgganFYSFIsIHRleHRTdGF0dXMgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBqcVhIUiAmJiB0ZXh0U3RhdHVzICE9PSAnYWJvcnQnICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2V0RXJyb3IoIHNsaWRlICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAkc2xpZGUub25lKCAnb25SZXNldCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWpheExvYWQuYWJvcnQoKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlICd2aWRlbycgOlxyXG5cclxuICAgICAgICAgICAgICAgICAgICBzZWxmLnNldENvbnRlbnQoIHNsaWRlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHZpZGVvIGNvbnRyb2xzPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICc8c291cmNlIHNyYz1cIicgKyBzbGlkZS5zcmMgKyAnXCIgdHlwZT1cIicgKyBzbGlkZS5vcHRzLnZpZGVvRm9ybWF0ICsgJ1wiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1lvdXIgYnJvd3NlciBkb2VzblxcJ3Qgc3VwcG9ydCBIVE1MNSB2aWRlbycgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPC92aWRlbz4nXHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG5cclxuICAgICAgICAgICAgICAgICAgICBzZWxmLnNldEVycm9yKCBzbGlkZSApO1xyXG5cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcblxyXG4gICAgICAgIH0sXHJcblxyXG5cclxuICAgICAgICAvLyBVc2UgdGh1bWJuYWlsIGltYWdlLCBpZiBwb3NzaWJsZVxyXG4gICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgIHNldEltYWdlIDogZnVuY3Rpb24oIHNsaWRlICkge1xyXG5cclxuICAgICAgICAgICAgdmFyIHNlbGYgICA9IHRoaXM7XHJcbiAgICAgICAgICAgIHZhciBzcmNzZXQgPSBzbGlkZS5vcHRzLnNyY3NldCB8fCBzbGlkZS5vcHRzLmltYWdlLnNyY3NldDtcclxuXHJcbiAgICAgICAgICAgIHZhciBmb3VuZCwgdGVtcCwgcHhSYXRpbywgd2luZG93V2lkdGg7XHJcblxyXG4gICAgICAgICAgICAvLyBJZiB3ZSBoYXZlIFwic3Jjc2V0XCIsIHRoZW4gd2UgbmVlZCB0byBmaW5kIG1hdGNoaW5nIFwic3JjXCIgdmFsdWUuXHJcbiAgICAgICAgICAgIC8vIFRoaXMgaXMgbmVjZXNzYXJ5LCBiZWNhdXNlIHdoZW4geW91IHNldCBhbiBzcmMgYXR0cmlidXRlLCB0aGUgYnJvd3NlciB3aWxsIHByZWxvYWQgdGhlIGltYWdlXHJcbiAgICAgICAgICAgIC8vIGJlZm9yZSBhbnkgamF2YXNjcmlwdCBvciBldmVuIENTUyBpcyBhcHBsaWVkLlxyXG4gICAgICAgICAgICBpZiAoIHNyY3NldCApIHtcclxuICAgICAgICAgICAgICAgIHB4UmF0aW8gICAgID0gd2luZG93LmRldmljZVBpeGVsUmF0aW8gfHwgMTtcclxuICAgICAgICAgICAgICAgIHdpbmRvd1dpZHRoID0gd2luZG93LmlubmVyV2lkdGggICogcHhSYXRpbztcclxuXHJcbiAgICAgICAgICAgICAgICB0ZW1wID0gc3Jjc2V0LnNwbGl0KCcsJykubWFwKGZ1bmN0aW9uICggZWwgKSB7XHJcbiAgICAgICAgICAgIFx0XHR2YXIgcmV0ID0ge307XHJcblxyXG4gICAgICAgICAgICBcdFx0ZWwudHJpbSgpLnNwbGl0KC9cXHMrLykuZm9yRWFjaChmdW5jdGlvbiAoIGVsLCBpICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBwYXJzZUludCggZWwuc3Vic3RyaW5nKDAsIGVsLmxlbmd0aCAtIDEpLCAxMCApO1xyXG5cclxuICAgICAgICAgICAgXHRcdFx0aWYgKCBpID09PSAwICkge1xyXG4gICAgICAgICAgICBcdFx0XHRcdHJldHVybiAoIHJldC51cmwgPSBlbCApO1xyXG4gICAgICAgICAgICBcdFx0XHR9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHZhbHVlICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0LnZhbHVlICAgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldC5wb3N0Zml4ID0gZWxbIGVsLmxlbmd0aCAtIDEgXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgXHRcdH0pO1xyXG5cclxuICAgICAgICAgICAgXHRcdHJldHVybiByZXQ7XHJcbiAgICAgICAgICAgIFx0fSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gU29ydCBieSB2YWx1ZVxyXG4gICAgICAgICAgICAgICAgdGVtcC5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XHJcbiAgICAgICAgICAgICAgICAgIHJldHVybiBhLnZhbHVlIC0gYi52YWx1ZTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIE9rLCBub3cgd2UgaGF2ZSBhbiBhcnJheSBvZiBhbGwgc3Jjc2V0IHZhbHVlc1xyXG4gICAgICAgICAgICAgICAgZm9yICggdmFyIGogPSAwOyBqIDwgdGVtcC5sZW5ndGg7IGorKyApIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZWwgPSB0ZW1wWyBqIF07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICggKCBlbC5wb3N0Zml4ID09PSAndycgJiYgZWwudmFsdWUgPj0gd2luZG93V2lkdGggKSB8fCAoIGVsLnBvc3RmaXggPT09ICd4JyAmJiBlbC52YWx1ZSA+PSBweFJhdGlvICkgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvdW5kID0gZWw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBJZiBub3QgZm91bmQsIHRha2UgdGhlIGxhc3Qgb25lXHJcbiAgICAgICAgICAgICAgICBpZiAoICFmb3VuZCAmJiB0ZW1wLmxlbmd0aCApIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3VuZCA9IHRlbXBbIHRlbXAubGVuZ3RoIC0gMSBdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICggZm91bmQgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2xpZGUuc3JjID0gZm91bmQudXJsO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBJZiB3ZSBoYXZlIGRlZmF1bHQgd2lkdGgvaGVpZ2h0IHZhbHVlcywgd2UgY2FuIGNhbGN1bGF0ZSBoZWlnaHQgZm9yIG1hdGNoaW5nIHNvdXJjZVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICggc2xpZGUud2lkdGggJiYgc2xpZGUuaGVpZ2h0ICYmIGZvdW5kLnBvc3RmaXggPT0gJ3cnICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzbGlkZS5oZWlnaHQgPSAoIHNsaWRlLndpZHRoIC8gc2xpZGUuaGVpZ2h0ICkgKiBmb3VuZC52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGUud2lkdGggID0gZm91bmQudmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBUaGlzIHdpbGwgYmUgd3JhcHBlciBjb250YWluaW5nIGJvdGggZ2hvc3QgYW5kIGFjdHVhbCBpbWFnZVxyXG4gICAgICAgICAgICBzbGlkZS4kY29udGVudCA9ICQoJzxkaXYgY2xhc3M9XCJmYW5jeWJveC1pbWFnZS13cmFwXCI+PC9kaXY+JylcclxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcyggJ2ZhbmN5Ym94LWlzLWhpZGRlbicgKVxyXG4gICAgICAgICAgICAgICAgLmFwcGVuZFRvKCBzbGlkZS4kc2xpZGUgKTtcclxuXHJcblxyXG4gICAgICAgICAgICAvLyBJZiB3ZSBoYXZlIGEgdGh1bWJuYWlsLCB3ZSBjYW4gZGlzcGxheSBpdCB3aGlsZSBhY3R1YWwgaW1hZ2UgaXMgbG9hZGluZ1xyXG4gICAgICAgICAgICAvLyBVc2VycyB3aWxsIG5vdCBzdGFyZSBhdCBibGFjayBzY3JlZW4gYW5kIGFjdHVhbCBpbWFnZSB3aWxsIGFwcGVhciBncmFkdWFsbHlcclxuICAgICAgICAgICAgaWYgKCBzbGlkZS5vcHRzLnByZWxvYWQgIT09IGZhbHNlICYmIHNsaWRlLm9wdHMud2lkdGggJiYgc2xpZGUub3B0cy5oZWlnaHQgJiYgKCBzbGlkZS5vcHRzLnRodW1iIHx8IHNsaWRlLm9wdHMuJHRodW1iICkgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgc2xpZGUud2lkdGggID0gc2xpZGUub3B0cy53aWR0aDtcclxuICAgICAgICAgICAgICAgIHNsaWRlLmhlaWdodCA9IHNsaWRlLm9wdHMuaGVpZ2h0O1xyXG5cclxuICAgICAgICAgICAgICAgIHNsaWRlLiRnaG9zdCA9ICQoJzxpbWcgLz4nKVxyXG4gICAgICAgICAgICAgICAgICAgIC5vbmUoJ2Vycm9yJywgZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnJlbW92ZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGUuJGdob3N0ID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc2V0QmlnSW1hZ2UoIHNsaWRlICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLm9uZSgnbG9hZCcsIGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5hZnRlckxvYWQoIHNsaWRlICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNldEJpZ0ltYWdlKCBzbGlkZSApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcyggJ2ZhbmN5Ym94LWltYWdlJyApXHJcbiAgICAgICAgICAgICAgICAgICAgLmFwcGVuZFRvKCBzbGlkZS4kY29udGVudCApXHJcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoICdzcmMnLCBzbGlkZS5vcHRzLnRodW1iIHx8IHNsaWRlLm9wdHMuJHRodW1iLmF0dHIoICdzcmMnICkgKTtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgc2VsZi5zZXRCaWdJbWFnZSggc2xpZGUgKTtcclxuXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSxcclxuXHJcblxyXG4gICAgICAgIC8vIENyZWF0ZSBmdWxsLXNpemUgaW1hZ2VcclxuICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgIHNldEJpZ0ltYWdlIDogZnVuY3Rpb24gKCBzbGlkZSApIHtcclxuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgICAgICB2YXIgJGltZyA9ICQoJzxpbWcgLz4nKTtcclxuXHJcbiAgICAgICAgICAgIHNsaWRlLiRpbWFnZSA9ICRpbWdcclxuICAgICAgICAgICAgICAgIC5vbmUoJ2Vycm9yJywgZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuc2V0RXJyb3IoIHNsaWRlICk7XHJcblxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC5vbmUoJ2xvYWQnLCBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQ2xlYXIgdGltZW91dCB0aGF0IGNoZWNrcyBpZiBsb2FkaW5nIGljb24gbmVlZHMgdG8gYmUgZGlzcGxheWVkXHJcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KCBzbGlkZS50aW1vdXRzICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlLnRpbW91dHMgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIHNlbGYuaXNDbG9zaW5nICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBzbGlkZS53aWR0aCAgPSBzbGlkZS5vcHRzLndpZHRoICB8fCB0aGlzLm5hdHVyYWxXaWR0aDtcclxuICAgICAgICAgICAgICAgICAgICBzbGlkZS5oZWlnaHQgPSBzbGlkZS5vcHRzLmhlaWdodCB8fCB0aGlzLm5hdHVyYWxIZWlnaHQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICggc2xpZGUub3B0cy5pbWFnZS5zcmNzZXQgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRpbWcuYXR0ciggJ3NpemVzJywgJzEwMHZ3JyApLmF0dHIoICdzcmNzZXQnLCBzbGlkZS5vcHRzLmltYWdlLnNyY3NldCApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5oaWRlTG9hZGluZyggc2xpZGUgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBzbGlkZS4kZ2hvc3QgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzbGlkZS50aW1vdXRzID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlLnRpbW91dHMgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlLiRnaG9zdC5oaWRlKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBNYXRoLm1pbiggMzAwLCBNYXRoLm1heCggMTAwMCwgc2xpZGUuaGVpZ2h0IC8gMTYwMCApICkgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5hZnRlckxvYWQoIHNsaWRlICk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoICdmYW5jeWJveC1pbWFnZScgKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoJ3NyYycsIHNsaWRlLnNyYylcclxuICAgICAgICAgICAgICAgIC5hcHBlbmRUbyggc2xpZGUuJGNvbnRlbnQgKTtcclxuXHJcbiAgICAgICAgICAgIGlmICggKCAkaW1nWzBdLmNvbXBsZXRlIHx8ICRpbWdbMF0ucmVhZHlTdGF0ZSA9PSBcImNvbXBsZXRlXCIgKSAmJiAkaW1nWzBdLm5hdHVyYWxXaWR0aCAmJiAkaW1nWzBdLm5hdHVyYWxIZWlnaHQgKSB7XHJcbiAgICAgICAgICAgICAgICAgICRpbWcudHJpZ2dlciggJ2xvYWQnICk7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2UgaWYoICRpbWdbMF0uZXJyb3IgKSB7XHJcbiAgICAgICAgICAgICAgICAgJGltZy50cmlnZ2VyKCAnZXJyb3InICk7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgIHNsaWRlLnRpbW91dHMgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICggISRpbWdbMF0uY29tcGxldGUgJiYgIXNsaWRlLmhhc0Vycm9yICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNob3dMb2FkaW5nKCBzbGlkZSApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9LCAxMDApO1xyXG5cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9LFxyXG5cclxuXHJcbiAgICAgICAgLy8gQ3JlYXRlIGlmcmFtZSB3cmFwcGVyLCBpZnJhbWUgYW5kIGJpbmRpbmdzXHJcbiAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgIHNldElmcmFtZSA6IGZ1bmN0aW9uKCBzbGlkZSApIHtcclxuICAgICAgICAgICAgdmFyIHNlbGZcdD0gdGhpcyxcclxuICAgICAgICAgICAgICAgIG9wdHMgICAgPSBzbGlkZS5vcHRzLmlmcmFtZSxcclxuICAgICAgICAgICAgICAgICRzbGlkZVx0PSBzbGlkZS4kc2xpZGUsXHJcbiAgICAgICAgICAgICAgICAkaWZyYW1lO1xyXG5cclxuICAgICAgICAgICAgc2xpZGUuJGNvbnRlbnQgPSAkKCc8ZGl2IGNsYXNzPVwiZmFuY3lib3gtY29udGVudCcgKyAoIG9wdHMucHJlbG9hZCA/ICcgZmFuY3lib3gtaXMtaGlkZGVuJyA6ICcnICkgKyAnXCI+PC9kaXY+JylcclxuICAgICAgICAgICAgICAgIC5jc3MoIG9wdHMuY3NzIClcclxuICAgICAgICAgICAgICAgIC5hcHBlbmRUbyggJHNsaWRlICk7XHJcblxyXG4gICAgICAgICAgICAkaWZyYW1lID0gJCggb3B0cy50cGwucmVwbGFjZSgvXFx7cm5kXFx9L2csIG5ldyBEYXRlKCkuZ2V0VGltZSgpKSApXHJcbiAgICAgICAgICAgICAgICAuYXR0ciggb3B0cy5hdHRyIClcclxuICAgICAgICAgICAgICAgIC5hcHBlbmRUbyggc2xpZGUuJGNvbnRlbnQgKTtcclxuXHJcbiAgICAgICAgICAgIGlmICggb3B0cy5wcmVsb2FkICkge1xyXG5cclxuICAgICAgICAgICAgICAgIHNlbGYuc2hvd0xvYWRpbmcoIHNsaWRlICk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gVW5mb3J0dW5hdGVseSwgaXQgaXMgbm90IGFsd2F5cyBwb3NzaWJsZSB0byBkZXRlcm1pbmUgaWYgaWZyYW1lIGlzIHN1Y2Nlc3NmdWxseSBsb2FkZWRcclxuICAgICAgICAgICAgICAgIC8vIChkdWUgdG8gYnJvd3NlciBzZWN1cml0eSBwb2xpY3kpXHJcblxyXG4gICAgICAgICAgICAgICAgJGlmcmFtZS5vbignbG9hZC5mYiBlcnJvci5mYicsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzUmVhZHkgPSAxO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBzbGlkZS4kc2xpZGUudHJpZ2dlciggJ3JlZnJlc2gnICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuYWZ0ZXJMb2FkKCBzbGlkZSApO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gUmVjYWxjdWxhdGUgaWZyYW1lIGNvbnRlbnQgc2l6ZVxyXG4gICAgICAgICAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgICAgICAgICAgICAgICRzbGlkZS5vbigncmVmcmVzaC5mYicsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciAkd3JhcCA9IHNsaWRlLiRjb250ZW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmcmFtZVdpZHRoICA9IG9wdHMuY3NzLndpZHRoLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmcmFtZUhlaWdodCA9IG9wdHMuY3NzLmhlaWdodCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsV2lkdGgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRjb250ZW50cyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGJvZHk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICggJGlmcmFtZVswXS5pc1JlYWR5ICE9PSAxICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiBjb250ZW50IGlzIGFjY2Vzc2libGUsXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaXQgd2lsbCBmYWlsIGlmIGZyYW1lIGlzIG5vdCB3aXRoIHRoZSBzYW1lIG9yaWdpblxyXG5cclxuICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkY29udGVudHMgPSAkaWZyYW1lLmNvbnRlbnRzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRib2R5ICAgICA9ICRjb250ZW50cy5maW5kKCdib2R5Jyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGlnbm9yZSkge31cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIGRpbWVuc2lvbnMgZm9yIHRoZSB3cmFwcGVyXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCAkYm9keSAmJiAkYm9keS5sZW5ndGggKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGZyYW1lV2lkdGggPT09IHVuZGVmaW5lZCApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbFdpZHRoID0gJGlmcmFtZVswXS5jb250ZW50V2luZG93LmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxXaWR0aDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcmFtZVdpZHRoID0gTWF0aC5jZWlsKCAkYm9keS5vdXRlcldpZHRoKHRydWUpICsgKCAkd3JhcC53aWR0aCgpIC0gc2Nyb2xsV2lkdGggKSApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJhbWVXaWR0aCArPSAkd3JhcC5vdXRlcldpZHRoKCkgLSAkd3JhcC5pbm5lcldpZHRoKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggZnJhbWVIZWlnaHQgPT09IHVuZGVmaW5lZCApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyYW1lSGVpZ2h0ID0gTWF0aC5jZWlsKCAkYm9keS5vdXRlckhlaWdodCh0cnVlKSApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJhbWVIZWlnaHQgKz0gJHdyYXAub3V0ZXJIZWlnaHQoKSAtICR3cmFwLmlubmVySGVpZ2h0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlc2l6ZSB3cmFwcGVyIHRvIGZpdCBpZnJhbWUgY29udGVudFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGZyYW1lV2lkdGggKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkd3JhcC53aWR0aCggZnJhbWVXaWR0aCApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGZyYW1lSGVpZ2h0ICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHdyYXAuaGVpZ2h0KCBmcmFtZUhlaWdodCApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAkd3JhcC5yZW1vdmVDbGFzcyggJ2ZhbmN5Ym94LWlzLWhpZGRlbicgKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5hZnRlckxvYWQoIHNsaWRlICk7XHJcblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAkaWZyYW1lLmF0dHIoICdzcmMnLCBzbGlkZS5zcmMgKTtcclxuXHJcbiAgICAgICAgICAgIGlmICggc2xpZGUub3B0cy5zbWFsbEJ0biA9PT0gdHJ1ZSApIHtcclxuICAgICAgICAgICAgICAgIHNsaWRlLiRjb250ZW50LnByZXBlbmQoIHNlbGYudHJhbnNsYXRlKCBzbGlkZSwgc2xpZGUub3B0cy5idG5UcGwuc21hbGxCdG4gKSApO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBSZW1vdmUgaWZyYW1lIGlmIGNsb3Npbmcgb3IgY2hhbmdpbmcgZ2FsbGVyeSBpdGVtXHJcbiAgICAgICAgICAgICRzbGlkZS5vbmUoICdvblJlc2V0JywgZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIFRoaXMgaGVscHMgSUUgbm90IHRvIHRocm93IGVycm9ycyB3aGVuIGNsb3NpbmdcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICQoIHRoaXMgKS5maW5kKCAnaWZyYW1lJyApLmhpZGUoKS5hdHRyKCAnc3JjJywgJy8vYWJvdXQ6YmxhbmsnICk7XHJcblxyXG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoIGlnbm9yZSApIHt9XHJcblxyXG4gICAgICAgICAgICAgICAgJCggdGhpcyApLmVtcHR5KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgc2xpZGUuaXNMb2FkZWQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICB9LFxyXG5cclxuXHJcbiAgICAgICAgLy8gV3JhcCBhbmQgYXBwZW5kIGNvbnRlbnQgdG8gdGhlIHNsaWRlXHJcbiAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgc2V0Q29udGVudCA6IGZ1bmN0aW9uICggc2xpZGUsIGNvbnRlbnQgKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICBpZiAoIHNlbGYuaXNDbG9zaW5nICkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzZWxmLmhpZGVMb2FkaW5nKCBzbGlkZSApO1xyXG5cclxuICAgICAgICAgICAgc2xpZGUuJHNsaWRlLmVtcHR5KCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIGlzUXVlcnkoIGNvbnRlbnQgKSAmJiBjb250ZW50LnBhcmVudCgpLmxlbmd0aCApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBJZiBjb250ZW50IGlzIGEgalF1ZXJ5IG9iamVjdCwgdGhlbiBpdCB3aWxsIGJlIG1vdmVkIHRvIHRoZSBzbGlkZS5cclxuICAgICAgICAgICAgICAgIC8vIFRoZSBwbGFjZWhvbGRlciBpcyBjcmVhdGVkIHNvIHdlIHdpbGwga25vdyB3aGVyZSB0byBwdXQgaXQgYmFjay5cclxuICAgICAgICAgICAgICAgIC8vIElmIHVzZXIgaXMgbmF2aWdhdGluZyBnYWxsZXJ5IGZhc3QsIHRoZW4gdGhlIGNvbnRlbnQgbWlnaHQgYmUgYWxyZWFkeSBpbnNpZGUgZmFuY3lCb3hcclxuICAgICAgICAgICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBNYWtlIHN1cmUgY29udGVudCBpcyBub3QgYWxyZWFkeSBtb3ZlZCB0byBmYW5jeUJveFxyXG4gICAgICAgICAgICAgICAgY29udGVudC5wYXJlbnQoICcuZmFuY3lib3gtc2xpZGUtLWlubGluZScgKS50cmlnZ2VyKCAnb25SZXNldCcgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBDcmVhdGUgdGVtcG9yYXJ5IGVsZW1lbnQgbWFya2luZyBvcmlnaW5hbCBwbGFjZSBvZiB0aGUgY29udGVudFxyXG4gICAgICAgICAgICAgICAgc2xpZGUuJHBsYWNlaG9sZGVyID0gJCggJzxkaXY+PC9kaXY+JyApLmhpZGUoKS5pbnNlcnRBZnRlciggY29udGVudCApO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSBjb250ZW50IGlzIHZpc2libGVcclxuICAgICAgICAgICAgICAgIGNvbnRlbnQuY3NzKCdkaXNwbGF5JywgJ2lubGluZS1ibG9jaycpO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIGlmICggIXNsaWRlLmhhc0Vycm9yICkge1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIElmIGNvbnRlbnQgaXMganVzdCBhIHBsYWluIHRleHQsIHRyeSB0byBjb252ZXJ0IGl0IHRvIGh0bWxcclxuICAgICAgICAgICAgICAgIGlmICggJC50eXBlKCBjb250ZW50ICkgPT09ICdzdHJpbmcnICkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQgPSAkKCc8ZGl2PicpLmFwcGVuZCggJC50cmltKCBjb250ZW50ICkgKS5jb250ZW50cygpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBJZiB3ZSBoYXZlIHRleHQgbm9kZSwgdGhlbiBhZGQgd3JhcHBpbmcgZWxlbWVudCB0byBtYWtlIHZlcnRpY2FsIGFsaWdubWVudCB3b3JrXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBjb250ZW50WzBdLm5vZGVUeXBlID09PSAzICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50ID0gJCgnPGRpdj4nKS5odG1sKCBjb250ZW50ICk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIElmIFwiZmlsdGVyXCIgb3B0aW9uIGlzIHByb3ZpZGVkLCB0aGVuIGZpbHRlciBjb250ZW50XHJcbiAgICAgICAgICAgICAgICBpZiAoIHNsaWRlLm9wdHMuZmlsdGVyICkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQgPSAkKCc8ZGl2PicpLmh0bWwoIGNvbnRlbnQgKS5maW5kKCBzbGlkZS5vcHRzLmZpbHRlciApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc2xpZGUuJHNsaWRlLm9uZSgnb25SZXNldCcsIGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBQYXVzZSBhbGwgaHRtbDUgdmlkZW8vYXVkaW9cclxuICAgICAgICAgICAgICAgICQoIHRoaXMgKS5maW5kKCAndmlkZW8sYXVkaW8nICkudHJpZ2dlciggJ3BhdXNlJyApO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIFB1dCBjb250ZW50IGJhY2tcclxuICAgICAgICAgICAgICAgIGlmICggc2xpZGUuJHBsYWNlaG9sZGVyICkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlLiRwbGFjZWhvbGRlci5hZnRlciggY29udGVudC5oaWRlKCkgKS5yZW1vdmUoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc2xpZGUuJHBsYWNlaG9sZGVyID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBSZW1vdmUgY3VzdG9tIGNsb3NlIGJ1dHRvblxyXG4gICAgICAgICAgICAgICAgaWYgKCBzbGlkZS4kc21hbGxCdG4gKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2xpZGUuJHNtYWxsQnRuLnJlbW92ZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBzbGlkZS4kc21hbGxCdG4gPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBjb250ZW50IGFuZCBtYXJrIHNsaWRlIGFzIG5vdCBsb2FkZWRcclxuICAgICAgICAgICAgICAgIGlmICggIXNsaWRlLmhhc0Vycm9yICkge1xyXG4gICAgICAgICAgICAgICAgICAgICQodGhpcykuZW1wdHkoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc2xpZGUuaXNMb2FkZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgc2xpZGUuJGNvbnRlbnQgPSAkKCBjb250ZW50ICkuYXBwZW5kVG8oIHNsaWRlLiRzbGlkZSApO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5hZnRlckxvYWQoIHNsaWRlICk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLy8gRGlzcGxheSBlcnJvciBtZXNzYWdlXHJcbiAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgIHNldEVycm9yIDogZnVuY3Rpb24gKCBzbGlkZSApIHtcclxuXHJcbiAgICAgICAgICAgIHNsaWRlLmhhc0Vycm9yID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIHNsaWRlLiRzbGlkZS5yZW1vdmVDbGFzcyggJ2ZhbmN5Ym94LXNsaWRlLS0nICsgc2xpZGUudHlwZSApO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5zZXRDb250ZW50KCBzbGlkZSwgdGhpcy50cmFuc2xhdGUoIHNsaWRlLCBzbGlkZS5vcHRzLmVycm9yVHBsICkgKTtcclxuXHJcbiAgICAgICAgfSxcclxuXHJcblxyXG4gICAgICAgIC8vIFNob3cgbG9hZGluZyBpY29uIGluc2lkZSB0aGUgc2xpZGVcclxuICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgIHNob3dMb2FkaW5nIDogZnVuY3Rpb24oIHNsaWRlICkge1xyXG5cclxuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgc2xpZGUgPSBzbGlkZSB8fCBzZWxmLmN1cnJlbnQ7XHJcblxyXG4gICAgICAgICAgICBpZiAoIHNsaWRlICYmICFzbGlkZS4kc3Bpbm5lciApIHtcclxuICAgICAgICAgICAgICAgIHNsaWRlLiRzcGlubmVyID0gJCggc2VsZi5vcHRzLnNwaW5uZXJUcGwgKS5hcHBlbmRUbyggc2xpZGUuJHNsaWRlICk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLy8gUmVtb3ZlIGxvYWRpbmcgaWNvbiBmcm9tIHRoZSBzbGlkZVxyXG4gICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgaGlkZUxvYWRpbmcgOiBmdW5jdGlvbiggc2xpZGUgKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICBzbGlkZSA9IHNsaWRlIHx8IHNlbGYuY3VycmVudDtcclxuXHJcbiAgICAgICAgICAgIGlmICggc2xpZGUgJiYgc2xpZGUuJHNwaW5uZXIgKSB7XHJcbiAgICAgICAgICAgICAgICBzbGlkZS4kc3Bpbm5lci5yZW1vdmUoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBkZWxldGUgc2xpZGUuJHNwaW5uZXI7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSxcclxuXHJcblxyXG4gICAgICAgIC8vIEFkanVzdG1lbnRzIGFmdGVyIHNsaWRlIGNvbnRlbnQgaGFzIGJlZW4gbG9hZGVkXHJcbiAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgYWZ0ZXJMb2FkIDogZnVuY3Rpb24oIHNsaWRlICkge1xyXG5cclxuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgaWYgKCBzZWxmLmlzQ2xvc2luZyApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc2xpZGUuaXNMb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHNsaWRlLmlzTG9hZGVkICA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICBzZWxmLnRyaWdnZXIoICdhZnRlckxvYWQnLCBzbGlkZSApO1xyXG5cclxuICAgICAgICAgICAgc2VsZi5oaWRlTG9hZGluZyggc2xpZGUgKTtcclxuXHJcbiAgICAgICAgICAgIGlmICggc2xpZGUub3B0cy5zbWFsbEJ0biAmJiAhc2xpZGUuJHNtYWxsQnRuICkge1xyXG4gICAgICAgICAgICAgICAgc2xpZGUuJHNtYWxsQnRuID0gJCggc2VsZi50cmFuc2xhdGUoIHNsaWRlLCBzbGlkZS5vcHRzLmJ0blRwbC5zbWFsbEJ0biApICkuYXBwZW5kVG8oIHNsaWRlLiRjb250ZW50LmZpbHRlcignZGl2LGZvcm0nKS5maXJzdCgpICk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICggc2xpZGUub3B0cy5wcm90ZWN0ICYmIHNsaWRlLiRjb250ZW50ICYmICFzbGlkZS5oYXNFcnJvciApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBEaXNhYmxlIHJpZ2h0IGNsaWNrXHJcbiAgICAgICAgICAgICAgICBzbGlkZS4kY29udGVudC5vbiggJ2NvbnRleHRtZW51LmZiJywgZnVuY3Rpb24oIGUgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgIGlmICggZS5idXR0b24gPT0gMiApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIEFkZCBmYWtlIGVsZW1lbnQgb24gdG9wIG9mIHRoZSBpbWFnZVxyXG4gICAgICAgICAgICAgICAgLy8gVGhpcyBtYWtlcyBhIGJpdCBoYXJkZXIgZm9yIHVzZXIgdG8gc2VsZWN0IGltYWdlXHJcbiAgICAgICAgICAgICAgICBpZiAoIHNsaWRlLnR5cGUgPT09ICdpbWFnZScgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJCggJzxkaXYgY2xhc3M9XCJmYW5jeWJveC1zcGFjZWJhbGxcIj48L2Rpdj4nICkuYXBwZW5kVG8oIHNsaWRlLiRjb250ZW50ICk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzZWxmLnJldmVhbENvbnRlbnQoIHNsaWRlICk7XHJcblxyXG4gICAgICAgIH0sXHJcblxyXG5cclxuICAgICAgICAvLyBNYWtlIGNvbnRlbnQgdmlzaWJsZVxyXG4gICAgICAgIC8vIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCByaWdodCBhZnRlciBjb250ZW50IGhhcyBiZWVuIGxvYWRlZCBvclxyXG4gICAgICAgIC8vIHVzZXIgbmF2aWdhdGVzIGdhbGxlcnkgYW5kIHRyYW5zaXRpb24gc2hvdWxkIHN0YXJ0XHJcbiAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgIHJldmVhbENvbnRlbnQgOiBmdW5jdGlvbiggc2xpZGUgKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgc2VsZiAgID0gdGhpcztcclxuICAgICAgICAgICAgdmFyICRzbGlkZSA9IHNsaWRlLiRzbGlkZTtcclxuXHJcbiAgICAgICAgICAgIHZhciBlZmZlY3QsIGVmZmVjdENsYXNzTmFtZSwgZHVyYXRpb24sIG9wYWNpdHksIGVuZCwgc3RhcnQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIGVmZmVjdCAgID0gc2xpZGUub3B0c1sgc2VsZi5maXJzdFJ1biA/ICdhbmltYXRpb25FZmZlY3QnICAgOiAndHJhbnNpdGlvbkVmZmVjdCcgXTtcclxuICAgICAgICAgICAgZHVyYXRpb24gPSBzbGlkZS5vcHRzWyBzZWxmLmZpcnN0UnVuID8gJ2FuaW1hdGlvbkR1cmF0aW9uJyA6ICd0cmFuc2l0aW9uRHVyYXRpb24nIF07XHJcblxyXG4gICAgICAgICAgICBkdXJhdGlvbiA9IHBhcnNlSW50KCBzbGlkZS5mb3JjZWREdXJhdGlvbiA9PT0gdW5kZWZpbmVkID8gZHVyYXRpb24gOiBzbGlkZS5mb3JjZWREdXJhdGlvbiwgMTAgKTtcclxuXHJcbiAgICAgICAgICAgIGlmICggc2xpZGUuaXNNb3ZlZCB8fCBzbGlkZS5wb3MgIT09IHNlbGYuY3VyclBvcyB8fCAhZHVyYXRpb24gKSB7XHJcbiAgICAgICAgICAgICAgICBlZmZlY3QgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgY2FuIHpvb21cclxuICAgICAgICAgICAgaWYgKCBlZmZlY3QgPT09ICd6b29tJyAmJiAhKCBzbGlkZS5wb3MgPT09IHNlbGYuY3VyclBvcyAmJiBkdXJhdGlvbiAmJiBzbGlkZS50eXBlID09PSAnaW1hZ2UnICYmICFzbGlkZS5oYXNFcnJvciAmJiAoIHN0YXJ0ID0gc2VsZi5nZXRUaHVtYlBvcyggc2xpZGUgKSApICkgKSB7XHJcbiAgICAgICAgICAgICAgICBlZmZlY3QgPSAnZmFkZSc7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIFpvb20gYW5pbWF0aW9uXHJcbiAgICAgICAgICAgIC8vID09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgICAgICBpZiAoIGVmZmVjdCA9PT0gJ3pvb20nICkge1xyXG4gICAgICAgICAgICAgICAgZW5kID0gc2VsZi5nZXRGaXRQb3MoIHNsaWRlICk7XHJcblxyXG4gICAgICAgICAgICAgICAgZW5kLnNjYWxlWCA9IGVuZC53aWR0aCAgLyBzdGFydC53aWR0aDtcclxuICAgICAgICAgICAgICAgIGVuZC5zY2FsZVkgPSBlbmQuaGVpZ2h0IC8gc3RhcnQuaGVpZ2h0O1xyXG5cclxuICAgICAgICAgICAgICAgIGRlbGV0ZSBlbmQud2lkdGg7XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgZW5kLmhlaWdodDtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiB3ZSBuZWVkIHRvIGFuaW1hdGUgb3BhY2l0eVxyXG4gICAgICAgICAgICAgICAgb3BhY2l0eSA9IHNsaWRlLm9wdHMuem9vbU9wYWNpdHk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCBvcGFjaXR5ID09ICdhdXRvJyApIHtcclxuICAgICAgICAgICAgICAgICAgICBvcGFjaXR5ID0gTWF0aC5hYnMoIHNsaWRlLndpZHRoIC8gc2xpZGUuaGVpZ2h0IC0gc3RhcnQud2lkdGggLyBzdGFydC5oZWlnaHQgKSA+IDAuMTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIG9wYWNpdHkgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQub3BhY2l0eSA9IDAuMTtcclxuICAgICAgICAgICAgICAgICAgICBlbmQub3BhY2l0eSAgID0gMTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBEcmF3IGltYWdlIGF0IHN0YXJ0IHBvc2l0aW9uXHJcbiAgICAgICAgICAgICAgICAkLmZhbmN5Ym94LnNldFRyYW5zbGF0ZSggc2xpZGUuJGNvbnRlbnQucmVtb3ZlQ2xhc3MoICdmYW5jeWJveC1pcy1oaWRkZW4nICksIHN0YXJ0ICk7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yY2VSZWRyYXcoIHNsaWRlLiRjb250ZW50ICk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gU3RhcnQgYW5pbWF0aW9uXHJcbiAgICAgICAgICAgICAgICAkLmZhbmN5Ym94LmFuaW1hdGUoIHNsaWRlLiRjb250ZW50LCBlbmQsIGR1cmF0aW9uLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLmNvbXBsZXRlKCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHNlbGYudXBkYXRlU2xpZGUoIHNsaWRlICk7XHJcblxyXG5cclxuICAgICAgICAgICAgLy8gU2ltcGx5IHNob3cgY29udGVudFxyXG4gICAgICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgICAgICBpZiAoICFlZmZlY3QgKSB7XHJcbiAgICAgICAgICAgICAgICBmb3JjZVJlZHJhdyggJHNsaWRlICk7XHJcblxyXG4gICAgICAgICAgICAgICAgc2xpZGUuJGNvbnRlbnQucmVtb3ZlQ2xhc3MoICdmYW5jeWJveC1pcy1oaWRkZW4nICk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCBzbGlkZS5wb3MgPT09IHNlbGYuY3VyclBvcyApIHtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLmNvbXBsZXRlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAkLmZhbmN5Ym94LnN0b3AoICRzbGlkZSApO1xyXG5cclxuICAgICAgICAgICAgZWZmZWN0Q2xhc3NOYW1lID0gJ2ZhbmN5Ym94LWFuaW1hdGVkIGZhbmN5Ym94LXNsaWRlLS0nICsgKCBzbGlkZS5wb3MgPj0gc2VsZi5wcmV2UG9zID8gJ25leHQnIDogJ3ByZXZpb3VzJyApICsgJyBmYW5jeWJveC1meC0nICsgZWZmZWN0O1xyXG5cclxuICAgICAgICAgICAgJHNsaWRlLnJlbW92ZUF0dHIoICdzdHlsZScgKS5yZW1vdmVDbGFzcyggJ2ZhbmN5Ym94LXNsaWRlLS1jdXJyZW50IGZhbmN5Ym94LXNsaWRlLS1uZXh0IGZhbmN5Ym94LXNsaWRlLS1wcmV2aW91cycgKS5hZGRDbGFzcyggZWZmZWN0Q2xhc3NOYW1lICk7XHJcblxyXG4gICAgICAgICAgICBzbGlkZS4kY29udGVudC5yZW1vdmVDbGFzcyggJ2ZhbmN5Ym94LWlzLWhpZGRlbicgKTtcclxuXHJcbiAgICAgICAgICAgIC8vRm9yY2UgcmVmbG93IGZvciBDU1MzIHRyYW5zaXRpb25zXHJcbiAgICAgICAgICAgIGZvcmNlUmVkcmF3KCAkc2xpZGUgKTtcclxuXHJcbiAgICAgICAgICAgICQuZmFuY3lib3guYW5pbWF0ZSggJHNsaWRlLCAnZmFuY3lib3gtc2xpZGUtLWN1cnJlbnQnLCBkdXJhdGlvbiwgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgICAgICAgJHNsaWRlLnJlbW92ZUNsYXNzKCBlZmZlY3RDbGFzc05hbWUgKS5yZW1vdmVBdHRyKCAnc3R5bGUnICk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCBzbGlkZS5wb3MgPT09IHNlbGYuY3VyclBvcyApIHtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLmNvbXBsZXRlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9LCB0cnVlKTtcclxuXHJcbiAgICAgICAgfSxcclxuXHJcblxyXG4gICAgICAgIC8vIENoZWNrIGlmIHdlIGNhbiBhbmQgaGF2ZSB0byB6b29tIGZyb20gdGh1bWJuYWlsXHJcbiAgICAgICAgLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgZ2V0VGh1bWJQb3MgOiBmdW5jdGlvbiggc2xpZGUgKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgICAgIHZhciByZXogID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAvLyBDaGVjayBpZiBlbGVtZW50IGlzIGluc2lkZSB0aGUgdmlld3BvcnQgYnkgYXQgbGVhc3QgMSBwaXhlbFxyXG4gICAgICAgICAgICB2YXIgaXNFbGVtZW50VmlzaWJsZSA9IGZ1bmN0aW9uKCAkZWwgKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZWxlbWVudCA9ICRlbFswXTtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgZWxlbWVudFJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHBhcmVudFJlY3RzID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIHZpc2libGVJbkFsbFBhcmVudHM7XHJcblxyXG4gICAgICAgICAgICAgICAgd2hpbGUgKCBlbGVtZW50LnBhcmVudEVsZW1lbnQgIT09IG51bGwgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCAkKGVsZW1lbnQucGFyZW50RWxlbWVudCkuY3NzKCdvdmVyZmxvdycpID09PSAnaGlkZGVuJyAgfHwgJChlbGVtZW50LnBhcmVudEVsZW1lbnQpLmNzcygnb3ZlcmZsb3cnKSA9PT0gJ2F1dG8nICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnRSZWN0cy5wdXNoKGVsZW1lbnQucGFyZW50RWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50ID0gZWxlbWVudC5wYXJlbnRFbGVtZW50O1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHZpc2libGVJbkFsbFBhcmVudHMgPSBwYXJlbnRSZWN0cy5ldmVyeShmdW5jdGlvbihwYXJlbnRSZWN0KXtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdmlzaWJsZVBpeGVsWCA9IE1hdGgubWluKGVsZW1lbnRSZWN0LnJpZ2h0LCBwYXJlbnRSZWN0LnJpZ2h0KSAtIE1hdGgubWF4KGVsZW1lbnRSZWN0LmxlZnQsIHBhcmVudFJlY3QubGVmdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZpc2libGVQaXhlbFkgPSBNYXRoLm1pbihlbGVtZW50UmVjdC5ib3R0b20sIHBhcmVudFJlY3QuYm90dG9tKSAtIE1hdGgubWF4KGVsZW1lbnRSZWN0LnRvcCwgcGFyZW50UmVjdC50b3ApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmlzaWJsZVBpeGVsWCA+IDAgJiYgdmlzaWJsZVBpeGVsWSA+IDA7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdmlzaWJsZUluQWxsUGFyZW50cyAmJlxyXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnRSZWN0LmJvdHRvbSA+IDAgJiYgZWxlbWVudFJlY3QucmlnaHQgPiAwICYmXHJcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudFJlY3QubGVmdCA8ICQod2luZG93KS53aWR0aCgpICYmIGVsZW1lbnRSZWN0LnRvcCA8ICQod2luZG93KS5oZWlnaHQoKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHZhciAkdGh1bWIgICA9IHNsaWRlLm9wdHMuJHRodW1iO1xyXG4gICAgICAgICAgICB2YXIgdGh1bWJQb3MgPSAkdGh1bWIgPyAkdGh1bWIub2Zmc2V0KCkgOiAwO1xyXG4gICAgICAgICAgICB2YXIgc2xpZGVQb3M7XHJcblxyXG4gICAgICAgICAgICBpZiAoIHRodW1iUG9zICYmICR0aHVtYlswXS5vd25lckRvY3VtZW50ID09PSBkb2N1bWVudCAmJiBpc0VsZW1lbnRWaXNpYmxlKCAkdGh1bWIgKSApIHtcclxuICAgICAgICAgICAgICAgIHNsaWRlUG9zID0gc2VsZi4kcmVmcy5zdGFnZS5vZmZzZXQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXogPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9wICAgIDogdGh1bWJQb3MudG9wICAtIHNsaWRlUG9zLnRvcCAgKyBwYXJzZUZsb2F0KCAkdGh1bWIuY3NzKCBcImJvcmRlci10b3Atd2lkdGhcIiApIHx8IDAgKSxcclxuICAgICAgICAgICAgICAgICAgICBsZWZ0ICAgOiB0aHVtYlBvcy5sZWZ0IC0gc2xpZGVQb3MubGVmdCArIHBhcnNlRmxvYXQoICR0aHVtYi5jc3MoIFwiYm9yZGVyLWxlZnQtd2lkdGhcIiApIHx8IDAgKSxcclxuICAgICAgICAgICAgICAgICAgICB3aWR0aCAgOiAkdGh1bWIud2lkdGgoKSxcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgOiAkdGh1bWIuaGVpZ2h0KCksXHJcbiAgICAgICAgICAgICAgICAgICAgc2NhbGVYIDogMSxcclxuICAgICAgICAgICAgICAgICAgICBzY2FsZVkgOiAxXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gcmV6O1xyXG4gICAgICAgIH0sXHJcblxyXG5cclxuICAgICAgICAvLyBGaW5hbCBhZGp1c3RtZW50cyBhZnRlciBjdXJyZW50IGdhbGxlcnkgaXRlbSBpcyBtb3ZlZCB0byBwb3NpdGlvblxyXG4gICAgICAgIC8vIGFuZCBpdGBzIGNvbnRlbnQgaXMgbG9hZGVkXHJcbiAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgIGNvbXBsZXRlIDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcyxcclxuICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBzZWxmLmN1cnJlbnQsXHJcbiAgICAgICAgICAgICAgICBzbGlkZXMgID0ge30sXHJcbiAgICAgICAgICAgICAgICBwcm9taXNlO1xyXG5cclxuICAgICAgICAgICAgaWYgKCBjdXJyZW50LmlzTW92ZWQgfHwgIWN1cnJlbnQuaXNMb2FkZWQgfHwgY3VycmVudC5pc0NvbXBsZXRlICkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjdXJyZW50LmlzQ29tcGxldGUgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgY3VycmVudC4kc2xpZGUuc2libGluZ3MoKS50cmlnZ2VyKCAnb25SZXNldCcgKTtcclxuXHJcbiAgICAgICAgICAgIHNlbGYucHJlbG9hZCggJ2lubGluZScgKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFRyaWdnZXIgYW55IENTUzMgdHJhbnNpdG9uIGluc2lkZSB0aGUgc2xpZGVcclxuICAgICAgICAgICAgZm9yY2VSZWRyYXcoIGN1cnJlbnQuJHNsaWRlICk7XHJcblxyXG4gICAgICAgICAgICBjdXJyZW50LiRzbGlkZS5hZGRDbGFzcyggJ2ZhbmN5Ym94LXNsaWRlLS1jb21wbGV0ZScgKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFJlbW92ZSB1bm5lY2Vzc2FyeSBzbGlkZXNcclxuICAgICAgICAgICAgJC5lYWNoKCBzZWxmLnNsaWRlcywgZnVuY3Rpb24oIGtleSwgc2xpZGUgKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIHNsaWRlLnBvcyA+PSBzZWxmLmN1cnJQb3MgLSAxICYmIHNsaWRlLnBvcyA8PSBzZWxmLmN1cnJQb3MgKyAxICkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlc1sgc2xpZGUucG9zIF0gPSBzbGlkZTtcclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBzbGlkZSApIHtcclxuICAgICAgICAgICAgICAgICAgICAkLmZhbmN5Ym94LnN0b3AoIHNsaWRlLiRzbGlkZSApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBzbGlkZS4kc2xpZGUub2ZmKCkucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgc2VsZi5zbGlkZXMgPSBzbGlkZXM7XHJcblxyXG4gICAgICAgICAgICBzZWxmLnVwZGF0ZUN1cnNvcigpO1xyXG5cclxuICAgICAgICAgICAgc2VsZi50cmlnZ2VyKCAnYWZ0ZXJTaG93JyApO1xyXG5cclxuICAgICAgICAgICAgLy8gUGxheSBmaXJzdCBodG1sNSB2aWRlby9hdWRpb1xyXG4gICAgICAgICAgICBjdXJyZW50LiRzbGlkZS5maW5kKCAndmlkZW8sYXVkaW8nICkuZmlyc3QoKS50cmlnZ2VyKCAncGxheScgKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFRyeSB0byBmb2N1cyBvbiB0aGUgZmlyc3QgZm9jdXNhYmxlIGVsZW1lbnRcclxuICAgICAgICAgICAgaWYgKCAkKCBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICkuaXMoICdbZGlzYWJsZWRdJyApIHx8ICggY3VycmVudC5vcHRzLmF1dG9Gb2N1cyAmJiAhKCBjdXJyZW50LnR5cGUgPT0gJ2ltYWdlJyB8fCBjdXJyZW50LnR5cGUgPT09ICdpZnJhbWUnICkgKSApIHtcclxuICAgICAgICAgICAgICAgIHNlbGYuZm9jdXMoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9LFxyXG5cclxuXHJcbiAgICAgICAgLy8gUHJlbG9hZCBuZXh0IGFuZCBwcmV2aW91cyBzbGlkZXNcclxuICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgICAgICBwcmVsb2FkIDogZnVuY3Rpb24oIHR5cGUgKSB7XHJcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcyxcclxuICAgICAgICAgICAgICAgIG5leHQgPSBzZWxmLnNsaWRlc1sgc2VsZi5jdXJyUG9zICsgMSBdLFxyXG4gICAgICAgICAgICAgICAgcHJldiA9IHNlbGYuc2xpZGVzWyBzZWxmLmN1cnJQb3MgLSAxIF07XHJcblxyXG4gICAgICAgICAgICBpZiAoIG5leHQgJiYgbmV4dC50eXBlID09PSB0eXBlICkge1xyXG4gICAgICAgICAgICAgICAgc2VsZi5sb2FkU2xpZGUoIG5leHQgKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCBwcmV2ICYmIHByZXYudHlwZSA9PT0gdHlwZSApIHtcclxuICAgICAgICAgICAgICAgIHNlbGYubG9hZFNsaWRlKCBwcmV2ICk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuXHJcbiAgICAgICAgLy8gVHJ5IHRvIGZpbmQgYW5kIGZvY3VzIG9uIHRoZSBmaXJzdCBmb2N1c2FibGUgZWxlbWVudFxyXG4gICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgZm9jdXMgOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSB0aGlzLmN1cnJlbnQ7XHJcbiAgICAgICAgICAgIHZhciAkZWw7XHJcblxyXG4gICAgICAgICAgICBpZiAoIHRoaXMuaXNDbG9zaW5nICkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIGN1cnJlbnQgJiYgY3VycmVudC5pc0NvbXBsZXRlICkge1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIExvb2sgZm9yIGZpcnN0IGlucHV0IHdpdGggYXV0b2ZvY3VzIGF0dHJpYnV0ZVxyXG4gICAgICAgICAgICAgICAgJGVsID0gY3VycmVudC4kc2xpZGUuZmluZCgnaW5wdXRbYXV0b2ZvY3VzXTplbmFibGVkOnZpc2libGU6Zmlyc3QnKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoICEkZWwubGVuZ3RoICkge1xyXG4gICAgICAgICAgICAgICAgICAgICRlbCA9IGN1cnJlbnQuJHNsaWRlLmZpbmQoJ2J1dHRvbiw6aW5wdXQsW3RhYmluZGV4XSxhJykuZmlsdGVyKCc6ZW5hYmxlZDp2aXNpYmxlOmZpcnN0Jyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICRlbCA9ICRlbCAmJiAkZWwubGVuZ3RoID8gJGVsIDogdGhpcy4kcmVmcy5jb250YWluZXI7XHJcblxyXG4gICAgICAgICAgICAkZWwuZm9jdXMoKTtcclxuICAgICAgICB9LFxyXG5cclxuXHJcbiAgICAgICAgLy8gQWN0aXZhdGVzIGN1cnJlbnQgaW5zdGFuY2UgLSBicmluZ3MgY29udGFpbmVyIHRvIHRoZSBmcm9udCBhbmQgZW5hYmxlcyBrZXlib2FyZCxcclxuICAgICAgICAvLyBub3RpZmllcyBvdGhlciBpbnN0YW5jZXMgYWJvdXQgZGVhY3RpdmF0aW5nXHJcbiAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgIGFjdGl2YXRlIDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICAvLyBEZWFjdGl2YXRlIGFsbCBpbnN0YW5jZXNcclxuICAgICAgICAgICAgJCggJy5mYW5jeWJveC1jb250YWluZXInICkuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaW5zdGFuY2UgPSAkKHRoaXMpLmRhdGEoICdGYW5jeUJveCcgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBTa2lwIHNlbGYgYW5kIGNsb3NpbmcgaW5zdGFuY2VzXHJcbiAgICAgICAgICAgICAgICBpZiAoaW5zdGFuY2UgJiYgaW5zdGFuY2UuaWQgIT09IHNlbGYuaWQgJiYgIWluc3RhbmNlLmlzQ2xvc2luZykge1xyXG4gICAgICAgICAgICAgICAgICAgIGluc3RhbmNlLnRyaWdnZXIoICdvbkRlYWN0aXZhdGUnICk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGluc3RhbmNlLnJlbW92ZUV2ZW50cygpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZS5pc1Zpc2libGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgc2VsZi5pc1Zpc2libGUgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgaWYgKCBzZWxmLmN1cnJlbnQgfHwgc2VsZi5pc0lkbGUgKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLnVwZGF0ZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgIHNlbGYudXBkYXRlQ29udHJvbHMoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc2VsZi50cmlnZ2VyKCAnb25BY3RpdmF0ZScgKTtcclxuXHJcbiAgICAgICAgICAgIHNlbGYuYWRkRXZlbnRzKCk7XHJcbiAgICAgICAgfSxcclxuXHJcblxyXG4gICAgICAgIC8vIFN0YXJ0IGNsb3NpbmcgcHJvY2VkdXJlXHJcbiAgICAgICAgLy8gVGhpcyB3aWxsIHN0YXJ0IFwiem9vbS1vdXRcIiBhbmltYXRpb24gaWYgbmVlZGVkIGFuZCBjbGVhbiBldmVyeXRoaW5nIHVwIGFmdGVyd2FyZHNcclxuICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgY2xvc2UgOiBmdW5jdGlvbiggZSwgZCApIHtcclxuXHJcbiAgICAgICAgICAgIHZhciBzZWxmICAgID0gdGhpcztcclxuICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSBzZWxmLmN1cnJlbnQ7XHJcblxyXG4gICAgICAgICAgICB2YXIgZWZmZWN0LCBkdXJhdGlvbjtcclxuICAgICAgICAgICAgdmFyICR3aGF0LCBvcGFjaXR5LCBzdGFydCwgZW5kO1xyXG5cclxuICAgICAgICAgICAgdmFyIGRvbmUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHNlbGYuY2xlYW5VcCggZSApO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgaWYgKCBzZWxmLmlzQ2xvc2luZyApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc2VsZi5pc0Nsb3NpbmcgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgLy8gSWYgYmVmb3JlQ2xvc2UgY2FsbGJhY2sgcHJldmVudHMgY2xvc2luZywgbWFrZSBzdXJlIGNvbnRlbnQgaXMgY2VudGVyZWRcclxuICAgICAgICAgICAgaWYgKCBzZWxmLnRyaWdnZXIoICdiZWZvcmVDbG9zZScsIGUgKSA9PT0gZmFsc2UgKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLmlzQ2xvc2luZyA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgIHJlcXVlc3RBRnJhbWUoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi51cGRhdGUoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gUmVtb3ZlIGFsbCBldmVudHNcclxuICAgICAgICAgICAgLy8gSWYgdGhlcmUgYXJlIG11bHRpcGxlIGluc3RhbmNlcywgdGhleSB3aWxsIGJlIHNldCBhZ2FpbiBieSBcImFjdGl2YXRlXCIgbWV0aG9kXHJcbiAgICAgICAgICAgIHNlbGYucmVtb3ZlRXZlbnRzKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIGN1cnJlbnQudGltb3V0cyApIHtcclxuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCggY3VycmVudC50aW1vdXRzICk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICR3aGF0ICAgID0gY3VycmVudC4kY29udGVudDtcclxuICAgICAgICAgICAgZWZmZWN0ICAgPSBjdXJyZW50Lm9wdHMuYW5pbWF0aW9uRWZmZWN0O1xyXG4gICAgICAgICAgICBkdXJhdGlvbiA9ICQuaXNOdW1lcmljKCBkICkgPyBkIDogKCBlZmZlY3QgPyBjdXJyZW50Lm9wdHMuYW5pbWF0aW9uRHVyYXRpb24gOiAwICk7XHJcblxyXG4gICAgICAgICAgICAvLyBSZW1vdmUgb3RoZXIgc2xpZGVzXHJcbiAgICAgICAgICAgIGN1cnJlbnQuJHNsaWRlLm9mZiggdHJhbnNpdGlvbkVuZCApLnJlbW92ZUNsYXNzKCAnZmFuY3lib3gtc2xpZGUtLWNvbXBsZXRlIGZhbmN5Ym94LXNsaWRlLS1uZXh0IGZhbmN5Ym94LXNsaWRlLS1wcmV2aW91cyBmYW5jeWJveC1hbmltYXRlZCcgKTtcclxuXHJcbiAgICAgICAgICAgIGN1cnJlbnQuJHNsaWRlLnNpYmxpbmdzKCkudHJpZ2dlciggJ29uUmVzZXQnICkucmVtb3ZlKCk7XHJcblxyXG4gICAgICAgICAgICAvLyBUcmlnZ2VyIGFuaW1hdGlvbnNcclxuICAgICAgICAgICAgaWYgKCBkdXJhdGlvbiApIHtcclxuICAgICAgICAgICAgICAgIHNlbGYuJHJlZnMuY29udGFpbmVyLnJlbW92ZUNsYXNzKCAnZmFuY3lib3gtaXMtb3BlbicgKS5hZGRDbGFzcyggJ2ZhbmN5Ym94LWlzLWNsb3NpbmcnICk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIENsZWFuIHVwXHJcbiAgICAgICAgICAgIHNlbGYuaGlkZUxvYWRpbmcoIGN1cnJlbnQgKTtcclxuXHJcbiAgICAgICAgICAgIHNlbGYuaGlkZUNvbnRyb2xzKCk7XHJcblxyXG4gICAgICAgICAgICBzZWxmLnVwZGF0ZUN1cnNvcigpO1xyXG5cclxuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgcG9zc2libGUgdG8gem9vbS1vdXRcclxuICAgICAgICAgICAgaWYgKCBlZmZlY3QgPT09ICd6b29tJyAmJiAhKCBlICE9PSB0cnVlICYmICR3aGF0ICYmIGR1cmF0aW9uICYmIGN1cnJlbnQudHlwZSA9PT0gJ2ltYWdlJyAmJiAhY3VycmVudC5oYXNFcnJvciAmJiAoIGVuZCA9IHNlbGYuZ2V0VGh1bWJQb3MoIGN1cnJlbnQgKSApICkgKSB7XHJcbiAgICAgICAgICAgICAgICBlZmZlY3QgPSAnZmFkZSc7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICggZWZmZWN0ID09PSAnem9vbScgKSB7XHJcbiAgICAgICAgICAgICAgICAkLmZhbmN5Ym94LnN0b3AoICR3aGF0ICk7XHJcblxyXG4gICAgICAgICAgICAgICAgc3RhcnQgPSAkLmZhbmN5Ym94LmdldFRyYW5zbGF0ZSggJHdoYXQgKTtcclxuXHJcbiAgICAgICAgICAgICAgICBzdGFydC53aWR0aCAgPSBzdGFydC53aWR0aCAgKiBzdGFydC5zY2FsZVg7XHJcbiAgICAgICAgICAgICAgICBzdGFydC5oZWlnaHQgPSBzdGFydC5oZWlnaHQgKiBzdGFydC5zY2FsZVk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgd2UgbmVlZCB0byBhbmltYXRlIG9wYWNpdHlcclxuICAgICAgICAgICAgICAgIG9wYWNpdHkgPSBjdXJyZW50Lm9wdHMuem9vbU9wYWNpdHk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCBvcGFjaXR5ID09ICdhdXRvJyApIHtcclxuICAgICAgICAgICAgICAgICAgICBvcGFjaXR5ID0gTWF0aC5hYnMoIGN1cnJlbnQud2lkdGggLyBjdXJyZW50LmhlaWdodCAtIGVuZC53aWR0aCAvIGVuZC5oZWlnaHQgKSA+IDAuMTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIG9wYWNpdHkgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZW5kLm9wYWNpdHkgPSAwO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHN0YXJ0LnNjYWxlWCA9IHN0YXJ0LndpZHRoICAvIGVuZC53aWR0aDtcclxuICAgICAgICAgICAgICAgIHN0YXJ0LnNjYWxlWSA9IHN0YXJ0LmhlaWdodCAvIGVuZC5oZWlnaHQ7XHJcblxyXG4gICAgICAgICAgICAgICAgc3RhcnQud2lkdGggID0gZW5kLndpZHRoO1xyXG4gICAgICAgICAgICAgICAgc3RhcnQuaGVpZ2h0ID0gZW5kLmhlaWdodDtcclxuXHJcbiAgICAgICAgICAgICAgICAkLmZhbmN5Ym94LnNldFRyYW5zbGF0ZSggY3VycmVudC4kY29udGVudCwgc3RhcnQgKTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3JjZVJlZHJhdyggY3VycmVudC4kY29udGVudCApO1xyXG5cclxuICAgICAgICAgICAgICAgICQuZmFuY3lib3guYW5pbWF0ZSggY3VycmVudC4kY29udGVudCwgZW5kLCBkdXJhdGlvbiwgZG9uZSApO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIGVmZmVjdCAmJiBkdXJhdGlvbiApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBJZiBza2lwIGFuaW1hdGlvblxyXG4gICAgICAgICAgICAgICAgaWYgKCBlID09PSB0cnVlICkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoIGRvbmUsIGR1cmF0aW9uICk7XHJcblxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAkLmZhbmN5Ym94LmFuaW1hdGUoIGN1cnJlbnQuJHNsaWRlLnJlbW92ZUNsYXNzKCAnZmFuY3lib3gtc2xpZGUtLWN1cnJlbnQnICksICdmYW5jeWJveC1hbmltYXRlZCBmYW5jeWJveC1zbGlkZS0tcHJldmlvdXMgZmFuY3lib3gtZngtJyArIGVmZmVjdCwgZHVyYXRpb24sIGRvbmUgKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBkb25lKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH0sXHJcblxyXG5cclxuICAgICAgICAvLyBGaW5hbCBhZGp1c3RtZW50cyBhZnRlciByZW1vdmluZyB0aGUgaW5zdGFuY2VcclxuICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgY2xlYW5VcCA6IGZ1bmN0aW9uKCBlICkge1xyXG4gICAgICAgICAgICB2YXIgc2VsZiAgPSB0aGlzLFxyXG4gICAgICAgICAgICAgICAgJGJvZHkgPSAkKCAnYm9keScgKSxcclxuICAgICAgICAgICAgICAgIGluc3RhbmNlLFxyXG4gICAgICAgICAgICAgICAgb2Zmc2V0O1xyXG5cclxuICAgICAgICAgICAgc2VsZi5jdXJyZW50LiRzbGlkZS50cmlnZ2VyKCAnb25SZXNldCcgKTtcclxuXHJcbiAgICAgICAgICAgIHNlbGYuJHJlZnMuY29udGFpbmVyLmVtcHR5KCkucmVtb3ZlKCk7XHJcblxyXG4gICAgICAgICAgICBzZWxmLnRyaWdnZXIoICdhZnRlckNsb3NlJywgZSApO1xyXG5cclxuICAgICAgICAgICAgLy8gUGxhY2UgYmFjayBmb2N1c1xyXG4gICAgICAgICAgICBpZiAoIHNlbGYuJGxhc3RGb2N1cyAmJiAhIXNlbGYuY3VycmVudC5vcHRzLmJhY2tGb2N1cyApIHtcclxuICAgICAgICAgICAgICAgIHNlbGYuJGxhc3RGb2N1cy5mb2N1cygpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzZWxmLmN1cnJlbnQgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlcmUgYXJlIG90aGVyIGluc3RhbmNlc1xyXG4gICAgICAgICAgICBpbnN0YW5jZSA9ICQuZmFuY3lib3guZ2V0SW5zdGFuY2UoKTtcclxuXHJcbiAgICAgICAgICAgIGlmICggaW5zdGFuY2UgKSB7XHJcbiAgICAgICAgICAgICAgICBpbnN0YW5jZS5hY3RpdmF0ZSgpO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICAkVy5zY3JvbGxUb3AoIHNlbGYuc2Nyb2xsVG9wICkuc2Nyb2xsTGVmdCggc2VsZi5zY3JvbGxMZWZ0ICk7XHJcblxyXG4gICAgICAgICAgICAgICAgJGJvZHkucmVtb3ZlQ2xhc3MoICdmYW5jeWJveC1hY3RpdmUgY29tcGVuc2F0ZS1mb3Itc2Nyb2xsYmFyJyApO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICggJGJvZHkuaGFzQ2xhc3MoICdmYW5jeWJveC1pb3NmaXgnICkgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ID0gcGFyc2VJbnQoZG9jdW1lbnQuYm9keS5zdHlsZS50b3AsIDEwKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgJGJvZHkucmVtb3ZlQ2xhc3MoICdmYW5jeWJveC1pb3NmaXgnICkuY3NzKCAndG9wJywgJycgKS5zY3JvbGxUb3AoIG9mZnNldCAqIC0xICk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgJCggJyNmYW5jeWJveC1zdHlsZS1ub3Njcm9sbCcgKS5yZW1vdmUoKTtcclxuXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSxcclxuXHJcblxyXG4gICAgICAgIC8vIENhbGwgY2FsbGJhY2sgYW5kIHRyaWdnZXIgYW4gZXZlbnRcclxuICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgIHRyaWdnZXIgOiBmdW5jdGlvbiggbmFtZSwgc2xpZGUgKSB7XHJcbiAgICAgICAgICAgIHZhciBhcmdzICA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSksXHJcbiAgICAgICAgICAgICAgICBzZWxmICA9IHRoaXMsXHJcbiAgICAgICAgICAgICAgICBvYmogICA9IHNsaWRlICYmIHNsaWRlLm9wdHMgPyBzbGlkZSA6IHNlbGYuY3VycmVudCxcclxuICAgICAgICAgICAgICAgIHJlejtcclxuXHJcbiAgICAgICAgICAgIGlmICggb2JqICkge1xyXG4gICAgICAgICAgICAgICAgYXJncy51bnNoaWZ0KCBvYmogKTtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBvYmogPSBzZWxmO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBhcmdzLnVuc2hpZnQoIHNlbGYgKTtcclxuXHJcbiAgICAgICAgICAgIGlmICggJC5pc0Z1bmN0aW9uKCBvYmoub3B0c1sgbmFtZSBdICkgKSB7XHJcbiAgICAgICAgICAgICAgICByZXogPSBvYmoub3B0c1sgbmFtZSBdLmFwcGx5KCBvYmosIGFyZ3MgKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCByZXogPT09IGZhbHNlICkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlejtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCBuYW1lID09PSAnYWZ0ZXJDbG9zZScgfHwgIXNlbGYuJHJlZnMgKSB7XHJcbiAgICAgICAgICAgICAgICAkRC50cmlnZ2VyKCBuYW1lICsgJy5mYicsIGFyZ3MgKTtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLiRyZWZzLmNvbnRhaW5lci50cmlnZ2VyKCBuYW1lICsgJy5mYicsIGFyZ3MgKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9LFxyXG5cclxuXHJcbiAgICAgICAgLy8gVXBkYXRlIGluZm9iYXIgdmFsdWVzLCBuYXZpZ2F0aW9uIGJ1dHRvbiBzdGF0ZXMgYW5kIHJldmVhbCBjYXB0aW9uXHJcbiAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgIHVwZGF0ZUNvbnRyb2xzIDogZnVuY3Rpb24gKCBmb3JjZSApIHtcclxuXHJcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICAgICAgICAgIHZhciBjdXJyZW50ICA9IHNlbGYuY3VycmVudCxcclxuICAgICAgICAgICAgICAgIGluZGV4ICAgID0gY3VycmVudC5pbmRleCxcclxuICAgICAgICAgICAgICAgIGNhcHRpb24gID0gY3VycmVudC5vcHRzLmNhcHRpb24sXHJcbiAgICAgICAgICAgICAgICAkY29udGFpbmVyID0gc2VsZi4kcmVmcy5jb250YWluZXIsXHJcbiAgICAgICAgICAgICAgICAkY2FwdGlvbiAgID0gc2VsZi4kcmVmcy5jYXB0aW9uO1xyXG5cclxuICAgICAgICAgICAgLy8gUmVjYWxjdWxhdGUgY29udGVudCBkaW1lbnNpb25zXHJcbiAgICAgICAgICAgIGN1cnJlbnQuJHNsaWRlLnRyaWdnZXIoICdyZWZyZXNoJyApO1xyXG5cclxuICAgICAgICAgICAgc2VsZi4kY2FwdGlvbiA9IGNhcHRpb24gJiYgY2FwdGlvbi5sZW5ndGggPyAkY2FwdGlvbi5odG1sKCBjYXB0aW9uICkgOiBudWxsO1xyXG5cclxuICAgICAgICAgICAgaWYgKCAhc2VsZi5pc0hpZGRlbkNvbnRyb2xzICYmICFzZWxmLmlzSWRsZSApIHtcclxuICAgICAgICAgICAgICAgIHNlbGYuc2hvd0NvbnRyb2xzKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIFVwZGF0ZSBpbmZvIGFuZCBuYXZpZ2F0aW9uIGVsZW1lbnRzXHJcbiAgICAgICAgICAgICRjb250YWluZXIuZmluZCgnW2RhdGEtZmFuY3lib3gtY291bnRdJykuaHRtbCggc2VsZi5ncm91cC5sZW5ndGggKTtcclxuICAgICAgICAgICAgJGNvbnRhaW5lci5maW5kKCdbZGF0YS1mYW5jeWJveC1pbmRleF0nKS5odG1sKCBpbmRleCArIDEgKTtcclxuXHJcbiAgICAgICAgICAgICRjb250YWluZXIuZmluZCgnW2RhdGEtZmFuY3lib3gtcHJldl0nKS5wcm9wKCAnZGlzYWJsZWQnLCAoICFjdXJyZW50Lm9wdHMubG9vcCAmJiBpbmRleCA8PSAwICkgKTtcclxuICAgICAgICAgICAgJGNvbnRhaW5lci5maW5kKCdbZGF0YS1mYW5jeWJveC1uZXh0XScpLnByb3AoICdkaXNhYmxlZCcsICggIWN1cnJlbnQub3B0cy5sb29wICYmIGluZGV4ID49IHNlbGYuZ3JvdXAubGVuZ3RoIC0gMSApICk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIGN1cnJlbnQudHlwZSA9PT0gJ2ltYWdlJyApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBVcGRhdGUgZG93bmxvYWQgYnV0dG9uIHNvdXJjZVxyXG4gICAgICAgICAgICAgICAgJGNvbnRhaW5lci5maW5kKCdbZGF0YS1mYW5jeWJveC1kb3dubG9hZF0nKS5hdHRyKCAnaHJlZicsIGN1cnJlbnQub3B0cy5pbWFnZS5zcmMgfHwgY3VycmVudC5zcmMgKS5zaG93KCk7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgJGNvbnRhaW5lci5maW5kKCdbZGF0YS1mYW5jeWJveC1kb3dubG9hZF0sW2RhdGEtZmFuY3lib3gtem9vbV0nKS5oaWRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvLyBIaWRlIHRvb2xiYXIgYW5kIGNhcHRpb25cclxuICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgaGlkZUNvbnRyb2xzIDogZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgdGhpcy5pc0hpZGRlbkNvbnRyb2xzID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuJHJlZnMuY29udGFpbmVyLnJlbW92ZUNsYXNzKCAnZmFuY3lib3gtc2hvdy1pbmZvYmFyIGZhbmN5Ym94LXNob3ctdG9vbGJhciBmYW5jeWJveC1zaG93LWNhcHRpb24gZmFuY3lib3gtc2hvdy1uYXYnICk7XHJcblxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHNob3dDb250cm9scyA6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgICAgIHZhciBvcHRzID0gc2VsZi5jdXJyZW50ID8gc2VsZi5jdXJyZW50Lm9wdHMgOiBzZWxmLm9wdHM7XHJcbiAgICAgICAgICAgIHZhciAkY29udGFpbmVyID0gc2VsZi4kcmVmcy5jb250YWluZXI7XHJcblxyXG4gICAgICAgICAgICBzZWxmLmlzSGlkZGVuQ29udHJvbHMgICA9IGZhbHNlO1xyXG4gICAgICAgICAgICBzZWxmLmlkbGVTZWNvbmRzQ291bnRlciA9IDA7XHJcblxyXG4gICAgICAgICAgICAkY29udGFpbmVyXHJcbiAgICAgICAgICAgICAgICAudG9nZ2xlQ2xhc3MoICdmYW5jeWJveC1zaG93LXRvb2xiYXInLCAhISggb3B0cy50b29sYmFyICYmIG9wdHMuYnV0dG9ucyApIClcclxuICAgICAgICAgICAgICAgIC50b2dnbGVDbGFzcyggJ2ZhbmN5Ym94LXNob3ctaW5mb2JhcicsICEhKCBvcHRzLmluZm9iYXIgJiYgc2VsZi5ncm91cC5sZW5ndGggPiAxICkgKVxyXG4gICAgICAgICAgICAgICAgLnRvZ2dsZUNsYXNzKCAnZmFuY3lib3gtc2hvdy1uYXYnLCAgICAgISEoIG9wdHMuYXJyb3dzICYmIHNlbGYuZ3JvdXAubGVuZ3RoID4gMSApIClcclxuICAgICAgICAgICAgICAgIC50b2dnbGVDbGFzcyggJ2ZhbmN5Ym94LWlzLW1vZGFsJywgICAgICEhb3B0cy5tb2RhbCApO1xyXG5cclxuICAgICAgICAgICAgaWYgKCBzZWxmLiRjYXB0aW9uICkge1xyXG4gICAgICAgICAgICAgICAgJGNvbnRhaW5lci5hZGRDbGFzcyggJ2ZhbmN5Ym94LXNob3ctY2FwdGlvbiAnKTtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICRjb250YWluZXIucmVtb3ZlQ2xhc3MoICdmYW5jeWJveC1zaG93LWNhcHRpb24nICk7XHJcbiAgICAgICAgICAgfVxyXG5cclxuICAgICAgIH0sXHJcblxyXG5cclxuICAgICAgIC8vIFRvZ2dsZSB0b29sYmFyIGFuZCBjYXB0aW9uXHJcbiAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgICAgIHRvZ2dsZUNvbnRyb2xzIDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgaWYgKCB0aGlzLmlzSGlkZGVuQ29udHJvbHMgKSB7XHJcbiAgICAgICAgICAgICAgIHRoaXMuc2hvd0NvbnRyb2xzKCk7XHJcblxyXG4gICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgIHRoaXMuaGlkZUNvbnRyb2xzKCk7XHJcbiAgICAgICAgICAgfVxyXG5cclxuICAgICAgIH0sXHJcblxyXG5cclxuICAgIH0pO1xyXG5cclxuXHJcbiAgICAkLmZhbmN5Ym94ID0ge1xyXG5cclxuICAgICAgICB2ZXJzaW9uICA6IFwiMy4yLjEwXCIsXHJcbiAgICAgICAgZGVmYXVsdHMgOiBkZWZhdWx0cyxcclxuXHJcblxyXG4gICAgICAgIC8vIEdldCBjdXJyZW50IGluc3RhbmNlIGFuZCBleGVjdXRlIGEgY29tbWFuZC5cclxuICAgICAgICAvL1xyXG4gICAgICAgIC8vIEV4YW1wbGVzIG9mIHVzYWdlOlxyXG4gICAgICAgIC8vXHJcbiAgICAgICAgLy8gICAkaW5zdGFuY2UgPSAkLmZhbmN5Ym94LmdldEluc3RhbmNlKCk7XHJcbiAgICAgICAgLy8gICAkLmZhbmN5Ym94LmdldEluc3RhbmNlKCkuanVtcFRvKCAxICk7XHJcbiAgICAgICAgLy8gICAkLmZhbmN5Ym94LmdldEluc3RhbmNlKCAnanVtcFRvJywgMSApO1xyXG4gICAgICAgIC8vICAgJC5mYW5jeWJveC5nZXRJbnN0YW5jZSggZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgLy8gICAgICAgY29uc29sZS5pbmZvKCB0aGlzLmN1cnJJbmRleCApO1xyXG4gICAgICAgIC8vICAgfSk7XHJcbiAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgIGdldEluc3RhbmNlIDogZnVuY3Rpb24gKCBjb21tYW5kICkge1xyXG4gICAgICAgICAgICB2YXIgaW5zdGFuY2UgPSAkKCcuZmFuY3lib3gtY29udGFpbmVyOm5vdChcIi5mYW5jeWJveC1pcy1jbG9zaW5nXCIpOmxhc3QnKS5kYXRhKCAnRmFuY3lCb3gnICk7XHJcbiAgICAgICAgICAgIHZhciBhcmdzICAgICA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIGluc3RhbmNlIGluc3RhbmNlb2YgRmFuY3lCb3ggKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCAkLnR5cGUoIGNvbW1hbmQgKSA9PT0gJ3N0cmluZycgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2VbIGNvbW1hbmQgXS5hcHBseSggaW5zdGFuY2UsIGFyZ3MgKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCAkLnR5cGUoIGNvbW1hbmQgKSA9PT0gJ2Z1bmN0aW9uJyApIHtcclxuICAgICAgICAgICAgICAgICAgICBjb21tYW5kLmFwcGx5KCBpbnN0YW5jZSwgYXJncyApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBpbnN0YW5jZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgICAgICB9LFxyXG5cclxuXHJcbiAgICAgICAgLy8gQ3JlYXRlIG5ldyBpbnN0YW5jZVxyXG4gICAgICAgIC8vID09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgb3BlbiA6IGZ1bmN0aW9uICggaXRlbXMsIG9wdHMsIGluZGV4ICkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IEZhbmN5Qm94KCBpdGVtcywgb3B0cywgaW5kZXggKTtcclxuICAgICAgICB9LFxyXG5cclxuXHJcbiAgICAgICAgLy8gQ2xvc2UgY3VycmVudCBvciBhbGwgaW5zdGFuY2VzXHJcbiAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgIGNsb3NlIDogZnVuY3Rpb24gKCBhbGwgKSB7XHJcbiAgICAgICAgICAgIHZhciBpbnN0YW5jZSA9IHRoaXMuZ2V0SW5zdGFuY2UoKTtcclxuXHJcbiAgICAgICAgICAgIGlmICggaW5zdGFuY2UgKSB7XHJcbiAgICAgICAgICAgICAgICBpbnN0YW5jZS5jbG9zZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIFRyeSB0byBmaW5kIGFuZCBjbG9zZSBuZXh0IGluc3RhbmNlXHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCBhbGwgPT09IHRydWUgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8vIENsb3NlIGluc3RhbmNlcyBhbmQgdW5iaW5kIGFsbCBldmVudHNcclxuICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgZGVzdHJveSA6IGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgdGhpcy5jbG9zZSggdHJ1ZSApO1xyXG5cclxuICAgICAgICAgICAgJEQub2ZmKCAnY2xpY2suZmItc3RhcnQnICk7XHJcblxyXG4gICAgICAgIH0sXHJcblxyXG5cclxuICAgICAgICAvLyBUcnkgdG8gZGV0ZWN0IG1vYmlsZSBkZXZpY2VzXHJcbiAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgICAgICBpc01vYmlsZSA6IGRvY3VtZW50LmNyZWF0ZVRvdWNoICE9PSB1bmRlZmluZWQgJiYgL0FuZHJvaWR8d2ViT1N8aVBob25lfGlQYWR8aVBvZHxCbGFja0JlcnJ5fElFTW9iaWxlfE9wZXJhIE1pbmkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpLFxyXG5cclxuXHJcbiAgICAgICAgLy8gRGV0ZWN0IGlmICd0cmFuc2xhdGUzZCcgc3VwcG9ydCBpcyBhdmFpbGFibGVcclxuICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgICAgICB1c2UzZCA6IChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlICYmIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCBkaXYgKS5nZXRQcm9wZXJ0eVZhbHVlKCd0cmFuc2Zvcm0nKSAmJiAhKGRvY3VtZW50LmRvY3VtZW50TW9kZSAmJiBkb2N1bWVudC5kb2N1bWVudE1vZGUgPCAxMSk7XHJcbiAgICAgICAgfSgpKSxcclxuXHJcbiAgICAgICAgLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGdldCBjdXJyZW50IHZpc3VhbCBzdGF0ZSBvZiBhbiBlbGVtZW50XHJcbiAgICAgICAgLy8gcmV0dXJucyBhcnJheVsgdG9wLCBsZWZ0LCBob3Jpem9udGFsLXNjYWxlLCB2ZXJ0aWNhbC1zY2FsZSwgb3BhY2l0eSBdXHJcbiAgICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgIGdldFRyYW5zbGF0ZSA6IGZ1bmN0aW9uKCAkZWwgKSB7XHJcbiAgICAgICAgICAgIHZhciBtYXRyaXg7XHJcblxyXG4gICAgICAgICAgICBpZiAoICEkZWwgfHwgISRlbC5sZW5ndGggKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIG1hdHJpeCAgPSAkZWwuZXEoIDAgKS5jc3MoJ3RyYW5zZm9ybScpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCBtYXRyaXggJiYgbWF0cml4LmluZGV4T2YoICdtYXRyaXgnICkgIT09IC0xICkge1xyXG4gICAgICAgICAgICAgICAgbWF0cml4ID0gbWF0cml4LnNwbGl0KCcoJylbMV07XHJcbiAgICAgICAgICAgICAgICBtYXRyaXggPSBtYXRyaXguc3BsaXQoJyknKVswXTtcclxuICAgICAgICAgICAgICAgIG1hdHJpeCA9IG1hdHJpeC5zcGxpdCgnLCcpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbWF0cml4ID0gW107XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICggbWF0cml4Lmxlbmd0aCApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBJZiBJRVxyXG4gICAgICAgICAgICAgICAgaWYgKCBtYXRyaXgubGVuZ3RoID4gMTAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWF0cml4ID0gWyBtYXRyaXhbMTNdLCBtYXRyaXhbMTJdLCBtYXRyaXhbMF0sIG1hdHJpeFs1XSBdO1xyXG5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWF0cml4ID0gWyBtYXRyaXhbNV0sIG1hdHJpeFs0XSwgbWF0cml4WzBdLCBtYXRyaXhbM11dO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIG1hdHJpeCA9IG1hdHJpeC5tYXAocGFyc2VGbG9hdCk7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbWF0cml4ID0gWyAwLCAwLCAxLCAxIF07XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIHRyYW5zUmVnZXggPSAvXFwuKnRyYW5zbGF0ZVxcKCguKilweCwoLiopcHhcXCkvaTtcclxuICAgICAgICAgICAgICAgIHZhciB0cmFuc1JleiA9IHRyYW5zUmVnZXguZXhlYyggJGVsLmVxKCAwICkuYXR0cignc3R5bGUnKSApO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICggdHJhbnNSZXogKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWF0cml4WyAwIF0gPSBwYXJzZUZsb2F0KCB0cmFuc1JlelsyXSApO1xyXG4gICAgICAgICAgICAgICAgICAgIG1hdHJpeFsgMSBdID0gcGFyc2VGbG9hdCggdHJhbnNSZXpbMV0gKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHRvcCAgICAgOiBtYXRyaXhbIDAgXSxcclxuICAgICAgICAgICAgICAgIGxlZnQgICAgOiBtYXRyaXhbIDEgXSxcclxuICAgICAgICAgICAgICAgIHNjYWxlWCAgOiBtYXRyaXhbIDIgXSxcclxuICAgICAgICAgICAgICAgIHNjYWxlWSAgOiBtYXRyaXhbIDMgXSxcclxuICAgICAgICAgICAgICAgIG9wYWNpdHkgOiBwYXJzZUZsb2F0KCAkZWwuY3NzKCdvcGFjaXR5JykgKSxcclxuICAgICAgICAgICAgICAgIHdpZHRoICAgOiAkZWwud2lkdGgoKSxcclxuICAgICAgICAgICAgICAgIGhlaWdodCAgOiAkZWwuaGVpZ2h0KClcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgfSxcclxuXHJcblxyXG4gICAgICAgIC8vIFNob3J0Y3V0IGZvciBzZXR0aW5nIFwidHJhbnNsYXRlM2RcIiBwcm9wZXJ0aWVzIGZvciBlbGVtZW50XHJcbiAgICAgICAgLy8gQ2FuIHNldCBiZSB1c2VkIHRvIHNldCBvcGFjaXR5LCB0b29cclxuICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgICAgICBzZXRUcmFuc2xhdGUgOiBmdW5jdGlvbiggJGVsLCBwcm9wcyApIHtcclxuICAgICAgICAgICAgdmFyIHN0ciAgPSAnJztcclxuICAgICAgICAgICAgdmFyIGNzcyAgPSB7fTtcclxuXHJcbiAgICAgICAgICAgIGlmICggISRlbCB8fCAhcHJvcHMgKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICggcHJvcHMubGVmdCAhPT0gdW5kZWZpbmVkIHx8IHByb3BzLnRvcCAhPT0gdW5kZWZpbmVkICkge1xyXG4gICAgICAgICAgICAgICAgc3RyID0gKCBwcm9wcy5sZWZ0ID09PSB1bmRlZmluZWQgPyAkZWwucG9zaXRpb24oKS5sZWZ0IDogcHJvcHMubGVmdCApICArICdweCwgJyArICggcHJvcHMudG9wID09PSB1bmRlZmluZWQgPyAkZWwucG9zaXRpb24oKS50b3AgOiBwcm9wcy50b3AgKSArICdweCc7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCB0aGlzLnVzZTNkICkge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0ciA9ICd0cmFuc2xhdGUzZCgnICsgc3RyICsgJywgMHB4KSc7XHJcblxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBzdHIgPSAndHJhbnNsYXRlKCcgKyBzdHIgKyAnKSc7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICggcHJvcHMuc2NhbGVYICE9PSB1bmRlZmluZWQgJiYgcHJvcHMuc2NhbGVZICE9PSB1bmRlZmluZWQgKSB7XHJcbiAgICAgICAgICAgICAgICBzdHIgPSAoc3RyLmxlbmd0aCA/IHN0ciArICcgJyA6ICcnKSArICdzY2FsZSgnICsgcHJvcHMuc2NhbGVYICsgJywgJyArIHByb3BzLnNjYWxlWSArICcpJztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCBzdHIubGVuZ3RoICkge1xyXG4gICAgICAgICAgICAgICAgY3NzLnRyYW5zZm9ybSA9IHN0cjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCBwcm9wcy5vcGFjaXR5ICE9PSB1bmRlZmluZWQgKSB7XHJcbiAgICAgICAgICAgICAgICBjc3Mub3BhY2l0eSA9IHByb3BzLm9wYWNpdHk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICggcHJvcHMud2lkdGggIT09IHVuZGVmaW5lZCApIHtcclxuICAgICAgICAgICAgICAgIGNzcy53aWR0aCA9IHByb3BzLndpZHRoO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIHByb3BzLmhlaWdodCAhPT0gdW5kZWZpbmVkICkge1xyXG4gICAgICAgICAgICAgICAgY3NzLmhlaWdodCA9IHByb3BzLmhlaWdodDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuICRlbC5jc3MoIGNzcyApO1xyXG4gICAgICAgIH0sXHJcblxyXG5cclxuICAgICAgICAvLyBTaW1wbGUgQ1NTIHRyYW5zaXRpb24gaGFuZGxlclxyXG4gICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgIGFuaW1hdGUgOiBmdW5jdGlvbiAoICRlbCwgdG8sIGR1cmF0aW9uLCBjYWxsYmFjaywgbGVhdmVBbmltYXRpb25OYW1lICkge1xyXG4gICAgICAgICAgICBpZiAoICQuaXNGdW5jdGlvbiggZHVyYXRpb24gKSApIHtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrID0gZHVyYXRpb247XHJcbiAgICAgICAgICAgICAgICBkdXJhdGlvbiA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICggISQuaXNQbGFpbk9iamVjdCggdG8gKSApIHtcclxuICAgICAgICAgICAgICAgICRlbC5yZW1vdmVBdHRyKCAnc3R5bGUnICk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICRlbC5vbiggdHJhbnNpdGlvbkVuZCwgZnVuY3Rpb24oZSkge1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIFNraXAgZXZlbnRzIGZyb20gY2hpbGQgZWxlbWVudHMgYW5kIHotaW5kZXggY2hhbmdlXHJcbiAgICAgICAgICAgICAgICBpZiAoIGUgJiYgZS5vcmlnaW5hbEV2ZW50ICYmICggISRlbC5pcyggZS5vcmlnaW5hbEV2ZW50LnRhcmdldCApIHx8IGUub3JpZ2luYWxFdmVudC5wcm9wZXJ0eU5hbWUgPT0gJ3otaW5kZXgnICkgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICQuZmFuY3lib3guc3RvcCggJGVsICk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCAkLmlzUGxhaW5PYmplY3QoIHRvICkgKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICggdG8uc2NhbGVYICE9PSB1bmRlZmluZWQgJiYgdG8uc2NhbGVZICE9PSB1bmRlZmluZWQgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRlbC5jc3MoICd0cmFuc2l0aW9uLWR1cmF0aW9uJywgJycgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvLndpZHRoICA9IE1hdGgucm91bmQoICRlbC53aWR0aCgpICAqIHRvLnNjYWxlWCApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0by5oZWlnaHQgPSBNYXRoLnJvdW5kKCAkZWwuaGVpZ2h0KCkgKiB0by5zY2FsZVkgKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvLnNjYWxlWCA9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvLnNjYWxlWSA9IDE7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkLmZhbmN5Ym94LnNldFRyYW5zbGF0ZSggJGVsLCB0byApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBsZWF2ZUFuaW1hdGlvbk5hbWUgPT09IGZhbHNlICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkZWwucmVtb3ZlQXR0ciggJ3N0eWxlJyApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBsZWF2ZUFuaW1hdGlvbk5hbWUgIT09IHRydWUgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJGVsLnJlbW92ZUNsYXNzKCB0byApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICggJC5pc0Z1bmN0aW9uKCBjYWxsYmFjayApICkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKCBlICk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGlmICggJC5pc051bWVyaWMoIGR1cmF0aW9uICkgKSB7XHJcbiAgICAgICAgICAgICAgICAkZWwuY3NzKCAndHJhbnNpdGlvbi1kdXJhdGlvbicsIGR1cmF0aW9uICsgJ21zJyApO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoICQuaXNQbGFpbk9iamVjdCggdG8gKSApIHtcclxuICAgICAgICAgICAgICAgICQuZmFuY3lib3guc2V0VHJhbnNsYXRlKCAkZWwsIHRvICk7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgJGVsLmFkZENsYXNzKCB0byApO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIHRvLnNjYWxlWCAmJiAkZWwuaGFzQ2xhc3MoICdmYW5jeWJveC1pbWFnZS13cmFwJyApICkge1xyXG4gICAgICAgICAgICAgICAgJGVsLnBhcmVudCgpLmFkZENsYXNzKCAnZmFuY3lib3gtaXMtc2NhbGluZycgKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHRoYXQgYHRyYW5zaXRpb25lbmRgIGNhbGxiYWNrIGdldHMgZmlyZWRcclxuICAgICAgICAgICAgJGVsLmRhdGEoXCJ0aW1lclwiLCBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgJGVsLnRyaWdnZXIoICd0cmFuc2l0aW9uZW5kJyApO1xyXG4gICAgICAgICAgICB9LCBkdXJhdGlvbiArIDE2KSk7XHJcblxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHN0b3AgOiBmdW5jdGlvbiggJGVsICkge1xyXG4gICAgICAgICAgICBjbGVhclRpbWVvdXQoICRlbC5kYXRhKFwidGltZXJcIikgKTtcclxuXHJcbiAgICAgICAgICAgICRlbC5vZmYoICd0cmFuc2l0aW9uZW5kJyApLmNzcyggJ3RyYW5zaXRpb24tZHVyYXRpb24nLCAnJyApO1xyXG5cclxuICAgICAgICAgICAgaWYgKCAkZWwuaGFzQ2xhc3MoICdmYW5jeWJveC1pbWFnZS13cmFwJyApICkge1xyXG4gICAgICAgICAgICAgICAgJGVsLnBhcmVudCgpLnJlbW92ZUNsYXNzKCAnZmFuY3lib3gtaXMtc2NhbGluZycgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9O1xyXG5cclxuXHJcbiAgICAvLyBEZWZhdWx0IGNsaWNrIGhhbmRsZXIgZm9yIFwiZmFuY3lib3hlZFwiIGxpbmtzXHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgIGZ1bmN0aW9uIF9ydW4oIGUgKSB7XHJcbiAgICAgICAgdmFyICR0YXJnZXRcdD0gJCggZS5jdXJyZW50VGFyZ2V0ICksXHJcbiAgICAgICAgICAgIG9wdHNcdD0gZS5kYXRhID8gZS5kYXRhLm9wdGlvbnMgOiB7fSxcclxuICAgICAgICAgICAgdmFsdWVcdD0gJHRhcmdldC5hdHRyKCAnZGF0YS1mYW5jeWJveCcgKSB8fCAnJyxcclxuICAgICAgICAgICAgaW5kZXhcdD0gMCxcclxuICAgICAgICAgICAgaXRlbXMgICA9IFtdO1xyXG5cclxuICAgICAgICAvLyBBdm9pZCBvcGVuaW5nIG11bHRpcGxlIHRpbWVzXHJcbiAgICAgICAgaWYgKCBlLmlzRGVmYXVsdFByZXZlbnRlZCgpICkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgIC8vIEdldCBhbGwgcmVsYXRlZCBpdGVtcyBhbmQgZmluZCBpbmRleCBmb3IgY2xpY2tlZCBvbmVcclxuICAgICAgICBpZiAoIHZhbHVlICkge1xyXG4gICAgICAgICAgICBpdGVtcyA9IG9wdHMuc2VsZWN0b3IgPyAkKCBvcHRzLnNlbGVjdG9yICkgOiAoIGUuZGF0YSA/IGUuZGF0YS5pdGVtcyA6IFtdICk7XHJcbiAgICAgICAgICAgIGl0ZW1zID0gaXRlbXMubGVuZ3RoID8gaXRlbXMuZmlsdGVyKCAnW2RhdGEtZmFuY3lib3g9XCInICsgdmFsdWUgKyAnXCJdJyApIDogJCggJ1tkYXRhLWZhbmN5Ym94PVwiJyArIHZhbHVlICsgJ1wiXScgKTtcclxuXHJcbiAgICAgICAgICAgIGluZGV4ID0gaXRlbXMuaW5kZXgoICR0YXJnZXQgKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFNvbWV0aW1lcyBjdXJyZW50IGl0ZW0gY2FuIG5vdCBiZSBmb3VuZFxyXG4gICAgICAgICAgICAvLyAoZm9yIGV4YW1wbGUsIHdoZW4gc2xpZGVyIGNsb25lcyBpdGVtcylcclxuICAgICAgICAgICAgaWYgKCBpbmRleCA8IDAgKSB7XHJcbiAgICAgICAgICAgICAgICBpbmRleCA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaXRlbXMgPSBbICR0YXJnZXQgXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICQuZmFuY3lib3gub3BlbiggaXRlbXMsIG9wdHMsIGluZGV4ICk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8vIENyZWF0ZSBhIGpRdWVyeSBwbHVnaW5cclxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAkLmZuLmZhbmN5Ym94ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuICAgICAgICB2YXIgc2VsZWN0b3I7XHJcblxyXG4gICAgICAgIG9wdGlvbnMgID0gb3B0aW9ucyB8fCB7fTtcclxuICAgICAgICBzZWxlY3RvciA9IG9wdGlvbnMuc2VsZWN0b3IgfHwgZmFsc2U7XHJcblxyXG4gICAgICAgIGlmICggc2VsZWN0b3IgKSB7XHJcblxyXG4gICAgICAgICAgICAkKCAnYm9keScgKS5vZmYoICdjbGljay5mYi1zdGFydCcsIHNlbGVjdG9yICkub24oICdjbGljay5mYi1zdGFydCcsIHNlbGVjdG9yLCB7XHJcbiAgICAgICAgICAgICAgICBvcHRpb25zIDogb3B0aW9uc1xyXG4gICAgICAgICAgICB9LCBfcnVuICk7XHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICB0aGlzLm9mZiggJ2NsaWNrLmZiLXN0YXJ0JyApLm9uKCAnY2xpY2suZmItc3RhcnQnLCB7XHJcbiAgICAgICAgICAgICAgICBpdGVtcyAgIDogdGhpcyxcclxuICAgICAgICAgICAgICAgIG9wdGlvbnMgOiBvcHRpb25zXHJcbiAgICAgICAgICAgIH0sIF9ydW4pO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcblxyXG4gICAgLy8gU2VsZiBpbml0aWFsaXppbmcgcGx1Z2luXHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAkRC5vbiggJ2NsaWNrLmZiLXN0YXJ0JywgJ1tkYXRhLWZhbmN5Ym94XScsIF9ydW4gKTtcclxuXHJcbn0oIHdpbmRvdywgZG9jdW1lbnQsIHdpbmRvdy5qUXVlcnkgfHwgalF1ZXJ5ICkpO1xyXG5cclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuLy9cclxuLy8gTWVkaWFcclxuLy8gQWRkcyBhZGRpdGlvbmFsIG1lZGlhIHR5cGUgc3VwcG9ydFxyXG4vL1xyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG47KGZ1bmN0aW9uICgkKSB7XHJcblxyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0Ly8gRm9ybWF0cyBtYXRjaGluZyB1cmwgdG8gZmluYWwgZm9ybVxyXG5cclxuXHR2YXIgZm9ybWF0ID0gZnVuY3Rpb24gKHVybCwgcmV6LCBwYXJhbXMpIHtcclxuXHRcdGlmICggIXVybCApIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdHBhcmFtcyA9IHBhcmFtcyB8fCAnJztcclxuXHJcblx0XHRpZiAoICQudHlwZShwYXJhbXMpID09PSBcIm9iamVjdFwiICkge1xyXG5cdFx0XHRwYXJhbXMgPSAkLnBhcmFtKHBhcmFtcywgdHJ1ZSk7XHJcblx0XHR9XHJcblxyXG5cdFx0JC5lYWNoKHJleiwgZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcclxuXHRcdFx0dXJsID0gdXJsLnJlcGxhY2UoJyQnICsga2V5LCB2YWx1ZSB8fCAnJyk7XHJcblx0XHR9KTtcclxuXHJcblx0XHRpZiAocGFyYW1zLmxlbmd0aCkge1xyXG5cdFx0XHR1cmwgKz0gKHVybC5pbmRleE9mKCc/JykgPiAwID8gJyYnIDogJz8nKSArIHBhcmFtcztcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdXJsO1xyXG5cdH07XHJcblxyXG5cdC8vIE9iamVjdCBjb250YWluaW5nIHByb3BlcnRpZXMgZm9yIGVhY2ggbWVkaWEgdHlwZVxyXG5cclxuXHR2YXIgZGVmYXVsdHMgPSB7XHJcblx0XHR5b3V0dWJlIDoge1xyXG5cdFx0XHRtYXRjaGVyIDogLyh5b3V0dWJlXFwuY29tfHlvdXR1XFwuYmV8eW91dHViZVxcLW5vY29va2llXFwuY29tKVxcLyh3YXRjaFxcPyguKiYpP3Y9fHZcXC98dVxcL3xlbWJlZFxcLz8pPyh2aWRlb3Nlcmllc1xcP2xpc3Q9KC4qKXxbXFx3LV17MTF9fFxcP2xpc3RUeXBlPSguKikmbGlzdD0oLiopKSguKikvaSxcclxuXHRcdFx0cGFyYW1zICA6IHtcclxuXHRcdFx0XHRhdXRvcGxheSA6IDEsXHJcblx0XHRcdFx0YXV0b2hpZGUgOiAxLFxyXG5cdFx0XHRcdGZzICA6IDEsXHJcblx0XHRcdFx0cmVsIDogMCxcclxuXHRcdFx0XHRoZCAgOiAxLFxyXG5cdFx0XHRcdHdtb2RlIDogJ3RyYW5zcGFyZW50JyxcclxuXHRcdFx0XHRlbmFibGVqc2FwaSA6IDEsXHJcblx0XHRcdFx0aHRtbDUgOiAxXHJcblx0XHRcdH0sXHJcblx0XHRcdHBhcmFtUGxhY2UgOiA4LFxyXG5cdFx0XHR0eXBlICA6ICdpZnJhbWUnLFxyXG5cdFx0XHR1cmwgICA6ICcvL3d3dy55b3V0dWJlLmNvbS9lbWJlZC8kNCcsXHJcblx0XHRcdHRodW1iIDogJy8vaW1nLnlvdXR1YmUuY29tL3ZpLyQ0L2hxZGVmYXVsdC5qcGcnXHJcblx0XHR9LFxyXG5cclxuXHRcdHZpbWVvIDoge1xyXG5cdFx0XHRtYXRjaGVyIDogL14uK3ZpbWVvLmNvbVxcLyguKlxcLyk/KFtcXGRdKykoLiopPy8sXHJcblx0XHRcdHBhcmFtcyAgOiB7XHJcblx0XHRcdFx0YXV0b3BsYXkgOiAxLFxyXG5cdFx0XHRcdGhkIDogMSxcclxuXHRcdFx0XHRzaG93X3RpdGxlICAgIDogMSxcclxuXHRcdFx0XHRzaG93X2J5bGluZSAgIDogMSxcclxuXHRcdFx0XHRzaG93X3BvcnRyYWl0IDogMCxcclxuXHRcdFx0XHRmdWxsc2NyZWVuICAgIDogMSxcclxuXHRcdFx0XHRhcGkgOiAxXHJcblx0XHRcdH0sXHJcblx0XHRcdHBhcmFtUGxhY2UgOiAzLFxyXG5cdFx0XHR0eXBlIDogJ2lmcmFtZScsXHJcblx0XHRcdHVybCA6ICcvL3BsYXllci52aW1lby5jb20vdmlkZW8vJDInXHJcblx0XHR9LFxyXG5cclxuXHRcdG1ldGFjYWZlIDoge1xyXG5cdFx0XHRtYXRjaGVyIDogL21ldGFjYWZlLmNvbVxcL3dhdGNoXFwvKFxcZCspXFwvKC4qKT8vLFxyXG5cdFx0XHR0eXBlICAgIDogJ2lmcmFtZScsXHJcblx0XHRcdHVybCAgICAgOiAnLy93d3cubWV0YWNhZmUuY29tL2VtYmVkLyQxLz9hcD0xJ1xyXG5cdFx0fSxcclxuXHJcblx0XHRkYWlseW1vdGlvbiA6IHtcclxuXHRcdFx0bWF0Y2hlciA6IC9kYWlseW1vdGlvbi5jb21cXC92aWRlb1xcLyguKilcXC8/KC4qKS8sXHJcblx0XHRcdHBhcmFtcyA6IHtcclxuXHRcdFx0XHRhZGRpdGlvbmFsSW5mb3MgOiAwLFxyXG5cdFx0XHRcdGF1dG9TdGFydCA6IDFcclxuXHRcdFx0fSxcclxuXHRcdFx0dHlwZSA6ICdpZnJhbWUnLFxyXG5cdFx0XHR1cmwgIDogJy8vd3d3LmRhaWx5bW90aW9uLmNvbS9lbWJlZC92aWRlby8kMSdcclxuXHRcdH0sXHJcblxyXG5cdFx0dmluZSA6IHtcclxuXHRcdFx0bWF0Y2hlciA6IC92aW5lLmNvXFwvdlxcLyhbYS16QS1aMC05XFw/XFw9XFwtXSspLyxcclxuXHRcdFx0dHlwZSAgICA6ICdpZnJhbWUnLFxyXG5cdFx0XHR1cmwgICAgIDogJy8vdmluZS5jby92LyQxL2VtYmVkL3NpbXBsZSdcclxuXHRcdH0sXHJcblxyXG5cdFx0aW5zdGFncmFtIDoge1xyXG5cdFx0XHRtYXRjaGVyIDogLyhpbnN0YWdyXFwuYW18aW5zdGFncmFtXFwuY29tKVxcL3BcXC8oW2EtekEtWjAtOV9cXC1dKylcXC8/L2ksXHJcblx0XHRcdHR5cGUgICAgOiAnaW1hZ2UnLFxyXG5cdFx0XHR1cmwgICAgIDogJy8vJDEvcC8kMi9tZWRpYS8/c2l6ZT1sJ1xyXG5cdFx0fSxcclxuXHJcblx0XHQvLyBFeGFtcGxlczpcclxuXHRcdC8vIGh0dHA6Ly9tYXBzLmdvb2dsZS5jb20vP2xsPTQ4Ljg1Nzk5NSwyLjI5NDI5NyZzcG49MC4wMDc2NjYsMC4wMjExMzYmdD1tJno9MTZcclxuXHRcdC8vIGh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vbWFwcy9AMzcuNzg1MjAwNiwtMTIyLjQxNDYzNTUsMTQuNjV6XHJcblx0XHQvLyBodHRwczovL3d3dy5nb29nbGUuY29tL21hcHMvcGxhY2UvR29vZ2xlcGxleC9AMzcuNDIyMDA0MSwtMTIyLjA4MzM0OTQsMTd6L2RhdGE9ITRtNSEzbTQhMXMweDA6MHg2YzI5NmM2NjYxOTM2N2UwIThtMiEzZDM3LjQyMTk5OTghNGQtMTIyLjA4NDA1NzJcclxuXHRcdGdtYXBfcGxhY2UgOiB7XHJcblx0XHRcdG1hdGNoZXIgOiAvKG1hcHNcXC4pP2dvb2dsZVxcLihbYS16XXsyLDN9KFxcLlthLXpdezJ9KT8pXFwvKCgobWFwc1xcLyhwbGFjZVxcLyguKilcXC8pP1xcQCguKiksKFxcZCsuP1xcZCs/KXopKXwoXFw/bGw9KSkoLiopPy9pLFxyXG5cdFx0XHR0eXBlICAgIDogJ2lmcmFtZScsXHJcblx0XHRcdHVybCAgICAgOiBmdW5jdGlvbiAocmV6KSB7XHJcblx0XHRcdFx0cmV0dXJuICcvL21hcHMuZ29vZ2xlLicgKyByZXpbMl0gKyAnLz9sbD0nICsgKCByZXpbOV0gPyByZXpbOV0gKyAnJno9JyArIE1hdGguZmxvb3IoICByZXpbMTBdICApICsgKCByZXpbMTJdID8gcmV6WzEyXS5yZXBsYWNlKC9eXFwvLywgXCImXCIpIDogJycgKSAgOiByZXpbMTJdICkgKyAnJm91dHB1dD0nICsgKCByZXpbMTJdICYmIHJlelsxMl0uaW5kZXhPZignbGF5ZXI9YycpID4gMCA/ICdzdmVtYmVkJyA6ICdlbWJlZCcgKTtcclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHJcblx0XHQvLyBFeGFtcGxlczpcclxuXHRcdC8vIGh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vbWFwcy9zZWFyY2gvRW1waXJlK1N0YXRlK0J1aWxkaW5nL1xyXG5cdFx0Ly8gaHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9tYXBzL3NlYXJjaC8/YXBpPTEmcXVlcnk9Y2VudHVyeWxpbmsrZmllbGRcclxuXHRcdC8vIGh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vbWFwcy9zZWFyY2gvP2FwaT0xJnF1ZXJ5PTQ3LjU5NTE1MTgsLTEyMi4zMzE2MzkzXHJcblx0XHRnbWFwX3NlYXJjaCA6IHtcclxuXHRcdFx0bWF0Y2hlciA6IC8obWFwc1xcLik/Z29vZ2xlXFwuKFthLXpdezIsM30oXFwuW2Etel17Mn0pPylcXC8obWFwc1xcL3NlYXJjaFxcLykoLiopL2ksXHJcblx0XHRcdHR5cGUgICAgOiAnaWZyYW1lJyxcclxuXHRcdFx0dXJsICAgICA6IGZ1bmN0aW9uIChyZXopIHtcclxuXHRcdFx0XHRyZXR1cm4gJy8vbWFwcy5nb29nbGUuJyArIHJlelsyXSArICcvbWFwcz9xPScgKyByZXpbNV0ucmVwbGFjZSgncXVlcnk9JywgJ3E9JykucmVwbGFjZSgnYXBpPTEnLCAnJykgKyAnJm91dHB1dD1lbWJlZCc7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9O1xyXG5cclxuXHQkKGRvY3VtZW50KS5vbignb2JqZWN0TmVlZHNUeXBlLmZiJywgZnVuY3Rpb24gKGUsIGluc3RhbmNlLCBpdGVtKSB7XHJcblxyXG5cdFx0dmFyIHVybFx0ID0gaXRlbS5zcmMgfHwgJycsXHJcblx0XHRcdHR5cGUgPSBmYWxzZSxcclxuXHRcdFx0bWVkaWEsXHJcblx0XHRcdHRodW1iLFxyXG5cdFx0XHRyZXosXHJcblx0XHRcdHBhcmFtcyxcclxuXHRcdFx0dXJsUGFyYW1zLFxyXG5cdFx0XHRwYXJhbU9iaixcclxuXHRcdFx0cHJvdmlkZXI7XHJcblxyXG5cdFx0bWVkaWEgPSAkLmV4dGVuZCggdHJ1ZSwge30sIGRlZmF1bHRzLCBpdGVtLm9wdHMubWVkaWEgKTtcclxuXHJcblx0XHQvLyBMb29rIGZvciBhbnkgbWF0Y2hpbmcgbWVkaWEgdHlwZVxyXG5cdFx0JC5lYWNoKG1lZGlhLCBmdW5jdGlvbiAoIHByb3ZpZGVyTmFtZSwgcHJvdmlkZXJPcHRzICkge1xyXG5cdFx0XHRyZXogPSB1cmwubWF0Y2goIHByb3ZpZGVyT3B0cy5tYXRjaGVyICk7XHJcblxyXG5cdFx0XHRpZiAoICFyZXogKSB7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR0eXBlICAgICA9IHByb3ZpZGVyT3B0cy50eXBlO1xyXG5cdFx0XHRwYXJhbU9iaiA9IHt9O1xyXG5cclxuXHRcdFx0aWYgKCBwcm92aWRlck9wdHMucGFyYW1QbGFjZSAmJiByZXpbIHByb3ZpZGVyT3B0cy5wYXJhbVBsYWNlIF0gKSB7XHJcblx0XHRcdFx0dXJsUGFyYW1zID0gcmV6WyBwcm92aWRlck9wdHMucGFyYW1QbGFjZSBdO1xyXG5cclxuXHRcdFx0XHRpZiAoIHVybFBhcmFtc1sgMCBdID09ICc/JyApIHtcclxuXHRcdFx0XHRcdHVybFBhcmFtcyA9IHVybFBhcmFtcy5zdWJzdHJpbmcoMSk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR1cmxQYXJhbXMgPSB1cmxQYXJhbXMuc3BsaXQoJyYnKTtcclxuXHJcblx0XHRcdFx0Zm9yICggdmFyIG0gPSAwOyBtIDwgdXJsUGFyYW1zLmxlbmd0aDsgKyttICkge1xyXG5cdFx0XHRcdFx0dmFyIHAgPSB1cmxQYXJhbXNbIG0gXS5zcGxpdCgnPScsIDIpO1xyXG5cclxuXHRcdFx0XHRcdGlmICggcC5sZW5ndGggPT0gMiApIHtcclxuXHRcdFx0XHRcdFx0cGFyYW1PYmpbIHBbMF0gXSA9IGRlY29kZVVSSUNvbXBvbmVudCggcFsxXS5yZXBsYWNlKC9cXCsvZywgXCIgXCIpICk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRwYXJhbXMgPSAkLmV4dGVuZCggdHJ1ZSwge30sIHByb3ZpZGVyT3B0cy5wYXJhbXMsIGl0ZW0ub3B0c1sgcHJvdmlkZXJOYW1lIF0sIHBhcmFtT2JqICk7XHJcblxyXG5cdFx0XHR1cmwgICA9ICQudHlwZSggcHJvdmlkZXJPcHRzLnVybCApID09PSBcImZ1bmN0aW9uXCIgPyBwcm92aWRlck9wdHMudXJsLmNhbGwoIHRoaXMsIHJleiwgcGFyYW1zLCBpdGVtICkgOiBmb3JtYXQoIHByb3ZpZGVyT3B0cy51cmwsIHJleiwgcGFyYW1zICk7XHJcblx0XHRcdHRodW1iID0gJC50eXBlKCBwcm92aWRlck9wdHMudGh1bWIgKSA9PT0gXCJmdW5jdGlvblwiID8gcHJvdmlkZXJPcHRzLnRodW1iLmNhbGwoIHRoaXMsIHJleiwgcGFyYW1zLCBpdGVtICkgOiBmb3JtYXQoIHByb3ZpZGVyT3B0cy50aHVtYiwgcmV6ICk7XHJcblxyXG5cdFx0XHRpZiAoIHByb3ZpZGVyTmFtZSA9PT0gJ3ZpbWVvJyApIHtcclxuXHRcdFx0XHR1cmwgPSB1cmwucmVwbGFjZSgnJiUyMycsICcjJyk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH0pO1xyXG5cclxuXHRcdC8vIElmIGl0IGlzIGZvdW5kLCB0aGVuIGNoYW5nZSBjb250ZW50IHR5cGUgYW5kIHVwZGF0ZSB0aGUgdXJsXHJcblxyXG5cdFx0aWYgKCB0eXBlICkge1xyXG5cdFx0XHRpdGVtLnNyYyAgPSB1cmw7XHJcblx0XHRcdGl0ZW0udHlwZSA9IHR5cGU7XHJcblxyXG5cdFx0XHRpZiAoICFpdGVtLm9wdHMudGh1bWIgJiYgISggaXRlbS5vcHRzLiR0aHVtYiAmJiBpdGVtLm9wdHMuJHRodW1iLmxlbmd0aCApICkge1xyXG5cdFx0XHRcdGl0ZW0ub3B0cy50aHVtYiA9IHRodW1iO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZiAoIHR5cGUgPT09ICdpZnJhbWUnICkge1xyXG5cdFx0XHRcdCQuZXh0ZW5kKHRydWUsIGl0ZW0ub3B0cywge1xyXG5cdFx0XHRcdFx0aWZyYW1lIDoge1xyXG5cdFx0XHRcdFx0XHRwcmVsb2FkIDogZmFsc2UsXHJcblx0XHRcdFx0XHRcdGF0dHIgOiB7XHJcblx0XHRcdFx0XHRcdFx0c2Nyb2xsaW5nIDogXCJub1wiXHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9KTtcclxuXHJcblx0XHRcdFx0aXRlbS5jb250ZW50UHJvdmlkZXIgPSBwcm92aWRlcjtcclxuXHJcblx0XHRcdFx0aXRlbS5vcHRzLnNsaWRlQ2xhc3MgKz0gJyBmYW5jeWJveC1zbGlkZS0tJyArICggcHJvdmlkZXIgPT0gJ2dtYXBfcGxhY2UnIHx8IHByb3ZpZGVyID09ICdnbWFwX3NlYXJjaCcgPyAnbWFwJyA6ICd2aWRlbycgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdH0gZWxzZSBpZiAoIHVybCApIHtcclxuXHRcdFx0aXRlbS50eXBlID0gaXRlbS5vcHRzLmRlZmF1bHRUeXBlO1xyXG5cdFx0fVxyXG5cclxuXHR9KTtcclxuXHJcbn0oIHdpbmRvdy5qUXVlcnkgfHwgalF1ZXJ5ICkpO1xyXG5cclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuLy9cclxuLy8gR3Vlc3R1cmVzXHJcbi8vIEFkZHMgdG91Y2ggZ3Vlc3R1cmVzLCBoYW5kbGVzIGNsaWNrIGFuZCB0YXAgZXZlbnRzXHJcbi8vXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbjsoZnVuY3Rpb24gKHdpbmRvdywgZG9jdW1lbnQsICQpIHtcclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdHZhciByZXF1ZXN0QUZyYW1lID0gKGZ1bmN0aW9uICgpIHtcclxuXHRcdHJldHVybiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XHJcblx0XHRcdHdpbmRvdy53ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcclxuXHRcdFx0d2luZG93Lm1velJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxyXG5cdFx0XHR3aW5kb3cub1JlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxyXG5cdFx0XHQvLyBpZiBhbGwgZWxzZSBmYWlscywgdXNlIHNldFRpbWVvdXRcclxuXHRcdFx0ZnVuY3Rpb24gKGNhbGxiYWNrKSB7XHJcblx0XHRcdFx0cmV0dXJuIHdpbmRvdy5zZXRUaW1lb3V0KGNhbGxiYWNrLCAxMDAwIC8gNjApO1xyXG5cdFx0XHR9O1xyXG5cdH0pKCk7XHJcblxyXG5cdHZhciBjYW5jZWxBRnJhbWUgPSAoZnVuY3Rpb24gKCkge1xyXG5cdFx0cmV0dXJuIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSB8fFxyXG5cdFx0XHR3aW5kb3cud2Via2l0Q2FuY2VsQW5pbWF0aW9uRnJhbWUgfHxcclxuXHRcdFx0d2luZG93Lm1vekNhbmNlbEFuaW1hdGlvbkZyYW1lIHx8XHJcblx0XHRcdHdpbmRvdy5vQ2FuY2VsQW5pbWF0aW9uRnJhbWUgfHxcclxuXHRcdFx0ZnVuY3Rpb24gKGlkKSB7XHJcblx0XHRcdFx0d2luZG93LmNsZWFyVGltZW91dChpZCk7XHJcblx0XHRcdH07XHJcblx0fSkoKTtcclxuXHJcblx0dmFyIHBvaW50ZXJzID0gZnVuY3Rpb24oIGUgKSB7XHJcblx0XHR2YXIgcmVzdWx0ID0gW107XHJcblxyXG5cdFx0ZSA9IGUub3JpZ2luYWxFdmVudCB8fCBlIHx8IHdpbmRvdy5lO1xyXG5cdFx0ZSA9IGUudG91Y2hlcyAmJiBlLnRvdWNoZXMubGVuZ3RoID8gZS50b3VjaGVzIDogKCBlLmNoYW5nZWRUb3VjaGVzICYmIGUuY2hhbmdlZFRvdWNoZXMubGVuZ3RoID8gZS5jaGFuZ2VkVG91Y2hlcyA6IFsgZSBdICk7XHJcblxyXG5cdFx0Zm9yICggdmFyIGtleSBpbiBlICkge1xyXG5cclxuXHRcdFx0aWYgKCBlWyBrZXkgXS5wYWdlWCApIHtcclxuXHRcdFx0XHRyZXN1bHQucHVzaCggeyB4IDogZVsga2V5IF0ucGFnZVgsIHkgOiBlWyBrZXkgXS5wYWdlWSB9ICk7XHJcblxyXG5cdFx0XHR9IGVsc2UgaWYgKCBlWyBrZXkgXS5jbGllbnRYICkge1xyXG5cdFx0XHRcdHJlc3VsdC5wdXNoKCB7IHggOiBlWyBrZXkgXS5jbGllbnRYLCB5IDogZVsga2V5IF0uY2xpZW50WSB9ICk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdH07XHJcblxyXG5cdHZhciBkaXN0YW5jZSA9IGZ1bmN0aW9uKCBwb2ludDIsIHBvaW50MSwgd2hhdCApIHtcclxuXHRcdGlmICggIXBvaW50MSB8fCAhcG9pbnQyICkge1xyXG5cdFx0XHRyZXR1cm4gMDtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIHdoYXQgPT09ICd4JyApIHtcclxuXHRcdFx0cmV0dXJuIHBvaW50Mi54IC0gcG9pbnQxLng7XHJcblxyXG5cdFx0fSBlbHNlIGlmICggd2hhdCA9PT0gJ3knICkge1xyXG5cdFx0XHRyZXR1cm4gcG9pbnQyLnkgLSBwb2ludDEueTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gTWF0aC5zcXJ0KCBNYXRoLnBvdyggcG9pbnQyLnggLSBwb2ludDEueCwgMiApICsgTWF0aC5wb3coIHBvaW50Mi55IC0gcG9pbnQxLnksIDIgKSApO1xyXG5cdH07XHJcblxyXG5cdHZhciBpc0NsaWNrYWJsZSA9IGZ1bmN0aW9uKCAkZWwgKSB7XHJcblx0XHRpZiAoICRlbC5pcygnYSxhcmVhLGJ1dHRvbixbcm9sZT1cImJ1dHRvblwiXSxpbnB1dCxsYWJlbCxzZWxlY3Qsc3VtbWFyeSx0ZXh0YXJlYScpIHx8ICQuaXNGdW5jdGlvbiggJGVsLmdldCgwKS5vbmNsaWNrICkgfHwgJGVsLmRhdGEoJ3NlbGVjdGFibGUnKSApIHtcclxuXHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gQ2hlY2sgZm9yIGF0dHJpYnV0ZXMgbGlrZSBkYXRhLWZhbmN5Ym94LW5leHQgb3IgZGF0YS1mYW5jeWJveC1jbG9zZVxyXG5cdFx0Zm9yICggdmFyIGkgPSAwLCBhdHRzID0gJGVsWzBdLmF0dHJpYnV0ZXMsIG4gPSBhdHRzLmxlbmd0aDsgaSA8IG47IGkrKyApIHtcclxuXHRcdFx0aWYgKCBhdHRzW2ldLm5vZGVOYW1lLnN1YnN0cigwLCAxNCkgPT09ICdkYXRhLWZhbmN5Ym94LScgKSB7XHJcblx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0IFx0cmV0dXJuIGZhbHNlO1xyXG5cdH07XHJcblxyXG5cdHZhciBoYXNTY3JvbGxiYXJzID0gZnVuY3Rpb24oIGVsICkge1xyXG5cdFx0dmFyIG92ZXJmbG93WSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCBlbCApWydvdmVyZmxvdy15J107XHJcblx0XHR2YXIgb3ZlcmZsb3dYID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoIGVsIClbJ292ZXJmbG93LXgnXTtcclxuXHJcblx0XHR2YXIgdmVydGljYWwgICA9IChvdmVyZmxvd1kgPT09ICdzY3JvbGwnIHx8IG92ZXJmbG93WSA9PT0gJ2F1dG8nKSAmJiBlbC5zY3JvbGxIZWlnaHQgPiBlbC5jbGllbnRIZWlnaHQ7XHJcblx0XHR2YXIgaG9yaXpvbnRhbCA9IChvdmVyZmxvd1ggPT09ICdzY3JvbGwnIHx8IG92ZXJmbG93WCA9PT0gJ2F1dG8nKSAmJiBlbC5zY3JvbGxXaWR0aCA+IGVsLmNsaWVudFdpZHRoO1xyXG5cclxuXHRcdHJldHVybiB2ZXJ0aWNhbCB8fCBob3Jpem9udGFsO1xyXG5cdH07XHJcblxyXG5cdHZhciBpc1Njcm9sbGFibGUgPSBmdW5jdGlvbiAoICRlbCApIHtcclxuXHRcdHZhciByZXogPSBmYWxzZTtcclxuXHJcblx0XHR3aGlsZSAoIHRydWUgKSB7XHJcblx0XHRcdHJlelx0PSBoYXNTY3JvbGxiYXJzKCAkZWwuZ2V0KDApICk7XHJcblxyXG5cdFx0XHRpZiAoIHJleiApIHtcclxuXHRcdFx0XHRicmVhaztcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0JGVsID0gJGVsLnBhcmVudCgpO1xyXG5cclxuXHRcdFx0aWYgKCAhJGVsLmxlbmd0aCB8fCAkZWwuaGFzQ2xhc3MoICdmYW5jeWJveC1zdGFnZScgKSB8fCAkZWwuaXMoICdib2R5JyApICkge1xyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHJlejtcclxuXHR9O1xyXG5cclxuXHJcblx0dmFyIEd1ZXN0dXJlcyA9IGZ1bmN0aW9uICggaW5zdGFuY2UgKSB7XHJcblx0XHR2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG5cdFx0c2VsZi5pbnN0YW5jZSA9IGluc3RhbmNlO1xyXG5cclxuXHRcdHNlbGYuJGJnICAgICAgICA9IGluc3RhbmNlLiRyZWZzLmJnO1xyXG5cdFx0c2VsZi4kc3RhZ2UgICAgID0gaW5zdGFuY2UuJHJlZnMuc3RhZ2U7XHJcblx0XHRzZWxmLiRjb250YWluZXIgPSBpbnN0YW5jZS4kcmVmcy5jb250YWluZXI7XHJcblxyXG5cdFx0c2VsZi5kZXN0cm95KCk7XHJcblxyXG5cdFx0c2VsZi4kY29udGFpbmVyLm9uKCAndG91Y2hzdGFydC5mYi50b3VjaCBtb3VzZWRvd24uZmIudG91Y2gnLCAkLnByb3h5KHNlbGYsICdvbnRvdWNoc3RhcnQnKSApO1xyXG5cdH07XHJcblxyXG5cdEd1ZXN0dXJlcy5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0dGhpcy4kY29udGFpbmVyLm9mZiggJy5mYi50b3VjaCcgKTtcclxuXHR9O1xyXG5cclxuXHRHdWVzdHVyZXMucHJvdG90eXBlLm9udG91Y2hzdGFydCA9IGZ1bmN0aW9uKCBlICkge1xyXG5cdFx0dmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuXHRcdHZhciAkdGFyZ2V0ICA9ICQoIGUudGFyZ2V0ICk7XHJcblx0XHR2YXIgaW5zdGFuY2UgPSBzZWxmLmluc3RhbmNlO1xyXG5cdFx0dmFyIGN1cnJlbnQgID0gaW5zdGFuY2UuY3VycmVudDtcclxuXHRcdHZhciAkY29udGVudCA9IGN1cnJlbnQuJGNvbnRlbnQ7XHJcblxyXG5cdFx0dmFyIGlzVG91Y2hEZXZpY2UgPSAoIGUudHlwZSA9PSAndG91Y2hzdGFydCcgKTtcclxuXHJcblx0XHQvLyBEbyBub3QgcmVzcG9uZCB0byBib3RoICh0b3VjaCBhbmQgbW91c2UpIGV2ZW50c1xyXG5cdFx0aWYgKCBpc1RvdWNoRGV2aWNlICkge1xyXG5cdFx0XHRzZWxmLiRjb250YWluZXIub2ZmKCAnbW91c2Vkb3duLmZiLnRvdWNoJyApO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIElnbm9yZSByaWdodCBjbGlja1xyXG5cdFx0aWYgKCBlLm9yaWdpbmFsRXZlbnQgJiYgZS5vcmlnaW5hbEV2ZW50LmJ1dHRvbiA9PSAyICkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gSWdub3JlIHRhcGluZyBvbiBsaW5rcywgYnV0dG9ucywgaW5wdXQgZWxlbWVudHNcclxuXHRcdGlmICggISR0YXJnZXQubGVuZ3RoIHx8IGlzQ2xpY2thYmxlKCAkdGFyZ2V0ICkgfHwgaXNDbGlja2FibGUoICR0YXJnZXQucGFyZW50KCkgKSApIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIElnbm9yZSBjbGlja3Mgb24gdGhlIHNjcm9sbGJhclxyXG5cdFx0aWYgKCAhJHRhcmdldC5pcygnaW1nJykgJiYgZS5vcmlnaW5hbEV2ZW50LmNsaWVudFggPiAkdGFyZ2V0WzBdLmNsaWVudFdpZHRoICsgJHRhcmdldC5vZmZzZXQoKS5sZWZ0ICkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0Ly8gSWdub3JlIGNsaWNrcyB3aGlsZSB6b29taW5nIG9yIGNsb3NpbmdcclxuXHRcdGlmICggIWN1cnJlbnQgfHwgc2VsZi5pbnN0YW5jZS5pc0FuaW1hdGluZyB8fCBzZWxmLmluc3RhbmNlLmlzQ2xvc2luZyApIHtcclxuXHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdHNlbGYucmVhbFBvaW50cyA9IHNlbGYuc3RhcnRQb2ludHMgPSBwb2ludGVycyggZSApO1xyXG5cclxuXHRcdGlmICggIXNlbGYuc3RhcnRQb2ludHMgKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuXHRcdHNlbGYuc3RhcnRFdmVudCA9IGU7XHJcblxyXG5cdFx0c2VsZi5jYW5UYXAgICA9IHRydWU7XHJcblx0XHRzZWxmLiR0YXJnZXQgID0gJHRhcmdldDtcclxuXHRcdHNlbGYuJGNvbnRlbnQgPSAkY29udGVudDtcclxuXHRcdHNlbGYub3B0cyAgICAgPSBjdXJyZW50Lm9wdHMudG91Y2g7XHJcblxyXG5cdFx0c2VsZi5pc1Bhbm5pbmcgICA9IGZhbHNlO1xyXG5cdFx0c2VsZi5pc1N3aXBpbmcgICA9IGZhbHNlO1xyXG5cdFx0c2VsZi5pc1pvb21pbmcgICA9IGZhbHNlO1xyXG5cdFx0c2VsZi5pc1Njcm9sbGluZyA9IGZhbHNlO1xyXG5cclxuXHRcdHNlbGYuc2xpZGVyU3RhcnRQb3MgID0gc2VsZi5zbGlkZXJMYXN0UG9zIHx8IHsgdG9wOiAwLCBsZWZ0OiAwIH07XHJcblx0XHRzZWxmLmNvbnRlbnRTdGFydFBvcyA9ICQuZmFuY3lib3guZ2V0VHJhbnNsYXRlKCBzZWxmLiRjb250ZW50ICk7XHJcblx0XHRzZWxmLmNvbnRlbnRMYXN0UG9zICA9IG51bGw7XHJcblxyXG5cdFx0c2VsZi5zdGFydFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuXHRcdHNlbGYuZGlzdGFuY2VYID0gc2VsZi5kaXN0YW5jZVkgPSBzZWxmLmRpc3RhbmNlID0gMDtcclxuXHJcblx0XHRzZWxmLmNhbnZhc1dpZHRoICA9IE1hdGgucm91bmQoIGN1cnJlbnQuJHNsaWRlWzBdLmNsaWVudFdpZHRoICk7XHJcblx0XHRzZWxmLmNhbnZhc0hlaWdodCA9IE1hdGgucm91bmQoIGN1cnJlbnQuJHNsaWRlWzBdLmNsaWVudEhlaWdodCApO1xyXG5cclxuXHRcdCQoZG9jdW1lbnQpXHJcblx0XHRcdC5vZmYoICcuZmIudG91Y2gnIClcclxuXHRcdFx0Lm9uKCBpc1RvdWNoRGV2aWNlID8gJ3RvdWNoZW5kLmZiLnRvdWNoIHRvdWNoY2FuY2VsLmZiLnRvdWNoJyA6ICdtb3VzZXVwLmZiLnRvdWNoIG1vdXNlbGVhdmUuZmIudG91Y2gnLCAkLnByb3h5KHNlbGYsIFwib250b3VjaGVuZFwiKSlcclxuXHRcdFx0Lm9uKCBpc1RvdWNoRGV2aWNlID8gJ3RvdWNobW92ZS5mYi50b3VjaCcgOiAnbW91c2Vtb3ZlLmZiLnRvdWNoJywgJC5wcm94eShzZWxmLCBcIm9udG91Y2htb3ZlXCIpKTtcclxuXHJcblx0XHRpZiAoICQuZmFuY3lib3guaXNNb2JpbGUgKSB7XHJcblx0XHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHNlbGYub25zY3JvbGwsIHRydWUpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICggIShzZWxmLm9wdHMgfHwgaW5zdGFuY2UuY2FuUGFuKCkgKSB8fCAhKCAkdGFyZ2V0LmlzKCBzZWxmLiRzdGFnZSApIHx8IHNlbGYuJHN0YWdlLmZpbmQoICR0YXJnZXQgKS5sZW5ndGggKSApIHtcclxuXHJcblx0XHRcdC8vIFByZXZlbnQgaW1hZ2UgZ2hvc3Rpbmcgd2hpbGUgZHJhZ2dpbmdcclxuXHRcdFx0aWYgKCAkdGFyZ2V0LmlzKCdpbWcnKSApIHtcclxuXHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoICEoICQuZmFuY3lib3guaXNNb2JpbGUgJiYgKCBpc1Njcm9sbGFibGUoICR0YXJnZXQgKSB8fCBpc1Njcm9sbGFibGUoICR0YXJnZXQucGFyZW50KCkgKSApICkgKSB7XHJcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIHNlbGYuc3RhcnRQb2ludHMubGVuZ3RoID09PSAxICkge1xyXG5cdFx0XHRpZiAoIGN1cnJlbnQudHlwZSA9PT0gJ2ltYWdlJyAmJiAoIHNlbGYuY29udGVudFN0YXJ0UG9zLndpZHRoID4gc2VsZi5jYW52YXNXaWR0aCArIDEgfHwgc2VsZi5jb250ZW50U3RhcnRQb3MuaGVpZ2h0ID4gc2VsZi5jYW52YXNIZWlnaHQgKyAxICkgKSB7XHJcblx0XHRcdFx0JC5mYW5jeWJveC5zdG9wKCBzZWxmLiRjb250ZW50ICk7XHJcblxyXG5cdFx0XHRcdHNlbGYuJGNvbnRlbnQuY3NzKCAndHJhbnNpdGlvbi1kdXJhdGlvbicsICcnICk7XHJcblxyXG5cdFx0XHRcdHNlbGYuaXNQYW5uaW5nID0gdHJ1ZTtcclxuXHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0c2VsZi5pc1N3aXBpbmcgPSB0cnVlO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRzZWxmLiRjb250YWluZXIuYWRkQ2xhc3MoICdmYW5jeWJveC1jb250cm9scy0taXNHcmFiYmluZycgKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIHNlbGYuc3RhcnRQb2ludHMubGVuZ3RoID09PSAyICYmICFpbnN0YW5jZS5pc0FuaW1hdGluZyAmJiAhY3VycmVudC5oYXNFcnJvciAmJiBjdXJyZW50LnR5cGUgPT09ICdpbWFnZScgJiYgKCBjdXJyZW50LmlzTG9hZGVkIHx8IGN1cnJlbnQuJGdob3N0ICkgKSB7XHJcblx0XHRcdHNlbGYuY2FuVGFwICAgID0gZmFsc2U7XHJcblx0XHRcdHNlbGYuaXNTd2lwaW5nID0gZmFsc2U7XHJcblx0XHRcdHNlbGYuaXNQYW5uaW5nID0gZmFsc2U7XHJcblxyXG5cdFx0XHRzZWxmLmlzWm9vbWluZyA9IHRydWU7XHJcblxyXG5cdFx0XHQkLmZhbmN5Ym94LnN0b3AoIHNlbGYuJGNvbnRlbnQgKTtcclxuXHJcblx0XHRcdHNlbGYuJGNvbnRlbnQuY3NzKCAndHJhbnNpdGlvbi1kdXJhdGlvbicsICcnICk7XHJcblxyXG5cdFx0XHRzZWxmLmNlbnRlclBvaW50U3RhcnRYID0gKCAoIHNlbGYuc3RhcnRQb2ludHNbMF0ueCArIHNlbGYuc3RhcnRQb2ludHNbMV0ueCApICogMC41ICkgLSAkKHdpbmRvdykuc2Nyb2xsTGVmdCgpO1xyXG5cdFx0XHRzZWxmLmNlbnRlclBvaW50U3RhcnRZID0gKCAoIHNlbGYuc3RhcnRQb2ludHNbMF0ueSArIHNlbGYuc3RhcnRQb2ludHNbMV0ueSApICogMC41ICkgLSAkKHdpbmRvdykuc2Nyb2xsVG9wKCk7XHJcblxyXG5cdFx0XHRzZWxmLnBlcmNlbnRhZ2VPZkltYWdlQXRQaW5jaFBvaW50WCA9ICggc2VsZi5jZW50ZXJQb2ludFN0YXJ0WCAtIHNlbGYuY29udGVudFN0YXJ0UG9zLmxlZnQgKSAvIHNlbGYuY29udGVudFN0YXJ0UG9zLndpZHRoO1xyXG5cdFx0XHRzZWxmLnBlcmNlbnRhZ2VPZkltYWdlQXRQaW5jaFBvaW50WSA9ICggc2VsZi5jZW50ZXJQb2ludFN0YXJ0WSAtIHNlbGYuY29udGVudFN0YXJ0UG9zLnRvcCAgKSAvIHNlbGYuY29udGVudFN0YXJ0UG9zLmhlaWdodDtcclxuXHJcblx0XHRcdHNlbGYuc3RhcnREaXN0YW5jZUJldHdlZW5GaW5nZXJzID0gZGlzdGFuY2UoIHNlbGYuc3RhcnRQb2ludHNbMF0sIHNlbGYuc3RhcnRQb2ludHNbMV0gKTtcclxuXHRcdH1cclxuXHJcblx0fTtcclxuXHJcblx0R3Vlc3R1cmVzLnByb3RvdHlwZS5vbnNjcm9sbCA9IGZ1bmN0aW9uKGUpIHtcclxuXHRcdHNlbGYuaXNTY3JvbGxpbmcgPSB0cnVlO1xyXG5cdH07XHJcblxyXG5cdEd1ZXN0dXJlcy5wcm90b3R5cGUub250b3VjaG1vdmUgPSBmdW5jdGlvbiggZSApIHtcclxuXHRcdHZhciBzZWxmID0gdGhpcyxcclxuXHRcdFx0JHRhcmdldCA9ICQoZS50YXJnZXQpO1xyXG5cclxuXHRcdGlmICggc2VsZi5pc1Njcm9sbGluZyB8fCAhKCAkdGFyZ2V0LmlzKCBzZWxmLiRzdGFnZSApIHx8IHNlbGYuJHN0YWdlLmZpbmQoICR0YXJnZXQgKS5sZW5ndGggKSApIHtcclxuXHRcdFx0c2VsZi5jYW5UYXAgPSBmYWxzZTtcclxuXHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHRzZWxmLm5ld1BvaW50cyA9IHBvaW50ZXJzKCBlICk7XHJcblxyXG5cdFx0aWYgKCAhKCBzZWxmLm9wdHMgfHwgc2VsZi5pbnN0YW5jZS5jYW5QYW4oKSApIHx8ICFzZWxmLm5ld1BvaW50cyB8fCAhc2VsZi5uZXdQb2ludHMubGVuZ3RoICkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCAhKHNlbGYuaXNTd2lwaW5nICYmIHNlbGYuaXNTd2lwaW5nID09PSB0cnVlKSApIHtcclxuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHNlbGYuZGlzdGFuY2VYID0gZGlzdGFuY2UoIHNlbGYubmV3UG9pbnRzWzBdLCBzZWxmLnN0YXJ0UG9pbnRzWzBdLCAneCcgKTtcclxuXHRcdHNlbGYuZGlzdGFuY2VZID0gZGlzdGFuY2UoIHNlbGYubmV3UG9pbnRzWzBdLCBzZWxmLnN0YXJ0UG9pbnRzWzBdLCAneScgKTtcclxuXHJcblx0XHRzZWxmLmRpc3RhbmNlID0gZGlzdGFuY2UoIHNlbGYubmV3UG9pbnRzWzBdLCBzZWxmLnN0YXJ0UG9pbnRzWzBdIClcclxuXHJcblx0XHQvLyBTa2lwIGZhbHNlIG9udG91Y2htb3ZlIGV2ZW50cyAoQ2hyb21lKVxyXG5cdFx0aWYgKCBzZWxmLmRpc3RhbmNlID4gMCApIHtcclxuXHRcdFx0aWYgKCBzZWxmLmlzU3dpcGluZyApIHtcclxuXHRcdFx0XHRzZWxmLm9uU3dpcGUoZSk7XHJcblxyXG5cdFx0XHR9IGVsc2UgaWYgKCBzZWxmLmlzUGFubmluZyApIHtcclxuXHRcdFx0XHRzZWxmLm9uUGFuKCk7XHJcblxyXG5cdFx0XHR9IGVsc2UgaWYgKCBzZWxmLmlzWm9vbWluZyApIHtcclxuXHRcdFx0XHRzZWxmLm9uWm9vbSgpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdH07XHJcblxyXG5cdEd1ZXN0dXJlcy5wcm90b3R5cGUub25Td2lwZSA9IGZ1bmN0aW9uKGUpIHtcclxuXHRcdHZhciBzZWxmID0gdGhpcyxcclxuXHRcdFx0c3dpcGluZyA9IHNlbGYuaXNTd2lwaW5nLFxyXG5cdFx0XHRsZWZ0ICAgID0gc2VsZi5zbGlkZXJTdGFydFBvcy5sZWZ0IHx8IDAsXHJcblx0XHRcdGFuZ2xlO1xyXG5cclxuXHRcdC8vIElmIGRpcmVjdGlvbiBpcyBub3QgeWV0IGRldGVybWluZWRcclxuXHRcdGlmICggc3dpcGluZyA9PT0gdHJ1ZSApIHtcclxuXHJcblx0XHRcdC8vIFdlIG5lZWQgYXQgbGVhc3QgMTBweCBkaXN0YW5jZSB0byBjb3JyZWN0bHkgY2FsY3VsYXRlIGFuIGFuZ2xlXHJcblx0XHRcdGlmICggTWF0aC5hYnMoIHNlbGYuZGlzdGFuY2UgKSA+IDEwICkge1xyXG5cdFx0XHRcdHNlbGYuY2FuVGFwID0gZmFsc2U7XHJcblxyXG5cdFx0XHRcdGlmICggc2VsZi5pbnN0YW5jZS5ncm91cC5sZW5ndGggPCAyICYmIHNlbGYub3B0cy52ZXJ0aWNhbCApIHtcclxuXHRcdFx0XHRcdHNlbGYuaXNTd2lwaW5nID0gJ3knO1xyXG5cclxuXHRcdFx0XHR9IGVsc2UgaWYgKCBzZWxmLmluc3RhbmNlLmlzRHJhZ2dpbmcgfHwgc2VsZi5vcHRzLnZlcnRpY2FsID09PSBmYWxzZSB8fCAoIHNlbGYub3B0cy52ZXJ0aWNhbCA9PT0gJ2F1dG8nICYmICQoIHdpbmRvdyApLndpZHRoKCkgPiA4MDAgKSApIHtcclxuXHRcdFx0XHRcdHNlbGYuaXNTd2lwaW5nID0gJ3gnO1xyXG5cclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0YW5nbGUgPSBNYXRoLmFicyggTWF0aC5hdGFuMiggc2VsZi5kaXN0YW5jZVksIHNlbGYuZGlzdGFuY2VYICkgKiAxODAgLyBNYXRoLlBJICk7XHJcblxyXG5cdFx0XHRcdFx0c2VsZi5pc1N3aXBpbmcgPSAoIGFuZ2xlID4gNDUgJiYgYW5nbGUgPCAxMzUgKSA/ICd5JyA6ICd4JztcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdHNlbGYuY2FuVGFwID0gZmFsc2U7XHJcblxyXG5cdFx0XHRcdCBpZiAoIHNlbGYuaXNTd2lwaW5nID09PSAneScgJiYgJC5mYW5jeWJveC5pc01vYmlsZSAmJiAoIGlzU2Nyb2xsYWJsZSggc2VsZi4kdGFyZ2V0ICkgfHwgaXNTY3JvbGxhYmxlKCBzZWxmLiR0YXJnZXQucGFyZW50KCkgKSApICkge1xyXG5cdFx0XHRcdFx0IHNlbGYuaXNTY3JvbGxpbmcgPSB0cnVlO1xyXG5cclxuXHRcdFx0XHRcdCByZXR1cm47XHJcblx0XHRcdFx0IH1cclxuXHJcblx0XHRcdFx0c2VsZi5pbnN0YW5jZS5pc0RyYWdnaW5nID0gc2VsZi5pc1N3aXBpbmc7XHJcblxyXG5cdFx0XHRcdC8vIFJlc2V0IHBvaW50cyB0byBhdm9pZCBqdW1waW5nLCBiZWNhdXNlIHdlIGRyb3BwZWQgZmlyc3Qgc3dpcGVzIHRvIGNhbGN1bGF0ZSB0aGUgYW5nbGVcclxuXHRcdFx0XHRzZWxmLnN0YXJ0UG9pbnRzID0gc2VsZi5uZXdQb2ludHM7XHJcblxyXG5cdFx0XHRcdCQuZWFjaChzZWxmLmluc3RhbmNlLnNsaWRlcywgZnVuY3Rpb24oIGluZGV4LCBzbGlkZSApIHtcclxuXHRcdFx0XHRcdCQuZmFuY3lib3guc3RvcCggc2xpZGUuJHNsaWRlICk7XHJcblxyXG5cdFx0XHRcdFx0c2xpZGUuJHNsaWRlLmNzcyggJ3RyYW5zaXRpb24tZHVyYXRpb24nLCAnJyApO1xyXG5cclxuXHRcdFx0XHRcdHNsaWRlLmluVHJhbnNpdGlvbiA9IGZhbHNlO1xyXG5cclxuXHRcdFx0XHRcdGlmICggc2xpZGUucG9zID09PSBzZWxmLmluc3RhbmNlLmN1cnJlbnQucG9zICkge1xyXG5cdFx0XHRcdFx0XHRzZWxmLnNsaWRlclN0YXJ0UG9zLmxlZnQgPSAkLmZhbmN5Ym94LmdldFRyYW5zbGF0ZSggc2xpZGUuJHNsaWRlICkubGVmdDtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9KTtcclxuXHJcblx0XHRcdFx0Ly8gU3RvcCBzbGlkZXNob3dcclxuXHRcdFx0XHRpZiAoIHNlbGYuaW5zdGFuY2UuU2xpZGVTaG93ICYmIHNlbGYuaW5zdGFuY2UuU2xpZGVTaG93LmlzQWN0aXZlICkge1xyXG5cdFx0XHRcdFx0c2VsZi5pbnN0YW5jZS5TbGlkZVNob3cuc3RvcCgpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIFN0aWNreSBlZGdlc1xyXG5cdFx0aWYgKCBzd2lwaW5nID09ICd4JyApIHtcclxuXHRcdFx0aWYgKCBzZWxmLmRpc3RhbmNlWCA+IDAgJiYgKCBzZWxmLmluc3RhbmNlLmdyb3VwLmxlbmd0aCA8IDIgfHwgKCBzZWxmLmluc3RhbmNlLmN1cnJlbnQuaW5kZXggPT09IDAgJiYgIXNlbGYuaW5zdGFuY2UuY3VycmVudC5vcHRzLmxvb3AgKSApICkge1xyXG5cdFx0XHRcdGxlZnQgPSBsZWZ0ICsgTWF0aC5wb3coIHNlbGYuZGlzdGFuY2VYLCAwLjggKTtcclxuXHJcblx0XHRcdH0gZWxzZSBpZiAoIHNlbGYuZGlzdGFuY2VYIDwgMCAmJiAoIHNlbGYuaW5zdGFuY2UuZ3JvdXAubGVuZ3RoIDwgMiB8fCAoIHNlbGYuaW5zdGFuY2UuY3VycmVudC5pbmRleCA9PT0gc2VsZi5pbnN0YW5jZS5ncm91cC5sZW5ndGggLSAxICYmICFzZWxmLmluc3RhbmNlLmN1cnJlbnQub3B0cy5sb29wICkgKSApIHtcclxuXHRcdFx0XHRsZWZ0ID0gbGVmdCAtIE1hdGgucG93KCAtc2VsZi5kaXN0YW5jZVgsIDAuOCApO1xyXG5cclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRsZWZ0ID0gbGVmdCArIHNlbGYuZGlzdGFuY2VYO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0c2VsZi5zbGlkZXJMYXN0UG9zID0ge1xyXG5cdFx0XHR0b3AgIDogc3dpcGluZyA9PSAneCcgPyAwIDogc2VsZi5zbGlkZXJTdGFydFBvcy50b3AgKyBzZWxmLmRpc3RhbmNlWSxcclxuXHRcdFx0bGVmdCA6IGxlZnRcclxuXHRcdH07XHJcblxyXG5cdFx0aWYgKCBzZWxmLnJlcXVlc3RJZCApIHtcclxuXHRcdFx0Y2FuY2VsQUZyYW1lKCBzZWxmLnJlcXVlc3RJZCApO1xyXG5cclxuXHRcdFx0c2VsZi5yZXF1ZXN0SWQgPSBudWxsO1xyXG5cdFx0fVxyXG5cclxuXHRcdHNlbGYucmVxdWVzdElkID0gcmVxdWVzdEFGcmFtZShmdW5jdGlvbigpIHtcclxuXHJcblx0XHRcdGlmICggc2VsZi5zbGlkZXJMYXN0UG9zICkge1xyXG5cdFx0XHRcdCQuZWFjaChzZWxmLmluc3RhbmNlLnNsaWRlcywgZnVuY3Rpb24oIGluZGV4LCBzbGlkZSApIHtcclxuXHRcdFx0XHRcdHZhciBwb3MgPSBzbGlkZS5wb3MgLSBzZWxmLmluc3RhbmNlLmN1cnJQb3M7XHJcblxyXG5cdFx0XHRcdFx0JC5mYW5jeWJveC5zZXRUcmFuc2xhdGUoIHNsaWRlLiRzbGlkZSwge1xyXG5cdFx0XHRcdFx0XHR0b3AgIDogc2VsZi5zbGlkZXJMYXN0UG9zLnRvcCxcclxuXHRcdFx0XHRcdFx0bGVmdCA6IHNlbGYuc2xpZGVyTGFzdFBvcy5sZWZ0ICsgKCBwb3MgKiBzZWxmLmNhbnZhc1dpZHRoICkgKyAoIHBvcyAqIHNsaWRlLm9wdHMuZ3V0dGVyIClcclxuXHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdH0pO1xyXG5cclxuXHRcdFx0XHRzZWxmLiRjb250YWluZXIuYWRkQ2xhc3MoICdmYW5jeWJveC1pcy1zbGlkaW5nJyApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0fSk7XHJcblxyXG5cdH07XHJcblxyXG5cdEd1ZXN0dXJlcy5wcm90b3R5cGUub25QYW4gPSBmdW5jdGlvbigpIHtcclxuXHRcdHZhciBzZWxmID0gdGhpcztcclxuXHJcblx0XHQvLyBTb21ldGltZXMsIHdoZW4gdGFwcGluZyBjYXVzYWxseSwgaW1hZ2UgY2FuIG1vdmUgYSBiaXQgYW5kIHRoYXQgYnJlYWtzIGRvdWJsZSB0YXBwaW5nXHJcblx0XHRpZiAoIGRpc3RhbmNlKCBzZWxmLm5ld1BvaW50c1swXSwgc2VsZi5yZWFsUG9pbnRzWzBdICkgPCAoJC5mYW5jeWJveC5pc01vYmlsZSA/IDEwIDogNSkgKSB7XHJcblx0XHRcdHNlbGYuc3RhcnRQb2ludHMgPSBzZWxmLm5ld1BvaW50cztcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdHNlbGYuY2FuVGFwID0gZmFsc2U7XHJcblxyXG5cdFx0c2VsZi5jb250ZW50TGFzdFBvcyA9IHNlbGYubGltaXRNb3ZlbWVudCgpO1xyXG5cclxuXHRcdGlmICggc2VsZi5yZXF1ZXN0SWQgKSB7XHJcblx0XHRcdGNhbmNlbEFGcmFtZSggc2VsZi5yZXF1ZXN0SWQgKTtcclxuXHJcblx0XHRcdHNlbGYucmVxdWVzdElkID0gbnVsbDtcclxuXHRcdH1cclxuXHJcblx0XHRzZWxmLnJlcXVlc3RJZCA9IHJlcXVlc3RBRnJhbWUoZnVuY3Rpb24oKSB7XHJcblx0XHRcdCQuZmFuY3lib3guc2V0VHJhbnNsYXRlKCBzZWxmLiRjb250ZW50LCBzZWxmLmNvbnRlbnRMYXN0UG9zICk7XHJcblx0XHR9KTtcclxuXHR9O1xyXG5cclxuXHQvLyBNYWtlIHBhbm5pbmcgc3RpY2t5IHRvIHRoZSBlZGdlc1xyXG5cdEd1ZXN0dXJlcy5wcm90b3R5cGUubGltaXRNb3ZlbWVudCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuXHRcdHZhciBjYW52YXNXaWR0aCAgPSBzZWxmLmNhbnZhc1dpZHRoO1xyXG5cdFx0dmFyIGNhbnZhc0hlaWdodCA9IHNlbGYuY2FudmFzSGVpZ2h0O1xyXG5cclxuXHRcdHZhciBkaXN0YW5jZVggPSBzZWxmLmRpc3RhbmNlWDtcclxuXHRcdHZhciBkaXN0YW5jZVkgPSBzZWxmLmRpc3RhbmNlWTtcclxuXHJcblx0XHR2YXIgY29udGVudFN0YXJ0UG9zID0gc2VsZi5jb250ZW50U3RhcnRQb3M7XHJcblxyXG5cdFx0dmFyIGN1cnJlbnRPZmZzZXRYID0gY29udGVudFN0YXJ0UG9zLmxlZnQ7XHJcblx0XHR2YXIgY3VycmVudE9mZnNldFkgPSBjb250ZW50U3RhcnRQb3MudG9wO1xyXG5cclxuXHRcdHZhciBjdXJyZW50V2lkdGggID0gY29udGVudFN0YXJ0UG9zLndpZHRoO1xyXG5cdFx0dmFyIGN1cnJlbnRIZWlnaHQgPSBjb250ZW50U3RhcnRQb3MuaGVpZ2h0O1xyXG5cclxuXHRcdHZhciBtaW5UcmFuc2xhdGVYLCBtaW5UcmFuc2xhdGVZLFxyXG5cdFx0XHRtYXhUcmFuc2xhdGVYLCBtYXhUcmFuc2xhdGVZLFxyXG5cdFx0XHRuZXdPZmZzZXRYLCBuZXdPZmZzZXRZO1xyXG5cclxuXHRcdGlmICggY3VycmVudFdpZHRoID4gY2FudmFzV2lkdGggKSB7XHJcblx0XHRcdG5ld09mZnNldFggPSBjdXJyZW50T2Zmc2V0WCArIGRpc3RhbmNlWDtcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRuZXdPZmZzZXRYID0gY3VycmVudE9mZnNldFg7XHJcblx0XHR9XHJcblxyXG5cdFx0bmV3T2Zmc2V0WSA9IGN1cnJlbnRPZmZzZXRZICsgZGlzdGFuY2VZO1xyXG5cclxuXHRcdC8vIFNsb3cgZG93biBwcm9wb3J0aW9uYWxseSB0byB0cmF2ZWxlZCBkaXN0YW5jZVxyXG5cdFx0bWluVHJhbnNsYXRlWCA9IE1hdGgubWF4KCAwLCBjYW52YXNXaWR0aCAgKiAwLjUgLSBjdXJyZW50V2lkdGggICogMC41ICk7XHJcblx0XHRtaW5UcmFuc2xhdGVZID0gTWF0aC5tYXgoIDAsIGNhbnZhc0hlaWdodCAqIDAuNSAtIGN1cnJlbnRIZWlnaHQgKiAwLjUgKTtcclxuXHJcblx0XHRtYXhUcmFuc2xhdGVYID0gTWF0aC5taW4oIGNhbnZhc1dpZHRoICAtIGN1cnJlbnRXaWR0aCwgIGNhbnZhc1dpZHRoICAqIDAuNSAtIGN1cnJlbnRXaWR0aCAgKiAwLjUgKTtcclxuXHRcdG1heFRyYW5zbGF0ZVkgPSBNYXRoLm1pbiggY2FudmFzSGVpZ2h0IC0gY3VycmVudEhlaWdodCwgY2FudmFzSGVpZ2h0ICogMC41IC0gY3VycmVudEhlaWdodCAqIDAuNSApO1xyXG5cclxuXHRcdGlmICggY3VycmVudFdpZHRoID4gY2FudmFzV2lkdGggKSB7XHJcblxyXG5cdFx0XHQvLyAgIC0+XHJcblx0XHRcdGlmICggZGlzdGFuY2VYID4gMCAmJiBuZXdPZmZzZXRYID4gbWluVHJhbnNsYXRlWCApIHtcclxuXHRcdFx0XHRuZXdPZmZzZXRYID0gbWluVHJhbnNsYXRlWCAtIDEgKyBNYXRoLnBvdyggLW1pblRyYW5zbGF0ZVggKyBjdXJyZW50T2Zmc2V0WCArIGRpc3RhbmNlWCwgMC44ICkgfHwgMDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Ly8gICAgPC1cclxuXHRcdFx0aWYgKCBkaXN0YW5jZVggPCAwICYmIG5ld09mZnNldFggPCBtYXhUcmFuc2xhdGVYICkge1xyXG5cdFx0XHRcdG5ld09mZnNldFggPSBtYXhUcmFuc2xhdGVYICsgMSAtIE1hdGgucG93KCBtYXhUcmFuc2xhdGVYIC0gY3VycmVudE9mZnNldFggLSBkaXN0YW5jZVgsIDAuOCApIHx8IDA7XHJcblx0XHRcdH1cclxuXHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCBjdXJyZW50SGVpZ2h0ID4gY2FudmFzSGVpZ2h0ICkge1xyXG5cclxuXHRcdFx0Ly8gICBcXC9cclxuXHRcdFx0aWYgKCBkaXN0YW5jZVkgPiAwICYmIG5ld09mZnNldFkgPiBtaW5UcmFuc2xhdGVZICkge1xyXG5cdFx0XHRcdG5ld09mZnNldFkgPSBtaW5UcmFuc2xhdGVZIC0gMSArIE1hdGgucG93KC1taW5UcmFuc2xhdGVZICsgY3VycmVudE9mZnNldFkgKyBkaXN0YW5jZVksIDAuOCApIHx8IDA7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vICAgL1xcXHJcblx0XHRcdGlmICggZGlzdGFuY2VZIDwgMCAmJiBuZXdPZmZzZXRZIDwgbWF4VHJhbnNsYXRlWSApIHtcclxuXHRcdFx0XHRuZXdPZmZzZXRZID0gbWF4VHJhbnNsYXRlWSArIDEgLSBNYXRoLnBvdyAoIG1heFRyYW5zbGF0ZVkgLSBjdXJyZW50T2Zmc2V0WSAtIGRpc3RhbmNlWSwgMC44ICkgfHwgMDtcclxuXHRcdFx0fVxyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHR0b3AgICAgOiBuZXdPZmZzZXRZLFxyXG5cdFx0XHRsZWZ0ICAgOiBuZXdPZmZzZXRYLFxyXG5cdFx0XHRzY2FsZVggOiBjb250ZW50U3RhcnRQb3Muc2NhbGVYLFxyXG5cdFx0XHRzY2FsZVkgOiBjb250ZW50U3RhcnRQb3Muc2NhbGVZXHJcblx0XHR9O1xyXG5cclxuXHR9O1xyXG5cclxuXHRHdWVzdHVyZXMucHJvdG90eXBlLmxpbWl0UG9zaXRpb24gPSBmdW5jdGlvbiggbmV3T2Zmc2V0WCwgbmV3T2Zmc2V0WSwgbmV3V2lkdGgsIG5ld0hlaWdodCApIHtcclxuXHRcdHZhciBzZWxmID0gdGhpcztcclxuXHJcblx0XHR2YXIgY2FudmFzV2lkdGggID0gc2VsZi5jYW52YXNXaWR0aDtcclxuXHRcdHZhciBjYW52YXNIZWlnaHQgPSBzZWxmLmNhbnZhc0hlaWdodDtcclxuXHJcblx0XHRpZiAoIG5ld1dpZHRoID4gY2FudmFzV2lkdGggKSB7XHJcblx0XHRcdG5ld09mZnNldFggPSBuZXdPZmZzZXRYID4gMCA/IDAgOiBuZXdPZmZzZXRYO1xyXG5cdFx0XHRuZXdPZmZzZXRYID0gbmV3T2Zmc2V0WCA8IGNhbnZhc1dpZHRoIC0gbmV3V2lkdGggPyBjYW52YXNXaWR0aCAtIG5ld1dpZHRoIDogbmV3T2Zmc2V0WDtcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0Ly8gQ2VudGVyIGhvcml6b250YWxseVxyXG5cdFx0XHRuZXdPZmZzZXRYID0gTWF0aC5tYXgoIDAsIGNhbnZhc1dpZHRoIC8gMiAtIG5ld1dpZHRoIC8gMiApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIG5ld0hlaWdodCA+IGNhbnZhc0hlaWdodCApIHtcclxuXHRcdFx0bmV3T2Zmc2V0WSA9IG5ld09mZnNldFkgPiAwID8gMCA6IG5ld09mZnNldFk7XHJcblx0XHRcdG5ld09mZnNldFkgPSBuZXdPZmZzZXRZIDwgY2FudmFzSGVpZ2h0IC0gbmV3SGVpZ2h0ID8gY2FudmFzSGVpZ2h0IC0gbmV3SGVpZ2h0IDogbmV3T2Zmc2V0WTtcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0Ly8gQ2VudGVyIHZlcnRpY2FsbHlcclxuXHRcdFx0bmV3T2Zmc2V0WSA9IE1hdGgubWF4KCAwLCBjYW52YXNIZWlnaHQgLyAyIC0gbmV3SGVpZ2h0IC8gMiApO1xyXG5cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHR0b3AgIDogbmV3T2Zmc2V0WSxcclxuXHRcdFx0bGVmdCA6IG5ld09mZnNldFhcclxuXHRcdH07XHJcblxyXG5cdH07XHJcblxyXG5cdEd1ZXN0dXJlcy5wcm90b3R5cGUub25ab29tID0gZnVuY3Rpb24oKSB7XHJcblx0XHR2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG5cdFx0Ly8gQ2FsY3VsYXRlIGN1cnJlbnQgZGlzdGFuY2UgYmV0d2VlbiBwb2ludHMgdG8gZ2V0IHBpbmNoIHJhdGlvIGFuZCBuZXcgd2lkdGggYW5kIGhlaWdodFxyXG5cclxuXHRcdHZhciBjdXJyZW50V2lkdGggID0gc2VsZi5jb250ZW50U3RhcnRQb3Mud2lkdGg7XHJcblx0XHR2YXIgY3VycmVudEhlaWdodCA9IHNlbGYuY29udGVudFN0YXJ0UG9zLmhlaWdodDtcclxuXHJcblx0XHR2YXIgY3VycmVudE9mZnNldFggPSBzZWxmLmNvbnRlbnRTdGFydFBvcy5sZWZ0O1xyXG5cdFx0dmFyIGN1cnJlbnRPZmZzZXRZID0gc2VsZi5jb250ZW50U3RhcnRQb3MudG9wO1xyXG5cclxuXHRcdHZhciBlbmREaXN0YW5jZUJldHdlZW5GaW5nZXJzID0gZGlzdGFuY2UoIHNlbGYubmV3UG9pbnRzWzBdLCBzZWxmLm5ld1BvaW50c1sxXSApO1xyXG5cclxuXHRcdHZhciBwaW5jaFJhdGlvID0gZW5kRGlzdGFuY2VCZXR3ZWVuRmluZ2VycyAvIHNlbGYuc3RhcnREaXN0YW5jZUJldHdlZW5GaW5nZXJzO1xyXG5cclxuXHRcdHZhciBuZXdXaWR0aCAgPSBNYXRoLmZsb29yKCBjdXJyZW50V2lkdGggICogcGluY2hSYXRpbyApO1xyXG5cdFx0dmFyIG5ld0hlaWdodCA9IE1hdGguZmxvb3IoIGN1cnJlbnRIZWlnaHQgKiBwaW5jaFJhdGlvICk7XHJcblxyXG5cdFx0Ly8gVGhpcyBpcyB0aGUgdHJhbnNsYXRpb24gZHVlIHRvIHBpbmNoLXpvb21pbmdcclxuXHRcdHZhciB0cmFuc2xhdGVGcm9tWm9vbWluZ1ggPSAoY3VycmVudFdpZHRoICAtIG5ld1dpZHRoKSAgKiBzZWxmLnBlcmNlbnRhZ2VPZkltYWdlQXRQaW5jaFBvaW50WDtcclxuXHRcdHZhciB0cmFuc2xhdGVGcm9tWm9vbWluZ1kgPSAoY3VycmVudEhlaWdodCAtIG5ld0hlaWdodCkgKiBzZWxmLnBlcmNlbnRhZ2VPZkltYWdlQXRQaW5jaFBvaW50WTtcclxuXHJcblx0XHQvL1BvaW50IGJldHdlZW4gdGhlIHR3byB0b3VjaGVzXHJcblxyXG5cdFx0dmFyIGNlbnRlclBvaW50RW5kWCA9ICgoc2VsZi5uZXdQb2ludHNbMF0ueCArIHNlbGYubmV3UG9pbnRzWzFdLngpIC8gMikgLSAkKHdpbmRvdykuc2Nyb2xsTGVmdCgpO1xyXG5cdFx0dmFyIGNlbnRlclBvaW50RW5kWSA9ICgoc2VsZi5uZXdQb2ludHNbMF0ueSArIHNlbGYubmV3UG9pbnRzWzFdLnkpIC8gMikgLSAkKHdpbmRvdykuc2Nyb2xsVG9wKCk7XHJcblxyXG5cdFx0Ly8gQW5kIHRoaXMgaXMgdGhlIHRyYW5zbGF0aW9uIGR1ZSB0byB0cmFuc2xhdGlvbiBvZiB0aGUgY2VudGVycG9pbnRcclxuXHRcdC8vIGJldHdlZW4gdGhlIHR3byBmaW5nZXJzXHJcblxyXG5cdFx0dmFyIHRyYW5zbGF0ZUZyb21UcmFuc2xhdGluZ1ggPSBjZW50ZXJQb2ludEVuZFggLSBzZWxmLmNlbnRlclBvaW50U3RhcnRYO1xyXG5cdFx0dmFyIHRyYW5zbGF0ZUZyb21UcmFuc2xhdGluZ1kgPSBjZW50ZXJQb2ludEVuZFkgLSBzZWxmLmNlbnRlclBvaW50U3RhcnRZO1xyXG5cclxuXHRcdC8vIFRoZSBuZXcgb2Zmc2V0IGlzIHRoZSBvbGQvY3VycmVudCBvbmUgcGx1cyB0aGUgdG90YWwgdHJhbnNsYXRpb25cclxuXHJcblx0XHR2YXIgbmV3T2Zmc2V0WCA9IGN1cnJlbnRPZmZzZXRYICsgKCB0cmFuc2xhdGVGcm9tWm9vbWluZ1ggKyB0cmFuc2xhdGVGcm9tVHJhbnNsYXRpbmdYICk7XHJcblx0XHR2YXIgbmV3T2Zmc2V0WSA9IGN1cnJlbnRPZmZzZXRZICsgKCB0cmFuc2xhdGVGcm9tWm9vbWluZ1kgKyB0cmFuc2xhdGVGcm9tVHJhbnNsYXRpbmdZICk7XHJcblxyXG5cdFx0dmFyIG5ld1BvcyA9IHtcclxuXHRcdFx0dG9wICAgIDogbmV3T2Zmc2V0WSxcclxuXHRcdFx0bGVmdCAgIDogbmV3T2Zmc2V0WCxcclxuXHRcdFx0c2NhbGVYIDogc2VsZi5jb250ZW50U3RhcnRQb3Muc2NhbGVYICogcGluY2hSYXRpbyxcclxuXHRcdFx0c2NhbGVZIDogc2VsZi5jb250ZW50U3RhcnRQb3Muc2NhbGVZICogcGluY2hSYXRpb1xyXG5cdFx0fTtcclxuXHJcblx0XHRzZWxmLmNhblRhcCA9IGZhbHNlO1xyXG5cclxuXHRcdHNlbGYubmV3V2lkdGggID0gbmV3V2lkdGg7XHJcblx0XHRzZWxmLm5ld0hlaWdodCA9IG5ld0hlaWdodDtcclxuXHJcblx0XHRzZWxmLmNvbnRlbnRMYXN0UG9zID0gbmV3UG9zO1xyXG5cclxuXHRcdGlmICggc2VsZi5yZXF1ZXN0SWQgKSB7XHJcblx0XHRcdGNhbmNlbEFGcmFtZSggc2VsZi5yZXF1ZXN0SWQgKTtcclxuXHJcblx0XHRcdHNlbGYucmVxdWVzdElkID0gbnVsbDtcclxuXHRcdH1cclxuXHJcblx0XHRzZWxmLnJlcXVlc3RJZCA9IHJlcXVlc3RBRnJhbWUoZnVuY3Rpb24oKSB7XHJcblx0XHRcdCQuZmFuY3lib3guc2V0VHJhbnNsYXRlKCBzZWxmLiRjb250ZW50LCBzZWxmLmNvbnRlbnRMYXN0UG9zICk7XHJcblx0XHR9KTtcclxuXHJcblx0fTtcclxuXHJcblx0R3Vlc3R1cmVzLnByb3RvdHlwZS5vbnRvdWNoZW5kID0gZnVuY3Rpb24oIGUgKSB7XHJcblx0XHR2YXIgc2VsZiA9IHRoaXM7XHJcblx0XHR2YXIgZE1zICA9IE1hdGgubWF4KCAobmV3IERhdGUoKS5nZXRUaW1lKCkgKSAtIHNlbGYuc3RhcnRUaW1lLCAxKTtcclxuXHJcblx0XHR2YXIgc3dpcGluZyAgID0gc2VsZi5pc1N3aXBpbmc7XHJcblx0XHR2YXIgcGFubmluZyAgID0gc2VsZi5pc1Bhbm5pbmc7XHJcblx0XHR2YXIgem9vbWluZyAgID0gc2VsZi5pc1pvb21pbmc7XHJcblx0XHR2YXIgc2Nyb2xsaW5nID0gc2VsZi5pc1Njcm9sbGluZztcclxuXHJcblx0XHRzZWxmLmVuZFBvaW50cyA9IHBvaW50ZXJzKCBlICk7XHJcblxyXG5cdFx0c2VsZi4kY29udGFpbmVyLnJlbW92ZUNsYXNzKCAnZmFuY3lib3gtY29udHJvbHMtLWlzR3JhYmJpbmcnICk7XHJcblxyXG5cdFx0JChkb2N1bWVudCkub2ZmKCAnLmZiLnRvdWNoJyApO1xyXG5cclxuXHRcdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHNlbGYub25zY3JvbGwsIHRydWUpO1xyXG5cclxuXHRcdGlmICggc2VsZi5yZXF1ZXN0SWQgKSB7XHJcblx0XHRcdGNhbmNlbEFGcmFtZSggc2VsZi5yZXF1ZXN0SWQgKTtcclxuXHJcblx0XHRcdHNlbGYucmVxdWVzdElkID0gbnVsbDtcclxuXHRcdH1cclxuXHJcblx0XHRzZWxmLmlzU3dpcGluZyAgID0gZmFsc2U7XHJcblx0XHRzZWxmLmlzUGFubmluZyAgID0gZmFsc2U7XHJcblx0XHRzZWxmLmlzWm9vbWluZyAgID0gZmFsc2U7XHJcblx0XHRzZWxmLmlzU2Nyb2xsaW5nID0gZmFsc2U7XHJcblxyXG5cdFx0c2VsZi5pbnN0YW5jZS5pc0RyYWdnaW5nID0gZmFsc2U7XHJcblxyXG5cdFx0aWYgKCBzZWxmLmNhblRhcCApIHtcclxuXHRcdFx0cmV0dXJuIHNlbGYub25UYXAoIGUgKTtcclxuXHRcdH1cclxuXHJcblx0XHRzZWxmLnNwZWVkID0gMzY2O1xyXG5cclxuXHRcdC8vIFNwZWVkIGluIHB4L21zXHJcblx0XHRzZWxmLnZlbG9jaXR5WCA9IHNlbGYuZGlzdGFuY2VYIC8gZE1zICogMC41O1xyXG5cdFx0c2VsZi52ZWxvY2l0eVkgPSBzZWxmLmRpc3RhbmNlWSAvIGRNcyAqIDAuNTtcclxuXHJcblx0XHRzZWxmLnNwZWVkWCA9IE1hdGgubWF4KCBzZWxmLnNwZWVkICogMC41LCBNYXRoLm1pbiggc2VsZi5zcGVlZCAqIDEuNSwgKCAxIC8gTWF0aC5hYnMoIHNlbGYudmVsb2NpdHlYICkgKSAqIHNlbGYuc3BlZWQgKSApO1xyXG5cclxuXHRcdGlmICggcGFubmluZyApIHtcclxuXHRcdFx0c2VsZi5lbmRQYW5uaW5nKCk7XHJcblxyXG5cdFx0fSBlbHNlIGlmICggem9vbWluZyApIHtcclxuXHRcdFx0c2VsZi5lbmRab29taW5nKCk7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0c2VsZi5lbmRTd2lwaW5nKCBzd2lwaW5nLCBzY3JvbGxpbmcgKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm47XHJcblx0fTtcclxuXHJcblx0R3Vlc3R1cmVzLnByb3RvdHlwZS5lbmRTd2lwaW5nID0gZnVuY3Rpb24oIHN3aXBpbmcsIHNjcm9sbGluZyApIHtcclxuXHRcdHZhciBzZWxmID0gdGhpcyxcclxuXHRcdFx0cmV0ICA9IGZhbHNlLFxyXG5cdFx0XHRsZW4gID0gc2VsZi5pbnN0YW5jZS5ncm91cC5sZW5ndGg7XHJcblxyXG5cdFx0c2VsZi5zbGlkZXJMYXN0UG9zID0gbnVsbDtcclxuXHJcblx0XHQvLyBDbG9zZSBpZiBzd2lwZWQgdmVydGljYWxseSAvIG5hdmlnYXRlIGlmIGhvcml6b250YWxseVxyXG5cdFx0aWYgKCBzd2lwaW5nID09ICd5JyAmJiAhc2Nyb2xsaW5nICYmIE1hdGguYWJzKCBzZWxmLmRpc3RhbmNlWSApID4gNTAgKSB7XHJcblxyXG5cdFx0XHQvLyBDb250aW51ZSB2ZXJ0aWNhbCBtb3ZlbWVudFxyXG5cdFx0XHQkLmZhbmN5Ym94LmFuaW1hdGUoIHNlbGYuaW5zdGFuY2UuY3VycmVudC4kc2xpZGUsIHtcclxuXHRcdFx0XHR0b3AgICAgIDogc2VsZi5zbGlkZXJTdGFydFBvcy50b3AgKyBzZWxmLmRpc3RhbmNlWSArICggc2VsZi52ZWxvY2l0eVkgKiAxNTAgKSxcclxuXHRcdFx0XHRvcGFjaXR5IDogMFxyXG5cdFx0XHR9LCAxNTAgKTtcclxuXHJcblx0XHRcdHJldCA9IHNlbGYuaW5zdGFuY2UuY2xvc2UoIHRydWUsIDMwMCApO1xyXG5cclxuXHRcdH0gZWxzZSBpZiAoIHN3aXBpbmcgPT0gJ3gnICYmIHNlbGYuZGlzdGFuY2VYID4gNTAgJiYgbGVuID4gMSApIHtcclxuXHRcdFx0cmV0ID0gc2VsZi5pbnN0YW5jZS5wcmV2aW91cyggc2VsZi5zcGVlZFggKTtcclxuXHJcblx0XHR9IGVsc2UgaWYgKCBzd2lwaW5nID09ICd4JyAmJiBzZWxmLmRpc3RhbmNlWCA8IC01MCAmJiBsZW4gPiAxICkge1xyXG5cdFx0XHRyZXQgPSBzZWxmLmluc3RhbmNlLm5leHQoIHNlbGYuc3BlZWRYICk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCByZXQgPT09IGZhbHNlICYmICggc3dpcGluZyA9PSAneCcgfHwgc3dpcGluZyA9PSAneScgKSApIHtcclxuXHRcdFx0aWYgKCBzY3JvbGxpbmcgfHwgbGVuIDwgMiApIHtcclxuXHRcdFx0XHRzZWxmLmluc3RhbmNlLmNlbnRlclNsaWRlKCBzZWxmLmluc3RhbmNlLmN1cnJlbnQsIDE1MCApO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHNlbGYuaW5zdGFuY2UuanVtcFRvKCBzZWxmLmluc3RhbmNlLmN1cnJlbnQuaW5kZXggKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHNlbGYuJGNvbnRhaW5lci5yZW1vdmVDbGFzcyggJ2ZhbmN5Ym94LWlzLXNsaWRpbmcnICk7XHJcblxyXG5cdH07XHJcblxyXG5cdC8vIExpbWl0IHBhbm5pbmcgZnJvbSBlZGdlc1xyXG5cdC8vID09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuXHRHdWVzdHVyZXMucHJvdG90eXBlLmVuZFBhbm5pbmcgPSBmdW5jdGlvbigpIHtcclxuXHJcblx0XHR2YXIgc2VsZiA9IHRoaXM7XHJcblx0XHR2YXIgbmV3T2Zmc2V0WCwgbmV3T2Zmc2V0WSwgbmV3UG9zO1xyXG5cclxuXHRcdGlmICggIXNlbGYuY29udGVudExhc3RQb3MgKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIHNlbGYub3B0cy5tb21lbnR1bSA9PT0gZmFsc2UgKSB7XHJcblx0XHRcdG5ld09mZnNldFggPSBzZWxmLmNvbnRlbnRMYXN0UG9zLmxlZnQ7XHJcblx0XHRcdG5ld09mZnNldFkgPSBzZWxmLmNvbnRlbnRMYXN0UG9zLnRvcDtcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0Ly8gQ29udGludWUgbW92ZW1lbnRcclxuXHRcdFx0bmV3T2Zmc2V0WCA9IHNlbGYuY29udGVudExhc3RQb3MubGVmdCArICggc2VsZi52ZWxvY2l0eVggKiBzZWxmLnNwZWVkICk7XHJcblx0XHRcdG5ld09mZnNldFkgPSBzZWxmLmNvbnRlbnRMYXN0UG9zLnRvcCAgKyAoIHNlbGYudmVsb2NpdHlZICogc2VsZi5zcGVlZCApO1xyXG5cdFx0fVxyXG5cclxuXHRcdG5ld1BvcyA9IHNlbGYubGltaXRQb3NpdGlvbiggbmV3T2Zmc2V0WCwgbmV3T2Zmc2V0WSwgc2VsZi5jb250ZW50U3RhcnRQb3Mud2lkdGgsIHNlbGYuY29udGVudFN0YXJ0UG9zLmhlaWdodCApO1xyXG5cclxuXHRcdCBuZXdQb3Mud2lkdGggID0gc2VsZi5jb250ZW50U3RhcnRQb3Mud2lkdGg7XHJcblx0XHQgbmV3UG9zLmhlaWdodCA9IHNlbGYuY29udGVudFN0YXJ0UG9zLmhlaWdodDtcclxuXHJcblx0XHQkLmZhbmN5Ym94LmFuaW1hdGUoIHNlbGYuJGNvbnRlbnQsIG5ld1BvcywgMzMwICk7XHJcblx0fTtcclxuXHJcblxyXG5cdEd1ZXN0dXJlcy5wcm90b3R5cGUuZW5kWm9vbWluZyA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuXHRcdHZhciBjdXJyZW50ID0gc2VsZi5pbnN0YW5jZS5jdXJyZW50O1xyXG5cclxuXHRcdHZhciBuZXdPZmZzZXRYLCBuZXdPZmZzZXRZLCBuZXdQb3MsIHJlc2V0O1xyXG5cclxuXHRcdHZhciBuZXdXaWR0aCAgPSBzZWxmLm5ld1dpZHRoO1xyXG5cdFx0dmFyIG5ld0hlaWdodCA9IHNlbGYubmV3SGVpZ2h0O1xyXG5cclxuXHRcdGlmICggIXNlbGYuY29udGVudExhc3RQb3MgKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHRuZXdPZmZzZXRYID0gc2VsZi5jb250ZW50TGFzdFBvcy5sZWZ0O1xyXG5cdFx0bmV3T2Zmc2V0WSA9IHNlbGYuY29udGVudExhc3RQb3MudG9wO1xyXG5cclxuXHRcdHJlc2V0ID0ge1xyXG5cdFx0XHR0b3AgICAgOiBuZXdPZmZzZXRZLFxyXG5cdFx0XHRsZWZ0ICAgOiBuZXdPZmZzZXRYLFxyXG5cdFx0XHR3aWR0aCAgOiBuZXdXaWR0aCxcclxuXHRcdFx0aGVpZ2h0IDogbmV3SGVpZ2h0LFxyXG5cdFx0XHRzY2FsZVggOiAxLFxyXG5cdFx0XHRzY2FsZVkgOiAxXHJcblx0XHR9O1xyXG5cclxuXHRcdC8vIFJlc2V0IHNjYWxleC9zY2FsZVkgdmFsdWVzOyB0aGlzIGhlbHBzIGZvciBwZXJmb21hbmNlIGFuZCBkb2VzIG5vdCBicmVhayBhbmltYXRpb25cclxuXHRcdCQuZmFuY3lib3guc2V0VHJhbnNsYXRlKCBzZWxmLiRjb250ZW50LCByZXNldCApO1xyXG5cclxuXHRcdGlmICggbmV3V2lkdGggPCBzZWxmLmNhbnZhc1dpZHRoICYmIG5ld0hlaWdodCA8IHNlbGYuY2FudmFzSGVpZ2h0ICkge1xyXG5cdFx0XHRzZWxmLmluc3RhbmNlLnNjYWxlVG9GaXQoIDE1MCApO1xyXG5cclxuXHRcdH0gZWxzZSBpZiAoIG5ld1dpZHRoID4gY3VycmVudC53aWR0aCB8fCBuZXdIZWlnaHQgPiBjdXJyZW50LmhlaWdodCApIHtcclxuXHRcdFx0c2VsZi5pbnN0YW5jZS5zY2FsZVRvQWN0dWFsKCBzZWxmLmNlbnRlclBvaW50U3RhcnRYLCBzZWxmLmNlbnRlclBvaW50U3RhcnRZLCAxNTAgKTtcclxuXHJcblx0XHR9IGVsc2Uge1xyXG5cclxuXHRcdFx0bmV3UG9zID0gc2VsZi5saW1pdFBvc2l0aW9uKCBuZXdPZmZzZXRYLCBuZXdPZmZzZXRZLCBuZXdXaWR0aCwgbmV3SGVpZ2h0ICk7XHJcblxyXG5cdFx0XHQvLyBTd2l0Y2ggZnJvbSBzY2FsZSgpIHRvIHdpZHRoL2hlaWdodCBvciBhbmltYXRpb24gd2lsbCBub3Qgd29yayBjb3JyZWN0bHlcclxuXHRcdFx0JC5mYW5jeWJveC5zZXRUcmFuc2xhdGUoIHNlbGYuY29udGVudCwgJC5mYW5jeWJveC5nZXRUcmFuc2xhdGUoIHNlbGYuJGNvbnRlbnQgKSApO1xyXG5cclxuXHRcdFx0JC5mYW5jeWJveC5hbmltYXRlKCBzZWxmLiRjb250ZW50LCBuZXdQb3MsIDE1MCApO1xyXG5cdFx0fVxyXG5cclxuXHR9O1xyXG5cclxuXHRHdWVzdHVyZXMucHJvdG90eXBlLm9uVGFwID0gZnVuY3Rpb24oZSkge1xyXG5cdFx0dmFyIHNlbGYgICAgPSB0aGlzO1xyXG5cdFx0dmFyICR0YXJnZXQgPSAkKCBlLnRhcmdldCApO1xyXG5cclxuXHRcdHZhciBpbnN0YW5jZSA9IHNlbGYuaW5zdGFuY2U7XHJcblx0XHR2YXIgY3VycmVudCAgPSBpbnN0YW5jZS5jdXJyZW50O1xyXG5cclxuXHRcdHZhciBlbmRQb2ludHMgPSAoIGUgJiYgcG9pbnRlcnMoIGUgKSApIHx8IHNlbGYuc3RhcnRQb2ludHM7XHJcblxyXG5cdFx0dmFyIHRhcFggPSBlbmRQb2ludHNbMF0gPyBlbmRQb2ludHNbMF0ueCAtIHNlbGYuJHN0YWdlLm9mZnNldCgpLmxlZnQgOiAwO1xyXG5cdFx0dmFyIHRhcFkgPSBlbmRQb2ludHNbMF0gPyBlbmRQb2ludHNbMF0ueSAtIHNlbGYuJHN0YWdlLm9mZnNldCgpLnRvcCAgOiAwO1xyXG5cclxuXHRcdHZhciB3aGVyZTtcclxuXHJcblx0XHR2YXIgcHJvY2VzcyA9IGZ1bmN0aW9uICggcHJlZml4ICkge1xyXG5cclxuXHRcdFx0dmFyIGFjdGlvbiA9IGN1cnJlbnQub3B0c1sgcHJlZml4IF07XHJcblxyXG5cdFx0XHRpZiAoICQuaXNGdW5jdGlvbiggYWN0aW9uICkgKSB7XHJcblx0XHRcdFx0YWN0aW9uID0gYWN0aW9uLmFwcGx5KCBpbnN0YW5jZSwgWyBjdXJyZW50LCBlIF0gKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKCAhYWN0aW9uKSB7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRzd2l0Y2ggKCBhY3Rpb24gKSB7XHJcblxyXG5cdFx0XHRcdGNhc2UgXCJjbG9zZVwiIDpcclxuXHJcblx0XHRcdFx0XHRpbnN0YW5jZS5jbG9zZSggc2VsZi5zdGFydEV2ZW50ICk7XHJcblxyXG5cdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0XHRjYXNlIFwidG9nZ2xlQ29udHJvbHNcIiA6XHJcblxyXG5cdFx0XHRcdFx0aW5zdGFuY2UudG9nZ2xlQ29udHJvbHMoIHRydWUgKTtcclxuXHJcblx0XHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0XHRcdGNhc2UgXCJuZXh0XCIgOlxyXG5cclxuXHRcdFx0XHRcdGluc3RhbmNlLm5leHQoKTtcclxuXHJcblx0XHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0XHRcdGNhc2UgXCJuZXh0T3JDbG9zZVwiIDpcclxuXHJcblx0XHRcdFx0XHRpZiAoIGluc3RhbmNlLmdyb3VwLmxlbmd0aCA+IDEgKSB7XHJcblx0XHRcdFx0XHRcdGluc3RhbmNlLm5leHQoKTtcclxuXHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRpbnN0YW5jZS5jbG9zZSggc2VsZi5zdGFydEV2ZW50ICk7XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0XHRjYXNlIFwiem9vbVwiIDpcclxuXHJcblx0XHRcdFx0XHRpZiAoIGN1cnJlbnQudHlwZSA9PSAnaW1hZ2UnICYmICggY3VycmVudC5pc0xvYWRlZCB8fCBjdXJyZW50LiRnaG9zdCApICkge1xyXG5cclxuXHRcdFx0XHRcdFx0aWYgKCBpbnN0YW5jZS5jYW5QYW4oKSApIHtcclxuXHRcdFx0XHRcdFx0XHRpbnN0YW5jZS5zY2FsZVRvRml0KCk7XHJcblxyXG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBpbnN0YW5jZS5pc1NjYWxlZERvd24oKSApIHtcclxuXHRcdFx0XHRcdFx0XHRpbnN0YW5jZS5zY2FsZVRvQWN0dWFsKCB0YXBYLCB0YXBZICk7XHJcblxyXG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBpbnN0YW5jZS5ncm91cC5sZW5ndGggPCAyICkge1xyXG5cdFx0XHRcdFx0XHRcdGluc3RhbmNlLmNsb3NlKCBzZWxmLnN0YXJ0RXZlbnQgKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRicmVhaztcclxuXHRcdFx0fVxyXG5cclxuXHRcdH07XHJcblxyXG5cdFx0Ly8gSWdub3JlIHJpZ2h0IGNsaWNrXHJcblx0XHRpZiAoIGUub3JpZ2luYWxFdmVudCAmJiBlLm9yaWdpbmFsRXZlbnQuYnV0dG9uID09IDIgKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBTa2lwIGlmIGNsaWNrZWQgb24gdGhlIHNjcm9sbGJhclxyXG5cdFx0aWYgKCAhJHRhcmdldC5pcygnaW1nJykgJiYgdGFwWCA+ICR0YXJnZXRbMF0uY2xpZW50V2lkdGggKyAkdGFyZ2V0Lm9mZnNldCgpLmxlZnQgKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBDaGVjayB3aGVyZSBpcyBjbGlja2VkXHJcblx0XHRpZiAoICR0YXJnZXQuaXMoICcuZmFuY3lib3gtYmcsLmZhbmN5Ym94LWlubmVyLC5mYW5jeWJveC1vdXRlciwuZmFuY3lib3gtY29udGFpbmVyJyApICkge1xyXG5cdFx0XHR3aGVyZSA9ICdPdXRzaWRlJztcclxuXHJcblx0XHR9IGVsc2UgaWYgKCAkdGFyZ2V0LmlzKCAnLmZhbmN5Ym94LXNsaWRlJyApICkge1xyXG5cdFx0XHR3aGVyZSA9ICdTbGlkZSc7XHJcblxyXG5cdFx0fSBlbHNlIGlmICggaW5zdGFuY2UuY3VycmVudC4kY29udGVudCAmJiBpbnN0YW5jZS5jdXJyZW50LiRjb250ZW50LmZpbmQoICR0YXJnZXQgKS5hZGRCYWNrKCkuZmlsdGVyKCAkdGFyZ2V0ICkubGVuZ3RoICkge1xyXG5cdFx0IFx0d2hlcmUgPSAnQ29udGVudCc7XHJcblxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIENoZWNrIGlmIHRoaXMgaXMgYSBkb3VibGUgdGFwXHJcblx0XHRpZiAoIHNlbGYudGFwcGVkICkge1xyXG5cclxuXHRcdFx0Ly8gU3RvcCBwcmV2aW91c2x5IGNyZWF0ZWQgc2luZ2xlIHRhcFxyXG5cdFx0XHRjbGVhclRpbWVvdXQoIHNlbGYudGFwcGVkICk7XHJcblx0XHRcdHNlbGYudGFwcGVkID0gbnVsbDtcclxuXHJcblx0XHRcdC8vIFNraXAgaWYgZGlzdGFuY2UgYmV0d2VlbiB0YXBzIGlzIHRvbyBiaWdcclxuXHRcdFx0aWYgKCBNYXRoLmFicyggdGFwWCAtIHNlbGYudGFwWCApID4gNTAgfHwgTWF0aC5hYnMoIHRhcFkgLSBzZWxmLnRhcFkgKSA+IDUwICkge1xyXG5cdFx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBPSywgbm93IHdlIGFzc3VtZSB0aGF0IHRoaXMgaXMgYSBkb3VibGUtdGFwXHJcblx0XHRcdHByb2Nlc3MoICdkYmxjbGljaycgKyB3aGVyZSApO1xyXG5cclxuXHRcdH0gZWxzZSB7XHJcblxyXG5cdFx0XHQvLyBTaW5nbGUgdGFwIHdpbGwgYmUgcHJvY2Vzc2VkIGlmIHVzZXIgaGFzIG5vdCBjbGlja2VkIHNlY29uZCB0aW1lIHdpdGhpbiAzMDBtc1xyXG5cdFx0XHQvLyBvciB0aGVyZSBpcyBubyBuZWVkIHRvIHdhaXQgZm9yIGRvdWJsZS10YXBcclxuXHRcdFx0c2VsZi50YXBYID0gdGFwWDtcclxuXHRcdFx0c2VsZi50YXBZID0gdGFwWTtcclxuXHJcblx0XHRcdGlmICggY3VycmVudC5vcHRzWyAnZGJsY2xpY2snICsgd2hlcmUgXSAmJiBjdXJyZW50Lm9wdHNbICdkYmxjbGljaycgKyB3aGVyZSBdICE9PSBjdXJyZW50Lm9wdHNbICdjbGljaycgKyB3aGVyZSBdICkge1xyXG5cclxuXHRcdFx0XHRzZWxmLnRhcHBlZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRzZWxmLnRhcHBlZCA9IG51bGw7XHJcblxyXG5cdFx0XHRcdFx0cHJvY2VzcyggJ2NsaWNrJyArIHdoZXJlICk7XHJcblxyXG5cdFx0XHRcdH0sIDUwMCk7XHJcblxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHByb2Nlc3MoICdjbGljaycgKyB3aGVyZSApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH07XHJcblxyXG5cdCQoZG9jdW1lbnQpLm9uKCdvbkFjdGl2YXRlLmZiJywgZnVuY3Rpb24gKGUsIGluc3RhbmNlKSB7XHJcblx0XHRpZiAoIGluc3RhbmNlICYmICFpbnN0YW5jZS5HdWVzdHVyZXMgKSB7XHJcblx0XHRcdGluc3RhbmNlLkd1ZXN0dXJlcyA9IG5ldyBHdWVzdHVyZXMoIGluc3RhbmNlICk7XHJcblx0XHR9XHJcblx0fSk7XHJcblxyXG59KCB3aW5kb3csIGRvY3VtZW50LCB3aW5kb3cualF1ZXJ5IHx8IGpRdWVyeSApKTtcclxuXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbi8vXHJcbi8vIFNsaWRlU2hvd1xyXG4vLyBFbmFibGVzIHNsaWRlc2hvdyBmdW5jdGlvbmFsaXR5XHJcbi8vXHJcbi8vIEV4YW1wbGUgb2YgdXNhZ2U6XHJcbi8vICQuZmFuY3lib3guZ2V0SW5zdGFuY2UoKS5TbGlkZVNob3cuc3RhcnQoKVxyXG4vL1xyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG47KGZ1bmN0aW9uIChkb2N1bWVudCwgJCkge1xyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0JC5leHRlbmQodHJ1ZSwgJC5mYW5jeWJveC5kZWZhdWx0cywge1xyXG5cdFx0YnRuVHBsIDoge1xyXG5cdFx0XHRzbGlkZVNob3cgOlxyXG5cdFx0XHRcdCc8YnV0dG9uIGRhdGEtZmFuY3lib3gtcGxheSBjbGFzcz1cImZhbmN5Ym94LWJ1dHRvbiBmYW5jeWJveC1idXR0b24tLXBsYXlcIiB0aXRsZT1cInt7UExBWV9TVEFSVH19XCI+JyArXHJcblx0XHRcdFx0XHQnPHN2ZyB2aWV3Qm94PVwiMCAwIDQwIDQwXCI+JyArXHJcblx0XHRcdFx0XHRcdCc8cGF0aCBkPVwiTTEzLDEyIEwyNywyMCBMMTMsMjcgWlwiIC8+JyArXHJcblx0XHRcdFx0XHRcdCc8cGF0aCBkPVwiTTE1LDEwIHYxOSBNMjMsMTAgdjE5XCIgLz4nICtcclxuXHRcdFx0XHRcdCc8L3N2Zz4nICtcclxuXHRcdFx0XHQnPC9idXR0b24+J1xyXG5cdFx0fSxcclxuXHRcdHNsaWRlU2hvdyA6IHtcclxuXHRcdFx0YXV0b1N0YXJ0IDogZmFsc2UsXHJcbiAgICAgICAgICAgIHNwZWVkICAgICA6IDMwMDBcclxuXHRcdH1cclxuXHR9KTtcclxuXHJcblx0dmFyIFNsaWRlU2hvdyA9IGZ1bmN0aW9uKCBpbnN0YW5jZSApIHtcclxuXHRcdHRoaXMuaW5zdGFuY2UgPSBpbnN0YW5jZTtcclxuXHRcdHRoaXMuaW5pdCgpO1xyXG5cdH07XHJcblxyXG5cdCQuZXh0ZW5kKCBTbGlkZVNob3cucHJvdG90eXBlLCB7XHJcblx0XHR0aW1lciAgICA6IG51bGwsXHJcblx0XHRpc0FjdGl2ZSA6IGZhbHNlLFxyXG5cdFx0JGJ1dHRvbiAgOiBudWxsLFxyXG5cclxuXHRcdGluaXQgOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0dmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuXHRcdFx0c2VsZi4kYnV0dG9uID0gc2VsZi5pbnN0YW5jZS4kcmVmcy50b29sYmFyLmZpbmQoJ1tkYXRhLWZhbmN5Ym94LXBsYXldJykub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0c2VsZi50b2dnbGUoKTtcclxuXHRcdFx0fSk7XHJcblxyXG5cdFx0XHRpZiAoIHNlbGYuaW5zdGFuY2UuZ3JvdXAubGVuZ3RoIDwgMiB8fCAhc2VsZi5pbnN0YW5jZS5ncm91cFsgc2VsZi5pbnN0YW5jZS5jdXJySW5kZXggXS5vcHRzLnNsaWRlU2hvdyApIHtcclxuXHRcdFx0XHRzZWxmLiRidXR0b24uaGlkZSgpO1xyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cclxuXHRcdHNldCA6IGZ1bmN0aW9uKCBmb3JjZSApIHtcclxuXHRcdFx0dmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuXHRcdFx0Ly8gQ2hlY2sgaWYgcmVhY2hlZCBsYXN0IGVsZW1lbnRcclxuXHRcdFx0aWYgKCBzZWxmLmluc3RhbmNlICYmIHNlbGYuaW5zdGFuY2UuY3VycmVudCAmJiAoZm9yY2UgPT09IHRydWUgfHwgc2VsZi5pbnN0YW5jZS5jdXJyZW50Lm9wdHMubG9vcCB8fCBzZWxmLmluc3RhbmNlLmN1cnJJbmRleCA8IHNlbGYuaW5zdGFuY2UuZ3JvdXAubGVuZ3RoIC0gMSApKSB7XHJcblx0XHRcdFx0c2VsZi50aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0XHRpZiAoIHNlbGYuaXNBY3RpdmUgKSB7XHJcblx0XHRcdFx0XHRcdHNlbGYuaW5zdGFuY2UuanVtcFRvKCAoc2VsZi5pbnN0YW5jZS5jdXJySW5kZXggKyAxKSAlIHNlbGYuaW5zdGFuY2UuZ3JvdXAubGVuZ3RoICk7XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdH0sIHNlbGYuaW5zdGFuY2UuY3VycmVudC5vcHRzLnNsaWRlU2hvdy5zcGVlZCk7XHJcblxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHNlbGYuc3RvcCgpO1xyXG5cdFx0XHRcdHNlbGYuaW5zdGFuY2UuaWRsZVNlY29uZHNDb3VudGVyID0gMDtcclxuXHRcdFx0XHRzZWxmLmluc3RhbmNlLnNob3dDb250cm9scygpO1xyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cclxuXHRcdGNsZWFyIDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdHZhciBzZWxmID0gdGhpcztcclxuXHJcblx0XHRcdGNsZWFyVGltZW91dCggc2VsZi50aW1lciApO1xyXG5cclxuXHRcdFx0c2VsZi50aW1lciA9IG51bGw7XHJcblx0XHR9LFxyXG5cclxuXHRcdHN0YXJ0IDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdHZhciBzZWxmID0gdGhpcztcclxuXHRcdFx0dmFyIGN1cnJlbnQgPSBzZWxmLmluc3RhbmNlLmN1cnJlbnQ7XHJcblxyXG5cdFx0XHRpZiAoIGN1cnJlbnQgKSB7XHJcblx0XHRcdFx0c2VsZi5pc0FjdGl2ZSA9IHRydWU7XHJcblxyXG5cdFx0XHRcdHNlbGYuJGJ1dHRvblxyXG5cdFx0XHRcdFx0LmF0dHIoICd0aXRsZScsIGN1cnJlbnQub3B0cy5pMThuWyBjdXJyZW50Lm9wdHMubGFuZyBdLlBMQVlfU1RPUCApXHJcblx0XHRcdFx0XHQucmVtb3ZlQ2xhc3MoICdmYW5jeWJveC1idXR0b24tLXBsYXknIClcclxuXHRcdFx0XHRcdC5hZGRDbGFzcyggJ2ZhbmN5Ym94LWJ1dHRvbi0tcGF1c2UnICk7XHJcblxyXG5cdFx0XHRcdFx0c2VsZi5zZXQoIHRydWUgKTtcclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHJcblx0XHRzdG9wIDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdHZhciBzZWxmID0gdGhpcztcclxuXHRcdFx0dmFyIGN1cnJlbnQgPSBzZWxmLmluc3RhbmNlLmN1cnJlbnQ7XHJcblxyXG5cdFx0XHRzZWxmLmNsZWFyKCk7XHJcblxyXG5cdFx0XHRzZWxmLiRidXR0b25cclxuXHRcdFx0XHQuYXR0ciggJ3RpdGxlJywgY3VycmVudC5vcHRzLmkxOG5bIGN1cnJlbnQub3B0cy5sYW5nIF0uUExBWV9TVEFSVCApXHJcblx0XHRcdFx0LnJlbW92ZUNsYXNzKCAnZmFuY3lib3gtYnV0dG9uLS1wYXVzZScgKVxyXG5cdFx0XHRcdC5hZGRDbGFzcyggJ2ZhbmN5Ym94LWJ1dHRvbi0tcGxheScgKTtcclxuXHJcblx0XHRcdHNlbGYuaXNBY3RpdmUgPSBmYWxzZTtcclxuXHRcdH0sXHJcblxyXG5cdFx0dG9nZ2xlIDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdHZhciBzZWxmID0gdGhpcztcclxuXHJcblx0XHRcdGlmICggc2VsZi5pc0FjdGl2ZSApIHtcclxuXHRcdFx0XHRzZWxmLnN0b3AoKTtcclxuXHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0c2VsZi5zdGFydCgpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdH0pO1xyXG5cclxuXHQkKGRvY3VtZW50KS5vbih7XHJcblx0XHQnb25Jbml0LmZiJyA6IGZ1bmN0aW9uKGUsIGluc3RhbmNlKSB7XHJcblx0XHRcdGlmICggaW5zdGFuY2UgJiYgIWluc3RhbmNlLlNsaWRlU2hvdyApIHtcclxuXHRcdFx0XHRpbnN0YW5jZS5TbGlkZVNob3cgPSBuZXcgU2xpZGVTaG93KCBpbnN0YW5jZSApO1xyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cclxuXHRcdCdiZWZvcmVTaG93LmZiJyA6IGZ1bmN0aW9uKGUsIGluc3RhbmNlLCBjdXJyZW50LCBmaXJzdFJ1bikge1xyXG5cdFx0XHR2YXIgU2xpZGVTaG93ID0gaW5zdGFuY2UgJiYgaW5zdGFuY2UuU2xpZGVTaG93O1xyXG5cclxuXHRcdFx0aWYgKCBmaXJzdFJ1biApIHtcclxuXHJcblx0XHRcdFx0aWYgKCBTbGlkZVNob3cgJiYgY3VycmVudC5vcHRzLnNsaWRlU2hvdy5hdXRvU3RhcnQgKSB7XHJcblx0XHRcdFx0XHRTbGlkZVNob3cuc3RhcnQoKTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHR9IGVsc2UgaWYgKCBTbGlkZVNob3cgJiYgU2xpZGVTaG93LmlzQWN0aXZlICkgIHtcclxuXHRcdFx0XHRTbGlkZVNob3cuY2xlYXIoKTtcclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHJcblx0XHQnYWZ0ZXJTaG93LmZiJyA6IGZ1bmN0aW9uKGUsIGluc3RhbmNlLCBjdXJyZW50KSB7XHJcblx0XHRcdHZhciBTbGlkZVNob3cgPSBpbnN0YW5jZSAmJiBpbnN0YW5jZS5TbGlkZVNob3c7XHJcblxyXG5cdFx0XHRpZiAoIFNsaWRlU2hvdyAmJiBTbGlkZVNob3cuaXNBY3RpdmUgKSB7XHJcblx0XHRcdFx0U2xpZGVTaG93LnNldCgpO1xyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cclxuXHRcdCdhZnRlcktleWRvd24uZmInIDogZnVuY3Rpb24oZSwgaW5zdGFuY2UsIGN1cnJlbnQsIGtleXByZXNzLCBrZXljb2RlKSB7XHJcblx0XHRcdHZhciBTbGlkZVNob3cgPSBpbnN0YW5jZSAmJiBpbnN0YW5jZS5TbGlkZVNob3c7XHJcblxyXG5cdFx0XHQvLyBcIlBcIiBvciBTcGFjZWJhclxyXG5cdFx0XHRpZiAoIFNsaWRlU2hvdyAmJiBjdXJyZW50Lm9wdHMuc2xpZGVTaG93ICYmICgga2V5Y29kZSA9PT0gODAgfHwga2V5Y29kZSA9PT0gMzIgKSAmJiAhJChkb2N1bWVudC5hY3RpdmVFbGVtZW50KS5pcyggJ2J1dHRvbixhLGlucHV0JyApICkge1xyXG5cdFx0XHRcdGtleXByZXNzLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG5cdFx0XHRcdFNsaWRlU2hvdy50b2dnbGUoKTtcclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHJcblx0XHQnYmVmb3JlQ2xvc2UuZmIgb25EZWFjdGl2YXRlLmZiJyA6IGZ1bmN0aW9uKGUsIGluc3RhbmNlKSB7XHJcblx0XHRcdHZhciBTbGlkZVNob3cgPSBpbnN0YW5jZSAmJiBpbnN0YW5jZS5TbGlkZVNob3c7XHJcblxyXG5cdFx0XHRpZiAoIFNsaWRlU2hvdyApIHtcclxuXHRcdFx0XHRTbGlkZVNob3cuc3RvcCgpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fSk7XHJcblxyXG5cdC8vIFBhZ2UgVmlzaWJpbGl0eSBBUEkgdG8gcGF1c2Ugc2xpZGVzaG93IHdoZW4gd2luZG93IGlzIG5vdCBhY3RpdmVcclxuXHQkKGRvY3VtZW50KS5vbihcInZpc2liaWxpdHljaGFuZ2VcIiwgZnVuY3Rpb24oKSB7XHJcblx0XHR2YXIgaW5zdGFuY2UgID0gJC5mYW5jeWJveC5nZXRJbnN0YW5jZSgpO1xyXG5cdFx0dmFyIFNsaWRlU2hvdyA9IGluc3RhbmNlICYmIGluc3RhbmNlLlNsaWRlU2hvdztcclxuXHJcblx0XHRpZiAoIFNsaWRlU2hvdyAmJiBTbGlkZVNob3cuaXNBY3RpdmUgKSB7XHJcblx0XHRcdGlmICggZG9jdW1lbnQuaGlkZGVuICkge1xyXG5cdFx0XHRcdFNsaWRlU2hvdy5jbGVhcigpO1xyXG5cclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRTbGlkZVNob3cuc2V0KCk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9KTtcclxuXHJcbn0oIGRvY3VtZW50LCB3aW5kb3cualF1ZXJ5IHx8IGpRdWVyeSApKTtcclxuXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbi8vXHJcbi8vIEZ1bGxTY3JlZW5cclxuLy8gQWRkcyBmdWxsc2NyZWVuIGZ1bmN0aW9uYWxpdHlcclxuLy9cclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuOyhmdW5jdGlvbiAoZG9jdW1lbnQsICQpIHtcclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdC8vIENvbGxlY3Rpb24gb2YgbWV0aG9kcyBzdXBwb3J0ZWQgYnkgdXNlciBicm93c2VyXHJcblx0dmFyIGZuID0gKGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHR2YXIgZm5NYXAgPSBbXHJcblx0XHRcdFtcclxuXHRcdFx0XHQncmVxdWVzdEZ1bGxzY3JlZW4nLFxyXG5cdFx0XHRcdCdleGl0RnVsbHNjcmVlbicsXHJcblx0XHRcdFx0J2Z1bGxzY3JlZW5FbGVtZW50JyxcclxuXHRcdFx0XHQnZnVsbHNjcmVlbkVuYWJsZWQnLFxyXG5cdFx0XHRcdCdmdWxsc2NyZWVuY2hhbmdlJyxcclxuXHRcdFx0XHQnZnVsbHNjcmVlbmVycm9yJ1xyXG5cdFx0XHRdLFxyXG5cdFx0XHQvLyBuZXcgV2ViS2l0XHJcblx0XHRcdFtcclxuXHRcdFx0XHQnd2Via2l0UmVxdWVzdEZ1bGxzY3JlZW4nLFxyXG5cdFx0XHRcdCd3ZWJraXRFeGl0RnVsbHNjcmVlbicsXHJcblx0XHRcdFx0J3dlYmtpdEZ1bGxzY3JlZW5FbGVtZW50JyxcclxuXHRcdFx0XHQnd2Via2l0RnVsbHNjcmVlbkVuYWJsZWQnLFxyXG5cdFx0XHRcdCd3ZWJraXRmdWxsc2NyZWVuY2hhbmdlJyxcclxuXHRcdFx0XHQnd2Via2l0ZnVsbHNjcmVlbmVycm9yJ1xyXG5cclxuXHRcdFx0XSxcclxuXHRcdFx0Ly8gb2xkIFdlYktpdCAoU2FmYXJpIDUuMSlcclxuXHRcdFx0W1xyXG5cdFx0XHRcdCd3ZWJraXRSZXF1ZXN0RnVsbFNjcmVlbicsXHJcblx0XHRcdFx0J3dlYmtpdENhbmNlbEZ1bGxTY3JlZW4nLFxyXG5cdFx0XHRcdCd3ZWJraXRDdXJyZW50RnVsbFNjcmVlbkVsZW1lbnQnLFxyXG5cdFx0XHRcdCd3ZWJraXRDYW5jZWxGdWxsU2NyZWVuJyxcclxuXHRcdFx0XHQnd2Via2l0ZnVsbHNjcmVlbmNoYW5nZScsXHJcblx0XHRcdFx0J3dlYmtpdGZ1bGxzY3JlZW5lcnJvcidcclxuXHJcblx0XHRcdF0sXHJcblx0XHRcdFtcclxuXHRcdFx0XHQnbW96UmVxdWVzdEZ1bGxTY3JlZW4nLFxyXG5cdFx0XHRcdCdtb3pDYW5jZWxGdWxsU2NyZWVuJyxcclxuXHRcdFx0XHQnbW96RnVsbFNjcmVlbkVsZW1lbnQnLFxyXG5cdFx0XHRcdCdtb3pGdWxsU2NyZWVuRW5hYmxlZCcsXHJcblx0XHRcdFx0J21vemZ1bGxzY3JlZW5jaGFuZ2UnLFxyXG5cdFx0XHRcdCdtb3pmdWxsc2NyZWVuZXJyb3InXHJcblx0XHRcdF0sXHJcblx0XHRcdFtcclxuXHRcdFx0XHQnbXNSZXF1ZXN0RnVsbHNjcmVlbicsXHJcblx0XHRcdFx0J21zRXhpdEZ1bGxzY3JlZW4nLFxyXG5cdFx0XHRcdCdtc0Z1bGxzY3JlZW5FbGVtZW50JyxcclxuXHRcdFx0XHQnbXNGdWxsc2NyZWVuRW5hYmxlZCcsXHJcblx0XHRcdFx0J01TRnVsbHNjcmVlbkNoYW5nZScsXHJcblx0XHRcdFx0J01TRnVsbHNjcmVlbkVycm9yJ1xyXG5cdFx0XHRdXHJcblx0XHRdO1xyXG5cclxuXHRcdHZhciB2YWw7XHJcblx0XHR2YXIgcmV0ID0ge307XHJcblx0XHR2YXIgaSwgajtcclxuXHJcblx0XHRmb3IgKCBpID0gMDsgaSA8IGZuTWFwLmxlbmd0aDsgaSsrICkge1xyXG5cdFx0XHR2YWwgPSBmbk1hcFsgaSBdO1xyXG5cclxuXHRcdFx0aWYgKCB2YWwgJiYgdmFsWyAxIF0gaW4gZG9jdW1lbnQgKSB7XHJcblx0XHRcdFx0Zm9yICggaiA9IDA7IGogPCB2YWwubGVuZ3RoOyBqKysgKSB7XHJcblx0XHRcdFx0XHRyZXRbIGZuTWFwWyAwIF1bIGogXSBdID0gdmFsWyBqIF07XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRyZXR1cm4gcmV0O1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGZhbHNlO1xyXG5cdH0pKCk7XHJcblxyXG5cdC8vIElmIGJyb3dzZXIgZG9lcyBub3QgaGF2ZSBGdWxsIFNjcmVlbiBBUEksIHRoZW4gc2ltcGx5IHVuc2V0IGRlZmF1bHQgYnV0dG9uIHRlbXBsYXRlIGFuZCBzdG9wXHJcblx0aWYgKCAhZm4gKSB7XHJcblxyXG5cdFx0aWYgKCAkICYmICQuZmFuY3lib3ggKSB7XHJcblx0XHRcdCQuZmFuY3lib3guZGVmYXVsdHMuYnRuVHBsLmZ1bGxTY3JlZW4gPSBmYWxzZTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm47XHJcblx0fVxyXG5cclxuXHR2YXIgRnVsbFNjcmVlbiA9IHtcclxuXHJcblx0XHRyZXF1ZXN0IDogZnVuY3Rpb24gKCBlbGVtICkge1xyXG5cclxuXHRcdFx0ZWxlbSA9IGVsZW0gfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xyXG5cclxuXHRcdFx0ZWxlbVsgZm4ucmVxdWVzdEZ1bGxzY3JlZW4gXSggZWxlbS5BTExPV19LRVlCT0FSRF9JTlBVVCApO1xyXG5cclxuXHRcdH0sXHJcblx0XHRleGl0IDogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdFx0ZG9jdW1lbnRbIGZuLmV4aXRGdWxsc2NyZWVuIF0oKTtcclxuXHJcblx0XHR9LFxyXG5cdFx0dG9nZ2xlIDogZnVuY3Rpb24gKCBlbGVtICkge1xyXG5cclxuXHRcdFx0ZWxlbSA9IGVsZW0gfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xyXG5cclxuXHRcdFx0aWYgKCB0aGlzLmlzRnVsbHNjcmVlbigpICkge1xyXG5cdFx0XHRcdHRoaXMuZXhpdCgpO1xyXG5cclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHR0aGlzLnJlcXVlc3QoIGVsZW0gKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdH0sXHJcblx0XHRpc0Z1bGxzY3JlZW4gOiBmdW5jdGlvbigpICB7XHJcblxyXG5cdFx0XHRyZXR1cm4gQm9vbGVhbiggZG9jdW1lbnRbIGZuLmZ1bGxzY3JlZW5FbGVtZW50IF0gKTtcclxuXHJcblx0XHR9LFxyXG5cdFx0ZW5hYmxlZCA6IGZ1bmN0aW9uKCkgIHtcclxuXHJcblx0XHRcdHJldHVybiBCb29sZWFuKCBkb2N1bWVudFsgZm4uZnVsbHNjcmVlbkVuYWJsZWQgXSApO1xyXG5cclxuXHRcdH1cclxuXHR9O1xyXG5cclxuXHQkLmV4dGVuZCh0cnVlLCAkLmZhbmN5Ym94LmRlZmF1bHRzLCB7XHJcblx0XHRidG5UcGwgOiB7XHJcblx0XHRcdGZ1bGxTY3JlZW4gOlxyXG5cdFx0XHRcdCc8YnV0dG9uIGRhdGEtZmFuY3lib3gtZnVsbHNjcmVlbiBjbGFzcz1cImZhbmN5Ym94LWJ1dHRvbiBmYW5jeWJveC1idXR0b24tLWZ1bGxzY3JlZW5cIiB0aXRsZT1cInt7RlVMTF9TQ1JFRU59fVwiPicgK1xyXG5cdFx0XHRcdFx0Jzxzdmcgdmlld0JveD1cIjAgMCA0MCA0MFwiPicgK1xyXG5cdFx0XHRcdFx0XHQnPHBhdGggZD1cIk05LDEyIGgyMiB2MTYgaC0yMiB2LTE2IHYxNiBoMjIgdi0xNiBaXCIgLz4nICtcclxuXHRcdFx0XHRcdCc8L3N2Zz4nICtcclxuXHRcdFx0XHQnPC9idXR0b24+J1xyXG5cdFx0fSxcclxuXHRcdGZ1bGxTY3JlZW4gOiB7XHJcblx0XHRcdGF1dG9TdGFydCA6IGZhbHNlXHJcblx0XHR9XHJcblx0fSk7XHJcblxyXG5cdCQoZG9jdW1lbnQpLm9uKHtcclxuXHRcdCdvbkluaXQuZmInIDogZnVuY3Rpb24oZSwgaW5zdGFuY2UpIHtcclxuXHRcdFx0dmFyICRjb250YWluZXI7XHJcblxyXG5cdFx0XHRpZiAoIGluc3RhbmNlICYmIGluc3RhbmNlLmdyb3VwWyBpbnN0YW5jZS5jdXJySW5kZXggXS5vcHRzLmZ1bGxTY3JlZW4gKSB7XHJcblx0XHRcdFx0JGNvbnRhaW5lciA9IGluc3RhbmNlLiRyZWZzLmNvbnRhaW5lcjtcclxuXHJcblx0XHRcdFx0JGNvbnRhaW5lci5vbignY2xpY2suZmItZnVsbHNjcmVlbicsICdbZGF0YS1mYW5jeWJveC1mdWxsc2NyZWVuXScsIGZ1bmN0aW9uKGUpIHtcclxuXHJcblx0XHRcdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cdFx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuXHRcdFx0XHRcdEZ1bGxTY3JlZW4udG9nZ2xlKCAkY29udGFpbmVyWyAwIF0gKTtcclxuXHJcblx0XHRcdFx0fSk7XHJcblxyXG5cdFx0XHRcdGlmICggaW5zdGFuY2Uub3B0cy5mdWxsU2NyZWVuICYmIGluc3RhbmNlLm9wdHMuZnVsbFNjcmVlbi5hdXRvU3RhcnQgPT09IHRydWUgKSB7XHJcblx0XHRcdFx0XHRGdWxsU2NyZWVuLnJlcXVlc3QoICRjb250YWluZXJbIDAgXSApO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0Ly8gRXhwb3NlIEFQSVxyXG5cdFx0XHRcdGluc3RhbmNlLkZ1bGxTY3JlZW4gPSBGdWxsU2NyZWVuO1xyXG5cclxuXHRcdFx0fSBlbHNlIGlmICggaW5zdGFuY2UgKSB7XHJcblx0XHRcdFx0aW5zdGFuY2UuJHJlZnMudG9vbGJhci5maW5kKCdbZGF0YS1mYW5jeWJveC1mdWxsc2NyZWVuXScpLmhpZGUoKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdH0sXHJcblxyXG5cdFx0J2FmdGVyS2V5ZG93bi5mYicgOiBmdW5jdGlvbihlLCBpbnN0YW5jZSwgY3VycmVudCwga2V5cHJlc3MsIGtleWNvZGUpIHtcclxuXHJcblx0XHRcdC8vIFwiUFwiIG9yIFNwYWNlYmFyXHJcblx0XHRcdGlmICggaW5zdGFuY2UgJiYgaW5zdGFuY2UuRnVsbFNjcmVlbiAmJiBrZXljb2RlID09PSA3MCApIHtcclxuXHRcdFx0XHRrZXlwcmVzcy5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuXHRcdFx0XHRpbnN0YW5jZS5GdWxsU2NyZWVuLnRvZ2dsZSggaW5zdGFuY2UuJHJlZnMuY29udGFpbmVyWyAwIF0gKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdH0sXHJcblxyXG5cdFx0J2JlZm9yZUNsb3NlLmZiJyA6IGZ1bmN0aW9uKCBpbnN0YW5jZSApIHtcclxuXHRcdFx0aWYgKCBpbnN0YW5jZSAmJiBpbnN0YW5jZS5GdWxsU2NyZWVuICkge1xyXG5cdFx0XHRcdEZ1bGxTY3JlZW4uZXhpdCgpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fSk7XHJcblxyXG5cdCQoZG9jdW1lbnQpLm9uKGZuLmZ1bGxzY3JlZW5jaGFuZ2UsIGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIGlzRnVsbHNjcmVlbiA9IEZ1bGxTY3JlZW4uaXNGdWxsc2NyZWVuKCksXHJcblx0XHRcdGluc3RhbmNlID0gJC5mYW5jeWJveC5nZXRJbnN0YW5jZSgpO1xyXG5cclxuXHRcdGlmICggaW5zdGFuY2UgKSB7XHJcblxyXG5cdFx0XHQvLyBJZiBpbWFnZSBpcyB6b29taW5nLCB0aGVuIGZvcmNlIHRvIHN0b3AgYW5kIHJlcG9zaXRpb24gcHJvcGVybHlcclxuXHRcdFx0aWYgKCBpbnN0YW5jZS5jdXJyZW50ICYmIGluc3RhbmNlLmN1cnJlbnQudHlwZSA9PT0gJ2ltYWdlJyAmJiBpbnN0YW5jZS5pc0FuaW1hdGluZyApIHtcclxuXHRcdFx0XHRpbnN0YW5jZS5jdXJyZW50LiRjb250ZW50LmNzcyggJ3RyYW5zaXRpb24nLCAnbm9uZScgKTtcclxuXHJcblx0XHRcdFx0aW5zdGFuY2UuaXNBbmltYXRpbmcgPSBmYWxzZTtcclxuXHJcblx0XHRcdFx0aW5zdGFuY2UudXBkYXRlKCB0cnVlLCB0cnVlLCAwICk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGluc3RhbmNlLnRyaWdnZXIoICdvbkZ1bGxzY3JlZW5DaGFuZ2UnLCBpc0Z1bGxzY3JlZW4gKTtcclxuXHJcblx0XHRcdGluc3RhbmNlLiRyZWZzLmNvbnRhaW5lci50b2dnbGVDbGFzcyggJ2ZhbmN5Ym94LWlzLWZ1bGxzY3JlZW4nLCBpc0Z1bGxzY3JlZW4gKTtcclxuXHRcdH1cclxuXHJcblx0fSk7XHJcblxyXG59KCBkb2N1bWVudCwgd2luZG93LmpRdWVyeSB8fCBqUXVlcnkgKSk7XHJcblxyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4vL1xyXG4vLyBUaHVtYnNcclxuLy8gRGlzcGxheXMgdGh1bWJuYWlscyBpbiBhIGdyaWRcclxuLy9cclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuOyhmdW5jdGlvbiAoZG9jdW1lbnQsICQpIHtcclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdC8vIE1ha2Ugc3VyZSB0aGVyZSBhcmUgZGVmYXVsdCB2YWx1ZXNcclxuXHQkLmZhbmN5Ym94LmRlZmF1bHRzID0gJC5leHRlbmQodHJ1ZSwge1xyXG5cdFx0YnRuVHBsIDoge1xyXG5cdFx0XHR0aHVtYnMgOlxyXG5cdFx0XHQnPGJ1dHRvbiBkYXRhLWZhbmN5Ym94LXRodW1icyBjbGFzcz1cImZhbmN5Ym94LWJ1dHRvbiBmYW5jeWJveC1idXR0b24tLXRodW1ic1wiIHRpdGxlPVwie3tUSFVNQlN9fVwiPicgK1xyXG5cdFx0XHRcdCc8c3ZnIHZpZXdCb3g9XCIwIDAgMTIwIDEyMFwiPicgK1xyXG5cdFx0XHRcdFx0JzxwYXRoIGQ9XCJNMzAsMzAgaDE0IHYxNCBoLTE0IFogTTUwLDMwIGgxNCB2MTQgaC0xNCBaIE03MCwzMCBoMTQgdjE0IGgtMTQgWiBNMzAsNTAgaDE0IHYxNCBoLTE0IFogTTUwLDUwIGgxNCB2MTQgaC0xNCBaIE03MCw1MCBoMTQgdjE0IGgtMTQgWiBNMzAsNzAgaDE0IHYxNCBoLTE0IFogTTUwLDcwIGgxNCB2MTQgaC0xNCBaIE03MCw3MCBoMTQgdjE0IGgtMTQgWlwiIC8+JyArXHJcblx0XHRcdFx0Jzwvc3ZnPicgK1xyXG5cdFx0XHQnPC9idXR0b24+J1xyXG5cdFx0fSxcclxuXHRcdHRodW1icyA6IHtcclxuXHRcdFx0YXV0b1N0YXJ0ICAgOiBmYWxzZSwgICAgICAgICAgICAgICAgICAvLyBEaXNwbGF5IHRodW1ibmFpbHMgb24gb3BlbmluZ1xyXG5cdFx0XHRoaWRlT25DbG9zZSA6IHRydWUsICAgICAgICAgICAgICAgICAgIC8vIEhpZGUgdGh1bWJuYWlsIGdyaWQgd2hlbiBjbG9zaW5nIGFuaW1hdGlvbiBzdGFydHNcclxuXHRcdFx0cGFyZW50RWwgICAgOiAnLmZhbmN5Ym94LWNvbnRhaW5lcicsICAvLyBDb250YWluZXIgaXMgaW5qZWN0ZWQgaW50byB0aGlzIGVsZW1lbnRcclxuXHRcdFx0YXhpcyAgICAgICAgOiAneScgICAgICAgICAgICAgICAgICAgICAvLyBWZXJ0aWNhbCAoeSkgb3IgaG9yaXpvbnRhbCAoeCkgc2Nyb2xsaW5nXHJcblx0XHR9XHJcblx0fSwgJC5mYW5jeWJveC5kZWZhdWx0cyk7XHJcblxyXG5cdHZhciBGYW5jeVRodW1icyA9IGZ1bmN0aW9uKCBpbnN0YW5jZSApIHtcclxuXHRcdHRoaXMuaW5pdCggaW5zdGFuY2UgKTtcclxuXHR9O1xyXG5cclxuXHQkLmV4dGVuZCggRmFuY3lUaHVtYnMucHJvdG90eXBlLCB7XHJcblxyXG5cdFx0JGJ1dHRvblx0XHQ6IG51bGwsXHJcblx0XHQkZ3JpZFx0XHQ6IG51bGwsXHJcblx0XHQkbGlzdFx0XHQ6IG51bGwsXHJcblx0XHRpc1Zpc2libGVcdDogZmFsc2UsXHJcblx0XHRpc0FjdGl2ZVx0OiBmYWxzZSxcclxuXHJcblx0XHRpbml0IDogZnVuY3Rpb24oIGluc3RhbmNlICkge1xyXG5cdFx0XHR2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG5cdFx0XHRzZWxmLmluc3RhbmNlID0gaW5zdGFuY2U7XHJcblxyXG5cdFx0XHRpbnN0YW5jZS5UaHVtYnMgPSBzZWxmO1xyXG5cclxuXHRcdFx0Ly8gRW5hYmxlIHRodW1icyBpZiBhdCBsZWFzdCB0d28gZ3JvdXAgaXRlbXMgaGF2ZSB0aHVtYm5haWxzXHJcblx0XHRcdHZhciBmaXJzdCAgPSBpbnN0YW5jZS5ncm91cFswXSxcclxuXHRcdFx0XHRzZWNvbmQgPSBpbnN0YW5jZS5ncm91cFsxXTtcclxuXHJcblx0XHRcdHNlbGYub3B0cyA9IGluc3RhbmNlLmdyb3VwWyBpbnN0YW5jZS5jdXJySW5kZXggXS5vcHRzLnRodW1icztcclxuXHJcblx0XHRcdHNlbGYuJGJ1dHRvbiA9IGluc3RhbmNlLiRyZWZzLnRvb2xiYXIuZmluZCggJ1tkYXRhLWZhbmN5Ym94LXRodW1ic10nICk7XHJcblxyXG5cdFx0XHRpZiAoIHNlbGYub3B0cyAmJiBmaXJzdCAmJiBzZWNvbmQgJiYgKFxyXG5cdFx0ICAgIFx0XHQoIGZpcnN0LnR5cGUgPT0gJ2ltYWdlJyAgfHwgZmlyc3Qub3B0cy50aHVtYiAgfHwgZmlyc3Qub3B0cy4kdGh1bWIgKSAmJlxyXG5cdFx0ICAgIFx0XHQoIHNlY29uZC50eXBlID09ICdpbWFnZScgfHwgc2Vjb25kLm9wdHMudGh1bWIgfHwgc2Vjb25kLm9wdHMuJHRodW1iIClcclxuXHRcdFx0KSkge1xyXG5cclxuXHRcdFx0XHRzZWxmLiRidXR0b24uc2hvdygpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0c2VsZi50b2dnbGUoKTtcclxuXHRcdFx0XHR9KTtcclxuXHJcblx0XHRcdFx0c2VsZi5pc0FjdGl2ZSA9IHRydWU7XHJcblxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHNlbGYuJGJ1dHRvbi5oaWRlKCk7XHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblxyXG5cdFx0Y3JlYXRlIDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdHZhciBzZWxmID0gdGhpcyxcclxuXHRcdFx0XHRpbnN0YW5jZSA9IHNlbGYuaW5zdGFuY2UsXHJcblx0XHRcdFx0cGFyZW50RWwgPSBzZWxmLm9wdHMucGFyZW50RWwsXHJcblx0XHRcdFx0bGlzdCxcclxuXHRcdFx0XHRzcmM7XHJcblxyXG5cdFx0XHRzZWxmLiRncmlkID0gJCgnPGRpdiBjbGFzcz1cImZhbmN5Ym94LXRodW1icyBmYW5jeWJveC10aHVtYnMtJyArIHNlbGYub3B0cy5heGlzICsgJ1wiPjwvZGl2PicpLmFwcGVuZFRvKCBpbnN0YW5jZS4kcmVmcy5jb250YWluZXIuZmluZCggcGFyZW50RWwgKS5hZGRCYWNrKCkuZmlsdGVyKCBwYXJlbnRFbCApICk7XHJcblxyXG5cdFx0XHQvLyBCdWlsZCBsaXN0IEhUTUxcclxuXHRcdFx0bGlzdCA9ICc8dWw+JztcclxuXHJcblx0XHRcdCQuZWFjaChpbnN0YW5jZS5ncm91cCwgZnVuY3Rpb24oIGksIGl0ZW0gKSB7XHJcblx0XHRcdFx0c3JjID0gaXRlbS5vcHRzLnRodW1iIHx8ICggaXRlbS5vcHRzLiR0aHVtYiA/IGl0ZW0ub3B0cy4kdGh1bWIuYXR0ciggJ3NyYycgKSA6IG51bGwgKTtcclxuXHJcblx0XHRcdFx0aWYgKCAhc3JjICYmIGl0ZW0udHlwZSA9PT0gJ2ltYWdlJyApIHtcclxuXHRcdFx0XHRcdHNyYyA9IGl0ZW0uc3JjO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0aWYgKCBzcmMgJiYgc3JjLmxlbmd0aCApIHtcclxuXHRcdFx0XHRcdGxpc3QgKz0gJzxsaSBkYXRhLWluZGV4PVwiJyArIGkgKyAnXCIgIHRhYmluZGV4PVwiMFwiIGNsYXNzPVwiZmFuY3lib3gtdGh1bWJzLWxvYWRpbmdcIj48aW1nIGRhdGEtc3JjPVwiJyArIHNyYyArICdcIiAvPjwvbGk+JztcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cclxuXHRcdFx0bGlzdCArPSAnPC91bD4nO1xyXG5cclxuXHRcdFx0c2VsZi4kbGlzdCA9ICQoIGxpc3QgKS5hcHBlbmRUbyggc2VsZi4kZ3JpZCApLm9uKCdjbGljaycsICdsaScsIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGluc3RhbmNlLmp1bXBUbyggJCh0aGlzKS5kYXRhKCdpbmRleCcpICk7XHJcblx0XHRcdH0pO1xyXG5cclxuXHRcdFx0c2VsZi4kbGlzdC5maW5kKCAnaW1nJyApLmhpZGUoKS5vbmUoJ2xvYWQnLCBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHR2YXIgJHBhcmVudFx0XHQ9ICQodGhpcykucGFyZW50KCkucmVtb3ZlQ2xhc3MoICdmYW5jeWJveC10aHVtYnMtbG9hZGluZycgKSxcclxuXHRcdFx0XHRcdHRodW1iV2lkdGhcdD0gJHBhcmVudC5vdXRlcldpZHRoKCksXHJcblx0XHRcdFx0XHR0aHVtYkhlaWdodFx0PSAkcGFyZW50Lm91dGVySGVpZ2h0KCksXHJcblx0XHRcdFx0XHR3aWR0aCxcclxuXHRcdFx0XHRcdGhlaWdodCxcclxuXHRcdFx0XHRcdHdpZHRoUmF0aW8sXHJcblx0XHRcdFx0XHRoZWlnaHRSYXRpbztcclxuXHJcblx0XHRcdFx0d2lkdGggID0gdGhpcy5uYXR1cmFsV2lkdGhcdHx8IHRoaXMud2lkdGg7XHJcblx0XHRcdFx0aGVpZ2h0ID0gdGhpcy5uYXR1cmFsSGVpZ2h0XHR8fCB0aGlzLmhlaWdodDtcclxuXHJcblx0XHRcdFx0Ly8gQ2FsY3VsYXRlIHRodW1ibmFpbCBkaW1lbnNpb25zOyBjZW50ZXIgdmVydGljYWxseSBhbmQgaG9yaXpvbnRhbGx5XHJcblx0XHRcdFx0d2lkdGhSYXRpbyAgPSB3aWR0aCAgLyB0aHVtYldpZHRoO1xyXG5cdFx0XHRcdGhlaWdodFJhdGlvID0gaGVpZ2h0IC8gdGh1bWJIZWlnaHQ7XHJcblxyXG5cdFx0XHRcdGlmICh3aWR0aFJhdGlvID49IDEgJiYgaGVpZ2h0UmF0aW8gPj0gMSkge1xyXG5cdFx0XHRcdFx0aWYgKHdpZHRoUmF0aW8gPiBoZWlnaHRSYXRpbykge1xyXG5cdFx0XHRcdFx0XHR3aWR0aCAgPSB3aWR0aCAvIGhlaWdodFJhdGlvO1xyXG5cdFx0XHRcdFx0XHRoZWlnaHQgPSB0aHVtYkhlaWdodDtcclxuXHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHR3aWR0aCAgPSB0aHVtYldpZHRoO1xyXG5cdFx0XHRcdFx0XHRoZWlnaHQgPSBoZWlnaHQgLyB3aWR0aFJhdGlvO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0JCh0aGlzKS5jc3Moe1xyXG5cdFx0XHRcdFx0d2lkdGggICAgICAgICA6IE1hdGguZmxvb3Iod2lkdGgpLFxyXG5cdFx0XHRcdFx0aGVpZ2h0ICAgICAgICA6IE1hdGguZmxvb3IoaGVpZ2h0KSxcclxuXHRcdFx0XHRcdCdtYXJnaW4tdG9wJyAgOiBoZWlnaHQgPiB0aHVtYkhlaWdodCA/ICggTWF0aC5mbG9vcih0aHVtYkhlaWdodCAqIDAuMyAtIGhlaWdodCAqIDAuMyApICkgOiBNYXRoLmZsb29yKHRodW1iSGVpZ2h0ICogMC41IC0gaGVpZ2h0ICogMC41ICksXHJcblx0XHRcdFx0XHQnbWFyZ2luLWxlZnQnIDogTWF0aC5mbG9vcih0aHVtYldpZHRoICogMC41IC0gd2lkdGggKiAwLjUgKVxyXG5cdFx0XHRcdH0pLnNob3coKTtcclxuXHJcblx0XHRcdH0pXHJcblx0XHRcdC5lYWNoKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHRoaXMuc3JjID0gJCggdGhpcyApLmRhdGEoICdzcmMnICk7XHJcblx0XHRcdH0pO1xyXG5cclxuXHRcdFx0aWYgKCBzZWxmLm9wdHMuYXhpcyA9PT0gJ3gnICkge1xyXG5cdFx0XHRcdHNlbGYuJGxpc3Qud2lkdGgoIHBhcnNlSW50KCBzZWxmLiRncmlkLmNzcyhcInBhZGRpbmctcmlnaHRcIikgKSArICggaW5zdGFuY2UuZ3JvdXAubGVuZ3RoICogc2VsZi4kbGlzdC5jaGlsZHJlbigpLmVxKDApLm91dGVyV2lkdGgodHJ1ZSkgKSArICdweCcgKTtcclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHJcblx0XHRmb2N1cyA6IGZ1bmN0aW9uKCBkdXJhdGlvbiApIHtcclxuXHRcdFx0dmFyIHNlbGYgPSB0aGlzLFxyXG5cdFx0XHRcdCRsaXN0ID0gc2VsZi4kbGlzdCxcclxuXHRcdFx0XHR0aHVtYixcclxuXHRcdFx0XHR0aHVtYlBvcztcclxuXHJcblx0XHRcdGlmICggc2VsZi5pbnN0YW5jZS5jdXJyZW50ICkge1xyXG5cdFx0XHRcdHRodW1iID0gJGxpc3QuY2hpbGRyZW4oKVxyXG5cdFx0XHRcdFx0LnJlbW92ZUNsYXNzKCAnZmFuY3lib3gtdGh1bWJzLWFjdGl2ZScgKVxyXG5cdFx0XHRcdFx0LmZpbHRlcignW2RhdGEtaW5kZXg9XCInICsgc2VsZi5pbnN0YW5jZS5jdXJyZW50LmluZGV4ICArICdcIl0nKVxyXG5cdFx0XHRcdFx0LmFkZENsYXNzKCdmYW5jeWJveC10aHVtYnMtYWN0aXZlJyk7XHJcblxyXG5cdFx0XHRcdHRodW1iUG9zID0gdGh1bWIucG9zaXRpb24oKTtcclxuXHJcblx0XHRcdFx0Ly8gQ2hlY2sgaWYgbmVlZCB0byBzY3JvbGwgdG8gbWFrZSBjdXJyZW50IHRodW1iIHZpc2libGVcclxuXHRcdFx0XHRpZiAoIHNlbGYub3B0cy5heGlzID09PSAneScgJiYgKCB0aHVtYlBvcy50b3AgPCAwIHx8IHRodW1iUG9zLnRvcCA+ICggJGxpc3QuaGVpZ2h0KCkgLSB0aHVtYi5vdXRlckhlaWdodCgpICkgKSApIHtcclxuXHRcdFx0XHRcdCRsaXN0LnN0b3AoKS5hbmltYXRlKHsgJ3Njcm9sbFRvcCcgOiAkbGlzdC5zY3JvbGxUb3AoKSArIHRodW1iUG9zLnRvcCB9LCBkdXJhdGlvbik7XHJcblxyXG5cdFx0XHRcdH0gZWxzZSBpZiAoIHNlbGYub3B0cy5heGlzID09PSAneCcgJiYgKFxyXG5cdFx0XHRcdFx0XHR0aHVtYlBvcy5sZWZ0IDwgJGxpc3QucGFyZW50KCkuc2Nyb2xsTGVmdCgpIHx8XHJcblx0XHRcdFx0XHRcdHRodW1iUG9zLmxlZnQgPiAoICRsaXN0LnBhcmVudCgpLnNjcm9sbExlZnQoKSArICggJGxpc3QucGFyZW50KCkud2lkdGgoKSAtIHRodW1iLm91dGVyV2lkdGgoKSApIClcclxuXHRcdFx0XHRcdClcclxuXHRcdFx0XHQpIHtcclxuXHRcdFx0XHRcdCRsaXN0LnBhcmVudCgpLnN0b3AoKS5hbmltYXRlKHsgJ3Njcm9sbExlZnQnIDogdGh1bWJQb3MubGVmdCB9LCBkdXJhdGlvbik7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cclxuXHRcdHVwZGF0ZSA6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR0aGlzLmluc3RhbmNlLiRyZWZzLmNvbnRhaW5lci50b2dnbGVDbGFzcyggJ2ZhbmN5Ym94LXNob3ctdGh1bWJzJywgdGhpcy5pc1Zpc2libGUgKTtcclxuXHJcblx0XHRcdGlmICggdGhpcy5pc1Zpc2libGUgKSB7XHJcblx0XHRcdFx0aWYgKCAhdGhpcy4kZ3JpZCApIHtcclxuXHRcdFx0XHRcdHRoaXMuY3JlYXRlKCk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR0aGlzLmluc3RhbmNlLnRyaWdnZXIoICdvblRodW1ic1Nob3cnICk7XHJcblxyXG5cdFx0XHRcdHRoaXMuZm9jdXMoIDAgKTtcclxuXHJcblx0XHRcdH0gZWxzZSBpZiAoIHRoaXMuJGdyaWQgKSB7XHJcblx0XHRcdFx0dGhpcy5pbnN0YW5jZS50cmlnZ2VyKCAnb25UaHVtYnNIaWRlJyApO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHQvLyBVcGRhdGUgY29udGVudCBwb3NpdGlvblxyXG5cdFx0XHR0aGlzLmluc3RhbmNlLnVwZGF0ZSgpO1xyXG5cdFx0fSxcclxuXHJcblx0XHRoaWRlIDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdHRoaXMuaXNWaXNpYmxlID0gZmFsc2U7XHJcblx0XHRcdHRoaXMudXBkYXRlKCk7XHJcblx0XHR9LFxyXG5cclxuXHRcdHNob3cgOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0dGhpcy5pc1Zpc2libGUgPSB0cnVlO1xyXG5cdFx0XHR0aGlzLnVwZGF0ZSgpO1xyXG5cdFx0fSxcclxuXHJcblx0XHR0b2dnbGUgOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0dGhpcy5pc1Zpc2libGUgPSAhdGhpcy5pc1Zpc2libGU7XHJcblx0XHRcdHRoaXMudXBkYXRlKCk7XHJcblx0XHR9XHJcblx0fSk7XHJcblxyXG5cdCQoZG9jdW1lbnQpLm9uKHtcclxuXHJcblx0XHQnb25Jbml0LmZiJyA6IGZ1bmN0aW9uKGUsIGluc3RhbmNlKSB7XHJcblx0XHRcdHZhciBUaHVtYnM7XHJcblxyXG5cdFx0XHRpZiAoIGluc3RhbmNlICYmICFpbnN0YW5jZS5UaHVtYnMgKSB7XHJcblx0XHRcdFx0VGh1bWJzID0gbmV3IEZhbmN5VGh1bWJzKCBpbnN0YW5jZSApO1xyXG5cclxuXHRcdFx0XHRpZiAoIFRodW1icy5pc0FjdGl2ZSAmJiBUaHVtYnMub3B0cy5hdXRvU3RhcnQgPT09IHRydWUgKSB7XHJcblx0XHRcdFx0XHRUaHVtYnMuc2hvdygpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHJcblx0XHQnYmVmb3JlU2hvdy5mYicgOiBmdW5jdGlvbihlLCBpbnN0YW5jZSwgaXRlbSwgZmlyc3RSdW4pIHtcclxuXHRcdFx0dmFyIFRodW1icyA9IGluc3RhbmNlICYmIGluc3RhbmNlLlRodW1icztcclxuXHJcblx0XHRcdGlmICggVGh1bWJzICYmIFRodW1icy5pc1Zpc2libGUgKSB7XHJcblx0XHRcdFx0VGh1bWJzLmZvY3VzKCBmaXJzdFJ1biA/IDAgOiAyNTAgKTtcclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHJcblx0XHQnYWZ0ZXJLZXlkb3duLmZiJyA6IGZ1bmN0aW9uKGUsIGluc3RhbmNlLCBjdXJyZW50LCBrZXlwcmVzcywga2V5Y29kZSkge1xyXG5cdFx0XHR2YXIgVGh1bWJzID0gaW5zdGFuY2UgJiYgaW5zdGFuY2UuVGh1bWJzO1xyXG5cclxuXHRcdFx0Ly8gXCJHXCJcclxuXHRcdFx0aWYgKCBUaHVtYnMgJiYgVGh1bWJzLmlzQWN0aXZlICYmIGtleWNvZGUgPT09IDcxICkge1xyXG5cdFx0XHRcdGtleXByZXNzLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG5cdFx0XHRcdFRodW1icy50b2dnbGUoKTtcclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHJcblx0XHQnYmVmb3JlQ2xvc2UuZmInIDogZnVuY3Rpb24oIGUsIGluc3RhbmNlICkge1xyXG5cdFx0XHR2YXIgVGh1bWJzID0gaW5zdGFuY2UgJiYgaW5zdGFuY2UuVGh1bWJzO1xyXG5cclxuXHRcdFx0aWYgKCBUaHVtYnMgJiYgVGh1bWJzLmlzVmlzaWJsZSAmJiBUaHVtYnMub3B0cy5oaWRlT25DbG9zZSAhPT0gZmFsc2UgKSB7XHJcblx0XHRcdFx0VGh1bWJzLiRncmlkLmhpZGUoKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHR9KTtcclxuXHJcbn0oZG9jdW1lbnQsIHdpbmRvdy5qUXVlcnkpKTtcclxuXHJcbi8vLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuLy9cclxuLy8gU2hhcmVcclxuLy8gRGlzcGxheXMgc2ltcGxlIGZvcm0gZm9yIHNoYXJpbmcgY3VycmVudCB1cmxcclxuLy9cclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuOyhmdW5jdGlvbiAoZG9jdW1lbnQsICQpIHtcclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdCQuZXh0ZW5kKHRydWUsICQuZmFuY3lib3guZGVmYXVsdHMsIHtcclxuXHRcdGJ0blRwbCA6IHtcclxuXHRcdFx0c2hhcmUgOlxyXG5cdFx0XHRcdCc8YnV0dG9uIGRhdGEtZmFuY3lib3gtc2hhcmUgY2xhc3M9XCJmYW5jeWJveC1idXR0b24gZmFuY3lib3gtYnV0dG9uLS1zaGFyZVwiIHRpdGxlPVwie3tTSEFSRX19XCI+JyArXHJcblx0XHRcdFx0XHQnPHN2ZyB2aWV3Qm94PVwiMCAwIDQwIDQwXCI+JyArXHJcblx0XHRcdFx0XHRcdCc8cGF0aCBkPVwiTTYsMzAgQzgsMTggMTksMTYgMjMsMTYgTDIzLDE2IEwyMywxMCBMMzMsMjAgTDIzLDI5IEwyMywyNCBDMTksMjQgOCwyNyA2LDMwIFpcIj4nICtcclxuXHRcdFx0XHRcdCc8L3N2Zz4nICtcclxuXHRcdFx0XHQnPC9idXR0b24+J1xyXG5cdFx0fSxcclxuXHRcdHNoYXJlIDoge1xyXG5cdFx0XHR0cGwgOlxyXG5cdFx0XHRcdCc8ZGl2IGNsYXNzPVwiZmFuY3lib3gtc2hhcmVcIj4nICtcclxuXHRcdFx0XHRcdCc8aDE+e3tTSEFSRX19PC9oMT4nICtcclxuXHRcdFx0XHRcdCc8cCBjbGFzcz1cImZhbmN5Ym94LXNoYXJlX19saW5rc1wiPicgK1xyXG5cdFx0XHRcdFx0XHQnPGEgY2xhc3M9XCJmYW5jeWJveC1zaGFyZV9fYnV0dG9uIGZhbmN5Ym94LXNoYXJlX19idXR0b24tLWZiXCIgaHJlZj1cImh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS9zaGFyZXIvc2hhcmVyLnBocD91PXt7dXJsfX1cIj4nICtcclxuXHRcdFx0XHRcdFx0XHQnPHN2ZyB2aWV3Qm94PVwiMCAwIDUxMiA1MTJcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+PHBhdGggZD1cIm0yODcgNDU2di0yOTljMC0yMSA2LTM1IDM1LTM1aDM4di02M2MtNy0xLTI5LTMtNTUtMy01NCAwLTkxIDMzLTkxIDk0djMwNm0xNDMtMjU0aC0yMDV2NzJoMTk2XCIgLz48L3N2Zz4nICtcclxuXHRcdFx0XHRcdFx0XHQnPHNwYW4+RmFjZWJvb2s8L3NwYW4+JyArXHJcblx0XHRcdFx0XHRcdCc8L2E+JyArXHJcblx0XHRcdFx0XHRcdCc8YSBjbGFzcz1cImZhbmN5Ym94LXNoYXJlX19idXR0b24gZmFuY3lib3gtc2hhcmVfX2J1dHRvbi0tcHRcIiBocmVmPVwiaHR0cHM6Ly93d3cucGludGVyZXN0LmNvbS9waW4vY3JlYXRlL2J1dHRvbi8/dXJsPXt7dXJsfX0mZGVzY3JpcHRpb249e3tkZXNjcn19Jm1lZGlhPXt7bWVkaWF9fVwiPicgK1xyXG5cdFx0XHRcdFx0XHRcdCc8c3ZnIHZpZXdCb3g9XCIwIDAgNTEyIDUxMlwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj48cGF0aCBkPVwibTI2NSA1NmMtMTA5IDAtMTY0IDc4LTE2NCAxNDQgMCAzOSAxNSA3NCA0NyA4NyA1IDIgMTAgMCAxMi01bDQtMTljMi02IDEtOC0zLTEzLTktMTEtMTUtMjUtMTUtNDUgMC01OCA0My0xMTAgMTEzLTExMCA2MiAwIDk2IDM4IDk2IDg4IDAgNjctMzAgMTIyLTczIDEyMi0yNCAwLTQyLTE5LTM2LTQ0IDYtMjkgMjAtNjAgMjAtODEgMC0xOS0xMC0zNS0zMS0zNS0yNSAwLTQ0IDI2LTQ0IDYwIDAgMjEgNyAzNiA3IDM2bC0zMCAxMjVjLTggMzctMSA4MyAwIDg3IDAgMyA0IDQgNSAyIDItMyAzMi0zOSA0Mi03NWwxNi02NGM4IDE2IDMxIDI5IDU2IDI5IDc0IDAgMTI0LTY3IDEyNC0xNTcgMC02OS01OC0xMzItMTQ2LTEzMnpcIiBmaWxsPVwiI2ZmZlwiLz48L3N2Zz4nICtcclxuXHRcdFx0XHRcdFx0XHQnPHNwYW4+UGludGVyZXN0PC9zcGFuPicgK1xyXG5cdFx0XHRcdFx0XHQnPC9hPicgK1xyXG5cdFx0XHRcdFx0XHQnPGEgY2xhc3M9XCJmYW5jeWJveC1zaGFyZV9fYnV0dG9uIGZhbmN5Ym94LXNoYXJlX19idXR0b24tLXR3XCIgaHJlZj1cImh0dHBzOi8vdHdpdHRlci5jb20vaW50ZW50L3R3ZWV0P3VybD17e3VybH19JnRleHQ9e3tkZXNjcn19XCI+JyArXHJcblx0XHRcdFx0XHRcdFx0Jzxzdmcgdmlld0JveD1cIjAgMCA1MTIgNTEyXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPjxwYXRoIGQ9XCJtNDU2IDEzM2MtMTQgNy0zMSAxMS00NyAxMyAxNy0xMCAzMC0yNyAzNy00Ni0xNSAxMC0zNCAxNi01MiAyMC02MS02Mi0xNTctNy0xNDEgNzUtNjgtMy0xMjktMzUtMTY5LTg1LTIyIDM3LTExIDg2IDI2IDEwOS0xMyAwLTI2LTQtMzctOSAwIDM5IDI4IDcyIDY1IDgwLTEyIDMtMjUgNC0zNyAyIDEwIDMzIDQxIDU3IDc3IDU3LTQyIDMwLTc3IDM4LTEyMiAzNCAxNzAgMTExIDM3OC0zMiAzNTktMjA4IDE2LTExIDMwLTI1IDQxLTQyelwiIC8+PC9zdmc+JyArXHJcblx0XHRcdFx0XHRcdFx0JzxzcGFuPlR3aXR0ZXI8L3NwYW4+JyArXHJcblx0XHRcdFx0XHRcdCc8L2E+JyArXHJcblx0XHRcdFx0XHQnPC9wPicgK1xyXG5cdFx0XHRcdFx0JzxwPjxpbnB1dCBjbGFzcz1cImZhbmN5Ym94LXNoYXJlX19pbnB1dFwiIHR5cGU9XCJ0ZXh0XCIgdmFsdWU9XCJ7e3VybF9yYXd9fVwiIC8+PC9wPicgK1xyXG5cdFx0XHRcdCc8L2Rpdj4nXHJcblx0XHR9XHJcblx0fSk7XHJcblxyXG5cdGZ1bmN0aW9uIGVzY2FwZUh0bWwoc3RyaW5nKSB7XHJcblx0XHR2YXIgZW50aXR5TWFwID0ge1xyXG5cdFx0ICAnJic6ICcmYW1wOycsXHJcblx0XHQgICc8JzogJyZsdDsnLFxyXG5cdFx0ICAnPic6ICcmZ3Q7JyxcclxuXHRcdCAgJ1wiJzogJyZxdW90OycsXHJcblx0XHQgIFwiJ1wiOiAnJiMzOTsnLFxyXG5cdFx0ICAnLyc6ICcmI3gyRjsnLFxyXG5cdFx0ICAnYCc6ICcmI3g2MDsnLFxyXG5cdFx0ICAnPSc6ICcmI3gzRDsnXHJcblx0XHR9O1xyXG5cclxuXHRcdHJldHVybiBTdHJpbmcoc3RyaW5nKS5yZXBsYWNlKC9bJjw+XCInYD1cXC9dL2csIGZ1bmN0aW9uIChzKSB7XHJcblx0XHRcdHJldHVybiBlbnRpdHlNYXBbc107XHJcblx0XHR9KTtcclxuXHR9XHJcblxyXG5cdCQoZG9jdW1lbnQpLm9uKCdjbGljaycsICdbZGF0YS1mYW5jeWJveC1zaGFyZV0nLCBmdW5jdGlvbigpIHtcclxuXHRcdHZhciBmID0gJC5mYW5jeWJveC5nZXRJbnN0YW5jZSgpLFxyXG5cdFx0XHR1cmwsXHJcblx0XHRcdHRwbDtcclxuXHJcblx0XHRpZiAoIGYgKSB7XHJcblx0XHRcdHVybCA9IGYuY3VycmVudC5vcHRzLmhhc2ggPT09IGZhbHNlID8gZi5jdXJyZW50LnNyYyA6IHdpbmRvdy5sb2NhdGlvbjtcclxuXHRcdFx0dHBsID0gZi5jdXJyZW50Lm9wdHMuc2hhcmUudHBsXHJcblx0XHRcdFx0XHQucmVwbGFjZSggL1xce1xce21lZGlhXFx9XFx9L2csIGYuY3VycmVudC50eXBlID09PSAnaW1hZ2UnID8gZW5jb2RlVVJJQ29tcG9uZW50KCBmLmN1cnJlbnQuc3JjICkgOiAnJyApXHJcblx0XHRcdFx0XHQucmVwbGFjZSggL1xce1xce3VybFxcfVxcfS9nLCBlbmNvZGVVUklDb21wb25lbnQoIHVybCApIClcclxuXHRcdFx0XHRcdC5yZXBsYWNlKCAvXFx7XFx7dXJsX3Jhd1xcfVxcfS9nLCBlc2NhcGVIdG1sKCB1cmwgKSApXHJcblx0XHRcdFx0XHQucmVwbGFjZSggL1xce1xce2Rlc2NyXFx9XFx9L2csIGYuJGNhcHRpb24gPyBlbmNvZGVVUklDb21wb25lbnQoIGYuJGNhcHRpb24udGV4dCgpICkgOiAnJyApO1xyXG5cclxuXHRcdFx0JC5mYW5jeWJveC5vcGVuKHtcclxuXHRcdFx0XHRzcmMgIDogZi50cmFuc2xhdGUoIGYsIHRwbCApLFxyXG5cdFx0XHRcdHR5cGUgOiAnaHRtbCcsXHJcblx0XHRcdFx0b3B0cyA6IHtcclxuXHRcdFx0XHRcdGFuaW1hdGlvbkVmZmVjdCAgIDogXCJmYWRlXCIsXHJcblx0XHRcdFx0XHRhbmltYXRpb25EdXJhdGlvbiA6IDI1MCxcclxuXHRcdFx0XHRcdGFmdGVyTG9hZCA6IGZ1bmN0aW9uKGluc3RhbmNlLCBjdXJyZW50KSB7XHJcblx0XHRcdFx0XHRcdC8vIE9wZW5pbmcgbGlua3MgaW4gYSBwb3B1cCB3aW5kb3dcclxuXHRcdFx0XHRcdFx0Y3VycmVudC4kY29udGVudC5maW5kKCcuZmFuY3lib3gtc2hhcmVfX2xpbmtzIGEnKS5jbGljayhmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdCAgICAgICAgd2luZG93Lm9wZW4odGhpcy5ocmVmLCBcIlNoYXJlXCIsIFwid2lkdGg9NTUwLCBoZWlnaHQ9NDUwXCIpO1xyXG5cdFx0XHRcdFx0ICAgICAgICByZXR1cm4gZmFsc2U7XHJcblx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSk7XHJcblx0XHR9XHJcblxyXG5cdH0pO1xyXG5cclxufSggZG9jdW1lbnQsIHdpbmRvdy5qUXVlcnkgfHwgalF1ZXJ5ICkpO1xyXG5cclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuLy9cclxuLy8gSGFzaFxyXG4vLyBFbmFibGVzIGxpbmtpbmcgdG8gZWFjaCBtb2RhbFxyXG4vL1xyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG47KGZ1bmN0aW9uIChkb2N1bWVudCwgd2luZG93LCAkKSB7XHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHQvLyBTaW1wbGUgJC5lc2NhcGVTZWxlY3RvciBwb2x5ZmlsbCAoZm9yIGpRdWVyeSBwcmlvciB2MylcclxuXHRpZiAoICEkLmVzY2FwZVNlbGVjdG9yICkge1xyXG5cdFx0JC5lc2NhcGVTZWxlY3RvciA9IGZ1bmN0aW9uKCBzZWwgKSB7XHJcblx0XHRcdHZhciByY3NzZXNjYXBlID0gLyhbXFwwLVxceDFmXFx4N2ZdfF4tP1xcZCl8Xi0kfFteXFx4ODAtXFx1RkZGRlxcdy1dL2c7XHJcblx0XHRcdHZhciBmY3NzZXNjYXBlID0gZnVuY3Rpb24oIGNoLCBhc0NvZGVQb2ludCApIHtcclxuXHRcdFx0XHRpZiAoIGFzQ29kZVBvaW50ICkge1xyXG5cdFx0XHRcdFx0Ly8gVSswMDAwIE5VTEwgYmVjb21lcyBVK0ZGRkQgUkVQTEFDRU1FTlQgQ0hBUkFDVEVSXHJcblx0XHRcdFx0XHRpZiAoIGNoID09PSBcIlxcMFwiICkge1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gXCJcXHVGRkZEXCI7XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0Ly8gQ29udHJvbCBjaGFyYWN0ZXJzIGFuZCAoZGVwZW5kZW50IHVwb24gcG9zaXRpb24pIG51bWJlcnMgZ2V0IGVzY2FwZWQgYXMgY29kZSBwb2ludHNcclxuXHRcdFx0XHRcdHJldHVybiBjaC5zbGljZSggMCwgLTEgKSArIFwiXFxcXFwiICsgY2guY2hhckNvZGVBdCggY2gubGVuZ3RoIC0gMSApLnRvU3RyaW5nKCAxNiApICsgXCIgXCI7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHQvLyBPdGhlciBwb3RlbnRpYWxseS1zcGVjaWFsIEFTQ0lJIGNoYXJhY3RlcnMgZ2V0IGJhY2tzbGFzaC1lc2NhcGVkXHJcblx0XHRcdFx0cmV0dXJuIFwiXFxcXFwiICsgY2g7XHJcblx0XHRcdH07XHJcblxyXG5cdFx0XHRyZXR1cm4gKCBzZWwgKyBcIlwiICkucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xyXG5cdFx0fTtcclxuXHR9XHJcblxyXG5cdC8vIENyZWF0ZSBuZXcgaGlzdG9yeSBlbnRyeSBvbmx5IG9uY2VcclxuXHR2YXIgc2hvdWxkQ3JlYXRlSGlzdG9yeSA9IHRydWU7XHJcblxyXG5cdC8vIFZhcmlhYmxlIGNvbnRhaW5pbmcgbGFzdCBoYXNoIHZhbHVlIHNldCBieSBmYW5jeUJveFxyXG5cdC8vIEl0IHdpbGwgYmUgdXNlZCB0byBkZXRlcm1pbmUgaWYgZmFuY3lCb3ggbmVlZHMgdG8gY2xvc2UgYWZ0ZXIgaGFzaCBjaGFuZ2UgaXMgZGV0ZWN0ZWRcclxuICAgIHZhciBjdXJyZW50SGFzaCA9IG51bGw7XHJcblxyXG5cdC8vIFRocm90dGxpbmcgdGhlIGhpc3RvcnkgY2hhbmdlXHJcblx0dmFyIHRpbWVySUQgPSBudWxsO1xyXG5cclxuXHQvLyBHZXQgaW5mbyBhYm91dCBnYWxsZXJ5IG5hbWUgYW5kIGN1cnJlbnQgaW5kZXggZnJvbSB1cmxcclxuICAgIGZ1bmN0aW9uIHBhcnNlVXJsKCkge1xyXG4gICAgICAgIHZhciBoYXNoICAgID0gd2luZG93LmxvY2F0aW9uLmhhc2guc3Vic3RyKCAxICk7XHJcbiAgICAgICAgdmFyIHJleiAgICAgPSBoYXNoLnNwbGl0KCAnLScgKTtcclxuICAgICAgICB2YXIgaW5kZXggICA9IHJlei5sZW5ndGggPiAxICYmIC9eXFwrP1xcZCskLy50ZXN0KCByZXpbIHJlei5sZW5ndGggLSAxIF0gKSA/IHBhcnNlSW50KCByZXoucG9wKCAtMSApLCAxMCApIHx8IDEgOiAxO1xyXG4gICAgICAgIHZhciBnYWxsZXJ5ID0gcmV6LmpvaW4oICctJyApO1xyXG5cclxuXHRcdC8vIEluZGV4IGlzIHN0YXJ0aW5nIGZyb20gMVxyXG5cdFx0aWYgKCBpbmRleCA8IDEgKSB7XHJcblx0XHRcdGluZGV4ID0gMTtcclxuXHRcdH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgaGFzaCAgICA6IGhhc2gsXHJcbiAgICAgICAgICAgIGluZGV4ICAgOiBpbmRleCxcclxuICAgICAgICAgICAgZ2FsbGVyeSA6IGdhbGxlcnlcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuXHQvLyBUcmlnZ2VyIGNsaWNrIGV2bnQgb24gbGlua3MgdG8gb3BlbiBuZXcgZmFuY3lCb3ggaW5zdGFuY2VcclxuXHRmdW5jdGlvbiB0cmlnZ2VyRnJvbVVybCggdXJsICkge1xyXG5cdFx0dmFyICRlbDtcclxuXHJcbiAgICAgICAgaWYgKCB1cmwuZ2FsbGVyeSAhPT0gJycgKSB7XHJcblxyXG5cdFx0XHQvLyBJZiB3ZSBjYW4gZmluZCBlbGVtZW50IG1hdGNoaW5nICdkYXRhLWZhbmN5Ym94JyBhdHJpYnV0ZSwgdGhlbiB0cmlnZ2VyIGNsaWNrIGV2ZW50IGZvciB0aGF0IC4uXHJcblx0XHRcdCRlbCA9ICQoIFwiW2RhdGEtZmFuY3lib3g9J1wiICsgJC5lc2NhcGVTZWxlY3RvciggdXJsLmdhbGxlcnkgKSArIFwiJ11cIiApLmVxKCB1cmwuaW5kZXggLSAxICk7XHJcblxyXG4gICAgICAgICAgICBpZiAoICEkZWwubGVuZ3RoICkge1xyXG5cdFx0XHRcdC8vIC4uIGlmIG5vdCwgdHJ5IGZpbmRpbmcgZWxlbWVudCBieSBJRFxyXG5cdFx0XHRcdCRlbCA9ICQoIFwiI1wiICsgJC5lc2NhcGVTZWxlY3RvciggdXJsLmdhbGxlcnkgKSArIFwiXCIgKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKCAkZWwubGVuZ3RoICkge1xyXG5cdFx0XHRcdHNob3VsZENyZWF0ZUhpc3RvcnkgPSBmYWxzZTtcclxuXHJcblx0XHRcdFx0JGVsLnRyaWdnZXIoICdjbGljaycgKTtcclxuXHRcdFx0fVxyXG5cclxuICAgICAgICB9XHJcblx0fVxyXG5cclxuXHQvLyBHZXQgZ2FsbGVyeSBuYW1lIGZyb20gY3VycmVudCBpbnN0YW5jZVxyXG5cdGZ1bmN0aW9uIGdldEdhbGxlcnlJRCggaW5zdGFuY2UgKSB7XHJcblx0XHR2YXIgb3B0cztcclxuXHJcblx0XHRpZiAoICFpbnN0YW5jZSApIHtcclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0fVxyXG5cclxuXHRcdG9wdHMgPSBpbnN0YW5jZS5jdXJyZW50ID8gaW5zdGFuY2UuY3VycmVudC5vcHRzIDogaW5zdGFuY2Uub3B0cztcclxuXHJcblx0XHRyZXR1cm4gb3B0cy5oYXNoIHx8ICggb3B0cy4kb3JpZyA/IG9wdHMuJG9yaWcuZGF0YSggJ2ZhbmN5Ym94JyApIDogJycgICk7XHJcblx0fVxyXG5cclxuXHQvLyBTdGFydCB3aGVuIERPTSBiZWNvbWVzIHJlYWR5XHJcbiAgICAkKGZ1bmN0aW9uKCkge1xyXG5cclxuXHRcdC8vIENoZWNrIGlmIHVzZXIgaGFzIGRpc2FibGVkIHRoaXMgbW9kdWxlXHJcblx0XHRpZiAoICQuZmFuY3lib3guZGVmYXVsdHMuaGFzaCA9PT0gZmFsc2UgKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHQvLyBVcGRhdGUgaGFzaCB3aGVuIG9wZW5pbmcvY2xvc2luZyBmYW5jeUJveFxyXG5cdCAgICAkKGRvY3VtZW50KS5vbih7XHJcblx0XHRcdCdvbkluaXQuZmInIDogZnVuY3Rpb24oIGUsIGluc3RhbmNlICkge1xyXG5cdFx0XHRcdHZhciB1cmwsIGdhbGxlcnk7XHJcblxyXG5cdFx0XHRcdGlmICggaW5zdGFuY2UuZ3JvdXBbIGluc3RhbmNlLmN1cnJJbmRleCBdLm9wdHMuaGFzaCA9PT0gZmFsc2UgKSB7XHJcblx0XHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHR1cmwgICAgID0gcGFyc2VVcmwoKTtcclxuXHRcdFx0XHRnYWxsZXJ5ID0gZ2V0R2FsbGVyeUlEKCBpbnN0YW5jZSApO1xyXG5cclxuXHRcdFx0XHQvLyBNYWtlIHN1cmUgZ2FsbGVyeSBzdGFydCBpbmRleCBtYXRjaGVzIGluZGV4IGZyb20gaGFzaFxyXG5cdFx0XHRcdGlmICggZ2FsbGVyeSAmJiB1cmwuZ2FsbGVyeSAmJiBnYWxsZXJ5ID09IHVybC5nYWxsZXJ5ICkge1xyXG5cdFx0XHRcdFx0aW5zdGFuY2UuY3VyckluZGV4ID0gdXJsLmluZGV4IC0gMTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQnYmVmb3JlU2hvdy5mYicgOiBmdW5jdGlvbiggZSwgaW5zdGFuY2UsIGN1cnJlbnQgKSB7XHJcblx0XHRcdFx0dmFyIGdhbGxlcnk7XHJcblxyXG5cdFx0XHRcdGlmICggIWN1cnJlbnQgfHwgY3VycmVudC5vcHRzLmhhc2ggPT09IGZhbHNlICkge1xyXG5cdFx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0ICAgICAgICAgICAgZ2FsbGVyeSA9IGdldEdhbGxlcnlJRCggaW5zdGFuY2UgKTtcclxuXHJcblx0ICAgICAgICAgICAgLy8gVXBkYXRlIHdpbmRvdyBoYXNoXHJcblx0ICAgICAgICAgICAgaWYgKCBnYWxsZXJ5ICYmIGdhbGxlcnkgIT09ICcnICkge1xyXG5cclxuXHRcdFx0XHRcdGlmICggd2luZG93LmxvY2F0aW9uLmhhc2guaW5kZXhPZiggZ2FsbGVyeSApIDwgMCApIHtcclxuXHRcdCAgICAgICAgICAgICAgICBpbnN0YW5jZS5vcHRzLm9yaWdIYXNoID0gd2luZG93LmxvY2F0aW9uLmhhc2g7XHJcblx0XHQgICAgICAgICAgICB9XHJcblxyXG5cdFx0XHRcdFx0Y3VycmVudEhhc2ggPSBnYWxsZXJ5ICsgKCBpbnN0YW5jZS5ncm91cC5sZW5ndGggPiAxID8gJy0nICsgKCBjdXJyZW50LmluZGV4ICsgMSApIDogJycgKTtcclxuXHJcblx0XHRcdFx0XHRpZiAoICdyZXBsYWNlU3RhdGUnIGluIHdpbmRvdy5oaXN0b3J5ICkge1xyXG5cdFx0XHRcdFx0XHRpZiAoIHRpbWVySUQgKSB7XHJcblx0XHRcdFx0XHRcdFx0Y2xlYXJUaW1lb3V0KCB0aW1lcklEICk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdHRpbWVySUQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0XHRcdHdpbmRvdy5oaXN0b3J5WyBzaG91bGRDcmVhdGVIaXN0b3J5ID8gJ3B1c2hTdGF0ZScgOiAncmVwbGFjZVN0YXRlJyBdKCB7fSAsIGRvY3VtZW50LnRpdGxlLCB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUgKyB3aW5kb3cubG9jYXRpb24uc2VhcmNoICsgJyMnICsgIGN1cnJlbnRIYXNoICk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdHRpbWVySUQgPSBudWxsO1xyXG5cclxuXHRcdFx0XHRcdFx0XHRzaG91bGRDcmVhdGVIaXN0b3J5ID0gZmFsc2U7XHJcblxyXG5cdFx0XHRcdFx0XHR9LCAzMDApO1xyXG5cclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gY3VycmVudEhhc2g7XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdCAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICB9LFxyXG5cclxuXHRcdFx0J2JlZm9yZUNsb3NlLmZiJyA6IGZ1bmN0aW9uKCBlLCBpbnN0YW5jZSwgY3VycmVudCApIHtcclxuXHRcdFx0XHR2YXIgZ2FsbGVyeSwgb3JpZ0hhc2g7XHJcblxyXG5cdFx0XHRcdGlmICggdGltZXJJRCApIHtcclxuXHRcdFx0XHRcdGNsZWFyVGltZW91dCggdGltZXJJRCApO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0aWYgKCBjdXJyZW50Lm9wdHMuaGFzaCA9PT0gZmFsc2UgKSB7XHJcblx0XHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRnYWxsZXJ5ICA9IGdldEdhbGxlcnlJRCggaW5zdGFuY2UgKTtcclxuXHRcdFx0XHRvcmlnSGFzaCA9IGluc3RhbmNlICYmIGluc3RhbmNlLm9wdHMub3JpZ0hhc2ggPyBpbnN0YW5jZS5vcHRzLm9yaWdIYXNoIDogJyc7XHJcblxyXG5cdCAgICAgICAgICAgIC8vIFJlbW92ZSBoYXNoIGZyb20gbG9jYXRpb24gYmFyXHJcblx0ICAgICAgICAgICAgaWYgKCBnYWxsZXJ5ICYmIGdhbGxlcnkgIT09ICcnICkge1xyXG5cclxuXHQgICAgICAgICAgICAgICAgaWYgKCAncmVwbGFjZVN0YXRlJyBpbiBoaXN0b3J5ICkge1xyXG5cdFx0XHRcdFx0XHR3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUoIHt9ICwgZG9jdW1lbnQudGl0bGUsIHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSArIHdpbmRvdy5sb2NhdGlvbi5zZWFyY2ggKyBvcmlnSGFzaCApO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0d2luZG93LmxvY2F0aW9uLmhhc2ggPSBvcmlnSGFzaDtcclxuXHJcblx0XHRcdFx0XHRcdC8vIEtlZXAgb3JpZ2luYWwgc2Nyb2xsIHBvc2l0aW9uXHJcblx0XHRcdFx0XHRcdCQoIHdpbmRvdyApLnNjcm9sbFRvcCggaW5zdGFuY2Uuc2Nyb2xsVG9wICkuc2Nyb2xsTGVmdCggaW5zdGFuY2Uuc2Nyb2xsTGVmdCApO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cclxuXHRcdFx0XHRjdXJyZW50SGFzaCA9IG51bGw7XHJcblx0ICAgICAgICB9XHJcblx0ICAgIH0pO1xyXG5cclxuXHRcdC8vIENoZWNrIGlmIG5lZWQgdG8gY2xvc2UgYWZ0ZXIgdXJsIGhhcyBjaGFuZ2VkXHJcblx0XHQkKHdpbmRvdykub24oJ2hhc2hjaGFuZ2UuZmInLCBmdW5jdGlvbigpIHtcclxuXHRcdFx0dmFyIHVybCA9IHBhcnNlVXJsKCk7XHJcblxyXG5cdFx0XHRpZiAoICQuZmFuY3lib3guZ2V0SW5zdGFuY2UoKSApIHtcclxuXHRcdFx0XHRpZiAoIGN1cnJlbnRIYXNoICYmIGN1cnJlbnRIYXNoICE9PSB1cmwuZ2FsbGVyeSArICctJyArIHVybC5pbmRleCAmJiAhKCB1cmwuaW5kZXggPT09IDEgJiYgY3VycmVudEhhc2ggPT0gdXJsLmdhbGxlcnkgKSApIHtcclxuXHRcdFx0XHRcdGN1cnJlbnRIYXNoID0gbnVsbDtcclxuXHJcblx0XHRcdFx0XHQkLmZhbmN5Ym94LmNsb3NlKCk7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0fSBlbHNlIGlmICggdXJsLmdhbGxlcnkgIT09ICcnICkge1xyXG5cdFx0XHRcdHRyaWdnZXJGcm9tVXJsKCB1cmwgKTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblxyXG5cdFx0Ly8gQ2hlY2sgY3VycmVudCBoYXNoIGFuZCB0cmlnZ2VyIGNsaWNrIGV2ZW50IG9uIG1hdGNoaW5nIGVsZW1lbnQgdG8gc3RhcnQgZmFuY3lCb3gsIGlmIG5lZWRlZFxyXG5cdFx0c2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuXHRcdFx0dHJpZ2dlckZyb21VcmwoIHBhcnNlVXJsKCkgKTtcclxuXHRcdH0sIDUwKTtcclxuICAgIH0pO1xyXG5cclxufSggZG9jdW1lbnQsIHdpbmRvdywgd2luZG93LmpRdWVyeSB8fCBqUXVlcnkgKSk7XHJcblxyXG47KGZ1bmN0aW9uIChkb2N1bWVudCwgJCkge1xyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0dmFyIHByZXZUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcblxyXG4gICAgJChkb2N1bWVudCkub24oe1xyXG4gICAgICAgICdvbkluaXQuZmInIDogZnVuY3Rpb24oIGUsIGluc3RhbmNlLCBjdXJyZW50ICkge1xyXG5cdFx0XHRpbnN0YW5jZS4kcmVmcy5zdGFnZS5vbignbW91c2V3aGVlbCBET01Nb3VzZVNjcm9sbCB3aGVlbCBNb3pNb3VzZVBpeGVsU2Nyb2xsJywgZnVuY3Rpb24oZSkge1xyXG5cdFx0XHRcdHZhciBjdXJyZW50ICA9IGluc3RhbmNlLmN1cnJlbnQsXHJcblx0XHRcdFx0XHRjdXJyVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG5cclxuXHRcdFx0XHRpZiAoIGluc3RhbmNlLmdyb3VwLmxlbmd0aCA8IDEgfHwgY3VycmVudC5vcHRzLndoZWVsID09PSBmYWxzZSB8fCAoIGN1cnJlbnQub3B0cy53aGVlbCA9PT0gJ2F1dG8nICYmIGN1cnJlbnQudHlwZSAhPT0gJ2ltYWdlJyApICkge1xyXG5cdFx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdFx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblxyXG5cdFx0XHRcdGlmICggY3VycmVudC4kc2xpZGUuaGFzQ2xhc3MoICdmYW5jeWJveC1hbmltYXRlZCcgKSApIHtcclxuXHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGUgPSBlLm9yaWdpbmFsRXZlbnQgfHwgZTtcclxuXHJcblx0XHRcdFx0aWYgKCBjdXJyVGltZSAtIHByZXZUaW1lIDwgMjUwICkge1xyXG5cdFx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0cHJldlRpbWUgPSBjdXJyVGltZTtcclxuXHJcblx0XHRcdFx0aW5zdGFuY2VbICggLWUuZGVsdGFZIHx8IC1lLmRlbHRhWCB8fCBlLndoZWVsRGVsdGEgfHwgLWUuZGV0YWlsICkgPCAwID8gJ25leHQnIDogJ3ByZXZpb3VzJyBdKCk7XHJcblxyXG5cdFx0XHR9KTtcclxuXHRcdH1cclxuICAgIH0pO1xyXG5cclxufSggZG9jdW1lbnQsIHdpbmRvdy5qUXVlcnkgfHwgalF1ZXJ5ICkpO1xyXG4iLCIvKiohXHJcbiAqIE1peEl0VXAgdjIuMS4xMFxyXG4gKlxyXG4gKiBAY29weXJpZ2h0IENvcHlyaWdodCAyMDE1IEt1bmthTGFicyBMaW1pdGVkLlxyXG4gKiBAYXV0aG9yICAgIEt1bmthTGFicyBMaW1pdGVkLlxyXG4gKiBAbGluayAgICAgIGh0dHBzOi8vbWl4aXR1cC5rdW5rYWxhYnMuY29tXHJcbiAqXHJcbiAqIEBsaWNlbnNlICAgQ29tbWVyY2lhbCB1c2UgcmVxdWlyZXMgYSBjb21tZXJjaWFsIGxpY2Vuc2UuXHJcbiAqICAgICAgICAgICAgaHR0cHM6Ly9taXhpdHVwLmt1bmthbGFicy5jb20vbGljZW5zZXMvXHJcbiAqXHJcbiAqICAgICAgICAgICAgTm9uLWNvbW1lcmNpYWwgdXNlIHBlcm1pdHRlZCB1bmRlciB0ZXJtcyBvZiBDQy1CWS1OQyBsaWNlbnNlLlxyXG4gKiAgICAgICAgICAgIGh0dHA6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLzMuMC9cclxuICovXHJcblxyXG4oZnVuY3Rpb24oJCwgdW5kZil7XHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIE1peEl0VXAgQ29uc3RydWN0b3IgRnVuY3Rpb25cclxuXHQgKiBAY29uc3RydWN0b3JcclxuXHQgKiBAZXh0ZW5kcyBqUXVlcnlcclxuXHQgKi9cclxuXHRcclxuXHQkLk1peEl0VXAgPSBmdW5jdGlvbigpe1xyXG5cdFx0dmFyIHNlbGYgPSB0aGlzO1xyXG5cdFx0XHJcblx0XHRzZWxmLl9leGVjQWN0aW9uKCdfY29uc3RydWN0b3InLCAwKTtcclxuXHRcdFxyXG5cdFx0JC5leHRlbmQoc2VsZiwge1xyXG5cdFx0XHRcclxuXHRcdFx0LyogUHVibGljIFByb3BlcnRpZXNcclxuXHRcdFx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xyXG5cdFx0XHRcclxuXHRcdFx0c2VsZWN0b3JzOiB7XHJcblx0XHRcdFx0dGFyZ2V0OiAnLm1peCcsXHJcblx0XHRcdFx0ZmlsdGVyOiAnLmZpbHRlcicsXHJcblx0XHRcdFx0c29ydDogJy5zb3J0J1xyXG5cdFx0XHR9LFxyXG5cdFx0XHRcdFxyXG5cdFx0XHRhbmltYXRpb246IHtcclxuXHRcdFx0XHRlbmFibGU6IHRydWUsXHJcblx0XHRcdFx0ZWZmZWN0czogJ2ZhZGUgc2NhbGUnLFxyXG5cdFx0XHRcdGR1cmF0aW9uOiA2MDAsXHJcblx0XHRcdFx0ZWFzaW5nOiAnZWFzZScsXHJcblx0XHRcdFx0cGVyc3BlY3RpdmVEaXN0YW5jZTogJzMwMDAnLFxyXG5cdFx0XHRcdHBlcnNwZWN0aXZlT3JpZ2luOiAnNTAlIDUwJScsXHJcblx0XHRcdFx0cXVldWU6IHRydWUsXHJcblx0XHRcdFx0cXVldWVMaW1pdDogMSxcclxuXHRcdFx0XHRhbmltYXRlQ2hhbmdlTGF5b3V0OiBmYWxzZSxcclxuXHRcdFx0XHRhbmltYXRlUmVzaXplQ29udGFpbmVyOiB0cnVlLFxyXG5cdFx0XHRcdGFuaW1hdGVSZXNpemVUYXJnZXRzOiBmYWxzZSxcclxuXHRcdFx0XHRzdGFnZ2VyU2VxdWVuY2U6IGZhbHNlLFxyXG5cdFx0XHRcdHJldmVyc2VPdXQ6IGZhbHNlXHJcblx0XHRcdH0sXHJcblx0XHRcdFx0XHJcblx0XHRcdGNhbGxiYWNrczoge1xyXG5cdFx0XHRcdG9uTWl4TG9hZDogZmFsc2UsXHJcblx0XHRcdFx0b25NaXhTdGFydDogZmFsc2UsXHJcblx0XHRcdFx0b25NaXhCdXN5OiBmYWxzZSxcclxuXHRcdFx0XHRvbk1peEVuZDogZmFsc2UsXHJcblx0XHRcdFx0b25NaXhGYWlsOiBmYWxzZSxcclxuXHRcdFx0XHRfdXNlcjogZmFsc2VcclxuXHRcdFx0fSxcclxuXHRcdFx0XHRcclxuXHRcdFx0Y29udHJvbHM6IHtcclxuXHRcdFx0XHRlbmFibGU6IHRydWUsXHJcblx0XHRcdFx0bGl2ZTogZmFsc2UsXHJcblx0XHRcdFx0dG9nZ2xlRmlsdGVyQnV0dG9uczogZmFsc2UsXHJcblx0XHRcdFx0dG9nZ2xlTG9naWM6ICdvcicsXHJcblx0XHRcdFx0YWN0aXZlQ2xhc3M6ICdhY3RpdmUnXHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHRsYXlvdXQ6IHtcclxuXHRcdFx0XHRkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcclxuXHRcdFx0XHRjb250YWluZXJDbGFzczogJycsXHJcblx0XHRcdFx0Y29udGFpbmVyQ2xhc3NGYWlsOiAnZmFpbCdcclxuXHRcdFx0fSxcclxuXHRcdFx0XHJcblx0XHRcdGxvYWQ6IHtcclxuXHRcdFx0XHRmaWx0ZXI6ICdhbGwnLFxyXG5cdFx0XHRcdHNvcnQ6IGZhbHNlXHJcblx0XHRcdH0sXHJcblx0XHRcdFxyXG5cdFx0XHQvKiBQcml2YXRlIFByb3BlcnRpZXNcclxuXHRcdFx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xyXG5cdFx0XHRcdFxyXG5cdFx0XHRfJGJvZHk6IG51bGwsXHJcblx0XHRcdF8kY29udGFpbmVyOiBudWxsLFxyXG5cdFx0XHRfJHRhcmdldHM6IG51bGwsXHJcblx0XHRcdF8kcGFyZW50OiBudWxsLFxyXG5cdFx0XHRfJHNvcnRCdXR0b25zOiBudWxsLFxyXG5cdFx0XHRfJGZpbHRlckJ1dHRvbnM6IG51bGwsXHJcblx0XHRcclxuXHRcdFx0X3N1Y2tNb2RlOiBmYWxzZSxcclxuXHRcdFx0X21peGluZzogZmFsc2UsXHJcblx0XHRcdF9zb3J0aW5nOiBmYWxzZSxcclxuXHRcdFx0X2NsaWNraW5nOiBmYWxzZSxcclxuXHRcdFx0X2xvYWRpbmc6IHRydWUsXHJcblx0XHRcdF9jaGFuZ2luZ0xheW91dDogZmFsc2UsXHJcblx0XHRcdF9jaGFuZ2luZ0NsYXNzOiBmYWxzZSxcclxuXHRcdFx0X2NoYW5naW5nRGlzcGxheTogZmFsc2UsXHJcblx0XHRcdFxyXG5cdFx0XHRfb3JpZ09yZGVyOiBbXSxcclxuXHRcdFx0X3N0YXJ0T3JkZXI6IFtdLFxyXG5cdFx0XHRfbmV3T3JkZXI6IFtdLFxyXG5cdFx0XHRfYWN0aXZlRmlsdGVyOiBudWxsLFxyXG5cdFx0XHRfdG9nZ2xlQXJyYXk6IFtdLFxyXG5cdFx0XHRfdG9nZ2xlU3RyaW5nOiAnJyxcclxuXHRcdFx0X2FjdGl2ZVNvcnQ6ICdkZWZhdWx0OmFzYycsXHJcblx0XHRcdF9uZXdTb3J0OiBudWxsLFxyXG5cdFx0XHRfc3RhcnRIZWlnaHQ6IG51bGwsXHJcblx0XHRcdF9uZXdIZWlnaHQ6IG51bGwsXHJcblx0XHRcdF9pbmNQYWRkaW5nOiB0cnVlLFxyXG5cdFx0XHRfbmV3RGlzcGxheTogbnVsbCxcclxuXHRcdFx0X25ld0NsYXNzOiBudWxsLFxyXG5cdFx0XHRfdGFyZ2V0c0JvdW5kOiAwLFxyXG5cdFx0XHRfdGFyZ2V0c0RvbmU6IDAsXHJcblx0XHRcdF9xdWV1ZTogW10sXHJcblx0XHRcdFx0XHJcblx0XHRcdF8kc2hvdzogJCgpLFxyXG5cdFx0XHRfJGhpZGU6ICQoKVxyXG5cdFx0fSk7XHJcblx0XHJcblx0XHRzZWxmLl9leGVjQWN0aW9uKCdfY29uc3RydWN0b3InLCAxKTtcclxuXHR9O1xyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIE1peEl0VXAgUHJvdG90eXBlXHJcblx0ICogQG92ZXJyaWRlXHJcblx0ICovXHJcblx0XHJcblx0JC5NaXhJdFVwLnByb3RvdHlwZSA9IHtcclxuXHRcdGNvbnN0cnVjdG9yOiAkLk1peEl0VXAsXHJcblx0XHRcclxuXHRcdC8qIFN0YXRpYyBQcm9wZXJ0aWVzXHJcblx0XHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXHJcblx0XHRcclxuXHRcdF9pbnN0YW5jZXM6IHt9LFxyXG5cdFx0X2hhbmRsZWQ6IHtcclxuXHRcdFx0X2ZpbHRlcjoge30sXHJcblx0XHRcdF9zb3J0OiB7fVxyXG5cdFx0fSxcclxuXHRcdF9ib3VuZDoge1xyXG5cdFx0XHRfZmlsdGVyOiB7fSxcclxuXHRcdFx0X3NvcnQ6IHt9XHJcblx0XHR9LFxyXG5cdFx0X2FjdGlvbnM6IHt9LFxyXG5cdFx0X2ZpbHRlcnM6IHt9LFxyXG5cdFx0XHJcblx0XHQvKiBTdGF0aWMgTWV0aG9kc1xyXG5cdFx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xyXG5cdFx0XHJcblx0XHQvKipcclxuXHRcdCAqIEV4dGVuZFxyXG5cdFx0ICogQHNpbmNlIDIuMS4wXHJcblx0XHQgKiBAcGFyYW0ge29iamVjdH0gbmV3IHByb3BlcnRpZXMvbWV0aG9kc1xyXG5cdFx0ICogQGV4dGVuZHMge29iamVjdH0gcHJvdG90eXBlXHJcblx0XHQgKi9cclxuXHRcdFxyXG5cdFx0ZXh0ZW5kOiBmdW5jdGlvbihleHRlbnNpb24pe1xyXG5cdFx0XHRmb3IodmFyIGtleSBpbiBleHRlbnNpb24pe1xyXG5cdFx0XHRcdCQuTWl4SXRVcC5wcm90b3R5cGVba2V5XSA9IGV4dGVuc2lvbltrZXldO1xyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cdFx0XHJcblx0XHQvKipcclxuXHRcdCAqIEFkZCBBY3Rpb25cclxuXHRcdCAqIEBzaW5jZSAyLjEuMFxyXG5cdFx0ICogQHBhcmFtIHtzdHJpbmd9IGhvb2sgbmFtZVxyXG5cdFx0ICogQHBhcmFtIHtzdHJpbmd9IG5hbWVzcGFjZVxyXG5cdFx0ICogQHBhcmFtIHtmdW5jdGlvbn0gZnVuY3Rpb24gdG8gZXhlY3V0ZVxyXG5cdFx0ICogQHBhcmFtIHtudW1iZXJ9IHByaW9yaXR5XHJcblx0XHQgKiBAZXh0ZW5kcyB7b2JqZWN0fSAkLk1peEl0VXAucHJvdG90eXBlLl9hY3Rpb25zXHJcblx0XHQgKi9cclxuXHRcdFxyXG5cdFx0YWRkQWN0aW9uOiBmdW5jdGlvbihob29rLCBuYW1lLCBmdW5jLCBwcmlvcml0eSl7XHJcblx0XHRcdCQuTWl4SXRVcC5wcm90b3R5cGUuX2FkZEhvb2soJ19hY3Rpb25zJywgaG9vaywgbmFtZSwgZnVuYywgcHJpb3JpdHkpO1xyXG5cdFx0fSxcclxuXHRcdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBBZGQgRmlsdGVyXHJcblx0XHQgKiBAc2luY2UgMi4xLjBcclxuXHRcdCAqIEBwYXJhbSB7c3RyaW5nfSBob29rIG5hbWVcclxuXHRcdCAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lc3BhY2VcclxuXHRcdCAqIEBwYXJhbSB7ZnVuY3Rpb259IGZ1bmN0aW9uIHRvIGV4ZWN1dGVcclxuXHRcdCAqIEBwYXJhbSB7bnVtYmVyfSBwcmlvcml0eVxyXG5cdFx0ICogQGV4dGVuZHMge29iamVjdH0gJC5NaXhJdFVwLnByb3RvdHlwZS5fZmlsdGVyc1xyXG5cdFx0ICovXHJcblx0XHRcclxuXHRcdGFkZEZpbHRlcjogZnVuY3Rpb24oaG9vaywgbmFtZSwgZnVuYywgcHJpb3JpdHkpe1xyXG5cdFx0XHQkLk1peEl0VXAucHJvdG90eXBlLl9hZGRIb29rKCdfZmlsdGVycycsIGhvb2ssIG5hbWUsIGZ1bmMsIHByaW9yaXR5KTtcclxuXHRcdH0sXHJcblx0XHRcclxuXHRcdC8qKlxyXG5cdFx0ICogQWRkIEhvb2tcclxuXHRcdCAqIEBzaW5jZSAyLjEuMFxyXG5cdFx0ICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgb2YgaG9va1xyXG5cdFx0ICogQHBhcmFtIHtzdHJpbmd9IGhvb2sgbmFtZVxyXG5cdFx0ICogQHBhcmFtIHtmdW5jdGlvbn0gZnVuY3Rpb24gdG8gZXhlY3V0ZVxyXG5cdFx0ICogQHBhcmFtIHtudW1iZXJ9IHByaW9yaXR5XHJcblx0XHQgKiBAZXh0ZW5kcyB7b2JqZWN0fSAkLk1peEl0VXAucHJvdG90eXBlLl9maWx0ZXJzXHJcblx0XHQgKi9cclxuXHRcdFxyXG5cdFx0X2FkZEhvb2s6IGZ1bmN0aW9uKHR5cGUsIGhvb2ssIG5hbWUsIGZ1bmMsIHByaW9yaXR5KXtcclxuXHRcdFx0dmFyIGNvbGxlY3Rpb24gPSAkLk1peEl0VXAucHJvdG90eXBlW3R5cGVdLFxyXG5cdFx0XHRcdG9iaiA9IHt9O1xyXG5cdFx0XHRcdFxyXG5cdFx0XHRwcmlvcml0eSA9IChwcmlvcml0eSA9PT0gMSB8fCBwcmlvcml0eSA9PT0gJ3Bvc3QnKSA/ICdwb3N0JyA6ICdwcmUnO1xyXG5cdFx0XHRcdFxyXG5cdFx0XHRvYmpbaG9va10gPSB7fTtcclxuXHRcdFx0b2JqW2hvb2tdW3ByaW9yaXR5XSA9IHt9O1xyXG5cdFx0XHRvYmpbaG9va11bcHJpb3JpdHldW25hbWVdID0gZnVuYztcclxuXHJcblx0XHRcdCQuZXh0ZW5kKHRydWUsIGNvbGxlY3Rpb24sIG9iaik7XHJcblx0XHR9LFxyXG5cdFx0XHJcblx0XHRcclxuXHRcdC8qIFByaXZhdGUgTWV0aG9kc1xyXG5cdFx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xyXG5cdFx0XHJcblx0XHQvKipcclxuXHRcdCAqIEluaXRpYWxpc2VcclxuXHRcdCAqIEBzaW5jZSAyLjAuMFxyXG5cdFx0ICogQHBhcmFtIHtvYmplY3R9IGRvbU5vZGVcclxuXHRcdCAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWdcclxuXHRcdCAqL1xyXG5cdFx0XHJcblx0XHRfaW5pdDogZnVuY3Rpb24oZG9tTm9kZSwgY29uZmlnKXtcclxuXHRcdFx0dmFyIHNlbGYgPSB0aGlzO1xyXG5cdFx0XHRcclxuXHRcdFx0c2VsZi5fZXhlY0FjdGlvbignX2luaXQnLCAwLCBhcmd1bWVudHMpO1xyXG5cdFx0XHRcclxuXHRcdFx0Y29uZmlnICYmICQuZXh0ZW5kKHRydWUsIHNlbGYsIGNvbmZpZyk7XHJcblx0XHRcdFxyXG5cdFx0XHRzZWxmLl8kYm9keSA9ICQoJ2JvZHknKTtcclxuXHRcdFx0c2VsZi5fZG9tTm9kZSA9IGRvbU5vZGU7XHJcblx0XHRcdHNlbGYuXyRjb250YWluZXIgPSAkKGRvbU5vZGUpO1xyXG5cdFx0XHRzZWxmLl8kY29udGFpbmVyLmFkZENsYXNzKHNlbGYubGF5b3V0LmNvbnRhaW5lckNsYXNzKTtcclxuXHRcdFx0c2VsZi5faWQgPSBkb21Ob2RlLmlkO1xyXG5cdFx0XHRcclxuXHRcdFx0c2VsZi5fcGxhdGZvcm1EZXRlY3QoKTtcclxuXHRcdFx0XHJcblx0XHRcdHNlbGYuX2JyYWtlID0gc2VsZi5fZ2V0UHJlZml4ZWRDU1MoJ3RyYW5zaXRpb24nLCAnbm9uZScpO1xyXG5cdFx0XHRcclxuXHRcdFx0c2VsZi5fcmVmcmVzaCh0cnVlKTtcclxuXHRcdFx0XHJcblx0XHRcdHNlbGYuXyRwYXJlbnQgPSBzZWxmLl8kdGFyZ2V0cy5wYXJlbnQoKS5sZW5ndGggPyBzZWxmLl8kdGFyZ2V0cy5wYXJlbnQoKSA6IHNlbGYuXyRjb250YWluZXI7XHJcblx0XHRcdFxyXG5cdFx0XHRpZihzZWxmLmxvYWQuc29ydCl7XHJcblx0XHRcdFx0c2VsZi5fbmV3U29ydCA9IHNlbGYuX3BhcnNlU29ydChzZWxmLmxvYWQuc29ydCk7XHJcblx0XHRcdFx0c2VsZi5fbmV3U29ydFN0cmluZyA9IHNlbGYubG9hZC5zb3J0O1xyXG5cdFx0XHRcdHNlbGYuX2FjdGl2ZVNvcnQgPSBzZWxmLmxvYWQuc29ydDtcclxuXHRcdFx0XHRzZWxmLl9zb3J0KCk7XHJcblx0XHRcdFx0c2VsZi5fcHJpbnRTb3J0KCk7XHJcblx0XHRcdH1cclxuXHRcdFx0XHJcblx0XHRcdHNlbGYuX2FjdGl2ZUZpbHRlciA9IHNlbGYubG9hZC5maWx0ZXIgPT09ICdhbGwnID8gXHJcblx0XHRcdFx0c2VsZi5zZWxlY3RvcnMudGFyZ2V0IDogXHJcblx0XHRcdFx0c2VsZi5sb2FkLmZpbHRlciA9PT0gJ25vbmUnID9cclxuXHRcdFx0XHRcdCcnIDpcclxuXHRcdFx0XHRcdHNlbGYubG9hZC5maWx0ZXI7XHJcblx0XHRcdFxyXG5cdFx0XHRzZWxmLmNvbnRyb2xzLmVuYWJsZSAmJiBzZWxmLl9iaW5kSGFuZGxlcnMoKTtcclxuXHRcdFx0XHJcblx0XHRcdGlmKHNlbGYuY29udHJvbHMudG9nZ2xlRmlsdGVyQnV0dG9ucyl7XHJcblx0XHRcdFx0c2VsZi5fYnVpbGRUb2dnbGVBcnJheSgpO1xyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCBzZWxmLl90b2dnbGVBcnJheS5sZW5ndGg7IGkrKyl7XHJcblx0XHRcdFx0XHRzZWxmLl91cGRhdGVDb250cm9scyh7ZmlsdGVyOiBzZWxmLl90b2dnbGVBcnJheVtpXSwgc29ydDogc2VsZi5fYWN0aXZlU29ydH0sIHRydWUpO1xyXG5cdFx0XHRcdH07XHJcblx0XHRcdH0gZWxzZSBpZihzZWxmLmNvbnRyb2xzLmVuYWJsZSl7XHJcblx0XHRcdFx0c2VsZi5fdXBkYXRlQ29udHJvbHMoe2ZpbHRlcjogc2VsZi5fYWN0aXZlRmlsdGVyLCBzb3J0OiBzZWxmLl9hY3RpdmVTb3J0fSk7XHJcblx0XHRcdH1cclxuXHRcdFx0XHJcblx0XHRcdHNlbGYuX2ZpbHRlcigpO1xyXG5cdFx0XHRcclxuXHRcdFx0c2VsZi5faW5pdCA9IHRydWU7XHJcblx0XHRcdFxyXG5cdFx0XHRzZWxmLl8kY29udGFpbmVyLmRhdGEoJ21peEl0VXAnLHNlbGYpO1xyXG5cdFx0XHRcclxuXHRcdFx0c2VsZi5fZXhlY0FjdGlvbignX2luaXQnLCAxLCBhcmd1bWVudHMpO1xyXG5cdFx0XHRcclxuXHRcdFx0c2VsZi5fYnVpbGRTdGF0ZSgpO1xyXG5cdFx0XHRcclxuXHRcdFx0c2VsZi5fJHRhcmdldHMuY3NzKHNlbGYuX2JyYWtlKTtcclxuXHRcdFxyXG5cdFx0XHRzZWxmLl9nb01peChzZWxmLmFuaW1hdGlvbi5lbmFibGUpO1xyXG5cdFx0fSxcclxuXHRcdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBQbGF0Zm9ybSBEZXRlY3RcclxuXHRcdCAqIEBzaW5jZSAyLjAuMFxyXG5cdFx0ICovXHJcblx0XHRcclxuXHRcdF9wbGF0Zm9ybURldGVjdDogZnVuY3Rpb24oKXtcclxuXHRcdFx0dmFyIHNlbGYgPSB0aGlzLFxyXG5cdFx0XHRcdHZlbmRvcnNUcmFucyA9IFsnV2Via2l0JywgJ01veicsICdPJywgJ21zJ10sXHJcblx0XHRcdFx0dmVuZG9yc1JBRiA9IFsnd2Via2l0JywgJ21veiddLFxyXG5cdFx0XHRcdGNocm9tZSA9IHdpbmRvdy5uYXZpZ2F0b3IuYXBwVmVyc2lvbi5tYXRjaCgvQ2hyb21lXFwvKFxcZCspXFwuLykgfHwgZmFsc2UsXHJcblx0XHRcdFx0ZmYgPSB0eXBlb2YgSW5zdGFsbFRyaWdnZXIgIT09ICd1bmRlZmluZWQnLFxyXG5cdFx0XHRcdHByZWZpeCA9IGZ1bmN0aW9uKGVsKXtcclxuXHRcdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgdmVuZG9yc1RyYW5zLmxlbmd0aDsgaSsrKXtcclxuXHRcdFx0XHRcdFx0aWYgKHZlbmRvcnNUcmFuc1tpXSArICdUcmFuc2l0aW9uJyBpbiBlbC5zdHlsZSl7XHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHtcclxuXHRcdFx0XHRcdFx0XHRcdHByZWZpeDogJy0nK3ZlbmRvcnNUcmFuc1tpXS50b0xvd2VyQ2FzZSgpKyctJyxcclxuXHRcdFx0XHRcdFx0XHRcdHZlbmRvcjogdmVuZG9yc1RyYW5zW2ldXHJcblx0XHRcdFx0XHRcdFx0fTtcclxuXHRcdFx0XHRcdFx0fTtcclxuXHRcdFx0XHRcdH07IFxyXG5cdFx0XHRcdFx0cmV0dXJuICd0cmFuc2l0aW9uJyBpbiBlbC5zdHlsZSA/ICcnIDogZmFsc2U7XHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHR0cmFuc1ByZWZpeCA9IHByZWZpeChzZWxmLl9kb21Ob2RlKTtcclxuXHRcdFx0XHRcclxuXHRcdFx0c2VsZi5fZXhlY0FjdGlvbignX3BsYXRmb3JtRGV0ZWN0JywgMCk7XHJcblx0XHRcdFxyXG5cdFx0XHRzZWxmLl9jaHJvbWUgPSBjaHJvbWUgPyBwYXJzZUludChjaHJvbWVbMV0sIDEwKSA6IGZhbHNlO1xyXG5cdFx0XHRzZWxmLl9mZiA9IGZmID8gcGFyc2VJbnQod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL3J2OihbXildKylcXCkvKVsxXSkgOiBmYWxzZTtcclxuXHRcdFx0c2VsZi5fcHJlZml4ID0gdHJhbnNQcmVmaXgucHJlZml4O1xyXG5cdFx0XHRzZWxmLl92ZW5kb3IgPSB0cmFuc1ByZWZpeC52ZW5kb3I7XHJcblx0XHRcdHNlbGYuX3N1Y2tNb2RlID0gd2luZG93LmF0b2IgJiYgc2VsZi5fcHJlZml4ID8gZmFsc2UgOiB0cnVlO1xyXG5cclxuXHRcdFx0c2VsZi5fc3Vja01vZGUgJiYgKHNlbGYuYW5pbWF0aW9uLmVuYWJsZSA9IGZhbHNlKTtcclxuXHRcdFx0KHNlbGYuX2ZmICYmIHNlbGYuX2ZmIDw9IDQpICYmIChzZWxmLmFuaW1hdGlvbi5lbmFibGUgPSBmYWxzZSk7XHJcblx0XHRcdFxyXG5cdFx0XHQvKiBQb2x5ZmlsbHNcclxuXHRcdFx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xyXG5cdFx0XHRcclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWVcclxuXHRcdFx0ICovXHJcblx0XHRcdFxyXG5cdFx0XHRmb3IodmFyIHggPSAwOyB4IDwgdmVuZG9yc1JBRi5sZW5ndGggJiYgIXdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWU7IHgrKyl7XHJcblx0XHRcdFx0d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSA9IHdpbmRvd1t2ZW5kb3JzUkFGW3hdKydSZXF1ZXN0QW5pbWF0aW9uRnJhbWUnXTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIE9iamVjdC5nZXRQcm90b3R5cGVPZlxyXG5cdFx0XHQgKi9cclxuXHJcblx0XHRcdGlmKHR5cGVvZiBPYmplY3QuZ2V0UHJvdG90eXBlT2YgIT09ICdmdW5jdGlvbicpe1xyXG5cdFx0XHRcdGlmKHR5cGVvZiAndGVzdCcuX19wcm90b19fID09PSAnb2JqZWN0Jyl7XHJcblx0XHRcdFx0XHRPYmplY3QuZ2V0UHJvdG90eXBlT2YgPSBmdW5jdGlvbihvYmplY3Qpe1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gb2JqZWN0Ll9fcHJvdG9fXztcclxuXHRcdFx0XHRcdH07XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdE9iamVjdC5nZXRQcm90b3R5cGVPZiA9IGZ1bmN0aW9uKG9iamVjdCl7XHJcblx0XHRcdFx0XHRcdHJldHVybiBvYmplY3QuY29uc3RydWN0b3IucHJvdG90eXBlO1xyXG5cdFx0XHRcdFx0fTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBFbGVtZW50Lm5leHRFbGVtZW50U2libGluZ1xyXG5cdFx0XHQgKi9cclxuXHRcdFx0XHJcblx0XHRcdGlmKHNlbGYuX2RvbU5vZGUubmV4dEVsZW1lbnRTaWJsaW5nID09PSB1bmRmKXtcclxuXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoRWxlbWVudC5wcm90b3R5cGUsICduZXh0RWxlbWVudFNpYmxpbmcnLHtcclxuXHRcdFx0XHRcdGdldDogZnVuY3Rpb24oKXtcclxuXHRcdFx0XHRcdFx0dmFyIGVsID0gdGhpcy5uZXh0U2libGluZztcclxuXHRcdFx0XHRcdFx0XHJcblx0XHRcdFx0XHRcdHdoaWxlKGVsKXtcclxuXHRcdFx0XHRcdFx0XHRpZihlbC5ub2RlVHlwZSA9PT0xKXtcclxuXHRcdFx0XHRcdFx0XHRcdHJldHVybiBlbDtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0ZWwgPSBlbC5uZXh0U2libGluZztcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fVxyXG5cdFx0XHRcclxuXHRcdFx0c2VsZi5fZXhlY0FjdGlvbignX3BsYXRmb3JtRGV0ZWN0JywgMSk7XHJcblx0XHR9LFxyXG5cdFx0XHJcblx0XHQvKipcclxuXHRcdCAqIFJlZnJlc2hcclxuXHRcdCAqIEBzaW5jZSAyLjAuMFxyXG5cdFx0ICogQHBhcmFtIHtib29sZWFufSBpbml0XHJcblx0XHQgKiBAcGFyYW0ge2Jvb2xlYW59IGZvcmNlXHJcblx0XHQgKi9cclxuXHRcdFxyXG5cdFx0X3JlZnJlc2g6IGZ1bmN0aW9uKGluaXQsIGZvcmNlKXtcclxuXHRcdFx0dmFyIHNlbGYgPSB0aGlzO1xyXG5cdFx0XHRcdFxyXG5cdFx0XHRzZWxmLl9leGVjQWN0aW9uKCdfcmVmcmVzaCcsIDAsIGFyZ3VtZW50cyk7XHJcblxyXG5cdFx0XHRzZWxmLl8kdGFyZ2V0cyA9IHNlbGYuXyRjb250YWluZXIuZmluZChzZWxmLnNlbGVjdG9ycy50YXJnZXQpO1xyXG5cdFx0XHRcclxuXHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IHNlbGYuXyR0YXJnZXRzLmxlbmd0aDsgaSsrKXtcclxuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gc2VsZi5fJHRhcmdldHNbaV07XHJcblx0XHRcdFx0XHRcclxuXHRcdFx0XHRpZih0YXJnZXQuZGF0YXNldCA9PT0gdW5kZiB8fCBmb3JjZSl7XHJcblx0XHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0dGFyZ2V0LmRhdGFzZXQgPSB7fTtcclxuXHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IHRhcmdldC5hdHRyaWJ1dGVzLmxlbmd0aDsgaisrKXtcclxuXHRcdFx0XHRcdFx0XHJcblx0XHRcdFx0XHRcdHZhciBhdHRyID0gdGFyZ2V0LmF0dHJpYnV0ZXNbal0sXHJcblx0XHRcdFx0XHRcdFx0bmFtZSA9IGF0dHIubmFtZSxcclxuXHRcdFx0XHRcdFx0XHR2YWwgPSBhdHRyLnZhbHVlO1xyXG5cdFx0XHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0XHRpZihuYW1lLmluZGV4T2YoJ2RhdGEtJykgPiAtMSl7XHJcblx0XHRcdFx0XHRcdFx0dmFyIGRhdGFOYW1lID0gc2VsZi5faGVscGVycy5fY2FtZWxDYXNlKG5hbWUuc3Vic3RyaW5nKDUsbmFtZS5sZW5ndGgpKTtcclxuXHRcdFx0XHRcdFx0XHR0YXJnZXQuZGF0YXNldFtkYXRhTmFtZV0gPSB2YWw7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0XHJcblx0XHRcdFx0aWYodGFyZ2V0Lm1peFBhcmVudCA9PT0gdW5kZil7XHJcblx0XHRcdFx0XHR0YXJnZXQubWl4UGFyZW50ID0gc2VsZi5faWQ7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdFxyXG5cdFx0XHRpZihcclxuXHRcdFx0XHQoc2VsZi5fJHRhcmdldHMubGVuZ3RoICYmIGluaXQpIHx8XHJcblx0XHRcdFx0KCFzZWxmLl9vcmlnT3JkZXIubGVuZ3RoICYmIHNlbGYuXyR0YXJnZXRzLmxlbmd0aClcclxuXHRcdFx0KXtcclxuXHRcdFx0XHRzZWxmLl9vcmlnT3JkZXIgPSBbXTtcclxuXHRcdFx0XHRcclxuXHRcdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgc2VsZi5fJHRhcmdldHMubGVuZ3RoOyBpKyspe1xyXG5cdFx0XHRcdFx0dmFyIHRhcmdldCA9IHNlbGYuXyR0YXJnZXRzW2ldO1xyXG5cdFx0XHRcdFx0XHJcblx0XHRcdFx0XHRzZWxmLl9vcmlnT3JkZXIucHVzaCh0YXJnZXQpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRcclxuXHRcdFx0c2VsZi5fZXhlY0FjdGlvbignX3JlZnJlc2gnLCAxLCBhcmd1bWVudHMpO1xyXG5cdFx0fSxcclxuXHRcdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBCaW5kIEhhbmRsZXJzXHJcblx0XHQgKiBAc2luY2UgMi4wLjBcclxuXHRcdCAqL1xyXG5cdFx0XHJcblx0XHRfYmluZEhhbmRsZXJzOiBmdW5jdGlvbigpe1xyXG5cdFx0XHR2YXIgc2VsZiA9IHRoaXMsXHJcblx0XHRcdFx0ZmlsdGVycyA9ICQuTWl4SXRVcC5wcm90b3R5cGUuX2JvdW5kLl9maWx0ZXIsXHJcblx0XHRcdFx0c29ydHMgPSAkLk1peEl0VXAucHJvdG90eXBlLl9ib3VuZC5fc29ydDtcclxuXHRcdFx0XHJcblx0XHRcdHNlbGYuX2V4ZWNBY3Rpb24oJ19iaW5kSGFuZGxlcnMnLCAwKTtcclxuXHRcdFx0XHJcblx0XHRcdGlmKHNlbGYuY29udHJvbHMubGl2ZSl7XHJcblx0XHRcdFx0c2VsZi5fJGJvZHlcclxuXHRcdFx0XHRcdC5vbignY2xpY2subWl4SXRVcC4nK3NlbGYuX2lkLCBzZWxmLnNlbGVjdG9ycy5zb3J0LCBmdW5jdGlvbigpe1xyXG5cdFx0XHRcdFx0XHRzZWxmLl9wcm9jZXNzQ2xpY2soJCh0aGlzKSwgJ3NvcnQnKTtcclxuXHRcdFx0XHRcdH0pXHJcblx0XHRcdFx0XHQub24oJ2NsaWNrLm1peEl0VXAuJytzZWxmLl9pZCwgc2VsZi5zZWxlY3RvcnMuZmlsdGVyLCBmdW5jdGlvbigpe1xyXG5cdFx0XHRcdFx0XHRzZWxmLl9wcm9jZXNzQ2xpY2soJCh0aGlzKSwgJ2ZpbHRlcicpO1xyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0c2VsZi5fJHNvcnRCdXR0b25zID0gJChzZWxmLnNlbGVjdG9ycy5zb3J0KTtcclxuXHRcdFx0XHRzZWxmLl8kZmlsdGVyQnV0dG9ucyA9ICQoc2VsZi5zZWxlY3RvcnMuZmlsdGVyKTtcclxuXHRcdFx0XHRcclxuXHRcdFx0XHRzZWxmLl8kc29ydEJ1dHRvbnMub24oJ2NsaWNrLm1peEl0VXAuJytzZWxmLl9pZCwgZnVuY3Rpb24oKXtcclxuXHRcdFx0XHRcdHNlbGYuX3Byb2Nlc3NDbGljaygkKHRoaXMpLCAnc29ydCcpO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdHNlbGYuXyRmaWx0ZXJCdXR0b25zLm9uKCdjbGljay5taXhJdFVwLicrc2VsZi5faWQsIGZ1bmN0aW9uKCl7XHJcblx0XHRcdFx0XHRzZWxmLl9wcm9jZXNzQ2xpY2soJCh0aGlzKSwgJ2ZpbHRlcicpO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRmaWx0ZXJzW3NlbGYuc2VsZWN0b3JzLmZpbHRlcl0gPSAoZmlsdGVyc1tzZWxmLnNlbGVjdG9ycy5maWx0ZXJdID09PSB1bmRmKSA/IDEgOiBmaWx0ZXJzW3NlbGYuc2VsZWN0b3JzLmZpbHRlcl0gKyAxO1xyXG5cdFx0XHRzb3J0c1tzZWxmLnNlbGVjdG9ycy5zb3J0XSA9IChzb3J0c1tzZWxmLnNlbGVjdG9ycy5zb3J0XSA9PT0gdW5kZikgPyAxIDogc29ydHNbc2VsZi5zZWxlY3RvcnMuc29ydF0gKyAxO1xyXG5cdFx0XHRcclxuXHRcdFx0c2VsZi5fZXhlY0FjdGlvbignX2JpbmRIYW5kbGVycycsIDEpO1xyXG5cdFx0fSxcclxuXHRcdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBQcm9jZXNzIENsaWNrXHJcblx0XHQgKiBAc2luY2UgMi4wLjBcclxuXHRcdCAqIEBwYXJhbSB7b2JqZWN0fSAkYnV0dG9uXHJcblx0XHQgKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxyXG5cdFx0ICovXHJcblx0XHRcclxuXHRcdF9wcm9jZXNzQ2xpY2s6IGZ1bmN0aW9uKCRidXR0b24sIHR5cGUpe1xyXG5cdFx0XHR2YXIgc2VsZiA9IHRoaXMsXHJcblx0XHRcdFx0dHJhY2tDbGljayA9IGZ1bmN0aW9uKCRidXR0b24sIHR5cGUsIG9mZil7XHJcblx0XHRcdFx0XHR2YXIgcHJvdG8gPSAkLk1peEl0VXAucHJvdG90eXBlO1xyXG5cdFx0XHRcdFx0XHRcclxuXHRcdFx0XHRcdHByb3RvLl9oYW5kbGVkWydfJyt0eXBlXVtzZWxmLnNlbGVjdG9yc1t0eXBlXV0gPSAocHJvdG8uX2hhbmRsZWRbJ18nK3R5cGVdW3NlbGYuc2VsZWN0b3JzW3R5cGVdXSA9PT0gdW5kZikgPyBcclxuXHRcdFx0XHRcdFx0MSA6IFxyXG5cdFx0XHRcdFx0XHRwcm90by5faGFuZGxlZFsnXycrdHlwZV1bc2VsZi5zZWxlY3RvcnNbdHlwZV1dICsgMTtcclxuXHJcblx0XHRcdFx0XHRpZihwcm90by5faGFuZGxlZFsnXycrdHlwZV1bc2VsZi5zZWxlY3RvcnNbdHlwZV1dID09PSBwcm90by5fYm91bmRbJ18nK3R5cGVdW3NlbGYuc2VsZWN0b3JzW3R5cGVdXSl7XHJcblx0XHRcdFx0XHRcdCRidXR0b25bKG9mZiA/ICdyZW1vdmUnIDogJ2FkZCcpKydDbGFzcyddKHNlbGYuY29udHJvbHMuYWN0aXZlQ2xhc3MpO1xyXG5cdFx0XHRcdFx0XHRkZWxldGUgcHJvdG8uX2hhbmRsZWRbJ18nK3R5cGVdW3NlbGYuc2VsZWN0b3JzW3R5cGVdXTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9O1xyXG5cdFx0XHRcclxuXHRcdFx0c2VsZi5fZXhlY0FjdGlvbignX3Byb2Nlc3NDbGljaycsIDAsIGFyZ3VtZW50cyk7XHJcblx0XHRcdFxyXG5cdFx0XHRpZighc2VsZi5fbWl4aW5nIHx8IChzZWxmLmFuaW1hdGlvbi5xdWV1ZSAmJiBzZWxmLl9xdWV1ZS5sZW5ndGggPCBzZWxmLmFuaW1hdGlvbi5xdWV1ZUxpbWl0KSl7XHJcblx0XHRcdFx0c2VsZi5fY2xpY2tpbmcgPSB0cnVlO1xyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdGlmKHR5cGUgPT09ICdzb3J0Jyl7XHJcblx0XHRcdFx0XHR2YXIgc29ydCA9ICRidXR0b24uYXR0cignZGF0YS1zb3J0Jyk7XHJcblx0XHRcdFx0XHRcclxuXHRcdFx0XHRcdGlmKCEkYnV0dG9uLmhhc0NsYXNzKHNlbGYuY29udHJvbHMuYWN0aXZlQ2xhc3MpIHx8IHNvcnQuaW5kZXhPZigncmFuZG9tJykgPiAtMSl7XHJcblx0XHRcdFx0XHRcdCQoc2VsZi5zZWxlY3RvcnMuc29ydCkucmVtb3ZlQ2xhc3Moc2VsZi5jb250cm9scy5hY3RpdmVDbGFzcyk7XHJcblx0XHRcdFx0XHRcdHRyYWNrQ2xpY2soJGJ1dHRvbiwgdHlwZSk7XHJcblx0XHRcdFx0XHRcdHNlbGYuc29ydChzb3J0KTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0XHJcblx0XHRcdFx0aWYodHlwZSA9PT0gJ2ZpbHRlcicpIHtcclxuXHRcdFx0XHRcdHZhciBmaWx0ZXIgPSAkYnV0dG9uLmF0dHIoJ2RhdGEtZmlsdGVyJyksXHJcblx0XHRcdFx0XHRcdG5keCxcclxuXHRcdFx0XHRcdFx0c2VwZXJhdG9yID0gc2VsZi5jb250cm9scy50b2dnbGVMb2dpYyA9PT0gJ29yJyA/ICcsJyA6ICcnO1xyXG5cdFx0XHRcdFx0XHJcblx0XHRcdFx0XHRpZighc2VsZi5jb250cm9scy50b2dnbGVGaWx0ZXJCdXR0b25zKXtcclxuXHRcdFx0XHRcdFx0aWYoISRidXR0b24uaGFzQ2xhc3Moc2VsZi5jb250cm9scy5hY3RpdmVDbGFzcykpe1xyXG5cdFx0XHRcdFx0XHRcdCQoc2VsZi5zZWxlY3RvcnMuZmlsdGVyKS5yZW1vdmVDbGFzcyhzZWxmLmNvbnRyb2xzLmFjdGl2ZUNsYXNzKTtcclxuXHRcdFx0XHRcdFx0XHR0cmFja0NsaWNrKCRidXR0b24sIHR5cGUpO1xyXG5cdFx0XHRcdFx0XHRcdHNlbGYuZmlsdGVyKGZpbHRlcik7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdHNlbGYuX2J1aWxkVG9nZ2xlQXJyYXkoKTtcclxuXHRcdFx0XHRcdFx0XHJcblx0XHRcdFx0XHRcdGlmKCEkYnV0dG9uLmhhc0NsYXNzKHNlbGYuY29udHJvbHMuYWN0aXZlQ2xhc3MpKXtcclxuXHRcdFx0XHRcdFx0XHR0cmFja0NsaWNrKCRidXR0b24sIHR5cGUpO1xyXG5cdFx0XHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0XHRcdHNlbGYuX3RvZ2dsZUFycmF5LnB1c2goZmlsdGVyKTtcclxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHR0cmFja0NsaWNrKCRidXR0b24sIHR5cGUsIHRydWUpO1xyXG5cdFx0XHRcdFx0XHRcdG5keCA9IHNlbGYuX3RvZ2dsZUFycmF5LmluZGV4T2YoZmlsdGVyKTtcclxuXHRcdFx0XHRcdFx0XHRzZWxmLl90b2dnbGVBcnJheS5zcGxpY2UobmR4LCAxKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRcclxuXHRcdFx0XHRcdFx0c2VsZi5fdG9nZ2xlQXJyYXkgPSAkLmdyZXAoc2VsZi5fdG9nZ2xlQXJyYXksZnVuY3Rpb24obil7cmV0dXJuKG4pO30pO1xyXG5cdFx0XHRcdFx0XHRcclxuXHRcdFx0XHRcdFx0c2VsZi5fdG9nZ2xlU3RyaW5nID0gc2VsZi5fdG9nZ2xlQXJyYXkuam9pbihzZXBlcmF0b3IpO1xyXG5cclxuXHRcdFx0XHRcdFx0c2VsZi5maWx0ZXIoc2VsZi5fdG9nZ2xlU3RyaW5nKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0XHJcblx0XHRcdFx0c2VsZi5fZXhlY0FjdGlvbignX3Byb2Nlc3NDbGljaycsIDEsIGFyZ3VtZW50cyk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0aWYodHlwZW9mIHNlbGYuY2FsbGJhY2tzLm9uTWl4QnVzeSA9PT0gJ2Z1bmN0aW9uJyl7XHJcblx0XHRcdFx0XHRzZWxmLmNhbGxiYWNrcy5vbk1peEJ1c3kuY2FsbChzZWxmLl9kb21Ob2RlLCBzZWxmLl9zdGF0ZSwgc2VsZik7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHNlbGYuX2V4ZWNBY3Rpb24oJ19wcm9jZXNzQ2xpY2tCdXN5JywgMSwgYXJndW1lbnRzKTtcclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHRcdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBCdWlsZCBUb2dnbGUgQXJyYXlcclxuXHRcdCAqIEBzaW5jZSAyLjAuMFxyXG5cdFx0ICovXHJcblx0XHRcclxuXHRcdF9idWlsZFRvZ2dsZUFycmF5OiBmdW5jdGlvbigpe1xyXG5cdFx0XHR2YXIgc2VsZiA9IHRoaXMsXHJcblx0XHRcdFx0YWN0aXZlRmlsdGVyID0gc2VsZi5fYWN0aXZlRmlsdGVyLnJlcGxhY2UoL1xccy9nLCAnJyk7XHJcblx0XHRcdFxyXG5cdFx0XHRzZWxmLl9leGVjQWN0aW9uKCdfYnVpbGRUb2dnbGVBcnJheScsIDAsIGFyZ3VtZW50cyk7XHJcblx0XHRcdFxyXG5cdFx0XHRpZihzZWxmLmNvbnRyb2xzLnRvZ2dsZUxvZ2ljID09PSAnb3InKXtcclxuXHRcdFx0XHRzZWxmLl90b2dnbGVBcnJheSA9IGFjdGl2ZUZpbHRlci5zcGxpdCgnLCcpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHNlbGYuX3RvZ2dsZUFycmF5ID0gYWN0aXZlRmlsdGVyLnNwbGl0KCcuJyk7XHJcblx0XHRcdFx0XHJcblx0XHRcdFx0IXNlbGYuX3RvZ2dsZUFycmF5WzBdICYmIHNlbGYuX3RvZ2dsZUFycmF5LnNoaWZ0KCk7XHJcblx0XHRcdFx0XHJcblx0XHRcdFx0Zm9yKHZhciBpID0gMCwgZmlsdGVyOyBmaWx0ZXIgPSBzZWxmLl90b2dnbGVBcnJheVtpXTsgaSsrKXtcclxuXHRcdFx0XHRcdHNlbGYuX3RvZ2dsZUFycmF5W2ldID0gJy4nK2ZpbHRlcjtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0XHJcblx0XHRcdHNlbGYuX2V4ZWNBY3Rpb24oJ19idWlsZFRvZ2dsZUFycmF5JywgMSwgYXJndW1lbnRzKTtcclxuXHRcdH0sXHJcblx0XHRcclxuXHRcdC8qKlxyXG5cdFx0ICogVXBkYXRlIENvbnRyb2xzXHJcblx0XHQgKiBAc2luY2UgMi4wLjBcclxuXHRcdCAqIEBwYXJhbSB7b2JqZWN0fSBjb21tYW5kXHJcblx0XHQgKiBAcGFyYW0ge2Jvb2xlYW59IG11bHRpXHJcblx0XHQgKi9cclxuXHRcdFxyXG5cdFx0X3VwZGF0ZUNvbnRyb2xzOiBmdW5jdGlvbihjb21tYW5kLCBtdWx0aSl7XHJcblx0XHRcdHZhciBzZWxmID0gdGhpcyxcclxuXHRcdFx0XHRvdXRwdXQgPSB7XHJcblx0XHRcdFx0XHRmaWx0ZXI6IGNvbW1hbmQuZmlsdGVyLFxyXG5cdFx0XHRcdFx0c29ydDogY29tbWFuZC5zb3J0XHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHR1cGRhdGUgPSBmdW5jdGlvbigkZWwsIGZpbHRlcil7XHJcblx0XHRcdFx0XHR0cnkge1xyXG5cdFx0XHRcdFx0XHQobXVsdGkgJiYgdHlwZSA9PT0gJ2ZpbHRlcicgJiYgIShvdXRwdXQuZmlsdGVyID09PSAnbm9uZScgfHwgb3V0cHV0LmZpbHRlciA9PT0gJycpKSA/XHJcblx0XHRcdFx0XHRcdFx0XHQkZWwuZmlsdGVyKGZpbHRlcikuYWRkQ2xhc3Moc2VsZi5jb250cm9scy5hY3RpdmVDbGFzcykgOlxyXG5cdFx0XHRcdFx0XHRcdFx0JGVsLnJlbW92ZUNsYXNzKHNlbGYuY29udHJvbHMuYWN0aXZlQ2xhc3MpLmZpbHRlcihmaWx0ZXIpLmFkZENsYXNzKHNlbGYuY29udHJvbHMuYWN0aXZlQ2xhc3MpO1xyXG5cdFx0XHRcdFx0fSBjYXRjaChlKSB7fVxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0dHlwZSA9ICdmaWx0ZXInLFxyXG5cdFx0XHRcdCRlbCA9IG51bGw7XHJcblx0XHRcdFx0XHJcblx0XHRcdHNlbGYuX2V4ZWNBY3Rpb24oJ191cGRhdGVDb250cm9scycsIDAsIGFyZ3VtZW50cyk7XHJcblx0XHRcdFx0XHJcblx0XHRcdChjb21tYW5kLmZpbHRlciA9PT0gdW5kZikgJiYgKG91dHB1dC5maWx0ZXIgPSBzZWxmLl9hY3RpdmVGaWx0ZXIpO1xyXG5cdFx0XHQoY29tbWFuZC5zb3J0ID09PSB1bmRmKSAmJiAob3V0cHV0LnNvcnQgPSBzZWxmLl9hY3RpdmVTb3J0KTtcclxuXHRcdFx0KG91dHB1dC5maWx0ZXIgPT09IHNlbGYuc2VsZWN0b3JzLnRhcmdldCkgJiYgKG91dHB1dC5maWx0ZXIgPSAnYWxsJyk7XHJcblx0XHRcdFxyXG5cdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgMjsgaSsrKXtcclxuXHRcdFx0XHQkZWwgPSBzZWxmLmNvbnRyb2xzLmxpdmUgPyAkKHNlbGYuc2VsZWN0b3JzW3R5cGVdKSA6IHNlbGZbJ18kJyt0eXBlKydCdXR0b25zJ107XHJcblx0XHRcdFx0JGVsICYmIHVwZGF0ZSgkZWwsICdbZGF0YS0nK3R5cGUrJz1cIicrb3V0cHV0W3R5cGVdKydcIl0nKTtcclxuXHRcdFx0XHR0eXBlID0gJ3NvcnQnO1xyXG5cdFx0XHR9XHJcblx0XHRcdFxyXG5cdFx0XHRzZWxmLl9leGVjQWN0aW9uKCdfdXBkYXRlQ29udHJvbHMnLCAxLCBhcmd1bWVudHMpO1xyXG5cdFx0fSxcclxuXHRcdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBGaWx0ZXIgKHByaXZhdGUpXHJcblx0XHQgKiBAc2luY2UgMi4wLjBcclxuXHRcdCAqL1xyXG5cdFx0XHJcblx0XHRfZmlsdGVyOiBmdW5jdGlvbigpe1xyXG5cdFx0XHR2YXIgc2VsZiA9IHRoaXM7XHJcblx0XHRcdFxyXG5cdFx0XHRzZWxmLl9leGVjQWN0aW9uKCdfZmlsdGVyJywgMCk7XHJcblx0XHRcdFxyXG5cdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgc2VsZi5fJHRhcmdldHMubGVuZ3RoOyBpKyspe1xyXG5cdFx0XHRcdHZhciAkdGFyZ2V0ID0gJChzZWxmLl8kdGFyZ2V0c1tpXSk7XHJcblx0XHRcdFx0XHJcblx0XHRcdFx0aWYoJHRhcmdldC5pcyhzZWxmLl9hY3RpdmVGaWx0ZXIpKXtcclxuXHRcdFx0XHRcdHNlbGYuXyRzaG93ID0gc2VsZi5fJHNob3cuYWRkKCR0YXJnZXQpO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRzZWxmLl8kaGlkZSA9IHNlbGYuXyRoaWRlLmFkZCgkdGFyZ2V0KTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0XHJcblx0XHRcdHNlbGYuX2V4ZWNBY3Rpb24oJ19maWx0ZXInLCAxKTtcclxuXHRcdH0sXHJcblx0XHRcclxuXHRcdC8qKlxyXG5cdFx0ICogU29ydCAocHJpdmF0ZSlcclxuXHRcdCAqIEBzaW5jZSAyLjAuMFxyXG5cdFx0ICovXHJcblx0XHRcclxuXHRcdF9zb3J0OiBmdW5jdGlvbigpe1xyXG5cdFx0XHR2YXIgc2VsZiA9IHRoaXMsXHJcblx0XHRcdFx0YXJyYXlTaHVmZmxlID0gZnVuY3Rpb24ob2xkQXJyYXkpe1xyXG5cdFx0XHRcdFx0dmFyIG5ld0FycmF5ID0gb2xkQXJyYXkuc2xpY2UoKSxcclxuXHRcdFx0XHRcdFx0bGVuID0gbmV3QXJyYXkubGVuZ3RoLFxyXG5cdFx0XHRcdFx0XHRpID0gbGVuO1xyXG5cclxuXHRcdFx0XHRcdHdoaWxlKGktLSl7XHJcblx0XHRcdFx0XHRcdHZhciBwID0gcGFyc2VJbnQoTWF0aC5yYW5kb20oKSpsZW4pO1xyXG5cdFx0XHRcdFx0XHR2YXIgdCA9IG5ld0FycmF5W2ldO1xyXG5cdFx0XHRcdFx0XHRuZXdBcnJheVtpXSA9IG5ld0FycmF5W3BdO1xyXG5cdFx0XHRcdFx0XHRuZXdBcnJheVtwXSA9IHQ7XHJcblx0XHRcdFx0XHR9O1xyXG5cdFx0XHRcdFx0cmV0dXJuIG5ld0FycmF5OyBcclxuXHRcdFx0XHR9O1xyXG5cdFx0XHRcdFxyXG5cdFx0XHRzZWxmLl9leGVjQWN0aW9uKCdfc29ydCcsIDApO1xyXG5cdFx0XHRcclxuXHRcdFx0c2VsZi5fc3RhcnRPcmRlciA9IFtdO1xyXG5cdFx0XHRcclxuXHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IHNlbGYuXyR0YXJnZXRzLmxlbmd0aDsgaSsrKXtcclxuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gc2VsZi5fJHRhcmdldHNbaV07XHJcblx0XHRcdFx0XHJcblx0XHRcdFx0c2VsZi5fc3RhcnRPcmRlci5wdXNoKHRhcmdldCk7XHJcblx0XHRcdH1cclxuXHRcdFx0XHJcblx0XHRcdHN3aXRjaChzZWxmLl9uZXdTb3J0WzBdLnNvcnRCeSl7XHJcblx0XHRcdFx0Y2FzZSAnZGVmYXVsdCc6XHJcblx0XHRcdFx0XHRzZWxmLl9uZXdPcmRlciA9IHNlbGYuX29yaWdPcmRlcjtcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdGNhc2UgJ3JhbmRvbSc6XHJcblx0XHRcdFx0XHRzZWxmLl9uZXdPcmRlciA9IGFycmF5U2h1ZmZsZShzZWxmLl9zdGFydE9yZGVyKTtcclxuXHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdGNhc2UgJ2N1c3RvbSc6XHJcblx0XHRcdFx0XHRzZWxmLl9uZXdPcmRlciA9IHNlbGYuX25ld1NvcnRbMF0ub3JkZXI7XHJcblx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRkZWZhdWx0OlxyXG5cdFx0XHRcdFx0c2VsZi5fbmV3T3JkZXIgPSBzZWxmLl9zdGFydE9yZGVyLmNvbmNhdCgpLnNvcnQoZnVuY3Rpb24oYSwgYil7XHJcblx0XHRcdFx0XHRcdHJldHVybiBzZWxmLl9jb21wYXJlKGEsIGIpO1xyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdH1cclxuXHRcdFx0XHJcblx0XHRcdHNlbGYuX2V4ZWNBY3Rpb24oJ19zb3J0JywgMSk7XHJcblx0XHR9LFxyXG5cdFx0XHJcblx0XHQvKipcclxuXHRcdCAqIENvbXBhcmUgQWxnb3JpdGhtXHJcblx0XHQgKiBAc2luY2UgMi4wLjBcclxuXHRcdCAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gYVxyXG5cdFx0ICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfSBiXHJcblx0XHQgKiBAcGFyYW0ge251bWJlcn0gZGVwdGggKHJlY3Vyc2lvbilcclxuXHRcdCAqIEByZXR1cm4ge251bWJlcn1cclxuXHRcdCAqL1xyXG5cdFx0XHJcblx0XHRfY29tcGFyZTogZnVuY3Rpb24oYSwgYiwgZGVwdGgpe1xyXG5cdFx0XHRkZXB0aCA9IGRlcHRoID8gZGVwdGggOiAwO1xyXG5cdFx0XHJcblx0XHRcdHZhciBzZWxmID0gdGhpcyxcclxuXHRcdFx0XHRvcmRlciA9IHNlbGYuX25ld1NvcnRbZGVwdGhdLm9yZGVyLFxyXG5cdFx0XHRcdGdldERhdGEgPSBmdW5jdGlvbihlbCl7XHJcblx0XHRcdFx0XHRyZXR1cm4gZWwuZGF0YXNldFtzZWxmLl9uZXdTb3J0W2RlcHRoXS5zb3J0QnldIHx8IDA7XHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHRhdHRyQSA9IGlzTmFOKGdldERhdGEoYSkgKiAxKSA/IGdldERhdGEoYSkudG9Mb3dlckNhc2UoKSA6IGdldERhdGEoYSkgKiAxLFxyXG5cdFx0XHRcdGF0dHJCID0gaXNOYU4oZ2V0RGF0YShiKSAqIDEpID8gZ2V0RGF0YShiKS50b0xvd2VyQ2FzZSgpIDogZ2V0RGF0YShiKSAqIDE7XHJcblx0XHRcdFx0XHJcblx0XHRcdGlmKGF0dHJBIDwgYXR0ckIpXHJcblx0XHRcdFx0cmV0dXJuIG9yZGVyID09PSAnYXNjJyA/IC0xIDogMTtcclxuXHRcdFx0aWYoYXR0ckEgPiBhdHRyQilcclxuXHRcdFx0XHRyZXR1cm4gb3JkZXIgPT09ICdhc2MnID8gMSA6IC0xO1xyXG5cdFx0XHRpZihhdHRyQSA9PT0gYXR0ckIgJiYgc2VsZi5fbmV3U29ydC5sZW5ndGggPiBkZXB0aCsxKVxyXG5cdFx0XHRcdHJldHVybiBzZWxmLl9jb21wYXJlKGEsIGIsIGRlcHRoKzEpO1xyXG5cclxuXHRcdFx0cmV0dXJuIDA7XHJcblx0XHR9LFxyXG5cdFx0XHJcblx0XHQvKipcclxuXHRcdCAqIFByaW50IFNvcnRcclxuXHRcdCAqIEBzaW5jZSAyLjAuMFxyXG5cdFx0ICogQHBhcmFtIHtib29sZWFufSByZXNldFxyXG5cdFx0ICovXHJcblx0XHRcclxuXHRcdF9wcmludFNvcnQ6IGZ1bmN0aW9uKHJlc2V0KXtcclxuXHRcdFx0dmFyIHNlbGYgPSB0aGlzLFxyXG5cdFx0XHRcdG9yZGVyID0gcmVzZXQgPyBzZWxmLl9zdGFydE9yZGVyIDogc2VsZi5fbmV3T3JkZXIsXHJcblx0XHRcdFx0dGFyZ2V0cyA9IHNlbGYuXyRwYXJlbnRbMF0ucXVlcnlTZWxlY3RvckFsbChzZWxmLnNlbGVjdG9ycy50YXJnZXQpLFxyXG5cdFx0XHRcdG5leHRTaWJsaW5nID0gdGFyZ2V0cy5sZW5ndGggPyB0YXJnZXRzW3RhcmdldHMubGVuZ3RoIC0xXS5uZXh0RWxlbWVudFNpYmxpbmcgOiBudWxsLFxyXG5cdFx0XHRcdGZyYWcgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XHJcblx0XHRcdFx0XHJcblx0XHRcdHNlbGYuX2V4ZWNBY3Rpb24oJ19wcmludFNvcnQnLCAwLCBhcmd1bWVudHMpO1xyXG5cdFx0XHRcclxuXHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IHRhcmdldHMubGVuZ3RoOyBpKyspe1xyXG5cdFx0XHRcdHZhciB0YXJnZXQgPSB0YXJnZXRzW2ldLFxyXG5cdFx0XHRcdFx0d2hpdGVTcGFjZSA9IHRhcmdldC5uZXh0U2libGluZztcclxuXHJcblx0XHRcdFx0aWYodGFyZ2V0LnN0eWxlLnBvc2l0aW9uID09PSAnYWJzb2x1dGUnKSBjb250aW51ZTtcclxuXHRcdFx0XHJcblx0XHRcdFx0aWYod2hpdGVTcGFjZSAmJiB3aGl0ZVNwYWNlLm5vZGVOYW1lID09PSAnI3RleHQnKXtcclxuXHRcdFx0XHRcdHNlbGYuXyRwYXJlbnRbMF0ucmVtb3ZlQ2hpbGQod2hpdGVTcGFjZSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdHNlbGYuXyRwYXJlbnRbMF0ucmVtb3ZlQ2hpbGQodGFyZ2V0KTtcclxuXHRcdFx0fVxyXG5cdFx0XHRcclxuXHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IG9yZGVyLmxlbmd0aDsgaSsrKXtcclxuXHRcdFx0XHR2YXIgZWwgPSBvcmRlcltpXTtcclxuXHJcblx0XHRcdFx0aWYoc2VsZi5fbmV3U29ydFswXS5zb3J0QnkgPT09ICdkZWZhdWx0JyAmJiBzZWxmLl9uZXdTb3J0WzBdLm9yZGVyID09PSAnZGVzYycgJiYgIXJlc2V0KXtcclxuXHRcdFx0XHRcdHZhciBmaXJzdENoaWxkID0gZnJhZy5maXJzdENoaWxkO1xyXG5cdFx0XHRcdFx0ZnJhZy5pbnNlcnRCZWZvcmUoZWwsIGZpcnN0Q2hpbGQpO1xyXG5cdFx0XHRcdFx0ZnJhZy5pbnNlcnRCZWZvcmUoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJyAnKSwgZWwpO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRmcmFnLmFwcGVuZENoaWxkKGVsKTtcclxuXHRcdFx0XHRcdGZyYWcuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJyAnKSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdFxyXG5cdFx0XHRuZXh0U2libGluZyA/IFxyXG5cdFx0XHRcdHNlbGYuXyRwYXJlbnRbMF0uaW5zZXJ0QmVmb3JlKGZyYWcsIG5leHRTaWJsaW5nKSA6XHJcblx0XHRcdFx0c2VsZi5fJHBhcmVudFswXS5hcHBlbmRDaGlsZChmcmFnKTtcclxuXHRcdFx0XHRcclxuXHRcdFx0c2VsZi5fZXhlY0FjdGlvbignX3ByaW50U29ydCcsIDEsIGFyZ3VtZW50cyk7XHJcblx0XHR9LFxyXG5cdFx0XHJcblx0XHQvKipcclxuXHRcdCAqIFBhcnNlIFNvcnRcclxuXHRcdCAqIEBzaW5jZSAyLjAuMFxyXG5cdFx0ICogQHBhcmFtIHtzdHJpbmd9IHNvcnRTdHJpbmdcclxuXHRcdCAqIEByZXR1cm4ge2FycmF5fSBuZXdTb3J0XHJcblx0XHQgKi9cclxuXHRcdFxyXG5cdFx0X3BhcnNlU29ydDogZnVuY3Rpb24oc29ydFN0cmluZyl7XHJcblx0XHRcdHZhciBzZWxmID0gdGhpcyxcclxuXHRcdFx0XHRydWxlcyA9IHR5cGVvZiBzb3J0U3RyaW5nID09PSAnc3RyaW5nJyA/IHNvcnRTdHJpbmcuc3BsaXQoJyAnKSA6IFtzb3J0U3RyaW5nXSxcclxuXHRcdFx0XHRuZXdTb3J0ID0gW107XHJcblx0XHRcdFx0XHJcblx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCBydWxlcy5sZW5ndGg7IGkrKyl7XHJcblx0XHRcdFx0dmFyIHJ1bGUgPSB0eXBlb2Ygc29ydFN0cmluZyA9PT0gJ3N0cmluZycgPyBydWxlc1tpXS5zcGxpdCgnOicpIDogWydjdXN0b20nLCBydWxlc1tpXV0sXHJcblx0XHRcdFx0XHRydWxlT2JqID0ge1xyXG5cdFx0XHRcdFx0XHRzb3J0Qnk6IHNlbGYuX2hlbHBlcnMuX2NhbWVsQ2FzZShydWxlWzBdKSxcclxuXHRcdFx0XHRcdFx0b3JkZXI6IHJ1bGVbMV0gfHwgJ2FzYydcclxuXHRcdFx0XHRcdH07XHJcblx0XHRcdFx0XHRcclxuXHRcdFx0XHRuZXdTb3J0LnB1c2gocnVsZU9iaik7XHJcblx0XHRcdFx0XHJcblx0XHRcdFx0aWYocnVsZU9iai5zb3J0QnkgPT09ICdkZWZhdWx0JyB8fCBydWxlT2JqLnNvcnRCeSA9PT0gJ3JhbmRvbScpIGJyZWFrO1xyXG5cdFx0XHR9XHJcblx0XHRcdFxyXG5cdFx0XHRyZXR1cm4gc2VsZi5fZXhlY0ZpbHRlcignX3BhcnNlU29ydCcsIG5ld1NvcnQsIGFyZ3VtZW50cyk7XHJcblx0XHR9LFxyXG5cdFx0XHJcblx0XHQvKipcclxuXHRcdCAqIFBhcnNlIEVmZmVjdHNcclxuXHRcdCAqIEBzaW5jZSAyLjAuMFxyXG5cdFx0ICogQHJldHVybiB7b2JqZWN0fSBlZmZlY3RzXHJcblx0XHQgKi9cclxuXHRcdFxyXG5cdFx0X3BhcnNlRWZmZWN0czogZnVuY3Rpb24oKXtcclxuXHRcdFx0dmFyIHNlbGYgPSB0aGlzLFxyXG5cdFx0XHRcdGVmZmVjdHMgPSB7XHJcblx0XHRcdFx0XHRvcGFjaXR5OiAnJyxcclxuXHRcdFx0XHRcdHRyYW5zZm9ybUluOiAnJyxcclxuXHRcdFx0XHRcdHRyYW5zZm9ybU91dDogJycsXHJcblx0XHRcdFx0XHRmaWx0ZXI6ICcnXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHRwYXJzZSA9IGZ1bmN0aW9uKGVmZmVjdCwgZXh0cmFjdCwgcmV2ZXJzZSl7XHJcblx0XHRcdFx0XHRpZihzZWxmLmFuaW1hdGlvbi5lZmZlY3RzLmluZGV4T2YoZWZmZWN0KSA+IC0xKXtcclxuXHRcdFx0XHRcdFx0aWYoZXh0cmFjdCl7XHJcblx0XHRcdFx0XHRcdFx0dmFyIHByb3BJbmRleCA9IHNlbGYuYW5pbWF0aW9uLmVmZmVjdHMuaW5kZXhPZihlZmZlY3QrJygnKTtcclxuXHRcdFx0XHRcdFx0XHRpZihwcm9wSW5kZXggPiAtMSl7XHJcblx0XHRcdFx0XHRcdFx0XHR2YXIgc3RyID0gc2VsZi5hbmltYXRpb24uZWZmZWN0cy5zdWJzdHJpbmcocHJvcEluZGV4KSxcclxuXHRcdFx0XHRcdFx0XHRcdFx0bWF0Y2ggPSAvXFwoKFteKV0rKVxcKS8uZXhlYyhzdHIpLFxyXG5cdFx0XHRcdFx0XHRcdFx0XHR2YWwgPSBtYXRjaFsxXTtcclxuXHJcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiB7dmFsOiB2YWx9O1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdG5lZ2F0ZSA9IGZ1bmN0aW9uKHZhbHVlLCBpbnZlcnQpe1xyXG5cdFx0XHRcdFx0aWYoaW52ZXJ0KXtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlLmNoYXJBdCgwKSA9PT0gJy0nID8gdmFsdWUuc3Vic3RyKDEsIHZhbHVlLmxlbmd0aCkgOiAnLScrdmFsdWU7XHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHRidWlsZFRyYW5zZm9ybSA9IGZ1bmN0aW9uKGtleSwgaW52ZXJ0KXtcclxuXHRcdFx0XHRcdHZhciB0cmFuc2Zvcm1zID0gW1xyXG5cdFx0XHRcdFx0XHRbJ3NjYWxlJywgJy4wMSddLFxyXG5cdFx0XHRcdFx0XHRbJ3RyYW5zbGF0ZVgnLCAnMjBweCddLFxyXG5cdFx0XHRcdFx0XHRbJ3RyYW5zbGF0ZVknLCAnMjBweCddLFxyXG5cdFx0XHRcdFx0XHRbJ3RyYW5zbGF0ZVonLCAnMjBweCddLFxyXG5cdFx0XHRcdFx0XHRbJ3JvdGF0ZVgnLCAnOTBkZWcnXSxcclxuXHRcdFx0XHRcdFx0Wydyb3RhdGVZJywgJzkwZGVnJ10sXHJcblx0XHRcdFx0XHRcdFsncm90YXRlWicsICcxODBkZWcnXSxcclxuXHRcdFx0XHRcdF07XHJcblx0XHRcdFx0XHRcclxuXHRcdFx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCB0cmFuc2Zvcm1zLmxlbmd0aDsgaSsrKXtcclxuXHRcdFx0XHRcdFx0dmFyIHByb3AgPSB0cmFuc2Zvcm1zW2ldWzBdLFxyXG5cdFx0XHRcdFx0XHRcdGRlZiA9IHRyYW5zZm9ybXNbaV1bMV0sXHJcblx0XHRcdFx0XHRcdFx0aW52ZXJ0ZWQgPSBpbnZlcnQgJiYgcHJvcCAhPT0gJ3NjYWxlJztcclxuXHRcdFx0XHRcdFx0XHRcclxuXHRcdFx0XHRcdFx0ZWZmZWN0c1trZXldICs9IHBhcnNlKHByb3ApID8gcHJvcCsnKCcrbmVnYXRlKHBhcnNlKHByb3AsIHRydWUpLnZhbCB8fCBkZWYsIGludmVydGVkKSsnKSAnIDogJyc7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fTtcclxuXHRcdFx0XHJcblx0XHRcdGVmZmVjdHMub3BhY2l0eSA9IHBhcnNlKCdmYWRlJykgPyBwYXJzZSgnZmFkZScsdHJ1ZSkudmFsIHx8ICcwJyA6ICcxJztcclxuXHRcdFx0XHJcblx0XHRcdGJ1aWxkVHJhbnNmb3JtKCd0cmFuc2Zvcm1JbicpO1xyXG5cdFx0XHRcclxuXHRcdFx0c2VsZi5hbmltYXRpb24ucmV2ZXJzZU91dCA/IGJ1aWxkVHJhbnNmb3JtKCd0cmFuc2Zvcm1PdXQnLCB0cnVlKSA6IChlZmZlY3RzLnRyYW5zZm9ybU91dCA9IGVmZmVjdHMudHJhbnNmb3JtSW4pO1xyXG5cclxuXHRcdFx0ZWZmZWN0cy50cmFuc2l0aW9uID0ge307XHJcblx0XHRcdFxyXG5cdFx0XHRlZmZlY3RzLnRyYW5zaXRpb24gPSBzZWxmLl9nZXRQcmVmaXhlZENTUygndHJhbnNpdGlvbicsJ2FsbCAnK3NlbGYuYW5pbWF0aW9uLmR1cmF0aW9uKydtcyAnK3NlbGYuYW5pbWF0aW9uLmVhc2luZysnLCBvcGFjaXR5ICcrc2VsZi5hbmltYXRpb24uZHVyYXRpb24rJ21zIGxpbmVhcicpO1xyXG5cdFx0XHJcblx0XHRcdHNlbGYuYW5pbWF0aW9uLnN0YWdnZXIgPSBwYXJzZSgnc3RhZ2dlcicpID8gdHJ1ZSA6IGZhbHNlO1xyXG5cdFx0XHRzZWxmLmFuaW1hdGlvbi5zdGFnZ2VyRHVyYXRpb24gPSBwYXJzZUludChwYXJzZSgnc3RhZ2dlcicpID8gKHBhcnNlKCdzdGFnZ2VyJyx0cnVlKS52YWwgPyBwYXJzZSgnc3RhZ2dlcicsdHJ1ZSkudmFsIDogMTAwKSA6IDEwMCk7XHJcblxyXG5cdFx0XHRyZXR1cm4gc2VsZi5fZXhlY0ZpbHRlcignX3BhcnNlRWZmZWN0cycsIGVmZmVjdHMpO1xyXG5cdFx0fSxcclxuXHRcdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBCdWlsZCBTdGF0ZVxyXG5cdFx0ICogQHNpbmNlIDIuMC4wXHJcblx0XHQgKiBAcGFyYW0ge2Jvb2xlYW59IGZ1dHVyZVxyXG5cdFx0ICogQHJldHVybiB7b2JqZWN0fSBmdXR1cmVTdGF0ZVxyXG5cdFx0ICovXHJcblx0XHRcclxuXHRcdF9idWlsZFN0YXRlOiBmdW5jdGlvbihmdXR1cmUpe1xyXG5cdFx0XHR2YXIgc2VsZiA9IHRoaXMsXHJcblx0XHRcdFx0c3RhdGUgPSB7fTtcclxuXHRcdFx0XHJcblx0XHRcdHNlbGYuX2V4ZWNBY3Rpb24oJ19idWlsZFN0YXRlJywgMCk7XHJcblx0XHRcdFxyXG5cdFx0XHRzdGF0ZSA9IHtcclxuXHRcdFx0XHRhY3RpdmVGaWx0ZXI6IHNlbGYuX2FjdGl2ZUZpbHRlciA9PT0gJycgPyAnbm9uZScgOiBzZWxmLl9hY3RpdmVGaWx0ZXIsXHJcblx0XHRcdFx0YWN0aXZlU29ydDogZnV0dXJlICYmIHNlbGYuX25ld1NvcnRTdHJpbmcgPyBzZWxmLl9uZXdTb3J0U3RyaW5nIDogc2VsZi5fYWN0aXZlU29ydCxcclxuXHRcdFx0XHRmYWlsOiAhc2VsZi5fJHNob3cubGVuZ3RoICYmIHNlbGYuX2FjdGl2ZUZpbHRlciAhPT0gJycsXHJcblx0XHRcdFx0JHRhcmdldHM6IHNlbGYuXyR0YXJnZXRzLFxyXG5cdFx0XHRcdCRzaG93OiBzZWxmLl8kc2hvdyxcclxuXHRcdFx0XHQkaGlkZTogc2VsZi5fJGhpZGUsXHJcblx0XHRcdFx0dG90YWxUYXJnZXRzOiBzZWxmLl8kdGFyZ2V0cy5sZW5ndGgsXHJcblx0XHRcdFx0dG90YWxTaG93OiBzZWxmLl8kc2hvdy5sZW5ndGgsXHJcblx0XHRcdFx0dG90YWxIaWRlOiBzZWxmLl8kaGlkZS5sZW5ndGgsXHJcblx0XHRcdFx0ZGlzcGxheTogZnV0dXJlICYmIHNlbGYuX25ld0Rpc3BsYXkgPyBzZWxmLl9uZXdEaXNwbGF5IDogc2VsZi5sYXlvdXQuZGlzcGxheVxyXG5cdFx0XHR9O1xyXG5cdFx0XHRcclxuXHRcdFx0aWYoZnV0dXJlKXtcclxuXHRcdFx0XHRyZXR1cm4gc2VsZi5fZXhlY0ZpbHRlcignX2J1aWxkU3RhdGUnLCBzdGF0ZSk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0c2VsZi5fc3RhdGUgPSBzdGF0ZTtcclxuXHRcdFx0XHRcclxuXHRcdFx0XHRzZWxmLl9leGVjQWN0aW9uKCdfYnVpbGRTdGF0ZScsIDEpO1xyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cdFx0XHJcblx0XHQvKipcclxuXHRcdCAqIEdvIE1peFxyXG5cdFx0ICogQHNpbmNlIDIuMC4wXHJcblx0XHQgKiBAcGFyYW0ge2Jvb2xlYW59IGFuaW1hdGVcclxuXHRcdCAqL1xyXG5cdFx0XHJcblx0XHRfZ29NaXg6IGZ1bmN0aW9uKGFuaW1hdGUpe1xyXG5cdFx0XHR2YXIgc2VsZiA9IHRoaXMsXHJcblx0XHRcdFx0cGhhc2UxID0gZnVuY3Rpb24oKXtcclxuXHRcdFx0XHRcdGlmKHNlbGYuX2Nocm9tZSAmJiAoc2VsZi5fY2hyb21lID09PSAzMSkpe1xyXG5cdFx0XHRcdFx0XHRjaHJvbWVGaXgoc2VsZi5fJHBhcmVudFswXSk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcclxuXHRcdFx0XHRcdHNlbGYuX3NldEludGVyKCk7XHJcblx0XHRcdFx0XHRcclxuXHRcdFx0XHRcdHBoYXNlMigpO1xyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0cGhhc2UyID0gZnVuY3Rpb24oKXtcclxuXHRcdFx0XHRcdHZhciBzY3JvbGxUb3AgPSB3aW5kb3cucGFnZVlPZmZzZXQsXHJcblx0XHRcdFx0XHRcdHNjcm9sbExlZnQgPSB3aW5kb3cucGFnZVhPZmZzZXQsXHJcblx0XHRcdFx0XHRcdGRvY0hlaWdodCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxIZWlnaHQ7XHJcblxyXG5cdFx0XHRcdFx0c2VsZi5fZ2V0SW50ZXJNaXhEYXRhKCk7XHJcblx0XHRcdFx0XHRcclxuXHRcdFx0XHRcdHNlbGYuX3NldEZpbmFsKCk7XHJcblxyXG5cdFx0XHRcdFx0c2VsZi5fZ2V0RmluYWxNaXhEYXRhKCk7XHJcblxyXG5cdFx0XHRcdFx0KHdpbmRvdy5wYWdlWU9mZnNldCAhPT0gc2Nyb2xsVG9wKSAmJiB3aW5kb3cuc2Nyb2xsVG8oc2Nyb2xsTGVmdCwgc2Nyb2xsVG9wKTtcclxuXHJcblx0XHRcdFx0XHRzZWxmLl9wcmVwVGFyZ2V0cygpO1xyXG5cdFx0XHRcdFx0XHJcblx0XHRcdFx0XHRpZih3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKXtcclxuXHRcdFx0XHRcdFx0cmVxdWVzdEFuaW1hdGlvbkZyYW1lKHBoYXNlMyk7XHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XHJcblx0XHRcdFx0XHRcdFx0cGhhc2UzKCk7XHJcblx0XHRcdFx0XHRcdH0sMjApO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0cGhhc2UzID0gZnVuY3Rpb24oKXtcclxuXHRcdFx0XHRcdHNlbGYuX2FuaW1hdGVUYXJnZXRzKCk7XHJcblxyXG5cdFx0XHRcdFx0aWYoc2VsZi5fdGFyZ2V0c0JvdW5kID09PSAwKXtcclxuXHRcdFx0XHRcdFx0c2VsZi5fY2xlYW5VcCgpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0Y2hyb21lRml4ID0gZnVuY3Rpb24oZ3JpZCl7XHJcblx0XHRcdFx0XHR2YXIgcGFyZW50ID0gZ3JpZC5wYXJlbnRFbGVtZW50LFxyXG5cdFx0XHRcdFx0XHRwbGFjZWhvbGRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLFxyXG5cdFx0XHRcdFx0XHRmcmFnID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xyXG5cclxuXHRcdFx0XHRcdHBhcmVudC5pbnNlcnRCZWZvcmUocGxhY2Vob2xkZXIsIGdyaWQpO1xyXG5cdFx0XHRcdFx0ZnJhZy5hcHBlbmRDaGlsZChncmlkKTtcclxuXHRcdFx0XHRcdHBhcmVudC5yZXBsYWNlQ2hpbGQoZ3JpZCwgcGxhY2Vob2xkZXIpO1xyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0ZnV0dXJlU3RhdGUgPSBzZWxmLl9idWlsZFN0YXRlKHRydWUpO1xyXG5cdFx0XHRcdFxyXG5cdFx0XHRzZWxmLl9leGVjQWN0aW9uKCdfZ29NaXgnLCAwLCBhcmd1bWVudHMpO1xyXG5cdFx0XHRcdFxyXG5cdFx0XHQhc2VsZi5hbmltYXRpb24uZHVyYXRpb24gJiYgKGFuaW1hdGUgPSBmYWxzZSk7XHJcblxyXG5cdFx0XHRzZWxmLl9taXhpbmcgPSB0cnVlO1xyXG5cdFx0XHRcclxuXHRcdFx0c2VsZi5fJGNvbnRhaW5lci5yZW1vdmVDbGFzcyhzZWxmLmxheW91dC5jb250YWluZXJDbGFzc0ZhaWwpO1xyXG5cdFx0XHRcclxuXHRcdFx0aWYodHlwZW9mIHNlbGYuY2FsbGJhY2tzLm9uTWl4U3RhcnQgPT09ICdmdW5jdGlvbicpe1xyXG5cdFx0XHRcdHNlbGYuY2FsbGJhY2tzLm9uTWl4U3RhcnQuY2FsbChzZWxmLl9kb21Ob2RlLCBzZWxmLl9zdGF0ZSwgZnV0dXJlU3RhdGUsIHNlbGYpO1xyXG5cdFx0XHR9XHJcblx0XHRcdFxyXG5cdFx0XHRzZWxmLl8kY29udGFpbmVyLnRyaWdnZXIoJ21peFN0YXJ0JywgW3NlbGYuX3N0YXRlLCBmdXR1cmVTdGF0ZSwgc2VsZl0pO1xyXG5cdFx0XHRcclxuXHRcdFx0c2VsZi5fZ2V0T3JpZ01peERhdGEoKTtcclxuXHRcdFx0XHJcblx0XHRcdGlmKGFuaW1hdGUgJiYgIXNlbGYuX3N1Y2tNb2RlKXtcclxuXHRcdFx0XHJcblx0XHRcdFx0d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSA/XHJcblx0XHRcdFx0XHRyZXF1ZXN0QW5pbWF0aW9uRnJhbWUocGhhc2UxKSA6XHJcblx0XHRcdFx0XHRwaGFzZTEoKTtcclxuXHRcdFx0XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0c2VsZi5fY2xlYW5VcCgpO1xyXG5cdFx0XHR9XHJcblx0XHRcdFxyXG5cdFx0XHRzZWxmLl9leGVjQWN0aW9uKCdfZ29NaXgnLCAxLCBhcmd1bWVudHMpO1xyXG5cdFx0fSxcclxuXHRcdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBHZXQgVGFyZ2V0IERhdGFcclxuXHRcdCAqIEBzaW5jZSAyLjAuMFxyXG5cdFx0ICovXHJcblx0XHRcclxuXHRcdF9nZXRUYXJnZXREYXRhOiBmdW5jdGlvbihlbCwgc3RhZ2Upe1xyXG5cdFx0XHR2YXIgc2VsZiA9IHRoaXMsXHJcblx0XHRcdFx0ZWxTdHlsZTtcclxuXHRcdFx0XHJcblx0XHRcdGVsLmRhdGFzZXRbc3RhZ2UrJ1Bvc1gnXSA9IGVsLm9mZnNldExlZnQ7XHJcblx0XHRcdGVsLmRhdGFzZXRbc3RhZ2UrJ1Bvc1knXSA9IGVsLm9mZnNldFRvcDtcclxuXHJcblx0XHRcdGlmKHNlbGYuYW5pbWF0aW9uLmFuaW1hdGVSZXNpemVUYXJnZXRzKXtcclxuXHRcdFx0XHRlbFN0eWxlID0gIXNlbGYuX3N1Y2tNb2RlID8gXHJcblx0XHRcdFx0XHR3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCkgOiBcclxuXHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0bWFyZ2luQm90dG9tOiAnJyxcclxuXHRcdFx0XHRcdFx0bWFyZ2luUmlnaHQ6ICcnXHJcblx0XHRcdFx0XHR9O1xyXG5cdFx0XHRcclxuXHRcdFx0XHRlbC5kYXRhc2V0W3N0YWdlKydNYXJnaW5Cb3R0b20nXSA9IHBhcnNlSW50KGVsU3R5bGUubWFyZ2luQm90dG9tKTtcclxuXHRcdFx0XHRlbC5kYXRhc2V0W3N0YWdlKydNYXJnaW5SaWdodCddID0gcGFyc2VJbnQoZWxTdHlsZS5tYXJnaW5SaWdodCk7XHJcblx0XHRcdFx0ZWwuZGF0YXNldFtzdGFnZSsnV2lkdGgnXSA9IGVsLm9mZnNldFdpZHRoO1xyXG5cdFx0XHRcdGVsLmRhdGFzZXRbc3RhZ2UrJ0hlaWdodCddID0gZWwub2Zmc2V0SGVpZ2h0O1xyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cdFx0XHJcblx0XHQvKipcclxuXHRcdCAqIEdldCBPcmlnaW5hbCBNaXggRGF0YVxyXG5cdFx0ICogQHNpbmNlIDIuMC4wXHJcblx0XHQgKi9cclxuXHRcdFxyXG5cdFx0X2dldE9yaWdNaXhEYXRhOiBmdW5jdGlvbigpe1xyXG5cdFx0XHR2YXIgc2VsZiA9IHRoaXMsXHJcblx0XHRcdFx0cGFyZW50U3R5bGUgPSAhc2VsZi5fc3Vja01vZGUgPyB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShzZWxmLl8kcGFyZW50WzBdKSA6IHtib3hTaXppbmc6ICcnfSxcclxuXHRcdFx0XHRwYXJlbnRCUyA9IHBhcmVudFN0eWxlLmJveFNpemluZyB8fCBwYXJlbnRTdHlsZVtzZWxmLl92ZW5kb3IrJ0JveFNpemluZyddO1xyXG5cdFxyXG5cdFx0XHRzZWxmLl9pbmNQYWRkaW5nID0gKHBhcmVudEJTID09PSAnYm9yZGVyLWJveCcpO1xyXG5cdFx0XHRcclxuXHRcdFx0c2VsZi5fZXhlY0FjdGlvbignX2dldE9yaWdNaXhEYXRhJywgMCk7XHJcblx0XHRcdFxyXG5cdFx0XHQhc2VsZi5fc3Vja01vZGUgJiYgKHNlbGYuZWZmZWN0cyA9IHNlbGYuX3BhcnNlRWZmZWN0cygpKTtcclxuXHRcdFxyXG5cdFx0XHRzZWxmLl8kdG9IaWRlID0gc2VsZi5fJGhpZGUuZmlsdGVyKCc6dmlzaWJsZScpO1xyXG5cdFx0XHRzZWxmLl8kdG9TaG93ID0gc2VsZi5fJHNob3cuZmlsdGVyKCc6aGlkZGVuJyk7XHJcblx0XHRcdHNlbGYuXyRwcmUgPSBzZWxmLl8kdGFyZ2V0cy5maWx0ZXIoJzp2aXNpYmxlJyk7XHJcblxyXG5cdFx0XHRzZWxmLl9zdGFydEhlaWdodCA9IHNlbGYuX2luY1BhZGRpbmcgPyBcclxuXHRcdFx0XHRzZWxmLl8kcGFyZW50Lm91dGVySGVpZ2h0KCkgOiBcclxuXHRcdFx0XHRzZWxmLl8kcGFyZW50LmhlaWdodCgpO1xyXG5cdFx0XHRcdFxyXG5cdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgc2VsZi5fJHByZS5sZW5ndGg7IGkrKyl7XHJcblx0XHRcdFx0dmFyIGVsID0gc2VsZi5fJHByZVtpXTtcclxuXHRcdFx0XHRcclxuXHRcdFx0XHRzZWxmLl9nZXRUYXJnZXREYXRhKGVsLCAnb3JpZycpO1xyXG5cdFx0XHR9XHJcblx0XHRcdFxyXG5cdFx0XHRzZWxmLl9leGVjQWN0aW9uKCdfZ2V0T3JpZ01peERhdGEnLCAxKTtcclxuXHRcdH0sXHJcblx0XHRcclxuXHRcdC8qKlxyXG5cdFx0ICogU2V0IEludGVybWVkaWF0ZSBQb3NpdGlvbnNcclxuXHRcdCAqIEBzaW5jZSAyLjAuMFxyXG5cdFx0ICovXHJcblx0XHRcclxuXHRcdF9zZXRJbnRlcjogZnVuY3Rpb24oKXtcclxuXHRcdFx0dmFyIHNlbGYgPSB0aGlzO1xyXG5cdFx0XHRcclxuXHRcdFx0c2VsZi5fZXhlY0FjdGlvbignX3NldEludGVyJywgMCk7XHJcblx0XHRcdFxyXG5cdFx0XHRpZihzZWxmLl9jaGFuZ2luZ0xheW91dCAmJiBzZWxmLmFuaW1hdGlvbi5hbmltYXRlQ2hhbmdlTGF5b3V0KXtcclxuXHRcdFx0XHRzZWxmLl8kdG9TaG93LmNzcygnZGlzcGxheScsc2VsZi5fbmV3RGlzcGxheSk7XHJcblxyXG5cdFx0XHRcdGlmKHNlbGYuX2NoYW5naW5nQ2xhc3Mpe1xyXG5cdFx0XHRcdFx0c2VsZi5fJGNvbnRhaW5lclxyXG5cdFx0XHRcdFx0XHQucmVtb3ZlQ2xhc3Moc2VsZi5sYXlvdXQuY29udGFpbmVyQ2xhc3MpXHJcblx0XHRcdFx0XHRcdC5hZGRDbGFzcyhzZWxmLl9uZXdDbGFzcyk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHNlbGYuXyR0b1Nob3cuY3NzKCdkaXNwbGF5Jywgc2VsZi5sYXlvdXQuZGlzcGxheSk7XHJcblx0XHRcdH1cclxuXHRcdFx0XHJcblx0XHRcdHNlbGYuX2V4ZWNBY3Rpb24oJ19zZXRJbnRlcicsIDEpO1xyXG5cdFx0fSxcclxuXHRcdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBHZXQgSW50ZXJtZWRpYXRlIE1peCBEYXRhXHJcblx0XHQgKiBAc2luY2UgMi4wLjBcclxuXHRcdCAqL1xyXG5cdFx0XHJcblx0XHRfZ2V0SW50ZXJNaXhEYXRhOiBmdW5jdGlvbigpe1xyXG5cdFx0XHR2YXIgc2VsZiA9IHRoaXM7XHJcblx0XHRcdFxyXG5cdFx0XHRzZWxmLl9leGVjQWN0aW9uKCdfZ2V0SW50ZXJNaXhEYXRhJywgMCk7XHJcblx0XHRcdFxyXG5cdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgc2VsZi5fJHRvU2hvdy5sZW5ndGg7IGkrKyl7XHJcblx0XHRcdFx0dmFyIGVsID0gc2VsZi5fJHRvU2hvd1tpXTtcclxuXHRcdFx0XHRcdFxyXG5cdFx0XHRcdHNlbGYuX2dldFRhcmdldERhdGEoZWwsICdpbnRlcicpO1xyXG5cdFx0XHR9XHJcblx0XHRcdFxyXG5cdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgc2VsZi5fJHByZS5sZW5ndGg7IGkrKyl7XHJcblx0XHRcdFx0dmFyIGVsID0gc2VsZi5fJHByZVtpXTtcclxuXHRcdFx0XHRcdFxyXG5cdFx0XHRcdHNlbGYuX2dldFRhcmdldERhdGEoZWwsICdpbnRlcicpO1xyXG5cdFx0XHR9XHJcblx0XHRcdFxyXG5cdFx0XHRzZWxmLl9leGVjQWN0aW9uKCdfZ2V0SW50ZXJNaXhEYXRhJywgMSk7XHJcblx0XHR9LFxyXG5cdFx0XHJcblx0XHQvKipcclxuXHRcdCAqIFNldCBGaW5hbCBQb3NpdGlvbnNcclxuXHRcdCAqIEBzaW5jZSAyLjAuMFxyXG5cdFx0ICovXHJcblx0XHRcclxuXHRcdF9zZXRGaW5hbDogZnVuY3Rpb24oKXtcclxuXHRcdFx0dmFyIHNlbGYgPSB0aGlzO1xyXG5cdFx0XHRcclxuXHRcdFx0c2VsZi5fZXhlY0FjdGlvbignX3NldEZpbmFsJywgMCk7XHJcblx0XHRcdFxyXG5cdFx0XHRzZWxmLl9zb3J0aW5nICYmIHNlbGYuX3ByaW50U29ydCgpO1xyXG5cclxuXHRcdFx0c2VsZi5fJHRvSGlkZS5yZW1vdmVTdHlsZSgnZGlzcGxheScpO1xyXG5cdFx0XHRcclxuXHRcdFx0aWYoc2VsZi5fY2hhbmdpbmdMYXlvdXQgJiYgc2VsZi5hbmltYXRpb24uYW5pbWF0ZUNoYW5nZUxheW91dCl7XHJcblx0XHRcdFx0c2VsZi5fJHByZS5jc3MoJ2Rpc3BsYXknLHNlbGYuX25ld0Rpc3BsYXkpO1xyXG5cdFx0XHR9XHJcblx0XHRcdFxyXG5cdFx0XHRzZWxmLl9leGVjQWN0aW9uKCdfc2V0RmluYWwnLCAxKTtcclxuXHRcdH0sXHJcblx0XHRcclxuXHRcdC8qKlxyXG5cdFx0ICogR2V0IEZpbmFsIE1peCBEYXRhXHJcblx0XHQgKiBAc2luY2UgMi4wLjBcclxuXHRcdCAqL1xyXG5cdFx0XHJcblx0XHRfZ2V0RmluYWxNaXhEYXRhOiBmdW5jdGlvbigpe1xyXG5cdFx0XHR2YXIgc2VsZiA9IHRoaXM7XHJcblx0XHRcdFxyXG5cdFx0XHRzZWxmLl9leGVjQWN0aW9uKCdfZ2V0RmluYWxNaXhEYXRhJywgMCk7XHJcblx0XHJcblx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCBzZWxmLl8kdG9TaG93Lmxlbmd0aDsgaSsrKXtcclxuXHRcdFx0XHR2YXIgZWwgPSBzZWxmLl8kdG9TaG93W2ldO1xyXG5cdFx0XHRcdFx0XHJcblx0XHRcdFx0c2VsZi5fZ2V0VGFyZ2V0RGF0YShlbCwgJ2ZpbmFsJyk7XHJcblx0XHRcdH1cclxuXHRcdFx0XHJcblx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCBzZWxmLl8kcHJlLmxlbmd0aDsgaSsrKXtcclxuXHRcdFx0XHR2YXIgZWwgPSBzZWxmLl8kcHJlW2ldO1xyXG5cdFx0XHRcdFx0XHJcblx0XHRcdFx0c2VsZi5fZ2V0VGFyZ2V0RGF0YShlbCwgJ2ZpbmFsJyk7XHJcblx0XHRcdH1cclxuXHRcdFx0XHJcblx0XHRcdHNlbGYuX25ld0hlaWdodCA9IHNlbGYuX2luY1BhZGRpbmcgPyBcclxuXHRcdFx0XHRzZWxmLl8kcGFyZW50Lm91dGVySGVpZ2h0KCkgOiBcclxuXHRcdFx0XHRzZWxmLl8kcGFyZW50LmhlaWdodCgpO1xyXG5cclxuXHRcdFx0c2VsZi5fc29ydGluZyAmJiBzZWxmLl9wcmludFNvcnQodHJ1ZSk7XHJcblx0XHJcblx0XHRcdHNlbGYuXyR0b1Nob3cucmVtb3ZlU3R5bGUoJ2Rpc3BsYXknKTtcclxuXHRcdFx0XHJcblx0XHRcdHNlbGYuXyRwcmUuY3NzKCdkaXNwbGF5JyxzZWxmLmxheW91dC5kaXNwbGF5KTtcclxuXHRcdFx0XHJcblx0XHRcdGlmKHNlbGYuX2NoYW5naW5nQ2xhc3MgJiYgc2VsZi5hbmltYXRpb24uYW5pbWF0ZUNoYW5nZUxheW91dCl7XHJcblx0XHRcdFx0c2VsZi5fJGNvbnRhaW5lclxyXG5cdFx0XHRcdFx0LnJlbW92ZUNsYXNzKHNlbGYuX25ld0NsYXNzKVxyXG5cdFx0XHRcdFx0LmFkZENsYXNzKHNlbGYubGF5b3V0LmNvbnRhaW5lckNsYXNzKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRcclxuXHRcdFx0c2VsZi5fZXhlY0FjdGlvbignX2dldEZpbmFsTWl4RGF0YScsIDEpO1xyXG5cdFx0fSxcclxuXHRcdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBQcmVwYXJlIFRhcmdldHNcclxuXHRcdCAqIEBzaW5jZSAyLjAuMFxyXG5cdFx0ICovXHJcblx0XHRcclxuXHRcdF9wcmVwVGFyZ2V0czogZnVuY3Rpb24oKXtcclxuXHRcdFx0dmFyIHNlbGYgPSB0aGlzLFxyXG5cdFx0XHRcdHRyYW5zZm9ybUNTUyA9IHtcclxuXHRcdFx0XHRcdF9pbjogc2VsZi5fZ2V0UHJlZml4ZWRDU1MoJ3RyYW5zZm9ybScsIHNlbGYuZWZmZWN0cy50cmFuc2Zvcm1JbiksXHJcblx0XHRcdFx0XHRfb3V0OiBzZWxmLl9nZXRQcmVmaXhlZENTUygndHJhbnNmb3JtJywgc2VsZi5lZmZlY3RzLnRyYW5zZm9ybU91dClcclxuXHRcdFx0XHR9O1xyXG5cclxuXHRcdFx0c2VsZi5fZXhlY0FjdGlvbignX3ByZXBUYXJnZXRzJywgMCk7XHJcblx0XHRcdFxyXG5cdFx0XHRpZihzZWxmLmFuaW1hdGlvbi5hbmltYXRlUmVzaXplQ29udGFpbmVyKXtcclxuXHRcdFx0XHRzZWxmLl8kcGFyZW50LmNzcygnaGVpZ2h0JyxzZWxmLl9zdGFydEhlaWdodCsncHgnKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRcclxuXHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IHNlbGYuXyR0b1Nob3cubGVuZ3RoOyBpKyspe1xyXG5cdFx0XHRcdHZhciBlbCA9IHNlbGYuXyR0b1Nob3dbaV0sXHJcblx0XHRcdFx0XHQkZWwgPSAkKGVsKTtcclxuXHRcdFx0XHRcclxuXHRcdFx0XHRlbC5zdHlsZS5vcGFjaXR5ID0gc2VsZi5lZmZlY3RzLm9wYWNpdHk7XHJcblx0XHRcdFx0ZWwuc3R5bGUuZGlzcGxheSA9IChzZWxmLl9jaGFuZ2luZ0xheW91dCAmJiBzZWxmLmFuaW1hdGlvbi5hbmltYXRlQ2hhbmdlTGF5b3V0KSA/XHJcblx0XHRcdFx0XHRzZWxmLl9uZXdEaXNwbGF5IDpcclxuXHRcdFx0XHRcdHNlbGYubGF5b3V0LmRpc3BsYXk7XHJcblx0XHRcdFx0XHRcclxuXHRcdFx0XHQkZWwuY3NzKHRyYW5zZm9ybUNTUy5faW4pO1xyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdGlmKHNlbGYuYW5pbWF0aW9uLmFuaW1hdGVSZXNpemVUYXJnZXRzKXtcclxuXHRcdFx0XHRcdGVsLnN0eWxlLndpZHRoID0gZWwuZGF0YXNldC5maW5hbFdpZHRoKydweCc7XHJcblx0XHRcdFx0XHRlbC5zdHlsZS5oZWlnaHQgPSBlbC5kYXRhc2V0LmZpbmFsSGVpZ2h0KydweCc7XHJcblx0XHRcdFx0XHRlbC5zdHlsZS5tYXJnaW5SaWdodCA9IC0oZWwuZGF0YXNldC5maW5hbFdpZHRoIC0gZWwuZGF0YXNldC5pbnRlcldpZHRoKSArIChlbC5kYXRhc2V0LmZpbmFsTWFyZ2luUmlnaHQgKiAxKSsncHgnO1xyXG5cdFx0XHRcdFx0ZWwuc3R5bGUubWFyZ2luQm90dG9tID0gLShlbC5kYXRhc2V0LmZpbmFsSGVpZ2h0IC0gZWwuZGF0YXNldC5pbnRlckhlaWdodCkgKyAoZWwuZGF0YXNldC5maW5hbE1hcmdpbkJvdHRvbSAqIDEpKydweCc7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgc2VsZi5fJHByZS5sZW5ndGg7IGkrKyl7XHJcblx0XHRcdFx0dmFyIGVsID0gc2VsZi5fJHByZVtpXSxcclxuXHRcdFx0XHRcdCRlbCA9ICQoZWwpLFxyXG5cdFx0XHRcdFx0dHJhbnNsYXRlID0ge1xyXG5cdFx0XHRcdFx0XHR4OiBlbC5kYXRhc2V0Lm9yaWdQb3NYIC0gZWwuZGF0YXNldC5pbnRlclBvc1gsXHJcblx0XHRcdFx0XHRcdHk6IGVsLmRhdGFzZXQub3JpZ1Bvc1kgLSBlbC5kYXRhc2V0LmludGVyUG9zWVxyXG5cdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdHRyYW5zZm9ybUNTUyA9IHNlbGYuX2dldFByZWZpeGVkQ1NTKCd0cmFuc2Zvcm0nLCd0cmFuc2xhdGUoJyt0cmFuc2xhdGUueCsncHgsJyt0cmFuc2xhdGUueSsncHgpJyk7XHJcblxyXG5cdFx0XHRcdCRlbC5jc3ModHJhbnNmb3JtQ1NTKTtcclxuXHRcdFx0XHRcclxuXHRcdFx0XHRpZihzZWxmLmFuaW1hdGlvbi5hbmltYXRlUmVzaXplVGFyZ2V0cyl7XHJcblx0XHRcdFx0XHRlbC5zdHlsZS53aWR0aCA9IGVsLmRhdGFzZXQub3JpZ1dpZHRoKydweCc7XHJcblx0XHRcdFx0XHRlbC5zdHlsZS5oZWlnaHQgPSBlbC5kYXRhc2V0Lm9yaWdIZWlnaHQrJ3B4JztcclxuXHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0aWYoZWwuZGF0YXNldC5vcmlnV2lkdGggLSBlbC5kYXRhc2V0LmZpbmFsV2lkdGgpe1xyXG5cdFx0XHRcdFx0XHRlbC5zdHlsZS5tYXJnaW5SaWdodCA9IC0oZWwuZGF0YXNldC5vcmlnV2lkdGggLSBlbC5kYXRhc2V0LmludGVyV2lkdGgpICsgKGVsLmRhdGFzZXQub3JpZ01hcmdpblJpZ2h0ICogMSkrJ3B4JztcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0aWYoZWwuZGF0YXNldC5vcmlnSGVpZ2h0IC0gZWwuZGF0YXNldC5maW5hbEhlaWdodCl7XHJcblx0XHRcdFx0XHRcdGVsLnN0eWxlLm1hcmdpbkJvdHRvbSA9IC0oZWwuZGF0YXNldC5vcmlnSGVpZ2h0IC0gZWwuZGF0YXNldC5pbnRlckhlaWdodCkgKyAoZWwuZGF0YXNldC5vcmlnTWFyZ2luQm90dG9tICogMSkgKydweCc7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdFxyXG5cdFx0XHRzZWxmLl9leGVjQWN0aW9uKCdfcHJlcFRhcmdldHMnLCAxKTtcclxuXHRcdH0sXHJcblx0XHRcclxuXHRcdC8qKlxyXG5cdFx0ICogQW5pbWF0ZSBUYXJnZXRzXHJcblx0XHQgKiBAc2luY2UgMi4wLjBcclxuXHRcdCAqL1xyXG5cdFx0XHJcblx0XHRfYW5pbWF0ZVRhcmdldHM6IGZ1bmN0aW9uKCl7XHJcblx0XHRcdHZhciBzZWxmID0gdGhpcztcclxuXHJcblx0XHRcdHNlbGYuX2V4ZWNBY3Rpb24oJ19hbmltYXRlVGFyZ2V0cycsIDApO1xyXG5cdFx0XHRcclxuXHRcdFx0c2VsZi5fdGFyZ2V0c0RvbmUgPSAwO1xyXG5cdFx0XHRzZWxmLl90YXJnZXRzQm91bmQgPSAwO1xyXG5cdFx0XHRcclxuXHRcdFx0c2VsZi5fJHBhcmVudFxyXG5cdFx0XHRcdC5jc3Moc2VsZi5fZ2V0UHJlZml4ZWRDU1MoJ3BlcnNwZWN0aXZlJywgc2VsZi5hbmltYXRpb24ucGVyc3BlY3RpdmVEaXN0YW5jZSsncHgnKSlcclxuXHRcdFx0XHQuY3NzKHNlbGYuX2dldFByZWZpeGVkQ1NTKCdwZXJzcGVjdGl2ZS1vcmlnaW4nLCBzZWxmLmFuaW1hdGlvbi5wZXJzcGVjdGl2ZU9yaWdpbikpO1xyXG5cdFx0XHRcclxuXHRcdFx0aWYoc2VsZi5hbmltYXRpb24uYW5pbWF0ZVJlc2l6ZUNvbnRhaW5lcil7XHJcblx0XHRcdFx0c2VsZi5fJHBhcmVudFxyXG5cdFx0XHRcdFx0LmNzcyhzZWxmLl9nZXRQcmVmaXhlZENTUygndHJhbnNpdGlvbicsJ2hlaWdodCAnK3NlbGYuYW5pbWF0aW9uLmR1cmF0aW9uKydtcyBlYXNlJykpXHJcblx0XHRcdFx0XHQuY3NzKCdoZWlnaHQnLHNlbGYuX25ld0hlaWdodCsncHgnKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRcclxuXHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IHNlbGYuXyR0b1Nob3cubGVuZ3RoOyBpKyspe1xyXG5cdFx0XHRcdHZhciBlbCA9IHNlbGYuXyR0b1Nob3dbaV0sXHJcblx0XHRcdFx0XHQkZWwgPSAkKGVsKSxcclxuXHRcdFx0XHRcdHRyYW5zbGF0ZSA9IHtcclxuXHRcdFx0XHRcdFx0eDogZWwuZGF0YXNldC5maW5hbFBvc1ggLSBlbC5kYXRhc2V0LmludGVyUG9zWCxcclxuXHRcdFx0XHRcdFx0eTogZWwuZGF0YXNldC5maW5hbFBvc1kgLSBlbC5kYXRhc2V0LmludGVyUG9zWVxyXG5cdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdGRlbGF5ID0gc2VsZi5fZ2V0RGVsYXkoaSksXHJcblx0XHRcdFx0XHR0b1Nob3dDU1MgPSB7fTtcclxuXHRcdFx0XHRcclxuXHRcdFx0XHRlbC5zdHlsZS5vcGFjaXR5ID0gJyc7XHJcblx0XHRcdFx0XHJcblx0XHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IDI7IGorKyl7XHJcblx0XHRcdFx0XHR2YXIgYSA9IGogPT09IDAgPyBhID0gc2VsZi5fcHJlZml4IDogJyc7XHJcblx0XHRcdFx0XHRcclxuXHRcdFx0XHRcdGlmKHNlbGYuX2ZmICYmIHNlbGYuX2ZmIDw9IDIwKXtcclxuXHRcdFx0XHRcdFx0dG9TaG93Q1NTW2ErJ3RyYW5zaXRpb24tcHJvcGVydHknXSA9ICdhbGwnO1xyXG5cdFx0XHRcdFx0XHR0b1Nob3dDU1NbYSsndHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb24nXSA9IHNlbGYuYW5pbWF0aW9uLmVhc2luZysnbXMnO1xyXG5cdFx0XHRcdFx0XHR0b1Nob3dDU1NbYSsndHJhbnNpdGlvbi1kdXJhdGlvbiddID0gc2VsZi5hbmltYXRpb24uZHVyYXRpb24rJ21zJztcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0dG9TaG93Q1NTW2ErJ3RyYW5zaXRpb24tZGVsYXknXSA9IGRlbGF5Kydtcyc7XHJcblx0XHRcdFx0XHR0b1Nob3dDU1NbYSsndHJhbnNmb3JtJ10gPSAndHJhbnNsYXRlKCcrdHJhbnNsYXRlLngrJ3B4LCcrdHJhbnNsYXRlLnkrJ3B4KSc7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdGlmKHNlbGYuZWZmZWN0cy50cmFuc2Zvcm0gfHwgc2VsZi5lZmZlY3RzLm9wYWNpdHkpe1xyXG5cdFx0XHRcdFx0c2VsZi5fYmluZFRhcmdldERvbmUoJGVsKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0XHJcblx0XHRcdFx0KHNlbGYuX2ZmICYmIHNlbGYuX2ZmIDw9IDIwKSA/IFxyXG5cdFx0XHRcdFx0JGVsLmNzcyh0b1Nob3dDU1MpIDogXHJcblx0XHRcdFx0XHQkZWwuY3NzKHNlbGYuZWZmZWN0cy50cmFuc2l0aW9uKS5jc3ModG9TaG93Q1NTKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRcclxuXHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IHNlbGYuXyRwcmUubGVuZ3RoOyBpKyspe1xyXG5cdFx0XHRcdHZhciBlbCA9IHNlbGYuXyRwcmVbaV0sXHJcblx0XHRcdFx0XHQkZWwgPSAkKGVsKSxcclxuXHRcdFx0XHRcdHRyYW5zbGF0ZSA9IHtcclxuXHRcdFx0XHRcdFx0eDogZWwuZGF0YXNldC5maW5hbFBvc1ggLSBlbC5kYXRhc2V0LmludGVyUG9zWCxcclxuXHRcdFx0XHRcdFx0eTogZWwuZGF0YXNldC5maW5hbFBvc1kgLSBlbC5kYXRhc2V0LmludGVyUG9zWVxyXG5cdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdGRlbGF5ID0gc2VsZi5fZ2V0RGVsYXkoaSk7XHJcblx0XHRcdFx0XHRcclxuXHRcdFx0XHRpZighKFxyXG5cdFx0XHRcdFx0ZWwuZGF0YXNldC5maW5hbFBvc1ggPT09IGVsLmRhdGFzZXQub3JpZ1Bvc1ggJiZcclxuXHRcdFx0XHRcdGVsLmRhdGFzZXQuZmluYWxQb3NZID09PSBlbC5kYXRhc2V0Lm9yaWdQb3NZXHJcblx0XHRcdFx0KSl7XHJcblx0XHRcdFx0XHRzZWxmLl9iaW5kVGFyZ2V0RG9uZSgkZWwpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRcclxuXHRcdFx0XHQkZWwuY3NzKHNlbGYuX2dldFByZWZpeGVkQ1NTKCd0cmFuc2l0aW9uJywgJ2FsbCAnK3NlbGYuYW5pbWF0aW9uLmR1cmF0aW9uKydtcyAnK3NlbGYuYW5pbWF0aW9uLmVhc2luZysnICcrZGVsYXkrJ21zJykpO1xyXG5cdFx0XHRcdCRlbC5jc3Moc2VsZi5fZ2V0UHJlZml4ZWRDU1MoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoJyt0cmFuc2xhdGUueCsncHgsJyt0cmFuc2xhdGUueSsncHgpJykpO1xyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdGlmKHNlbGYuYW5pbWF0aW9uLmFuaW1hdGVSZXNpemVUYXJnZXRzKXtcclxuXHRcdFx0XHRcdGlmKGVsLmRhdGFzZXQub3JpZ1dpZHRoIC0gZWwuZGF0YXNldC5maW5hbFdpZHRoICYmIGVsLmRhdGFzZXQuZmluYWxXaWR0aCAqIDEpe1xyXG5cdFx0XHRcdFx0XHRlbC5zdHlsZS53aWR0aCA9IGVsLmRhdGFzZXQuZmluYWxXaWR0aCsncHgnO1xyXG5cdFx0XHRcdFx0XHRlbC5zdHlsZS5tYXJnaW5SaWdodCA9IC0oZWwuZGF0YXNldC5maW5hbFdpZHRoIC0gZWwuZGF0YXNldC5pbnRlcldpZHRoKSsoZWwuZGF0YXNldC5maW5hbE1hcmdpblJpZ2h0ICogMSkrJ3B4JztcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0aWYoZWwuZGF0YXNldC5vcmlnSGVpZ2h0IC0gZWwuZGF0YXNldC5maW5hbEhlaWdodCAmJiBlbC5kYXRhc2V0LmZpbmFsSGVpZ2h0ICogMSl7XHJcblx0XHRcdFx0XHRcdGVsLnN0eWxlLmhlaWdodCA9IGVsLmRhdGFzZXQuZmluYWxIZWlnaHQrJ3B4JztcclxuXHRcdFx0XHRcdFx0ZWwuc3R5bGUubWFyZ2luQm90dG9tID0gLShlbC5kYXRhc2V0LmZpbmFsSGVpZ2h0IC0gZWwuZGF0YXNldC5pbnRlckhlaWdodCkrKGVsLmRhdGFzZXQuZmluYWxNYXJnaW5Cb3R0b20gKiAxKSArJ3B4JztcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0XHJcblx0XHRcdGlmKHNlbGYuX2NoYW5naW5nQ2xhc3Mpe1xyXG5cdFx0XHRcdHNlbGYuXyRjb250YWluZXJcclxuXHRcdFx0XHRcdC5yZW1vdmVDbGFzcyhzZWxmLmxheW91dC5jb250YWluZXJDbGFzcylcclxuXHRcdFx0XHRcdC5hZGRDbGFzcyhzZWxmLl9uZXdDbGFzcyk7XHJcblx0XHRcdH1cclxuXHRcdFx0XHJcblx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCBzZWxmLl8kdG9IaWRlLmxlbmd0aDsgaSsrKXtcclxuXHRcdFx0XHR2YXIgZWwgPSBzZWxmLl8kdG9IaWRlW2ldLFxyXG5cdFx0XHRcdFx0JGVsID0gJChlbCksXHJcblx0XHRcdFx0XHRkZWxheSA9IHNlbGYuX2dldERlbGF5KGkpLFxyXG5cdFx0XHRcdFx0dG9IaWRlQ1NTID0ge307XHJcblxyXG5cdFx0XHRcdGZvcih2YXIgaiA9IDA7IGo8MjsgaisrKXtcclxuXHRcdFx0XHRcdHZhciBhID0gaiA9PT0gMCA/IGEgPSBzZWxmLl9wcmVmaXggOiAnJztcclxuXHJcblx0XHRcdFx0XHR0b0hpZGVDU1NbYSsndHJhbnNpdGlvbi1kZWxheSddID0gZGVsYXkrJ21zJztcclxuXHRcdFx0XHRcdHRvSGlkZUNTU1thKyd0cmFuc2Zvcm0nXSA9IHNlbGYuZWZmZWN0cy50cmFuc2Zvcm1PdXQ7XHJcblx0XHRcdFx0XHR0b0hpZGVDU1Mub3BhY2l0eSA9IHNlbGYuZWZmZWN0cy5vcGFjaXR5O1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRcclxuXHRcdFx0XHQkZWwuY3NzKHNlbGYuZWZmZWN0cy50cmFuc2l0aW9uKS5jc3ModG9IaWRlQ1NTKTtcclxuXHRcdFx0XHJcblx0XHRcdFx0aWYoc2VsZi5lZmZlY3RzLnRyYW5zZm9ybSB8fCBzZWxmLmVmZmVjdHMub3BhY2l0eSl7XHJcblx0XHRcdFx0XHRzZWxmLl9iaW5kVGFyZ2V0RG9uZSgkZWwpO1xyXG5cdFx0XHRcdH07XHJcblx0XHRcdH1cclxuXHRcdFx0XHJcblx0XHRcdHNlbGYuX2V4ZWNBY3Rpb24oJ19hbmltYXRlVGFyZ2V0cycsIDEpO1xyXG5cclxuXHRcdH0sXHJcblx0XHRcclxuXHRcdC8qKlxyXG5cdFx0ICogQmluZCBUYXJnZXRzIFRyYW5zaXRpb25FbmRcclxuXHRcdCAqIEBzaW5jZSAyLjAuMFxyXG5cdFx0ICogQHBhcmFtIHtvYmplY3R9ICRlbFxyXG5cdFx0ICovXHJcblx0XHRcclxuXHRcdF9iaW5kVGFyZ2V0RG9uZTogZnVuY3Rpb24oJGVsKXtcclxuXHRcdFx0dmFyIHNlbGYgPSB0aGlzLFxyXG5cdFx0XHRcdGVsID0gJGVsWzBdO1xyXG5cdFx0XHRcdFxyXG5cdFx0XHRzZWxmLl9leGVjQWN0aW9uKCdfYmluZFRhcmdldERvbmUnLCAwLCBhcmd1bWVudHMpO1xyXG5cdFx0XHRcclxuXHRcdFx0aWYoIWVsLmRhdGFzZXQuYm91bmQpe1xyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdGVsLmRhdGFzZXQuYm91bmQgPSB0cnVlO1xyXG5cdFx0XHRcdHNlbGYuX3RhcmdldHNCb3VuZCsrO1xyXG5cdFx0XHRcclxuXHRcdFx0XHQkZWwub24oJ3dlYmtpdFRyYW5zaXRpb25FbmQubWl4SXRVcCB0cmFuc2l0aW9uZW5kLm1peEl0VXAnLGZ1bmN0aW9uKGUpe1xyXG5cdFx0XHRcdFx0aWYoXHJcblx0XHRcdFx0XHRcdChlLm9yaWdpbmFsRXZlbnQucHJvcGVydHlOYW1lLmluZGV4T2YoJ3RyYW5zZm9ybScpID4gLTEgfHwgXHJcblx0XHRcdFx0XHRcdGUub3JpZ2luYWxFdmVudC5wcm9wZXJ0eU5hbWUuaW5kZXhPZignb3BhY2l0eScpID4gLTEpICYmXHJcblx0XHRcdFx0XHRcdCQoZS5vcmlnaW5hbEV2ZW50LnRhcmdldCkuaXMoc2VsZi5zZWxlY3RvcnMudGFyZ2V0KVxyXG5cdFx0XHRcdFx0KXtcclxuXHRcdFx0XHRcdFx0JGVsLm9mZignLm1peEl0VXAnKTtcclxuXHRcdFx0XHRcdFx0ZGVsZXRlIGVsLmRhdGFzZXQuYm91bmQ7XHJcblx0XHRcdFx0XHRcdHNlbGYuX3RhcmdldERvbmUoKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fVxyXG5cdFx0XHRcclxuXHRcdFx0c2VsZi5fZXhlY0FjdGlvbignX2JpbmRUYXJnZXREb25lJywgMSwgYXJndW1lbnRzKTtcclxuXHRcdH0sXHJcblx0XHRcclxuXHRcdC8qKlxyXG5cdFx0ICogVGFyZ2V0IERvbmVcclxuXHRcdCAqIEBzaW5jZSAyLjAuMFxyXG5cdFx0ICovXHJcblx0XHRcclxuXHRcdF90YXJnZXREb25lOiBmdW5jdGlvbigpe1xyXG5cdFx0XHR2YXIgc2VsZiA9IHRoaXM7XHJcblx0XHRcdFxyXG5cdFx0XHRzZWxmLl9leGVjQWN0aW9uKCdfdGFyZ2V0RG9uZScsIDApO1xyXG5cdFx0XHRcclxuXHRcdFx0c2VsZi5fdGFyZ2V0c0RvbmUrKztcclxuXHRcdFx0XHJcblx0XHRcdChzZWxmLl90YXJnZXRzRG9uZSA9PT0gc2VsZi5fdGFyZ2V0c0JvdW5kKSAmJiBzZWxmLl9jbGVhblVwKCk7XHJcblx0XHRcdFxyXG5cdFx0XHRzZWxmLl9leGVjQWN0aW9uKCdfdGFyZ2V0RG9uZScsIDEpO1xyXG5cdFx0fSxcclxuXHRcdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBDbGVhbiBVcFxyXG5cdFx0ICogQHNpbmNlIDIuMC4wXHJcblx0XHQgKi9cclxuXHRcdFxyXG5cdFx0X2NsZWFuVXA6IGZ1bmN0aW9uKCl7XHJcblx0XHRcdHZhciBzZWxmID0gdGhpcyxcclxuXHRcdFx0XHR0YXJnZXRTdHlsZXMgPSBzZWxmLmFuaW1hdGlvbi5hbmltYXRlUmVzaXplVGFyZ2V0cyA/IFxyXG5cdFx0XHRcdFx0J3RyYW5zZm9ybSBvcGFjaXR5IHdpZHRoIGhlaWdodCBtYXJnaW4tYm90dG9tIG1hcmdpbi1yaWdodCcgOlxyXG5cdFx0XHRcdFx0J3RyYW5zZm9ybSBvcGFjaXR5JyxcclxuXHRcdFx0XHR1bkJyYWtlID0gZnVuY3Rpb24oKXtcclxuXHRcdFx0XHRcdHNlbGYuXyR0YXJnZXRzLnJlbW92ZVN0eWxlKCd0cmFuc2l0aW9uJywgc2VsZi5fcHJlZml4KTtcclxuXHRcdFx0XHR9O1xyXG5cdFx0XHRcdFxyXG5cdFx0XHRzZWxmLl9leGVjQWN0aW9uKCdfY2xlYW5VcCcsIDApO1xyXG5cdFx0XHRcclxuXHRcdFx0IXNlbGYuX2NoYW5naW5nTGF5b3V0ID9cclxuXHRcdFx0XHRzZWxmLl8kc2hvdy5jc3MoJ2Rpc3BsYXknLHNlbGYubGF5b3V0LmRpc3BsYXkpIDpcclxuXHRcdFx0XHRzZWxmLl8kc2hvdy5jc3MoJ2Rpc3BsYXknLHNlbGYuX25ld0Rpc3BsYXkpO1xyXG5cdFx0XHRcclxuXHRcdFx0c2VsZi5fJHRhcmdldHMuY3NzKHNlbGYuX2JyYWtlKTtcclxuXHRcdFx0XHJcblx0XHRcdHNlbGYuXyR0YXJnZXRzXHJcblx0XHRcdFx0LnJlbW92ZVN0eWxlKHRhcmdldFN0eWxlcywgc2VsZi5fcHJlZml4KVxyXG5cdFx0XHRcdC5yZW1vdmVBdHRyKCdkYXRhLWludGVyLXBvcy14IGRhdGEtaW50ZXItcG9zLXkgZGF0YS1maW5hbC1wb3MteCBkYXRhLWZpbmFsLXBvcy15IGRhdGEtb3JpZy1wb3MteCBkYXRhLW9yaWctcG9zLXkgZGF0YS1vcmlnLWhlaWdodCBkYXRhLW9yaWctd2lkdGggZGF0YS1maW5hbC1oZWlnaHQgZGF0YS1maW5hbC13aWR0aCBkYXRhLWludGVyLXdpZHRoIGRhdGEtaW50ZXItaGVpZ2h0IGRhdGEtb3JpZy1tYXJnaW4tcmlnaHQgZGF0YS1vcmlnLW1hcmdpbi1ib3R0b20gZGF0YS1pbnRlci1tYXJnaW4tcmlnaHQgZGF0YS1pbnRlci1tYXJnaW4tYm90dG9tIGRhdGEtZmluYWwtbWFyZ2luLXJpZ2h0IGRhdGEtZmluYWwtbWFyZ2luLWJvdHRvbScpO1xyXG5cdFx0XHRcdFxyXG5cdFx0XHRzZWxmLl8kaGlkZS5yZW1vdmVTdHlsZSgnZGlzcGxheScpO1xyXG5cdFx0XHRcclxuXHRcdFx0c2VsZi5fJHBhcmVudC5yZW1vdmVTdHlsZSgnaGVpZ2h0IHRyYW5zaXRpb24gcGVyc3BlY3RpdmUtZGlzdGFuY2UgcGVyc3BlY3RpdmUgcGVyc3BlY3RpdmUtb3JpZ2luLXggcGVyc3BlY3RpdmUtb3JpZ2luLXkgcGVyc3BlY3RpdmUtb3JpZ2luIHBlcnNwZWN0aXZlT3JpZ2luJywgc2VsZi5fcHJlZml4KTtcclxuXHRcdFx0XHJcblx0XHRcdGlmKHNlbGYuX3NvcnRpbmcpe1xyXG5cdFx0XHRcdHNlbGYuX3ByaW50U29ydCgpO1xyXG5cdFx0XHRcdHNlbGYuX2FjdGl2ZVNvcnQgPSBzZWxmLl9uZXdTb3J0U3RyaW5nO1xyXG5cdFx0XHRcdHNlbGYuX3NvcnRpbmcgPSBmYWxzZTtcclxuXHRcdFx0fVxyXG5cdFx0XHRcclxuXHRcdFx0aWYoc2VsZi5fY2hhbmdpbmdMYXlvdXQpe1xyXG5cdFx0XHRcdGlmKHNlbGYuX2NoYW5naW5nRGlzcGxheSl7XHJcblx0XHRcdFx0XHRzZWxmLmxheW91dC5kaXNwbGF5ID0gc2VsZi5fbmV3RGlzcGxheTtcclxuXHRcdFx0XHRcdHNlbGYuX2NoYW5naW5nRGlzcGxheSA9IGZhbHNlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRcclxuXHRcdFx0XHRpZihzZWxmLl9jaGFuZ2luZ0NsYXNzKXtcclxuXHRcdFx0XHRcdHNlbGYuXyRwYXJlbnQucmVtb3ZlQ2xhc3Moc2VsZi5sYXlvdXQuY29udGFpbmVyQ2xhc3MpLmFkZENsYXNzKHNlbGYuX25ld0NsYXNzKTtcclxuXHRcdFx0XHRcdHNlbGYubGF5b3V0LmNvbnRhaW5lckNsYXNzID0gc2VsZi5fbmV3Q2xhc3M7XHJcblx0XHRcdFx0XHRzZWxmLl9jaGFuZ2luZ0NsYXNzID0gZmFsc2U7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdHNlbGYuX2NoYW5naW5nTGF5b3V0ID0gZmFsc2U7XHJcblx0XHRcdH1cclxuXHRcdFx0XHJcblx0XHRcdHNlbGYuX3JlZnJlc2goKTtcclxuXHRcdFx0XHJcblx0XHRcdHNlbGYuX2J1aWxkU3RhdGUoKTtcclxuXHRcdFx0XHJcblx0XHRcdGlmKHNlbGYuX3N0YXRlLmZhaWwpe1xyXG5cdFx0XHRcdHNlbGYuXyRjb250YWluZXIuYWRkQ2xhc3Moc2VsZi5sYXlvdXQuY29udGFpbmVyQ2xhc3NGYWlsKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRcclxuXHRcdFx0c2VsZi5fJHNob3cgPSAkKCk7XHJcblx0XHRcdHNlbGYuXyRoaWRlID0gJCgpO1xyXG5cdFx0XHRcclxuXHRcdFx0aWYod2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSl7XHJcblx0XHRcdFx0cmVxdWVzdEFuaW1hdGlvbkZyYW1lKHVuQnJha2UpO1xyXG5cdFx0XHR9XHJcblx0XHRcdFxyXG5cdFx0XHRzZWxmLl9taXhpbmcgPSBmYWxzZTtcclxuXHRcdFx0XHJcblx0XHRcdGlmKHR5cGVvZiBzZWxmLmNhbGxiYWNrcy5fdXNlciA9PT0gJ2Z1bmN0aW9uJyl7XHJcblx0XHRcdFx0c2VsZi5jYWxsYmFja3MuX3VzZXIuY2FsbChzZWxmLl9kb21Ob2RlLCBzZWxmLl9zdGF0ZSwgc2VsZik7XHJcblx0XHRcdH1cclxuXHRcdFx0XHJcblx0XHRcdGlmKHR5cGVvZiBzZWxmLmNhbGxiYWNrcy5vbk1peEVuZCA9PT0gJ2Z1bmN0aW9uJyl7XHJcblx0XHRcdFx0c2VsZi5jYWxsYmFja3Mub25NaXhFbmQuY2FsbChzZWxmLl9kb21Ob2RlLCBzZWxmLl9zdGF0ZSwgc2VsZik7XHJcblx0XHRcdH1cclxuXHRcdFx0XHJcblx0XHRcdHNlbGYuXyRjb250YWluZXIudHJpZ2dlcignbWl4RW5kJywgW3NlbGYuX3N0YXRlLCBzZWxmXSk7XHJcblx0XHRcdFxyXG5cdFx0XHRpZihzZWxmLl9zdGF0ZS5mYWlsKXtcclxuXHRcdFx0XHQodHlwZW9mIHNlbGYuY2FsbGJhY2tzLm9uTWl4RmFpbCA9PT0gJ2Z1bmN0aW9uJykgJiYgc2VsZi5jYWxsYmFja3Mub25NaXhGYWlsLmNhbGwoc2VsZi5fZG9tTm9kZSwgc2VsZi5fc3RhdGUsIHNlbGYpO1xyXG5cdFx0XHRcdHNlbGYuXyRjb250YWluZXIudHJpZ2dlcignbWl4RmFpbCcsIFtzZWxmLl9zdGF0ZSwgc2VsZl0pO1xyXG5cdFx0XHR9XHJcblx0XHRcdFxyXG5cdFx0XHRpZihzZWxmLl9sb2FkaW5nKXtcclxuXHRcdFx0XHQodHlwZW9mIHNlbGYuY2FsbGJhY2tzLm9uTWl4TG9hZCA9PT0gJ2Z1bmN0aW9uJykgJiYgc2VsZi5jYWxsYmFja3Mub25NaXhMb2FkLmNhbGwoc2VsZi5fZG9tTm9kZSwgc2VsZi5fc3RhdGUsIHNlbGYpO1xyXG5cdFx0XHRcdHNlbGYuXyRjb250YWluZXIudHJpZ2dlcignbWl4TG9hZCcsIFtzZWxmLl9zdGF0ZSwgc2VsZl0pO1xyXG5cdFx0XHR9XHJcblx0XHRcdFxyXG5cdFx0XHRpZihzZWxmLl9xdWV1ZS5sZW5ndGgpe1xyXG5cdFx0XHRcdHNlbGYuX2V4ZWNBY3Rpb24oJ19xdWV1ZScsIDApO1xyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdHNlbGYubXVsdGlNaXgoc2VsZi5fcXVldWVbMF1bMF0sc2VsZi5fcXVldWVbMF1bMV0sc2VsZi5fcXVldWVbMF1bMl0pO1xyXG5cdFx0XHRcdHNlbGYuX3F1ZXVlLnNwbGljZSgwLCAxKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRcclxuXHRcdFx0c2VsZi5fZXhlY0FjdGlvbignX2NsZWFuVXAnLCAxKTtcclxuXHRcdFx0XHJcblx0XHRcdHNlbGYuX2xvYWRpbmcgPSBmYWxzZTtcclxuXHRcdH0sXHJcblx0XHRcclxuXHRcdC8qKlxyXG5cdFx0ICogR2V0IFByZWZpeGVkIENTU1xyXG5cdFx0ICogQHNpbmNlIDIuMC4wXHJcblx0XHQgKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHlcclxuXHRcdCAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxyXG5cdFx0ICogQHBhcmFtIHtib29sZWFufSBwcmVmaXhWYWx1ZVxyXG5cdFx0ICogQHJldHVybiB7b2JqZWN0fSBzdHlsZXNcclxuXHRcdCAqL1xyXG5cdFx0XHJcblx0XHRfZ2V0UHJlZml4ZWRDU1M6IGZ1bmN0aW9uKHByb3BlcnR5LCB2YWx1ZSwgcHJlZml4VmFsdWUpe1xyXG5cdFx0XHR2YXIgc2VsZiA9IHRoaXMsXHJcblx0XHRcdFx0c3R5bGVzID0ge30sXHJcblx0XHRcdFx0cHJlZml4ID0gJycsXHJcblx0XHRcdFx0aSA9IC0xO1xyXG5cdFx0XHJcblx0XHRcdGZvcihpID0gMDsgaSA8IDI7IGkrKyl7XHJcblx0XHRcdFx0cHJlZml4ID0gaSA9PT0gMCA/IHNlbGYuX3ByZWZpeCA6ICcnO1xyXG5cdFx0XHRcdHByZWZpeFZhbHVlID8gc3R5bGVzW3ByZWZpeCtwcm9wZXJ0eV0gPSBwcmVmaXgrdmFsdWUgOiBzdHlsZXNbcHJlZml4K3Byb3BlcnR5XSA9IHZhbHVlO1xyXG5cdFx0XHR9XHJcblx0XHRcdFxyXG5cdFx0XHRyZXR1cm4gc2VsZi5fZXhlY0ZpbHRlcignX2dldFByZWZpeGVkQ1NTJywgc3R5bGVzLCBhcmd1bWVudHMpO1xyXG5cdFx0fSxcclxuXHRcdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBHZXQgRGVsYXlcclxuXHRcdCAqIEBzaW5jZSAyLjAuMFxyXG5cdFx0ICogQHBhcmFtIHtudW1iZXJ9IGlcclxuXHRcdCAqIEByZXR1cm4ge251bWJlcn0gZGVsYXlcclxuXHRcdCAqL1xyXG5cdFx0XHJcblx0XHRfZ2V0RGVsYXk6IGZ1bmN0aW9uKGkpe1xyXG5cdFx0XHR2YXIgc2VsZiA9IHRoaXMsXHJcblx0XHRcdFx0biA9IHR5cGVvZiBzZWxmLmFuaW1hdGlvbi5zdGFnZ2VyU2VxdWVuY2UgPT09ICdmdW5jdGlvbicgPyBzZWxmLmFuaW1hdGlvbi5zdGFnZ2VyU2VxdWVuY2UuY2FsbChzZWxmLl9kb21Ob2RlLCBpLCBzZWxmLl9zdGF0ZSkgOiBpLFxyXG5cdFx0XHRcdGRlbGF5ID0gc2VsZi5hbmltYXRpb24uc3RhZ2dlciA/IG4gKiBzZWxmLmFuaW1hdGlvbi5zdGFnZ2VyRHVyYXRpb24gOiAwO1xyXG5cdFx0XHRcdFxyXG5cdFx0XHRyZXR1cm4gc2VsZi5fZXhlY0ZpbHRlcignX2dldERlbGF5JywgZGVsYXksIGFyZ3VtZW50cyk7XHJcblx0XHR9LFxyXG5cdFx0XHJcblx0XHQvKipcclxuXHRcdCAqIFBhcnNlIE11bHRpTWl4IEFyZ3VtZW50c1xyXG5cdFx0ICogQHNpbmNlIDIuMC4wXHJcblx0XHQgKiBAcGFyYW0ge2FycmF5fSBhcmdzXHJcblx0XHQgKiBAcmV0dXJuIHtvYmplY3R9IG91dHB1dFxyXG5cdFx0ICovXHJcblx0XHRcclxuXHRcdF9wYXJzZU11bHRpTWl4QXJnczogZnVuY3Rpb24oYXJncyl7XHJcblx0XHRcdHZhciBzZWxmID0gdGhpcyxcclxuXHRcdFx0XHRvdXRwdXQgPSB7XHJcblx0XHRcdFx0XHRjb21tYW5kOiBudWxsLFxyXG5cdFx0XHRcdFx0YW5pbWF0ZTogc2VsZi5hbmltYXRpb24uZW5hYmxlLFxyXG5cdFx0XHRcdFx0Y2FsbGJhY2s6IG51bGxcclxuXHRcdFx0XHR9O1xyXG5cdFx0XHRcdFxyXG5cdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKyl7XHJcblx0XHRcdFx0dmFyIGFyZyA9IGFyZ3NbaV07XHJcblxyXG5cdFx0XHRcdGlmKGFyZyAhPT0gbnVsbCl7XHJcblx0XHRcdFx0XHRpZih0eXBlb2YgYXJnID09PSAnb2JqZWN0JyB8fCB0eXBlb2YgYXJnID09PSAnc3RyaW5nJyl7XHJcblx0XHRcdFx0XHRcdG91dHB1dC5jb21tYW5kID0gYXJnO1xyXG5cdFx0XHRcdFx0fSBlbHNlIGlmKHR5cGVvZiBhcmcgPT09ICdib29sZWFuJyl7XHJcblx0XHRcdFx0XHRcdG91dHB1dC5hbmltYXRlID0gYXJnO1xyXG5cdFx0XHRcdFx0fSBlbHNlIGlmKHR5cGVvZiBhcmcgPT09ICdmdW5jdGlvbicpe1xyXG5cdFx0XHRcdFx0XHRvdXRwdXQuY2FsbGJhY2sgPSBhcmc7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdFxyXG5cdFx0XHRyZXR1cm4gc2VsZi5fZXhlY0ZpbHRlcignX3BhcnNlTXVsdGlNaXhBcmdzJywgb3V0cHV0LCBhcmd1bWVudHMpO1xyXG5cdFx0fSxcclxuXHRcdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBQYXJzZSBJbnNlcnQgQXJndW1lbnRzXHJcblx0XHQgKiBAc2luY2UgMi4wLjBcclxuXHRcdCAqIEBwYXJhbSB7YXJyYXl9IGFyZ3NcclxuXHRcdCAqIEByZXR1cm4ge29iamVjdH0gb3V0cHV0XHJcblx0XHQgKi9cclxuXHRcdFxyXG5cdFx0X3BhcnNlSW5zZXJ0QXJnczogZnVuY3Rpb24oYXJncyl7XHJcblx0XHRcdHZhciBzZWxmID0gdGhpcyxcclxuXHRcdFx0XHRvdXRwdXQgPSB7XHJcblx0XHRcdFx0XHRpbmRleDogMCxcclxuXHRcdFx0XHRcdCRvYmplY3Q6ICQoKSxcclxuXHRcdFx0XHRcdG11bHRpTWl4OiB7ZmlsdGVyOiBzZWxmLl9zdGF0ZS5hY3RpdmVGaWx0ZXJ9LFxyXG5cdFx0XHRcdFx0Y2FsbGJhY2s6IG51bGxcclxuXHRcdFx0XHR9O1xyXG5cdFx0XHRcclxuXHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspe1xyXG5cdFx0XHRcdHZhciBhcmcgPSBhcmdzW2ldO1xyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdGlmKHR5cGVvZiBhcmcgPT09ICdudW1iZXInKXtcclxuXHRcdFx0XHRcdG91dHB1dC5pbmRleCA9IGFyZztcclxuXHRcdFx0XHR9IGVsc2UgaWYodHlwZW9mIGFyZyA9PT0gJ29iamVjdCcgJiYgYXJnIGluc3RhbmNlb2YgJCl7XHJcblx0XHRcdFx0XHRvdXRwdXQuJG9iamVjdCA9IGFyZztcclxuXHRcdFx0XHR9IGVsc2UgaWYodHlwZW9mIGFyZyA9PT0gJ29iamVjdCcgJiYgc2VsZi5faGVscGVycy5faXNFbGVtZW50KGFyZykpe1xyXG5cdFx0XHRcdFx0b3V0cHV0LiRvYmplY3QgPSAkKGFyZyk7XHJcblx0XHRcdFx0fSBlbHNlIGlmKHR5cGVvZiBhcmcgPT09ICdvYmplY3QnICYmIGFyZyAhPT0gbnVsbCl7XHJcblx0XHRcdFx0XHRvdXRwdXQubXVsdGlNaXggPSBhcmc7XHJcblx0XHRcdFx0fSBlbHNlIGlmKHR5cGVvZiBhcmcgPT09ICdib29sZWFuJyAmJiAhYXJnKXtcclxuXHRcdFx0XHRcdG91dHB1dC5tdWx0aU1peCA9IGZhbHNlO1xyXG5cdFx0XHRcdH0gZWxzZSBpZih0eXBlb2YgYXJnID09PSAnZnVuY3Rpb24nKXtcclxuXHRcdFx0XHRcdG91dHB1dC5jYWxsYmFjayA9IGFyZztcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0XHJcblx0XHRcdHJldHVybiBzZWxmLl9leGVjRmlsdGVyKCdfcGFyc2VJbnNlcnRBcmdzJywgb3V0cHV0LCBhcmd1bWVudHMpO1xyXG5cdFx0fSxcclxuXHRcdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBFeGVjdXRlIEFjdGlvblxyXG5cdFx0ICogQHNpbmNlIDIuMC4wXHJcblx0XHQgKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kTmFtZVxyXG5cdFx0ICogQHBhcmFtIHtib29sZWFufSBpc1Bvc3RcclxuXHRcdCAqIEBwYXJhbSB7YXJyYXl9IGFyZ3NcclxuXHRcdCAqL1xyXG5cdFx0XHJcblx0XHRfZXhlY0FjdGlvbjogZnVuY3Rpb24obWV0aG9kTmFtZSwgaXNQb3N0LCBhcmdzKXtcclxuXHRcdFx0dmFyIHNlbGYgPSB0aGlzLFxyXG5cdFx0XHRcdGNvbnRleHQgPSBpc1Bvc3QgPyAncG9zdCcgOiAncHJlJztcclxuXHJcblx0XHRcdGlmKCFzZWxmLl9hY3Rpb25zLmlzRW1wdHlPYmplY3QgJiYgc2VsZi5fYWN0aW9ucy5oYXNPd25Qcm9wZXJ0eShtZXRob2ROYW1lKSl7XHJcblx0XHRcdFx0Zm9yKHZhciBrZXkgaW4gc2VsZi5fYWN0aW9uc1ttZXRob2ROYW1lXVtjb250ZXh0XSl7XHJcblx0XHRcdFx0XHRzZWxmLl9hY3Rpb25zW21ldGhvZE5hbWVdW2NvbnRleHRdW2tleV0uY2FsbChzZWxmLCBhcmdzKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblx0XHRcclxuXHRcdC8qKlxyXG5cdFx0ICogRXhlY3V0ZSBGaWx0ZXJcclxuXHRcdCAqIEBzaW5jZSAyLjAuMFxyXG5cdFx0ICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZE5hbWVcclxuXHRcdCAqIEBwYXJhbSB7bWl4ZWR9IHZhbHVlXHJcblx0XHQgKiBAcmV0dXJuIHttaXhlZH0gdmFsdWVcclxuXHRcdCAqL1xyXG5cdFx0XHJcblx0XHRfZXhlY0ZpbHRlcjogZnVuY3Rpb24obWV0aG9kTmFtZSwgdmFsdWUsIGFyZ3Mpe1xyXG5cdFx0XHR2YXIgc2VsZiA9IHRoaXM7XHJcblx0XHRcdFxyXG5cdFx0XHRpZighc2VsZi5fZmlsdGVycy5pc0VtcHR5T2JqZWN0ICYmIHNlbGYuX2ZpbHRlcnMuaGFzT3duUHJvcGVydHkobWV0aG9kTmFtZSkpe1xyXG5cdFx0XHRcdGZvcih2YXIga2V5IGluIHNlbGYuX2ZpbHRlcnNbbWV0aG9kTmFtZV0pe1xyXG5cdFx0XHRcdFx0cmV0dXJuIHNlbGYuX2ZpbHRlcnNbbWV0aG9kTmFtZV1ba2V5XS5jYWxsKHNlbGYsIGFyZ3MpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRyZXR1cm4gdmFsdWU7XHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblx0XHRcclxuXHRcdC8qIEhlbHBlcnNcclxuXHRcdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cclxuXHJcblx0XHRfaGVscGVyczoge1xyXG5cdFx0XHRcclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIENhbWVsQ2FzZVxyXG5cdFx0XHQgKiBAc2luY2UgMi4wLjBcclxuXHRcdFx0ICogQHBhcmFtIHtzdHJpbmd9XHJcblx0XHRcdCAqIEByZXR1cm4ge3N0cmluZ31cclxuXHRcdFx0ICovXHJcblxyXG5cdFx0XHRfY2FtZWxDYXNlOiBmdW5jdGlvbihzdHJpbmcpe1xyXG5cdFx0XHRcdHJldHVybiBzdHJpbmcucmVwbGFjZSgvLShbYS16XSkvZywgZnVuY3Rpb24oZyl7XHJcblx0XHRcdFx0XHRcdHJldHVybiBnWzFdLnRvVXBwZXJDYXNlKCk7XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH0sXHJcblx0XHRcdFxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogSXMgRWxlbWVudFxyXG5cdFx0XHQgKiBAc2luY2UgMi4xLjNcclxuXHRcdFx0ICogQHBhcmFtIHtvYmplY3R9IGVsZW1lbnQgdG8gdGVzdFxyXG5cdFx0XHQgKiBAcmV0dXJuIHtib29sZWFufVxyXG5cdFx0XHQgKi9cclxuXHRcdFx0XHJcblx0XHRcdF9pc0VsZW1lbnQ6IGZ1bmN0aW9uKGVsKXtcclxuXHRcdFx0XHRpZih3aW5kb3cuSFRNTEVsZW1lbnQpe1xyXG5cdFx0XHRcdFx0cmV0dXJuIGVsIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQ7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdHJldHVybiAoXHJcblx0XHRcdFx0XHRcdGVsICE9PSBudWxsICYmIFxyXG5cdFx0XHRcdFx0XHRlbC5ub2RlVHlwZSA9PT0gMSAmJlxyXG5cdFx0XHRcdFx0XHRlbC5ub2RlTmFtZSA9PT0gJ3N0cmluZydcclxuXHRcdFx0XHRcdCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cdFx0XHJcblx0XHQvKiBQdWJsaWMgTWV0aG9kc1xyXG5cdFx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xyXG5cdFx0XHJcblx0XHQvKipcclxuXHRcdCAqIElzIE1peGluZ1xyXG5cdFx0ICogQHNpbmNlIDIuMC4wXHJcblx0XHQgKiBAcmV0dXJuIHtib29sZWFufVxyXG5cdFx0ICovXHJcblx0XHRcclxuXHRcdGlzTWl4aW5nOiBmdW5jdGlvbigpe1xyXG5cdFx0XHR2YXIgc2VsZiA9IHRoaXM7XHJcblx0XHRcdFxyXG5cdFx0XHRyZXR1cm4gc2VsZi5fZXhlY0ZpbHRlcignaXNNaXhpbmcnLCBzZWxmLl9taXhpbmcpO1xyXG5cdFx0fSxcclxuXHRcdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBGaWx0ZXIgKHB1YmxpYylcclxuXHRcdCAqIEBzaW5jZSAyLjAuMFxyXG5cdFx0ICogQHBhcmFtIHthcnJheX0gYXJndW1lbnRzXHJcblx0XHQgKi9cclxuXHRcdFxyXG5cdFx0ZmlsdGVyOiBmdW5jdGlvbigpe1xyXG5cdFx0XHR2YXIgc2VsZiA9IHRoaXMsXHJcblx0XHRcdFx0YXJncyA9IHNlbGYuX3BhcnNlTXVsdGlNaXhBcmdzKGFyZ3VtZW50cyk7XHJcblxyXG5cdFx0XHRzZWxmLl9jbGlja2luZyAmJiAoc2VsZi5fdG9nZ2xlU3RyaW5nID0gJycpO1xyXG5cdFx0XHRcclxuXHRcdFx0c2VsZi5tdWx0aU1peCh7ZmlsdGVyOiBhcmdzLmNvbW1hbmR9LCBhcmdzLmFuaW1hdGUsIGFyZ3MuY2FsbGJhY2spO1xyXG5cdFx0fSxcclxuXHRcdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBTb3J0IChwdWJsaWMpXHJcblx0XHQgKiBAc2luY2UgMi4wLjBcclxuXHRcdCAqIEBwYXJhbSB7YXJyYXl9IGFyZ3VtZW50c1xyXG5cdFx0ICovXHJcblx0XHRcclxuXHRcdHNvcnQ6IGZ1bmN0aW9uKCl7XHJcblx0XHRcdHZhciBzZWxmID0gdGhpcyxcclxuXHRcdFx0XHRhcmdzID0gc2VsZi5fcGFyc2VNdWx0aU1peEFyZ3MoYXJndW1lbnRzKTtcclxuXHJcblx0XHRcdHNlbGYubXVsdGlNaXgoe3NvcnQ6IGFyZ3MuY29tbWFuZH0sIGFyZ3MuYW5pbWF0ZSwgYXJncy5jYWxsYmFjayk7XHJcblx0XHR9LFxyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogQ2hhbmdlIExheW91dCAocHVibGljKVxyXG5cdFx0ICogQHNpbmNlIDIuMC4wXHJcblx0XHQgKiBAcGFyYW0ge2FycmF5fSBhcmd1bWVudHNcclxuXHRcdCAqL1xyXG5cdFx0XHJcblx0XHRjaGFuZ2VMYXlvdXQ6IGZ1bmN0aW9uKCl7XHJcblx0XHRcdHZhciBzZWxmID0gdGhpcyxcclxuXHRcdFx0XHRhcmdzID0gc2VsZi5fcGFyc2VNdWx0aU1peEFyZ3MoYXJndW1lbnRzKTtcclxuXHRcdFx0XHRcclxuXHRcdFx0c2VsZi5tdWx0aU1peCh7Y2hhbmdlTGF5b3V0OiBhcmdzLmNvbW1hbmR9LCBhcmdzLmFuaW1hdGUsIGFyZ3MuY2FsbGJhY2spO1xyXG5cdFx0fSxcclxuXHRcdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBNdWx0aU1peFxyXG5cdFx0ICogQHNpbmNlIDIuMC4wXHJcblx0XHQgKiBAcGFyYW0ge2FycmF5fSBhcmd1bWVudHNcclxuXHRcdCAqL1xyXG5cdFx0XHJcblx0XHRtdWx0aU1peDogZnVuY3Rpb24oKXtcclxuXHRcdFx0dmFyIHNlbGYgPSB0aGlzLFxyXG5cdFx0XHRcdGFyZ3MgPSBzZWxmLl9wYXJzZU11bHRpTWl4QXJncyhhcmd1bWVudHMpO1xyXG5cclxuXHRcdFx0c2VsZi5fZXhlY0FjdGlvbignbXVsdGlNaXgnLCAwLCBhcmd1bWVudHMpO1xyXG5cclxuXHRcdFx0aWYoIXNlbGYuX21peGluZyl7XHJcblx0XHRcdFx0aWYoc2VsZi5jb250cm9scy5lbmFibGUgJiYgIXNlbGYuX2NsaWNraW5nKXtcclxuXHRcdFx0XHRcdHNlbGYuY29udHJvbHMudG9nZ2xlRmlsdGVyQnV0dG9ucyAmJiBzZWxmLl9idWlsZFRvZ2dsZUFycmF5KCk7XHJcblx0XHRcdFx0XHRzZWxmLl91cGRhdGVDb250cm9scyhhcmdzLmNvbW1hbmQsIHNlbGYuY29udHJvbHMudG9nZ2xlRmlsdGVyQnV0dG9ucyk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdChzZWxmLl9xdWV1ZS5sZW5ndGggPCAyKSAmJiAoc2VsZi5fY2xpY2tpbmcgPSBmYWxzZSk7XHJcblx0XHRcdFxyXG5cdFx0XHRcdGRlbGV0ZSBzZWxmLmNhbGxiYWNrcy5fdXNlcjtcclxuXHRcdFx0XHRpZihhcmdzLmNhbGxiYWNrKSBzZWxmLmNhbGxiYWNrcy5fdXNlciA9IGFyZ3MuY2FsbGJhY2s7XHJcblx0XHRcdFxyXG5cdFx0XHRcdHZhciBzb3J0ID0gYXJncy5jb21tYW5kLnNvcnQsXHJcblx0XHRcdFx0XHRmaWx0ZXIgPSBhcmdzLmNvbW1hbmQuZmlsdGVyLFxyXG5cdFx0XHRcdFx0Y2hhbmdlTGF5b3V0ID0gYXJncy5jb21tYW5kLmNoYW5nZUxheW91dDtcclxuXHJcblx0XHRcdFx0c2VsZi5fcmVmcmVzaCgpO1xyXG5cclxuXHRcdFx0XHRpZihzb3J0KXtcclxuXHRcdFx0XHRcdHNlbGYuX25ld1NvcnQgPSBzZWxmLl9wYXJzZVNvcnQoc29ydCk7XHJcblx0XHRcdFx0XHRzZWxmLl9uZXdTb3J0U3RyaW5nID0gc29ydDtcclxuXHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0c2VsZi5fc29ydGluZyA9IHRydWU7XHJcblx0XHRcdFx0XHRzZWxmLl9zb3J0KCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdGlmKGZpbHRlciAhPT0gdW5kZil7XHJcblx0XHRcdFx0XHRmaWx0ZXIgPSAoZmlsdGVyID09PSAnYWxsJykgPyBzZWxmLnNlbGVjdG9ycy50YXJnZXQgOiBmaWx0ZXI7XHJcblx0XHJcblx0XHRcdFx0XHRzZWxmLl9hY3RpdmVGaWx0ZXIgPSBmaWx0ZXI7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdHNlbGYuX2ZpbHRlcigpO1xyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdGlmKGNoYW5nZUxheW91dCl7XHJcblx0XHRcdFx0XHRzZWxmLl9uZXdEaXNwbGF5ID0gKHR5cGVvZiBjaGFuZ2VMYXlvdXQgPT09ICdzdHJpbmcnKSA/IGNoYW5nZUxheW91dCA6IGNoYW5nZUxheW91dC5kaXNwbGF5IHx8IHNlbGYubGF5b3V0LmRpc3BsYXk7XHJcblx0XHRcdFx0XHRzZWxmLl9uZXdDbGFzcyA9IGNoYW5nZUxheW91dC5jb250YWluZXJDbGFzcyB8fCAnJztcclxuXHJcblx0XHRcdFx0XHRpZihcclxuXHRcdFx0XHRcdFx0c2VsZi5fbmV3RGlzcGxheSAhPT0gc2VsZi5sYXlvdXQuZGlzcGxheSB8fFxyXG5cdFx0XHRcdFx0XHRzZWxmLl9uZXdDbGFzcyAhPT0gc2VsZi5sYXlvdXQuY29udGFpbmVyQ2xhc3NcclxuXHRcdFx0XHRcdCl7XHJcblx0XHRcdFx0XHRcdHNlbGYuX2NoYW5naW5nTGF5b3V0ID0gdHJ1ZTtcclxuXHRcdFx0XHRcdFx0XHJcblx0XHRcdFx0XHRcdHNlbGYuX2NoYW5naW5nQ2xhc3MgPSAoc2VsZi5fbmV3Q2xhc3MgIT09IHNlbGYubGF5b3V0LmNvbnRhaW5lckNsYXNzKTtcclxuXHRcdFx0XHRcdFx0c2VsZi5fY2hhbmdpbmdEaXNwbGF5ID0gKHNlbGYuX25ld0Rpc3BsYXkgIT09IHNlbGYubGF5b3V0LmRpc3BsYXkpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRcclxuXHRcdFx0XHRzZWxmLl8kdGFyZ2V0cy5jc3Moc2VsZi5fYnJha2UpO1xyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdHNlbGYuX2dvTWl4KGFyZ3MuYW5pbWF0ZSBeIHNlbGYuYW5pbWF0aW9uLmVuYWJsZSA/IGFyZ3MuYW5pbWF0ZSA6IHNlbGYuYW5pbWF0aW9uLmVuYWJsZSk7XHJcblx0XHRcdFx0XHJcblx0XHRcdFx0c2VsZi5fZXhlY0FjdGlvbignbXVsdGlNaXgnLCAxLCBhcmd1bWVudHMpO1xyXG5cdFx0XHRcdFxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGlmKHNlbGYuYW5pbWF0aW9uLnF1ZXVlICYmIHNlbGYuX3F1ZXVlLmxlbmd0aCA8IHNlbGYuYW5pbWF0aW9uLnF1ZXVlTGltaXQpe1xyXG5cdFx0XHRcdFx0c2VsZi5fcXVldWUucHVzaChhcmd1bWVudHMpO1xyXG5cdFx0XHRcdFx0XHJcblx0XHRcdFx0XHQoc2VsZi5jb250cm9scy5lbmFibGUgJiYgIXNlbGYuX2NsaWNraW5nKSAmJiBzZWxmLl91cGRhdGVDb250cm9scyhhcmdzLmNvbW1hbmQpO1xyXG5cdFx0XHRcdFx0XHJcblx0XHRcdFx0XHRzZWxmLl9leGVjQWN0aW9uKCdtdWx0aU1peFF1ZXVlJywgMSwgYXJndW1lbnRzKTtcclxuXHRcdFx0XHRcdFxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRpZih0eXBlb2Ygc2VsZi5jYWxsYmFja3Mub25NaXhCdXN5ID09PSAnZnVuY3Rpb24nKXtcclxuXHRcdFx0XHRcdFx0c2VsZi5jYWxsYmFja3Mub25NaXhCdXN5LmNhbGwoc2VsZi5fZG9tTm9kZSwgc2VsZi5fc3RhdGUsIHNlbGYpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0c2VsZi5fJGNvbnRhaW5lci50cmlnZ2VyKCdtaXhCdXN5JywgW3NlbGYuX3N0YXRlLCBzZWxmXSk7XHJcblx0XHRcdFx0XHRcclxuXHRcdFx0XHRcdHNlbGYuX2V4ZWNBY3Rpb24oJ211bHRpTWl4QnVzeScsIDEsIGFyZ3VtZW50cyk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9LFxyXG5cdFx0XHJcblx0XHQvKipcclxuXHRcdCAqIEluc2VydFxyXG5cdFx0ICogQHNpbmNlIDIuMC4wXHJcblx0XHQgKiBAcGFyYW0ge2FycmF5fSBhcmd1bWVudHNcclxuXHRcdCAqL1xyXG5cdFx0XHJcblx0XHRpbnNlcnQ6IGZ1bmN0aW9uKCl7XHJcblx0XHRcdHZhciBzZWxmID0gdGhpcyxcclxuXHRcdFx0XHRhcmdzID0gc2VsZi5fcGFyc2VJbnNlcnRBcmdzKGFyZ3VtZW50cyksXHJcblx0XHRcdFx0Y2FsbGJhY2sgPSAodHlwZW9mIGFyZ3MuY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpID8gYXJncy5jYWxsYmFjayA6IG51bGwsXHJcblx0XHRcdFx0ZnJhZyA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcclxuXHRcdFx0XHR0YXJnZXQgPSAoZnVuY3Rpb24oKXtcclxuXHRcdFx0XHRcdHNlbGYuX3JlZnJlc2goKTtcclxuXHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0aWYoc2VsZi5fJHRhcmdldHMubGVuZ3RoKXtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIChhcmdzLmluZGV4IDwgc2VsZi5fJHRhcmdldHMubGVuZ3RoIHx8ICFzZWxmLl8kdGFyZ2V0cy5sZW5ndGgpID8gXHJcblx0XHRcdFx0XHRcdFx0c2VsZi5fJHRhcmdldHNbYXJncy5pbmRleF0gOlxyXG5cdFx0XHRcdFx0XHRcdHNlbGYuXyR0YXJnZXRzW3NlbGYuXyR0YXJnZXRzLmxlbmd0aC0xXS5uZXh0RWxlbWVudFNpYmxpbmc7XHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gc2VsZi5fJHBhcmVudFswXS5jaGlsZHJlblswXTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9KSgpO1xyXG5cdFx0XHRcdFx0XHRcclxuXHRcdFx0c2VsZi5fZXhlY0FjdGlvbignaW5zZXJ0JywgMCwgYXJndW1lbnRzKTtcclxuXHRcdFx0XHRcclxuXHRcdFx0aWYoYXJncy4kb2JqZWN0KXtcclxuXHRcdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgYXJncy4kb2JqZWN0Lmxlbmd0aDsgaSsrKXtcclxuXHRcdFx0XHRcdHZhciBlbCA9IGFyZ3MuJG9iamVjdFtpXTtcclxuXHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0ZnJhZy5hcHBlbmRDaGlsZChlbCk7XHJcblx0XHRcdFx0XHRmcmFnLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcgJykpO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0c2VsZi5fJHBhcmVudFswXS5pbnNlcnRCZWZvcmUoZnJhZywgdGFyZ2V0KTtcclxuXHRcdFx0fVxyXG5cdFx0XHRcclxuXHRcdFx0c2VsZi5fZXhlY0FjdGlvbignaW5zZXJ0JywgMSwgYXJndW1lbnRzKTtcclxuXHRcdFx0XHJcblx0XHRcdGlmKHR5cGVvZiBhcmdzLm11bHRpTWl4ID09PSAnb2JqZWN0Jyl7XHJcblx0XHRcdFx0c2VsZi5tdWx0aU1peChhcmdzLm11bHRpTWl4LCBjYWxsYmFjayk7XHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBQcmVwZW5kXHJcblx0XHQgKiBAc2luY2UgMi4wLjBcclxuXHRcdCAqIEBwYXJhbSB7YXJyYXl9IGFyZ3VtZW50c1xyXG5cdFx0ICovXHJcblx0XHRcclxuXHRcdHByZXBlbmQ6IGZ1bmN0aW9uKCl7XHJcblx0XHRcdHZhciBzZWxmID0gdGhpcyxcclxuXHRcdFx0XHRhcmdzID0gc2VsZi5fcGFyc2VJbnNlcnRBcmdzKGFyZ3VtZW50cyk7XHJcblx0XHRcdFx0XHJcblx0XHRcdHNlbGYuaW5zZXJ0KDAsIGFyZ3MuJG9iamVjdCwgYXJncy5tdWx0aU1peCwgYXJncy5jYWxsYmFjayk7XHJcblx0XHR9LFxyXG5cdFx0XHJcblx0XHQvKipcclxuXHRcdCAqIEFwcGVuZFxyXG5cdFx0ICogQHNpbmNlIDIuMC4wXHJcblx0XHQgKiBAcGFyYW0ge2FycmF5fSBhcmd1bWVudHNcclxuXHRcdCAqL1xyXG5cdFx0XHJcblx0XHRhcHBlbmQ6IGZ1bmN0aW9uKCl7XHJcblx0XHRcdHZhciBzZWxmID0gdGhpcyxcclxuXHRcdFx0XHRhcmdzID0gc2VsZi5fcGFyc2VJbnNlcnRBcmdzKGFyZ3VtZW50cyk7XHJcblx0XHRcclxuXHRcdFx0c2VsZi5pbnNlcnQoc2VsZi5fc3RhdGUudG90YWxUYXJnZXRzLCBhcmdzLiRvYmplY3QsIGFyZ3MubXVsdGlNaXgsIGFyZ3MuY2FsbGJhY2spO1xyXG5cdFx0fSxcclxuXHRcdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBHZXQgT3B0aW9uXHJcblx0XHQgKiBAc2luY2UgMi4wLjBcclxuXHRcdCAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmdcclxuXHRcdCAqIEByZXR1cm4ge21peGVkfSB2YWx1ZVxyXG5cdFx0ICovXHJcblx0XHRcclxuXHRcdGdldE9wdGlvbjogZnVuY3Rpb24oc3RyaW5nKXtcclxuXHRcdFx0dmFyIHNlbGYgPSB0aGlzLFxyXG5cdFx0XHRcdGdldFByb3BlcnR5ID0gZnVuY3Rpb24ob2JqLCBwcm9wKXtcclxuXHRcdFx0XHRcdHZhciBwYXJ0cyA9IHByb3Auc3BsaXQoJy4nKSxcclxuXHRcdFx0XHRcdFx0bGFzdCA9IHBhcnRzLnBvcCgpLFxyXG5cdFx0XHRcdFx0XHRsID0gcGFydHMubGVuZ3RoLFxyXG5cdFx0XHRcdFx0XHRpID0gMSxcclxuXHRcdFx0XHRcdFx0Y3VycmVudCA9IHBhcnRzWzBdIHx8IHByb3A7XHJcblxyXG5cdFx0XHRcdFx0d2hpbGUoKG9iaiA9IG9ialtjdXJyZW50XSkgJiYgaSA8IGwpe1xyXG5cdFx0XHRcdFx0XHRjdXJyZW50ID0gcGFydHNbaV07XHJcblx0XHRcdFx0XHRcdGkrKztcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRpZihvYmogIT09IHVuZGYpe1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gb2JqW2xhc3RdICE9PSB1bmRmID8gb2JqW2xhc3RdIDogb2JqO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH07XHJcblxyXG5cdFx0XHRyZXR1cm4gc3RyaW5nID8gc2VsZi5fZXhlY0ZpbHRlcignZ2V0T3B0aW9uJywgZ2V0UHJvcGVydHkoc2VsZiwgc3RyaW5nKSwgYXJndW1lbnRzKSA6IHNlbGY7XHJcblx0XHR9LFxyXG5cdFx0XHJcblx0XHQvKipcclxuXHRcdCAqIFNldCBPcHRpb25zXHJcblx0XHQgKiBAc2luY2UgMi4wLjBcclxuXHRcdCAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWdcclxuXHRcdCAqL1xyXG5cdFx0XHJcblx0XHRzZXRPcHRpb25zOiBmdW5jdGlvbihjb25maWcpe1xyXG5cdFx0XHR2YXIgc2VsZiA9IHRoaXM7XHJcblx0XHRcdFxyXG5cdFx0XHRzZWxmLl9leGVjQWN0aW9uKCdzZXRPcHRpb25zJywgMCwgYXJndW1lbnRzKTtcclxuXHRcdFx0XHJcblx0XHRcdHR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnICYmICQuZXh0ZW5kKHRydWUsIHNlbGYsIGNvbmZpZyk7XHJcblx0XHRcdFxyXG5cdFx0XHRzZWxmLl9leGVjQWN0aW9uKCdzZXRPcHRpb25zJywgMSwgYXJndW1lbnRzKTtcclxuXHRcdH0sXHJcblx0XHRcclxuXHRcdC8qKlxyXG5cdFx0ICogR2V0IFN0YXRlXHJcblx0XHQgKiBAc2luY2UgMi4wLjBcclxuXHRcdCAqIEByZXR1cm4ge29iamVjdH0gc3RhdGVcclxuXHRcdCAqL1xyXG5cdFx0XHJcblx0XHRnZXRTdGF0ZTogZnVuY3Rpb24oKXtcclxuXHRcdFx0dmFyIHNlbGYgPSB0aGlzO1xyXG5cdFx0XHRcclxuXHRcdFx0cmV0dXJuIHNlbGYuX2V4ZWNGaWx0ZXIoJ2dldFN0YXRlJywgc2VsZi5fc3RhdGUsIHNlbGYpO1xyXG5cdFx0fSxcclxuXHRcdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBGb3JjZSBSZWZyZXNoXHJcblx0XHQgKiBAc2luY2UgMi4xLjJcclxuXHRcdCAqL1xyXG5cdFx0XHJcblx0XHRmb3JjZVJlZnJlc2g6IGZ1bmN0aW9uKCl7XHJcblx0XHRcdHZhciBzZWxmID0gdGhpcztcclxuXHRcdFx0XHJcblx0XHRcdHNlbGYuX3JlZnJlc2goZmFsc2UsIHRydWUpO1xyXG5cdFx0fSxcclxuXHRcdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBEZXN0cm95XHJcblx0XHQgKiBAc2luY2UgMi4wLjBcclxuXHRcdCAqIEBwYXJhbSB7Ym9vbGVhbn0gaGlkZUFsbFxyXG5cdFx0ICovXHJcblx0XHRcclxuXHRcdGRlc3Ryb3k6IGZ1bmN0aW9uKGhpZGVBbGwpe1xyXG5cdFx0XHR2YXIgc2VsZiA9IHRoaXMsXHJcblx0XHRcdFx0ZmlsdGVycyA9ICQuTWl4SXRVcC5wcm90b3R5cGUuX2JvdW5kLl9maWx0ZXIsXHJcblx0XHRcdFx0c29ydHMgPSAkLk1peEl0VXAucHJvdG90eXBlLl9ib3VuZC5fc29ydDtcclxuXHRcdFx0XHJcblx0XHRcdHNlbGYuX2V4ZWNBY3Rpb24oJ2Rlc3Ryb3knLCAwLCBhcmd1bWVudHMpO1xyXG5cdFx0XHJcblx0XHRcdHNlbGYuXyRib2R5XHJcblx0XHRcdFx0LmFkZCgkKHNlbGYuc2VsZWN0b3JzLnNvcnQpKVxyXG5cdFx0XHRcdC5hZGQoJChzZWxmLnNlbGVjdG9ycy5maWx0ZXIpKVxyXG5cdFx0XHRcdC5vZmYoJy5taXhJdFVwJyk7XHJcblx0XHRcdFxyXG5cdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgc2VsZi5fJHRhcmdldHMubGVuZ3RoOyBpKyspe1xyXG5cdFx0XHRcdHZhciB0YXJnZXQgPSBzZWxmLl8kdGFyZ2V0c1tpXTtcclxuXHJcblx0XHRcdFx0aGlkZUFsbCAmJiAodGFyZ2V0LnN0eWxlLmRpc3BsYXkgPSAnJyk7XHJcblxyXG5cdFx0XHRcdGRlbGV0ZSB0YXJnZXQubWl4UGFyZW50O1xyXG5cdFx0XHR9XHJcblx0XHRcdFxyXG5cdFx0XHRzZWxmLl9leGVjQWN0aW9uKCdkZXN0cm95JywgMSwgYXJndW1lbnRzKTtcclxuXHJcblx0XHRcdGlmKGZpbHRlcnNbc2VsZi5zZWxlY3RvcnMuZmlsdGVyXSAmJiBmaWx0ZXJzW3NlbGYuc2VsZWN0b3JzLmZpbHRlcl0gPiAxKSB7XHJcblx0XHRcdFx0ZmlsdGVyc1tzZWxmLnNlbGVjdG9ycy5maWx0ZXJdLS07XHJcblx0XHRcdH0gZWxzZSBpZihmaWx0ZXJzW3NlbGYuc2VsZWN0b3JzLmZpbHRlcl0gPT09IDEpIHtcclxuXHRcdFx0XHRkZWxldGUgZmlsdGVyc1tzZWxmLnNlbGVjdG9ycy5maWx0ZXJdO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRpZihzb3J0c1tzZWxmLnNlbGVjdG9ycy5zb3J0XSAmJiBzb3J0c1tzZWxmLnNlbGVjdG9ycy5zb3J0XSA+IDEpIHtcclxuXHRcdFx0XHRzb3J0c1tzZWxmLnNlbGVjdG9ycy5zb3J0XS0tO1xyXG5cdFx0XHR9IGVsc2UgaWYoc29ydHNbc2VsZi5zZWxlY3RvcnMuc29ydF0gPT09IDEpIHtcclxuXHRcdFx0XHRkZWxldGUgc29ydHNbc2VsZi5zZWxlY3RvcnMuc29ydF07XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGRlbGV0ZSAkLk1peEl0VXAucHJvdG90eXBlLl9pbnN0YW5jZXNbc2VsZi5faWRdO1xyXG5cdFx0fVxyXG5cdFx0XHJcblx0fTtcclxuXHRcclxuXHQvKiBqUXVlcnkgTWV0aG9kc1xyXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cclxuXHRcclxuXHQvKipcclxuXHQgKiBqUXVlcnkgLm1peEl0VXAoKSBtZXRob2RcclxuXHQgKiBAc2luY2UgMi4wLjBcclxuXHQgKiBAZXh0ZW5kcyAkLmZuXHJcblx0ICovXHJcblx0XHJcblx0JC5mbi5taXhJdFVwID0gZnVuY3Rpb24oKXtcclxuXHRcdHZhciBhcmdzID0gYXJndW1lbnRzLFxyXG5cdFx0XHRkYXRhUmV0dXJuID0gW10sXHJcblx0XHRcdGVhY2hSZXR1cm4sXHJcblx0XHRcdF9pbnN0YW50aWF0ZSA9IGZ1bmN0aW9uKGRvbU5vZGUsIHNldHRpbmdzKXtcclxuXHRcdFx0XHR2YXIgaW5zdGFuY2UgPSBuZXcgJC5NaXhJdFVwKCksXHJcblx0XHRcdFx0XHRyYW5kID0gZnVuY3Rpb24oKXtcclxuXHRcdFx0XHRcdFx0cmV0dXJuICgnMDAwMDAnKyhNYXRoLnJhbmRvbSgpKjE2Nzc3MjE2PDwwKS50b1N0cmluZygxNikpLnN1YnN0cigtNikudG9VcHBlckNhc2UoKTtcclxuXHRcdFx0XHRcdH07XHJcblx0XHRcdFx0XHRcclxuXHRcdFx0XHRpbnN0YW5jZS5fZXhlY0FjdGlvbignX2luc3RhbnRpYXRlJywgMCwgYXJndW1lbnRzKTtcclxuXHJcblx0XHRcdFx0ZG9tTm9kZS5pZCA9ICFkb21Ob2RlLmlkID8gJ01peEl0VXAnK3JhbmQoKSA6IGRvbU5vZGUuaWQ7XHJcblx0XHRcdFx0XHJcblx0XHRcdFx0aWYoIWluc3RhbmNlLl9pbnN0YW5jZXNbZG9tTm9kZS5pZF0pe1xyXG5cdFx0XHRcdFx0aW5zdGFuY2UuX2luc3RhbmNlc1tkb21Ob2RlLmlkXSA9IGluc3RhbmNlO1xyXG5cdFx0XHRcdFx0aW5zdGFuY2UuX2luaXQoZG9tTm9kZSwgc2V0dGluZ3MpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRcclxuXHRcdFx0XHRpbnN0YW5jZS5fZXhlY0FjdGlvbignX2luc3RhbnRpYXRlJywgMSwgYXJndW1lbnRzKTtcclxuXHRcdFx0fTtcclxuXHRcdFx0XHJcblx0XHRlYWNoUmV0dXJuID0gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7XHJcblx0XHRcdGlmKGFyZ3MgJiYgdHlwZW9mIGFyZ3NbMF0gPT09ICdzdHJpbmcnKXtcclxuXHRcdFx0XHR2YXIgaW5zdGFuY2UgPSAkLk1peEl0VXAucHJvdG90eXBlLl9pbnN0YW5jZXNbdGhpcy5pZF07XHJcblx0XHRcdFx0aWYoYXJnc1swXSA9PT0gJ2lzTG9hZGVkJyl7XHJcblx0XHRcdFx0XHRkYXRhUmV0dXJuLnB1c2goaW5zdGFuY2UgPyB0cnVlIDogZmFsc2UpO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHR2YXIgZGF0YSA9IGluc3RhbmNlW2FyZ3NbMF1dKGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xyXG5cdFx0XHRcdFx0aWYoZGF0YSAhPT0gdW5kZilkYXRhUmV0dXJuLnB1c2goZGF0YSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdF9pbnN0YW50aWF0ZSh0aGlzLCBhcmdzWzBdKTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHRcclxuXHRcdGlmKGRhdGFSZXR1cm4ubGVuZ3RoKXtcclxuXHRcdFx0cmV0dXJuIGRhdGFSZXR1cm4ubGVuZ3RoID4gMSA/IGRhdGFSZXR1cm4gOiBkYXRhUmV0dXJuWzBdO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0cmV0dXJuIGVhY2hSZXR1cm47XHJcblx0XHR9XHJcblx0fTtcclxuXHRcclxuXHQvKipcclxuXHQgKiBqUXVlcnkgLnJlbW92ZVN0eWxlKCkgbWV0aG9kXHJcblx0ICogQHNpbmNlIDIuMC4wXHJcblx0ICogQGV4dGVuZHMgJC5mblxyXG5cdCAqL1xyXG5cdFxyXG5cdCQuZm4ucmVtb3ZlU3R5bGUgPSBmdW5jdGlvbihzdHlsZSwgcHJlZml4KXtcclxuXHRcdHByZWZpeCA9IHByZWZpeCA/IHByZWZpeCA6ICcnO1xyXG5cdFxyXG5cdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe1xyXG5cdFx0XHR2YXIgZWwgPSB0aGlzLFxyXG5cdFx0XHRcdHN0eWxlcyA9IHN0eWxlLnNwbGl0KCcgJyk7XHJcblx0XHRcdFx0XHJcblx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspe1xyXG5cdFx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCA0OyBqKyspe1xyXG5cdFx0XHRcdFx0c3dpdGNoIChqKSB7XHJcblx0XHRcdFx0XHRcdGNhc2UgMDpcclxuXHRcdFx0XHRcdFx0XHR2YXIgcHJvcCA9IHN0eWxlc1tpXTtcclxuXHRcdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdFx0Y2FzZSAxOlxyXG5cdFx0XHRcdFx0XHRcdHZhciBwcm9wID0gJC5NaXhJdFVwLnByb3RvdHlwZS5faGVscGVycy5fY2FtZWxDYXNlKHByb3ApO1xyXG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0XHRjYXNlIDI6XHJcblx0XHRcdFx0XHRcdFx0dmFyIHByb3AgPSBwcmVmaXgrc3R5bGVzW2ldO1xyXG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0XHRjYXNlIDM6XHJcblx0XHRcdFx0XHRcdFx0dmFyIHByb3AgPSAkLk1peEl0VXAucHJvdG90eXBlLl9oZWxwZXJzLl9jYW1lbENhc2UocHJlZml4K3N0eWxlc1tpXSk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcclxuXHRcdFx0XHRcdGlmKFxyXG5cdFx0XHRcdFx0XHRlbC5zdHlsZVtwcm9wXSAhPT0gdW5kZiAmJiBcclxuXHRcdFx0XHRcdFx0dHlwZW9mIGVsLnN0eWxlW3Byb3BdICE9PSAndW5rbm93bicgJiZcclxuXHRcdFx0XHRcdFx0ZWwuc3R5bGVbcHJvcF0ubGVuZ3RoID4gMFxyXG5cdFx0XHRcdFx0KXtcclxuXHRcdFx0XHRcdFx0ZWwuc3R5bGVbcHJvcF0gPSAnJztcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFxyXG5cdFx0XHRcdFx0aWYoIXByZWZpeCAmJiBqID09PSAxKWJyZWFrO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRcclxuXHRcdFx0aWYoZWwuYXR0cmlidXRlcyAmJiBlbC5hdHRyaWJ1dGVzLnN0eWxlICYmIGVsLmF0dHJpYnV0ZXMuc3R5bGUgIT09IHVuZGYgJiYgZWwuYXR0cmlidXRlcy5zdHlsZS52YWx1ZSA9PT0gJycpe1xyXG5cdFx0XHRcdGVsLmF0dHJpYnV0ZXMucmVtb3ZlTmFtZWRJdGVtKCdzdHlsZScpO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHR9O1xyXG5cdFxyXG59KShqUXVlcnkpOyIsIi8qKlxyXG4gKiBPd2wgQ2Fyb3VzZWwgdjIuMi4wXHJcbiAqIENvcHlyaWdodCAyMDEzLTIwMTYgRGF2aWQgRGV1dHNjaFxyXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS9Pd2xDYXJvdXNlbDIvT3dsQ2Fyb3VzZWwyL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXHJcbiAqL1xyXG4vKipcclxuICogT3dsIGNhcm91c2VsXHJcbiAqIEB2ZXJzaW9uIDIuMS42XHJcbiAqIEBhdXRob3IgQmFydG9zeiBXb2pjaWVjaG93c2tpXHJcbiAqIEBhdXRob3IgRGF2aWQgRGV1dHNjaFxyXG4gKiBAbGljZW5zZSBUaGUgTUlUIExpY2Vuc2UgKE1JVClcclxuICogQHRvZG8gTGF6eSBMb2FkIEljb25cclxuICogQHRvZG8gcHJldmVudCBhbmltYXRpb25lbmQgYnVibGluZ1xyXG4gKiBAdG9kbyBpdGVtc1NjYWxlVXBcclxuICogQHRvZG8gVGVzdCBaZXB0b1xyXG4gKiBAdG9kbyBzdGFnZVBhZGRpbmcgY2FsY3VsYXRlIHdyb25nIGFjdGl2ZSBjbGFzc2VzXHJcbiAqL1xyXG47KGZ1bmN0aW9uKCQsIHdpbmRvdywgZG9jdW1lbnQsIHVuZGVmaW5lZCkge1xyXG5cclxuXHQvKipcclxuXHQgKiBDcmVhdGVzIGEgY2Fyb3VzZWwuXHJcblx0ICogQGNsYXNzIFRoZSBPd2wgQ2Fyb3VzZWwuXHJcblx0ICogQHB1YmxpY1xyXG5cdCAqIEBwYXJhbSB7SFRNTEVsZW1lbnR8alF1ZXJ5fSBlbGVtZW50IC0gVGhlIGVsZW1lbnQgdG8gY3JlYXRlIHRoZSBjYXJvdXNlbCBmb3IuXHJcblx0ICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSAtIFRoZSBvcHRpb25zXHJcblx0ICovXHJcblx0ZnVuY3Rpb24gT3dsKGVsZW1lbnQsIG9wdGlvbnMpIHtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIEN1cnJlbnQgc2V0dGluZ3MgZm9yIHRoZSBjYXJvdXNlbC5cclxuXHRcdCAqIEBwdWJsaWNcclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5zZXR0aW5ncyA9IG51bGw7XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBDdXJyZW50IG9wdGlvbnMgc2V0IGJ5IHRoZSBjYWxsZXIgaW5jbHVkaW5nIGRlZmF1bHRzLlxyXG5cdFx0ICogQHB1YmxpY1xyXG5cdFx0ICovXHJcblx0XHR0aGlzLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgT3dsLkRlZmF1bHRzLCBvcHRpb25zKTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIFBsdWdpbiBlbGVtZW50LlxyXG5cdFx0ICogQHB1YmxpY1xyXG5cdFx0ICovXHJcblx0XHR0aGlzLiRlbGVtZW50ID0gJChlbGVtZW50KTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIFByb3hpZWQgZXZlbnQgaGFuZGxlcnMuXHJcblx0XHQgKiBAcHJvdGVjdGVkXHJcblx0XHQgKi9cclxuXHRcdHRoaXMuX2hhbmRsZXJzID0ge307XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBSZWZlcmVuY2VzIHRvIHRoZSBydW5uaW5nIHBsdWdpbnMgb2YgdGhpcyBjYXJvdXNlbC5cclxuXHRcdCAqIEBwcm90ZWN0ZWRcclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5fcGx1Z2lucyA9IHt9O1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogQ3VycmVudGx5IHN1cHByZXNzZWQgZXZlbnRzIHRvIHByZXZlbnQgdGhlbSBmcm9tIGJlZWluZyByZXRyaWdnZXJlZC5cclxuXHRcdCAqIEBwcm90ZWN0ZWRcclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5fc3VwcmVzcyA9IHt9O1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogQWJzb2x1dGUgY3VycmVudCBwb3NpdGlvbi5cclxuXHRcdCAqIEBwcm90ZWN0ZWRcclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5fY3VycmVudCA9IG51bGw7XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBBbmltYXRpb24gc3BlZWQgaW4gbWlsbGlzZWNvbmRzLlxyXG5cdFx0ICogQHByb3RlY3RlZFxyXG5cdFx0ICovXHJcblx0XHR0aGlzLl9zcGVlZCA9IG51bGw7XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBDb29yZGluYXRlcyBvZiBhbGwgaXRlbXMgaW4gcGl4ZWwuXHJcblx0XHQgKiBAdG9kbyBUaGUgbmFtZSBvZiB0aGlzIG1lbWJlciBpcyBtaXNzbGVhZGluZy5cclxuXHRcdCAqIEBwcm90ZWN0ZWRcclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5fY29vcmRpbmF0ZXMgPSBbXTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIEN1cnJlbnQgYnJlYWtwb2ludC5cclxuXHRcdCAqIEB0b2RvIFJlYWwgbWVkaWEgcXVlcmllcyB3b3VsZCBiZSBuaWNlLlxyXG5cdFx0ICogQHByb3RlY3RlZFxyXG5cdFx0ICovXHJcblx0XHR0aGlzLl9icmVha3BvaW50ID0gbnVsbDtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIEN1cnJlbnQgd2lkdGggb2YgdGhlIHBsdWdpbiBlbGVtZW50LlxyXG5cdFx0ICovXHJcblx0XHR0aGlzLl93aWR0aCA9IG51bGw7XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBBbGwgcmVhbCBpdGVtcy5cclxuXHRcdCAqIEBwcm90ZWN0ZWRcclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5faXRlbXMgPSBbXTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIEFsbCBjbG9uZWQgaXRlbXMuXHJcblx0XHQgKiBAcHJvdGVjdGVkXHJcblx0XHQgKi9cclxuXHRcdHRoaXMuX2Nsb25lcyA9IFtdO1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogTWVyZ2UgdmFsdWVzIG9mIGFsbCBpdGVtcy5cclxuXHRcdCAqIEB0b2RvIE1heWJlIHRoaXMgY291bGQgYmUgcGFydCBvZiBhIHBsdWdpbi5cclxuXHRcdCAqIEBwcm90ZWN0ZWRcclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5fbWVyZ2VycyA9IFtdO1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogV2lkdGhzIG9mIGFsbCBpdGVtcy5cclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5fd2lkdGhzID0gW107XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBJbnZhbGlkYXRlZCBwYXJ0cyB3aXRoaW4gdGhlIHVwZGF0ZSBwcm9jZXNzLlxyXG5cdFx0ICogQHByb3RlY3RlZFxyXG5cdFx0ICovXHJcblx0XHR0aGlzLl9pbnZhbGlkYXRlZCA9IHt9O1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogT3JkZXJlZCBsaXN0IG9mIHdvcmtlcnMgZm9yIHRoZSB1cGRhdGUgcHJvY2Vzcy5cclxuXHRcdCAqIEBwcm90ZWN0ZWRcclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5fcGlwZSA9IFtdO1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogQ3VycmVudCBzdGF0ZSBpbmZvcm1hdGlvbiBmb3IgdGhlIGRyYWcgb3BlcmF0aW9uLlxyXG5cdFx0ICogQHRvZG8gIzI2MVxyXG5cdFx0ICogQHByb3RlY3RlZFxyXG5cdFx0ICovXHJcblx0XHR0aGlzLl9kcmFnID0ge1xyXG5cdFx0XHR0aW1lOiBudWxsLFxyXG5cdFx0XHR0YXJnZXQ6IG51bGwsXHJcblx0XHRcdHBvaW50ZXI6IG51bGwsXHJcblx0XHRcdHN0YWdlOiB7XHJcblx0XHRcdFx0c3RhcnQ6IG51bGwsXHJcblx0XHRcdFx0Y3VycmVudDogbnVsbFxyXG5cdFx0XHR9LFxyXG5cdFx0XHRkaXJlY3Rpb246IG51bGxcclxuXHRcdH07XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBDdXJyZW50IHN0YXRlIGluZm9ybWF0aW9uIGFuZCB0aGVpciB0YWdzLlxyXG5cdFx0ICogQHR5cGUge09iamVjdH1cclxuXHRcdCAqIEBwcm90ZWN0ZWRcclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5fc3RhdGVzID0ge1xyXG5cdFx0XHRjdXJyZW50OiB7fSxcclxuXHRcdFx0dGFnczoge1xyXG5cdFx0XHRcdCdpbml0aWFsaXppbmcnOiBbICdidXN5JyBdLFxyXG5cdFx0XHRcdCdhbmltYXRpbmcnOiBbICdidXN5JyBdLFxyXG5cdFx0XHRcdCdkcmFnZ2luZyc6IFsgJ2ludGVyYWN0aW5nJyBdXHJcblx0XHRcdH1cclxuXHRcdH07XHJcblxyXG5cdFx0JC5lYWNoKFsgJ29uUmVzaXplJywgJ29uVGhyb3R0bGVkUmVzaXplJyBdLCAkLnByb3h5KGZ1bmN0aW9uKGksIGhhbmRsZXIpIHtcclxuXHRcdFx0dGhpcy5faGFuZGxlcnNbaGFuZGxlcl0gPSAkLnByb3h5KHRoaXNbaGFuZGxlcl0sIHRoaXMpO1xyXG5cdFx0fSwgdGhpcykpO1xyXG5cclxuXHRcdCQuZWFjaChPd2wuUGx1Z2lucywgJC5wcm94eShmdW5jdGlvbihrZXksIHBsdWdpbikge1xyXG5cdFx0XHR0aGlzLl9wbHVnaW5zW2tleS5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKSArIGtleS5zbGljZSgxKV1cclxuXHRcdFx0XHQ9IG5ldyBwbHVnaW4odGhpcyk7XHJcblx0XHR9LCB0aGlzKSk7XHJcblxyXG5cdFx0JC5lYWNoKE93bC5Xb3JrZXJzLCAkLnByb3h5KGZ1bmN0aW9uKHByaW9yaXR5LCB3b3JrZXIpIHtcclxuXHRcdFx0dGhpcy5fcGlwZS5wdXNoKHtcclxuXHRcdFx0XHQnZmlsdGVyJzogd29ya2VyLmZpbHRlcixcclxuXHRcdFx0XHQncnVuJzogJC5wcm94eSh3b3JrZXIucnVuLCB0aGlzKVxyXG5cdFx0XHR9KTtcclxuXHRcdH0sIHRoaXMpKTtcclxuXHJcblx0XHR0aGlzLnNldHVwKCk7XHJcblx0XHR0aGlzLmluaXRpYWxpemUoKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIERlZmF1bHQgb3B0aW9ucyBmb3IgdGhlIGNhcm91c2VsLlxyXG5cdCAqIEBwdWJsaWNcclxuXHQgKi9cclxuXHRPd2wuRGVmYXVsdHMgPSB7XHJcblx0XHRpdGVtczogMyxcclxuXHRcdGxvb3A6IGZhbHNlLFxyXG5cdFx0Y2VudGVyOiBmYWxzZSxcclxuXHRcdHJld2luZDogZmFsc2UsXHJcblxyXG5cdFx0bW91c2VEcmFnOiB0cnVlLFxyXG5cdFx0dG91Y2hEcmFnOiB0cnVlLFxyXG5cdFx0cHVsbERyYWc6IHRydWUsXHJcblx0XHRmcmVlRHJhZzogZmFsc2UsXHJcblxyXG5cdFx0bWFyZ2luOiAwLFxyXG5cdFx0c3RhZ2VQYWRkaW5nOiAwLFxyXG5cclxuXHRcdG1lcmdlOiBmYWxzZSxcclxuXHRcdG1lcmdlRml0OiB0cnVlLFxyXG5cdFx0YXV0b1dpZHRoOiBmYWxzZSxcclxuXHJcblx0XHRzdGFydFBvc2l0aW9uOiAwLFxyXG5cdFx0cnRsOiBmYWxzZSxcclxuXHJcblx0XHRzbWFydFNwZWVkOiAyNTAsXHJcblx0XHRmbHVpZFNwZWVkOiBmYWxzZSxcclxuXHRcdGRyYWdFbmRTcGVlZDogZmFsc2UsXHJcblxyXG5cdFx0cmVzcG9uc2l2ZToge30sXHJcblx0XHRyZXNwb25zaXZlUmVmcmVzaFJhdGU6IDIwMCxcclxuXHRcdHJlc3BvbnNpdmVCYXNlRWxlbWVudDogd2luZG93LFxyXG5cclxuXHRcdGZhbGxiYWNrRWFzaW5nOiAnc3dpbmcnLFxyXG5cclxuXHRcdGluZm86IGZhbHNlLFxyXG5cclxuXHRcdG5lc3RlZEl0ZW1TZWxlY3RvcjogZmFsc2UsXHJcblx0XHRpdGVtRWxlbWVudDogJ2RpdicsXHJcblx0XHRzdGFnZUVsZW1lbnQ6ICdkaXYnLFxyXG5cclxuXHRcdHJlZnJlc2hDbGFzczogJ293bC1yZWZyZXNoJyxcclxuXHRcdGxvYWRlZENsYXNzOiAnb3dsLWxvYWRlZCcsXHJcblx0XHRsb2FkaW5nQ2xhc3M6ICdvd2wtbG9hZGluZycsXHJcblx0XHRydGxDbGFzczogJ293bC1ydGwnLFxyXG5cdFx0cmVzcG9uc2l2ZUNsYXNzOiAnb3dsLXJlc3BvbnNpdmUnLFxyXG5cdFx0ZHJhZ0NsYXNzOiAnb3dsLWRyYWcnLFxyXG5cdFx0aXRlbUNsYXNzOiAnb3dsLWl0ZW0nLFxyXG5cdFx0c3RhZ2VDbGFzczogJ293bC1zdGFnZScsXHJcblx0XHRzdGFnZU91dGVyQ2xhc3M6ICdvd2wtc3RhZ2Utb3V0ZXInLFxyXG5cdFx0Z3JhYkNsYXNzOiAnb3dsLWdyYWInXHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogRW51bWVyYXRpb24gZm9yIHdpZHRoLlxyXG5cdCAqIEBwdWJsaWNcclxuXHQgKiBAcmVhZG9ubHlcclxuXHQgKiBAZW51bSB7U3RyaW5nfVxyXG5cdCAqL1xyXG5cdE93bC5XaWR0aCA9IHtcclxuXHRcdERlZmF1bHQ6ICdkZWZhdWx0JyxcclxuXHRcdElubmVyOiAnaW5uZXInLFxyXG5cdFx0T3V0ZXI6ICdvdXRlcidcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBFbnVtZXJhdGlvbiBmb3IgdHlwZXMuXHJcblx0ICogQHB1YmxpY1xyXG5cdCAqIEByZWFkb25seVxyXG5cdCAqIEBlbnVtIHtTdHJpbmd9XHJcblx0ICovXHJcblx0T3dsLlR5cGUgPSB7XHJcblx0XHRFdmVudDogJ2V2ZW50JyxcclxuXHRcdFN0YXRlOiAnc3RhdGUnXHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogQ29udGFpbnMgYWxsIHJlZ2lzdGVyZWQgcGx1Z2lucy5cclxuXHQgKiBAcHVibGljXHJcblx0ICovXHJcblx0T3dsLlBsdWdpbnMgPSB7fTtcclxuXHJcblx0LyoqXHJcblx0ICogTGlzdCBvZiB3b3JrZXJzIGludm9sdmVkIGluIHRoZSB1cGRhdGUgcHJvY2Vzcy5cclxuXHQgKi9cclxuXHRPd2wuV29ya2VycyA9IFsge1xyXG5cdFx0ZmlsdGVyOiBbICd3aWR0aCcsICdzZXR0aW5ncycgXSxcclxuXHRcdHJ1bjogZnVuY3Rpb24oKSB7XHJcblx0XHRcdHRoaXMuX3dpZHRoID0gdGhpcy4kZWxlbWVudC53aWR0aCgpO1xyXG5cdFx0fVxyXG5cdH0sIHtcclxuXHRcdGZpbHRlcjogWyAnd2lkdGgnLCAnaXRlbXMnLCAnc2V0dGluZ3MnIF0sXHJcblx0XHRydW46IGZ1bmN0aW9uKGNhY2hlKSB7XHJcblx0XHRcdGNhY2hlLmN1cnJlbnQgPSB0aGlzLl9pdGVtcyAmJiB0aGlzLl9pdGVtc1t0aGlzLnJlbGF0aXZlKHRoaXMuX2N1cnJlbnQpXTtcclxuXHRcdH1cclxuXHR9LCB7XHJcblx0XHRmaWx0ZXI6IFsgJ2l0ZW1zJywgJ3NldHRpbmdzJyBdLFxyXG5cdFx0cnVuOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0dGhpcy4kc3RhZ2UuY2hpbGRyZW4oJy5jbG9uZWQnKS5yZW1vdmUoKTtcclxuXHRcdH1cclxuXHR9LCB7XHJcblx0XHRmaWx0ZXI6IFsgJ3dpZHRoJywgJ2l0ZW1zJywgJ3NldHRpbmdzJyBdLFxyXG5cdFx0cnVuOiBmdW5jdGlvbihjYWNoZSkge1xyXG5cdFx0XHR2YXIgbWFyZ2luID0gdGhpcy5zZXR0aW5ncy5tYXJnaW4gfHwgJycsXHJcblx0XHRcdFx0Z3JpZCA9ICF0aGlzLnNldHRpbmdzLmF1dG9XaWR0aCxcclxuXHRcdFx0XHRydGwgPSB0aGlzLnNldHRpbmdzLnJ0bCxcclxuXHRcdFx0XHRjc3MgPSB7XHJcblx0XHRcdFx0XHQnd2lkdGgnOiAnYXV0bycsXHJcblx0XHRcdFx0XHQnbWFyZ2luLWxlZnQnOiBydGwgPyBtYXJnaW4gOiAnJyxcclxuXHRcdFx0XHRcdCdtYXJnaW4tcmlnaHQnOiBydGwgPyAnJyA6IG1hcmdpblxyXG5cdFx0XHRcdH07XHJcblxyXG5cdFx0XHQhZ3JpZCAmJiB0aGlzLiRzdGFnZS5jaGlsZHJlbigpLmNzcyhjc3MpO1xyXG5cclxuXHRcdFx0Y2FjaGUuY3NzID0gY3NzO1xyXG5cdFx0fVxyXG5cdH0sIHtcclxuXHRcdGZpbHRlcjogWyAnd2lkdGgnLCAnaXRlbXMnLCAnc2V0dGluZ3MnIF0sXHJcblx0XHRydW46IGZ1bmN0aW9uKGNhY2hlKSB7XHJcblx0XHRcdHZhciB3aWR0aCA9ICh0aGlzLndpZHRoKCkgLyB0aGlzLnNldHRpbmdzLml0ZW1zKS50b0ZpeGVkKDMpIC0gdGhpcy5zZXR0aW5ncy5tYXJnaW4sXHJcblx0XHRcdFx0bWVyZ2UgPSBudWxsLFxyXG5cdFx0XHRcdGl0ZXJhdG9yID0gdGhpcy5faXRlbXMubGVuZ3RoLFxyXG5cdFx0XHRcdGdyaWQgPSAhdGhpcy5zZXR0aW5ncy5hdXRvV2lkdGgsXHJcblx0XHRcdFx0d2lkdGhzID0gW107XHJcblxyXG5cdFx0XHRjYWNoZS5pdGVtcyA9IHtcclxuXHRcdFx0XHRtZXJnZTogZmFsc2UsXHJcblx0XHRcdFx0d2lkdGg6IHdpZHRoXHJcblx0XHRcdH07XHJcblxyXG5cdFx0XHR3aGlsZSAoaXRlcmF0b3ItLSkge1xyXG5cdFx0XHRcdG1lcmdlID0gdGhpcy5fbWVyZ2Vyc1tpdGVyYXRvcl07XHJcblx0XHRcdFx0bWVyZ2UgPSB0aGlzLnNldHRpbmdzLm1lcmdlRml0ICYmIE1hdGgubWluKG1lcmdlLCB0aGlzLnNldHRpbmdzLml0ZW1zKSB8fCBtZXJnZTtcclxuXHJcblx0XHRcdFx0Y2FjaGUuaXRlbXMubWVyZ2UgPSBtZXJnZSA+IDEgfHwgY2FjaGUuaXRlbXMubWVyZ2U7XHJcblxyXG5cdFx0XHRcdHdpZHRoc1tpdGVyYXRvcl0gPSAhZ3JpZCA/IHRoaXMuX2l0ZW1zW2l0ZXJhdG9yXS53aWR0aCgpIDogd2lkdGggKiBtZXJnZTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dGhpcy5fd2lkdGhzID0gd2lkdGhzO1xyXG5cdFx0fVxyXG5cdH0sIHtcclxuXHRcdGZpbHRlcjogWyAnaXRlbXMnLCAnc2V0dGluZ3MnIF0sXHJcblx0XHRydW46IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR2YXIgY2xvbmVzID0gW10sXHJcblx0XHRcdFx0aXRlbXMgPSB0aGlzLl9pdGVtcyxcclxuXHRcdFx0XHRzZXR0aW5ncyA9IHRoaXMuc2V0dGluZ3MsXHJcblx0XHRcdFx0dmlldyA9IE1hdGgubWF4KHNldHRpbmdzLml0ZW1zICogMiwgNCksXHJcblx0XHRcdFx0c2l6ZSA9IE1hdGguY2VpbChpdGVtcy5sZW5ndGggLyAyKSAqIDIsXHJcblx0XHRcdFx0cmVwZWF0ID0gc2V0dGluZ3MubG9vcCAmJiBpdGVtcy5sZW5ndGggPyBzZXR0aW5ncy5yZXdpbmQgPyB2aWV3IDogTWF0aC5tYXgodmlldywgc2l6ZSkgOiAwLFxyXG5cdFx0XHRcdGFwcGVuZCA9ICcnLFxyXG5cdFx0XHRcdHByZXBlbmQgPSAnJztcclxuXHJcblx0XHRcdHJlcGVhdCAvPSAyO1xyXG5cclxuXHRcdFx0d2hpbGUgKHJlcGVhdC0tKSB7XHJcblx0XHRcdFx0Y2xvbmVzLnB1c2godGhpcy5ub3JtYWxpemUoY2xvbmVzLmxlbmd0aCAvIDIsIHRydWUpKTtcclxuXHRcdFx0XHRhcHBlbmQgPSBhcHBlbmQgKyBpdGVtc1tjbG9uZXNbY2xvbmVzLmxlbmd0aCAtIDFdXVswXS5vdXRlckhUTUw7XHJcblx0XHRcdFx0Y2xvbmVzLnB1c2godGhpcy5ub3JtYWxpemUoaXRlbXMubGVuZ3RoIC0gMSAtIChjbG9uZXMubGVuZ3RoIC0gMSkgLyAyLCB0cnVlKSk7XHJcblx0XHRcdFx0cHJlcGVuZCA9IGl0ZW1zW2Nsb25lc1tjbG9uZXMubGVuZ3RoIC0gMV1dWzBdLm91dGVySFRNTCArIHByZXBlbmQ7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHRoaXMuX2Nsb25lcyA9IGNsb25lcztcclxuXHJcblx0XHRcdCQoYXBwZW5kKS5hZGRDbGFzcygnY2xvbmVkJykuYXBwZW5kVG8odGhpcy4kc3RhZ2UpO1xyXG5cdFx0XHQkKHByZXBlbmQpLmFkZENsYXNzKCdjbG9uZWQnKS5wcmVwZW5kVG8odGhpcy4kc3RhZ2UpO1xyXG5cdFx0fVxyXG5cdH0sIHtcclxuXHRcdGZpbHRlcjogWyAnd2lkdGgnLCAnaXRlbXMnLCAnc2V0dGluZ3MnIF0sXHJcblx0XHRydW46IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR2YXIgcnRsID0gdGhpcy5zZXR0aW5ncy5ydGwgPyAxIDogLTEsXHJcblx0XHRcdFx0c2l6ZSA9IHRoaXMuX2Nsb25lcy5sZW5ndGggKyB0aGlzLl9pdGVtcy5sZW5ndGgsXHJcblx0XHRcdFx0aXRlcmF0b3IgPSAtMSxcclxuXHRcdFx0XHRwcmV2aW91cyA9IDAsXHJcblx0XHRcdFx0Y3VycmVudCA9IDAsXHJcblx0XHRcdFx0Y29vcmRpbmF0ZXMgPSBbXTtcclxuXHJcblx0XHRcdHdoaWxlICgrK2l0ZXJhdG9yIDwgc2l6ZSkge1xyXG5cdFx0XHRcdHByZXZpb3VzID0gY29vcmRpbmF0ZXNbaXRlcmF0b3IgLSAxXSB8fCAwO1xyXG5cdFx0XHRcdGN1cnJlbnQgPSB0aGlzLl93aWR0aHNbdGhpcy5yZWxhdGl2ZShpdGVyYXRvcildICsgdGhpcy5zZXR0aW5ncy5tYXJnaW47XHJcblx0XHRcdFx0Y29vcmRpbmF0ZXMucHVzaChwcmV2aW91cyArIGN1cnJlbnQgKiBydGwpO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR0aGlzLl9jb29yZGluYXRlcyA9IGNvb3JkaW5hdGVzO1xyXG5cdFx0fVxyXG5cdH0sIHtcclxuXHRcdGZpbHRlcjogWyAnd2lkdGgnLCAnaXRlbXMnLCAnc2V0dGluZ3MnIF0sXHJcblx0XHRydW46IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR2YXIgcGFkZGluZyA9IHRoaXMuc2V0dGluZ3Muc3RhZ2VQYWRkaW5nLFxyXG5cdFx0XHRcdGNvb3JkaW5hdGVzID0gdGhpcy5fY29vcmRpbmF0ZXMsXHJcblx0XHRcdFx0Y3NzID0ge1xyXG5cdFx0XHRcdFx0J3dpZHRoJzogTWF0aC5jZWlsKE1hdGguYWJzKGNvb3JkaW5hdGVzW2Nvb3JkaW5hdGVzLmxlbmd0aCAtIDFdKSkgKyBwYWRkaW5nICogMixcclxuXHRcdFx0XHRcdCdwYWRkaW5nLWxlZnQnOiBwYWRkaW5nIHx8ICcnLFxyXG5cdFx0XHRcdFx0J3BhZGRpbmctcmlnaHQnOiBwYWRkaW5nIHx8ICcnXHJcblx0XHRcdFx0fTtcclxuXHJcblx0XHRcdHRoaXMuJHN0YWdlLmNzcyhjc3MpO1xyXG5cdFx0fVxyXG5cdH0sIHtcclxuXHRcdGZpbHRlcjogWyAnd2lkdGgnLCAnaXRlbXMnLCAnc2V0dGluZ3MnIF0sXHJcblx0XHRydW46IGZ1bmN0aW9uKGNhY2hlKSB7XHJcblx0XHRcdHZhciBpdGVyYXRvciA9IHRoaXMuX2Nvb3JkaW5hdGVzLmxlbmd0aCxcclxuXHRcdFx0XHRncmlkID0gIXRoaXMuc2V0dGluZ3MuYXV0b1dpZHRoLFxyXG5cdFx0XHRcdGl0ZW1zID0gdGhpcy4kc3RhZ2UuY2hpbGRyZW4oKTtcclxuXHJcblx0XHRcdGlmIChncmlkICYmIGNhY2hlLml0ZW1zLm1lcmdlKSB7XHJcblx0XHRcdFx0d2hpbGUgKGl0ZXJhdG9yLS0pIHtcclxuXHRcdFx0XHRcdGNhY2hlLmNzcy53aWR0aCA9IHRoaXMuX3dpZHRoc1t0aGlzLnJlbGF0aXZlKGl0ZXJhdG9yKV07XHJcblx0XHRcdFx0XHRpdGVtcy5lcShpdGVyYXRvcikuY3NzKGNhY2hlLmNzcyk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9IGVsc2UgaWYgKGdyaWQpIHtcclxuXHRcdFx0XHRjYWNoZS5jc3Mud2lkdGggPSBjYWNoZS5pdGVtcy53aWR0aDtcclxuXHRcdFx0XHRpdGVtcy5jc3MoY2FjaGUuY3NzKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH0sIHtcclxuXHRcdGZpbHRlcjogWyAnaXRlbXMnIF0sXHJcblx0XHRydW46IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR0aGlzLl9jb29yZGluYXRlcy5sZW5ndGggPCAxICYmIHRoaXMuJHN0YWdlLnJlbW92ZUF0dHIoJ3N0eWxlJyk7XHJcblx0XHR9XHJcblx0fSwge1xyXG5cdFx0ZmlsdGVyOiBbICd3aWR0aCcsICdpdGVtcycsICdzZXR0aW5ncycgXSxcclxuXHRcdHJ1bjogZnVuY3Rpb24oY2FjaGUpIHtcclxuXHRcdFx0Y2FjaGUuY3VycmVudCA9IGNhY2hlLmN1cnJlbnQgPyB0aGlzLiRzdGFnZS5jaGlsZHJlbigpLmluZGV4KGNhY2hlLmN1cnJlbnQpIDogMDtcclxuXHRcdFx0Y2FjaGUuY3VycmVudCA9IE1hdGgubWF4KHRoaXMubWluaW11bSgpLCBNYXRoLm1pbih0aGlzLm1heGltdW0oKSwgY2FjaGUuY3VycmVudCkpO1xyXG5cdFx0XHR0aGlzLnJlc2V0KGNhY2hlLmN1cnJlbnQpO1xyXG5cdFx0fVxyXG5cdH0sIHtcclxuXHRcdGZpbHRlcjogWyAncG9zaXRpb24nIF0sXHJcblx0XHRydW46IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR0aGlzLmFuaW1hdGUodGhpcy5jb29yZGluYXRlcyh0aGlzLl9jdXJyZW50KSk7XHJcblx0XHR9XHJcblx0fSwge1xyXG5cdFx0ZmlsdGVyOiBbICd3aWR0aCcsICdwb3NpdGlvbicsICdpdGVtcycsICdzZXR0aW5ncycgXSxcclxuXHRcdHJ1bjogZnVuY3Rpb24oKSB7XHJcblx0XHRcdHZhciBydGwgPSB0aGlzLnNldHRpbmdzLnJ0bCA/IDEgOiAtMSxcclxuXHRcdFx0XHRwYWRkaW5nID0gdGhpcy5zZXR0aW5ncy5zdGFnZVBhZGRpbmcgKiAyLFxyXG5cdFx0XHRcdGJlZ2luID0gdGhpcy5jb29yZGluYXRlcyh0aGlzLmN1cnJlbnQoKSkgKyBwYWRkaW5nLFxyXG5cdFx0XHRcdGVuZCA9IGJlZ2luICsgdGhpcy53aWR0aCgpICogcnRsLFxyXG5cdFx0XHRcdGlubmVyLCBvdXRlciwgbWF0Y2hlcyA9IFtdLCBpLCBuO1xyXG5cclxuXHRcdFx0Zm9yIChpID0gMCwgbiA9IHRoaXMuX2Nvb3JkaW5hdGVzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG5cdFx0XHRcdGlubmVyID0gdGhpcy5fY29vcmRpbmF0ZXNbaSAtIDFdIHx8IDA7XHJcblx0XHRcdFx0b3V0ZXIgPSBNYXRoLmFicyh0aGlzLl9jb29yZGluYXRlc1tpXSkgKyBwYWRkaW5nICogcnRsO1xyXG5cclxuXHRcdFx0XHRpZiAoKHRoaXMub3AoaW5uZXIsICc8PScsIGJlZ2luKSAmJiAodGhpcy5vcChpbm5lciwgJz4nLCBlbmQpKSlcclxuXHRcdFx0XHRcdHx8ICh0aGlzLm9wKG91dGVyLCAnPCcsIGJlZ2luKSAmJiB0aGlzLm9wKG91dGVyLCAnPicsIGVuZCkpKSB7XHJcblx0XHRcdFx0XHRtYXRjaGVzLnB1c2goaSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR0aGlzLiRzdGFnZS5jaGlsZHJlbignLmFjdGl2ZScpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcclxuXHRcdFx0dGhpcy4kc3RhZ2UuY2hpbGRyZW4oJzplcSgnICsgbWF0Y2hlcy5qb2luKCcpLCA6ZXEoJykgKyAnKScpLmFkZENsYXNzKCdhY3RpdmUnKTtcclxuXHJcblx0XHRcdGlmICh0aGlzLnNldHRpbmdzLmNlbnRlcikge1xyXG5cdFx0XHRcdHRoaXMuJHN0YWdlLmNoaWxkcmVuKCcuY2VudGVyJykucmVtb3ZlQ2xhc3MoJ2NlbnRlcicpO1xyXG5cdFx0XHRcdHRoaXMuJHN0YWdlLmNoaWxkcmVuKCkuZXEodGhpcy5jdXJyZW50KCkpLmFkZENsYXNzKCdjZW50ZXInKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH0gXTtcclxuXHJcblx0LyoqXHJcblx0ICogSW5pdGlhbGl6ZXMgdGhlIGNhcm91c2VsLlxyXG5cdCAqIEBwcm90ZWN0ZWRcclxuXHQgKi9cclxuXHRPd2wucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbigpIHtcclxuXHRcdHRoaXMuZW50ZXIoJ2luaXRpYWxpemluZycpO1xyXG5cdFx0dGhpcy50cmlnZ2VyKCdpbml0aWFsaXplJyk7XHJcblxyXG5cdFx0dGhpcy4kZWxlbWVudC50b2dnbGVDbGFzcyh0aGlzLnNldHRpbmdzLnJ0bENsYXNzLCB0aGlzLnNldHRpbmdzLnJ0bCk7XHJcblxyXG5cdFx0aWYgKHRoaXMuc2V0dGluZ3MuYXV0b1dpZHRoICYmICF0aGlzLmlzKCdwcmUtbG9hZGluZycpKSB7XHJcblx0XHRcdHZhciBpbWdzLCBuZXN0ZWRTZWxlY3Rvciwgd2lkdGg7XHJcblx0XHRcdGltZ3MgPSB0aGlzLiRlbGVtZW50LmZpbmQoJ2ltZycpO1xyXG5cdFx0XHRuZXN0ZWRTZWxlY3RvciA9IHRoaXMuc2V0dGluZ3MubmVzdGVkSXRlbVNlbGVjdG9yID8gJy4nICsgdGhpcy5zZXR0aW5ncy5uZXN0ZWRJdGVtU2VsZWN0b3IgOiB1bmRlZmluZWQ7XHJcblx0XHRcdHdpZHRoID0gdGhpcy4kZWxlbWVudC5jaGlsZHJlbihuZXN0ZWRTZWxlY3Rvcikud2lkdGgoKTtcclxuXHJcblx0XHRcdGlmIChpbWdzLmxlbmd0aCAmJiB3aWR0aCA8PSAwKSB7XHJcblx0XHRcdFx0dGhpcy5wcmVsb2FkQXV0b1dpZHRoSW1hZ2VzKGltZ3MpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy4kZWxlbWVudC5hZGRDbGFzcyh0aGlzLm9wdGlvbnMubG9hZGluZ0NsYXNzKTtcclxuXHJcblx0XHQvLyBjcmVhdGUgc3RhZ2VcclxuXHRcdHRoaXMuJHN0YWdlID0gJCgnPCcgKyB0aGlzLnNldHRpbmdzLnN0YWdlRWxlbWVudCArICcgY2xhc3M9XCInICsgdGhpcy5zZXR0aW5ncy5zdGFnZUNsYXNzICsgJ1wiLz4nKVxyXG5cdFx0XHQud3JhcCgnPGRpdiBjbGFzcz1cIicgKyB0aGlzLnNldHRpbmdzLnN0YWdlT3V0ZXJDbGFzcyArICdcIi8+Jyk7XHJcblxyXG5cdFx0Ly8gYXBwZW5kIHN0YWdlXHJcblx0XHR0aGlzLiRlbGVtZW50LmFwcGVuZCh0aGlzLiRzdGFnZS5wYXJlbnQoKSk7XHJcblxyXG5cdFx0Ly8gYXBwZW5kIGNvbnRlbnRcclxuXHRcdHRoaXMucmVwbGFjZSh0aGlzLiRlbGVtZW50LmNoaWxkcmVuKCkubm90KHRoaXMuJHN0YWdlLnBhcmVudCgpKSk7XHJcblxyXG5cdFx0Ly8gY2hlY2sgdmlzaWJpbGl0eVxyXG5cdFx0aWYgKHRoaXMuJGVsZW1lbnQuaXMoJzp2aXNpYmxlJykpIHtcclxuXHRcdFx0Ly8gdXBkYXRlIHZpZXdcclxuXHRcdFx0dGhpcy5yZWZyZXNoKCk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHQvLyBpbnZhbGlkYXRlIHdpZHRoXHJcblx0XHRcdHRoaXMuaW52YWxpZGF0ZSgnd2lkdGgnKTtcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLiRlbGVtZW50XHJcblx0XHRcdC5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMubG9hZGluZ0NsYXNzKVxyXG5cdFx0XHQuYWRkQ2xhc3ModGhpcy5vcHRpb25zLmxvYWRlZENsYXNzKTtcclxuXHJcblx0XHQvLyByZWdpc3RlciBldmVudCBoYW5kbGVyc1xyXG5cdFx0dGhpcy5yZWdpc3RlckV2ZW50SGFuZGxlcnMoKTtcclxuXHJcblx0XHR0aGlzLmxlYXZlKCdpbml0aWFsaXppbmcnKTtcclxuXHRcdHRoaXMudHJpZ2dlcignaW5pdGlhbGl6ZWQnKTtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBTZXR1cHMgdGhlIGN1cnJlbnQgc2V0dGluZ3MuXHJcblx0ICogQHRvZG8gUmVtb3ZlIHJlc3BvbnNpdmUgY2xhc3Nlcy4gV2h5IHNob3VsZCBhZGFwdGl2ZSBkZXNpZ25zIGJlIGJyb3VnaHQgaW50byBJRTg/XHJcblx0ICogQHRvZG8gU3VwcG9ydCBmb3IgbWVkaWEgcXVlcmllcyBieSB1c2luZyBgbWF0Y2hNZWRpYWAgd291bGQgYmUgbmljZS5cclxuXHQgKiBAcHVibGljXHJcblx0ICovXHJcblx0T3dsLnByb3RvdHlwZS5zZXR1cCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIHZpZXdwb3J0ID0gdGhpcy52aWV3cG9ydCgpLFxyXG5cdFx0XHRvdmVyd3JpdGVzID0gdGhpcy5vcHRpb25zLnJlc3BvbnNpdmUsXHJcblx0XHRcdG1hdGNoID0gLTEsXHJcblx0XHRcdHNldHRpbmdzID0gbnVsbDtcclxuXHJcblx0XHRpZiAoIW92ZXJ3cml0ZXMpIHtcclxuXHRcdFx0c2V0dGluZ3MgPSAkLmV4dGVuZCh7fSwgdGhpcy5vcHRpb25zKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdCQuZWFjaChvdmVyd3JpdGVzLCBmdW5jdGlvbihicmVha3BvaW50KSB7XHJcblx0XHRcdFx0aWYgKGJyZWFrcG9pbnQgPD0gdmlld3BvcnQgJiYgYnJlYWtwb2ludCA+IG1hdGNoKSB7XHJcblx0XHRcdFx0XHRtYXRjaCA9IE51bWJlcihicmVha3BvaW50KTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cclxuXHRcdFx0c2V0dGluZ3MgPSAkLmV4dGVuZCh7fSwgdGhpcy5vcHRpb25zLCBvdmVyd3JpdGVzW21hdGNoXSk7XHJcblx0XHRcdGlmICh0eXBlb2Ygc2V0dGluZ3Muc3RhZ2VQYWRkaW5nID09PSAnZnVuY3Rpb24nKSB7XHJcblx0XHRcdFx0c2V0dGluZ3Muc3RhZ2VQYWRkaW5nID0gc2V0dGluZ3Muc3RhZ2VQYWRkaW5nKCk7XHJcblx0XHRcdH1cclxuXHRcdFx0ZGVsZXRlIHNldHRpbmdzLnJlc3BvbnNpdmU7XHJcblxyXG5cdFx0XHQvLyByZXNwb25zaXZlIGNsYXNzXHJcblx0XHRcdGlmIChzZXR0aW5ncy5yZXNwb25zaXZlQ2xhc3MpIHtcclxuXHRcdFx0XHR0aGlzLiRlbGVtZW50LmF0dHIoJ2NsYXNzJyxcclxuXHRcdFx0XHRcdHRoaXMuJGVsZW1lbnQuYXR0cignY2xhc3MnKS5yZXBsYWNlKG5ldyBSZWdFeHAoJygnICsgdGhpcy5vcHRpb25zLnJlc3BvbnNpdmVDbGFzcyArICctKVxcXFxTK1xcXFxzJywgJ2cnKSwgJyQxJyArIG1hdGNoKVxyXG5cdFx0XHRcdCk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLnRyaWdnZXIoJ2NoYW5nZScsIHsgcHJvcGVydHk6IHsgbmFtZTogJ3NldHRpbmdzJywgdmFsdWU6IHNldHRpbmdzIH0gfSk7XHJcblx0XHR0aGlzLl9icmVha3BvaW50ID0gbWF0Y2g7XHJcblx0XHR0aGlzLnNldHRpbmdzID0gc2V0dGluZ3M7XHJcblx0XHR0aGlzLmludmFsaWRhdGUoJ3NldHRpbmdzJyk7XHJcblx0XHR0aGlzLnRyaWdnZXIoJ2NoYW5nZWQnLCB7IHByb3BlcnR5OiB7IG5hbWU6ICdzZXR0aW5ncycsIHZhbHVlOiB0aGlzLnNldHRpbmdzIH0gfSk7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogVXBkYXRlcyBvcHRpb24gbG9naWMgaWYgbmVjZXNzZXJ5LlxyXG5cdCAqIEBwcm90ZWN0ZWRcclxuXHQgKi9cclxuXHRPd2wucHJvdG90eXBlLm9wdGlvbnNMb2dpYyA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0aWYgKHRoaXMuc2V0dGluZ3MuYXV0b1dpZHRoKSB7XHJcblx0XHRcdHRoaXMuc2V0dGluZ3Muc3RhZ2VQYWRkaW5nID0gZmFsc2U7XHJcblx0XHRcdHRoaXMuc2V0dGluZ3MubWVyZ2UgPSBmYWxzZTtcclxuXHRcdH1cclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBQcmVwYXJlcyBhbiBpdGVtIGJlZm9yZSBhZGQuXHJcblx0ICogQHRvZG8gUmVuYW1lIGV2ZW50IHBhcmFtZXRlciBgY29udGVudGAgdG8gYGl0ZW1gLlxyXG5cdCAqIEBwcm90ZWN0ZWRcclxuXHQgKiBAcmV0dXJucyB7alF1ZXJ5fEhUTUxFbGVtZW50fSAtIFRoZSBpdGVtIGNvbnRhaW5lci5cclxuXHQgKi9cclxuXHRPd2wucHJvdG90eXBlLnByZXBhcmUgPSBmdW5jdGlvbihpdGVtKSB7XHJcblx0XHR2YXIgZXZlbnQgPSB0aGlzLnRyaWdnZXIoJ3ByZXBhcmUnLCB7IGNvbnRlbnQ6IGl0ZW0gfSk7XHJcblxyXG5cdFx0aWYgKCFldmVudC5kYXRhKSB7XHJcblx0XHRcdGV2ZW50LmRhdGEgPSAkKCc8JyArIHRoaXMuc2V0dGluZ3MuaXRlbUVsZW1lbnQgKyAnLz4nKVxyXG5cdFx0XHRcdC5hZGRDbGFzcyh0aGlzLm9wdGlvbnMuaXRlbUNsYXNzKS5hcHBlbmQoaXRlbSlcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLnRyaWdnZXIoJ3ByZXBhcmVkJywgeyBjb250ZW50OiBldmVudC5kYXRhIH0pO1xyXG5cclxuXHRcdHJldHVybiBldmVudC5kYXRhO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIFVwZGF0ZXMgdGhlIHZpZXcuXHJcblx0ICogQHB1YmxpY1xyXG5cdCAqL1xyXG5cdE93bC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oKSB7XHJcblx0XHR2YXIgaSA9IDAsXHJcblx0XHRcdG4gPSB0aGlzLl9waXBlLmxlbmd0aCxcclxuXHRcdFx0ZmlsdGVyID0gJC5wcm94eShmdW5jdGlvbihwKSB7IHJldHVybiB0aGlzW3BdIH0sIHRoaXMuX2ludmFsaWRhdGVkKSxcclxuXHRcdFx0Y2FjaGUgPSB7fTtcclxuXHJcblx0XHR3aGlsZSAoaSA8IG4pIHtcclxuXHRcdFx0aWYgKHRoaXMuX2ludmFsaWRhdGVkLmFsbCB8fCAkLmdyZXAodGhpcy5fcGlwZVtpXS5maWx0ZXIsIGZpbHRlcikubGVuZ3RoID4gMCkge1xyXG5cdFx0XHRcdHRoaXMuX3BpcGVbaV0ucnVuKGNhY2hlKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRpKys7XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5faW52YWxpZGF0ZWQgPSB7fTtcclxuXHJcblx0XHQhdGhpcy5pcygndmFsaWQnKSAmJiB0aGlzLmVudGVyKCd2YWxpZCcpO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIEdldHMgdGhlIHdpZHRoIG9mIHRoZSB2aWV3LlxyXG5cdCAqIEBwdWJsaWNcclxuXHQgKiBAcGFyYW0ge093bC5XaWR0aH0gW2RpbWVuc2lvbj1Pd2wuV2lkdGguRGVmYXVsdF0gLSBUaGUgZGltZW5zaW9uIHRvIHJldHVybi5cclxuXHQgKiBAcmV0dXJucyB7TnVtYmVyfSAtIFRoZSB3aWR0aCBvZiB0aGUgdmlldyBpbiBwaXhlbC5cclxuXHQgKi9cclxuXHRPd2wucHJvdG90eXBlLndpZHRoID0gZnVuY3Rpb24oZGltZW5zaW9uKSB7XHJcblx0XHRkaW1lbnNpb24gPSBkaW1lbnNpb24gfHwgT3dsLldpZHRoLkRlZmF1bHQ7XHJcblx0XHRzd2l0Y2ggKGRpbWVuc2lvbikge1xyXG5cdFx0XHRjYXNlIE93bC5XaWR0aC5Jbm5lcjpcclxuXHRcdFx0Y2FzZSBPd2wuV2lkdGguT3V0ZXI6XHJcblx0XHRcdFx0cmV0dXJuIHRoaXMuX3dpZHRoO1xyXG5cdFx0XHRkZWZhdWx0OlxyXG5cdFx0XHRcdHJldHVybiB0aGlzLl93aWR0aCAtIHRoaXMuc2V0dGluZ3Muc3RhZ2VQYWRkaW5nICogMiArIHRoaXMuc2V0dGluZ3MubWFyZ2luO1xyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIFJlZnJlc2hlcyB0aGUgY2Fyb3VzZWwgcHJpbWFyaWx5IGZvciBhZGFwdGl2ZSBwdXJwb3Nlcy5cclxuXHQgKiBAcHVibGljXHJcblx0ICovXHJcblx0T3dsLnByb3RvdHlwZS5yZWZyZXNoID0gZnVuY3Rpb24oKSB7XHJcblx0XHR0aGlzLmVudGVyKCdyZWZyZXNoaW5nJyk7XHJcblx0XHR0aGlzLnRyaWdnZXIoJ3JlZnJlc2gnKTtcclxuXHJcblx0XHR0aGlzLnNldHVwKCk7XHJcblxyXG5cdFx0dGhpcy5vcHRpb25zTG9naWMoKTtcclxuXHJcblx0XHR0aGlzLiRlbGVtZW50LmFkZENsYXNzKHRoaXMub3B0aW9ucy5yZWZyZXNoQ2xhc3MpO1xyXG5cclxuXHRcdHRoaXMudXBkYXRlKCk7XHJcblxyXG5cdFx0dGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMucmVmcmVzaENsYXNzKTtcclxuXHJcblx0XHR0aGlzLmxlYXZlKCdyZWZyZXNoaW5nJyk7XHJcblx0XHR0aGlzLnRyaWdnZXIoJ3JlZnJlc2hlZCcpO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIENoZWNrcyB3aW5kb3cgYHJlc2l6ZWAgZXZlbnQuXHJcblx0ICogQHByb3RlY3RlZFxyXG5cdCAqL1xyXG5cdE93bC5wcm90b3R5cGUub25UaHJvdHRsZWRSZXNpemUgPSBmdW5jdGlvbigpIHtcclxuXHRcdHdpbmRvdy5jbGVhclRpbWVvdXQodGhpcy5yZXNpemVUaW1lcik7XHJcblx0XHR0aGlzLnJlc2l6ZVRpbWVyID0gd2luZG93LnNldFRpbWVvdXQodGhpcy5faGFuZGxlcnMub25SZXNpemUsIHRoaXMuc2V0dGluZ3MucmVzcG9uc2l2ZVJlZnJlc2hSYXRlKTtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBDaGVja3Mgd2luZG93IGByZXNpemVgIGV2ZW50LlxyXG5cdCAqIEBwcm90ZWN0ZWRcclxuXHQgKi9cclxuXHRPd2wucHJvdG90eXBlLm9uUmVzaXplID0gZnVuY3Rpb24oKSB7XHJcblx0XHRpZiAoIXRoaXMuX2l0ZW1zLmxlbmd0aCkge1xyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHRoaXMuX3dpZHRoID09PSB0aGlzLiRlbGVtZW50LndpZHRoKCkpIHtcclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICghdGhpcy4kZWxlbWVudC5pcygnOnZpc2libGUnKSkge1xyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5lbnRlcigncmVzaXppbmcnKTtcclxuXHJcblx0XHRpZiAodGhpcy50cmlnZ2VyKCdyZXNpemUnKS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xyXG5cdFx0XHR0aGlzLmxlYXZlKCdyZXNpemluZycpO1xyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5pbnZhbGlkYXRlKCd3aWR0aCcpO1xyXG5cclxuXHRcdHRoaXMucmVmcmVzaCgpO1xyXG5cclxuXHRcdHRoaXMubGVhdmUoJ3Jlc2l6aW5nJyk7XHJcblx0XHR0aGlzLnRyaWdnZXIoJ3Jlc2l6ZWQnKTtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBSZWdpc3RlcnMgZXZlbnQgaGFuZGxlcnMuXHJcblx0ICogQHRvZG8gQ2hlY2sgYG1zUG9pbnRlckVuYWJsZWRgXHJcblx0ICogQHRvZG8gIzI2MVxyXG5cdCAqIEBwcm90ZWN0ZWRcclxuXHQgKi9cclxuXHRPd2wucHJvdG90eXBlLnJlZ2lzdGVyRXZlbnRIYW5kbGVycyA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0aWYgKCQuc3VwcG9ydC50cmFuc2l0aW9uKSB7XHJcblx0XHRcdHRoaXMuJHN0YWdlLm9uKCQuc3VwcG9ydC50cmFuc2l0aW9uLmVuZCArICcub3dsLmNvcmUnLCAkLnByb3h5KHRoaXMub25UcmFuc2l0aW9uRW5kLCB0aGlzKSk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHRoaXMuc2V0dGluZ3MucmVzcG9uc2l2ZSAhPT0gZmFsc2UpIHtcclxuXHRcdFx0dGhpcy5vbih3aW5kb3csICdyZXNpemUnLCB0aGlzLl9oYW5kbGVycy5vblRocm90dGxlZFJlc2l6ZSk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHRoaXMuc2V0dGluZ3MubW91c2VEcmFnKSB7XHJcblx0XHRcdHRoaXMuJGVsZW1lbnQuYWRkQ2xhc3ModGhpcy5vcHRpb25zLmRyYWdDbGFzcyk7XHJcblx0XHRcdHRoaXMuJHN0YWdlLm9uKCdtb3VzZWRvd24ub3dsLmNvcmUnLCAkLnByb3h5KHRoaXMub25EcmFnU3RhcnQsIHRoaXMpKTtcclxuXHRcdFx0dGhpcy4kc3RhZ2Uub24oJ2RyYWdzdGFydC5vd2wuY29yZSBzZWxlY3RzdGFydC5vd2wuY29yZScsIGZ1bmN0aW9uKCkgeyByZXR1cm4gZmFsc2UgfSk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHRoaXMuc2V0dGluZ3MudG91Y2hEcmFnKXtcclxuXHRcdFx0dGhpcy4kc3RhZ2Uub24oJ3RvdWNoc3RhcnQub3dsLmNvcmUnLCAkLnByb3h5KHRoaXMub25EcmFnU3RhcnQsIHRoaXMpKTtcclxuXHRcdFx0dGhpcy4kc3RhZ2Uub24oJ3RvdWNoY2FuY2VsLm93bC5jb3JlJywgJC5wcm94eSh0aGlzLm9uRHJhZ0VuZCwgdGhpcykpO1xyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIEhhbmRsZXMgYHRvdWNoc3RhcnRgIGFuZCBgbW91c2Vkb3duYCBldmVudHMuXHJcblx0ICogQHRvZG8gSG9yaXpvbnRhbCBzd2lwZSB0aHJlc2hvbGQgYXMgb3B0aW9uXHJcblx0ICogQHRvZG8gIzI2MVxyXG5cdCAqIEBwcm90ZWN0ZWRcclxuXHQgKiBAcGFyYW0ge0V2ZW50fSBldmVudCAtIFRoZSBldmVudCBhcmd1bWVudHMuXHJcblx0ICovXHJcblx0T3dsLnByb3RvdHlwZS5vbkRyYWdTdGFydCA9IGZ1bmN0aW9uKGV2ZW50KSB7XHJcblx0XHR2YXIgc3RhZ2UgPSBudWxsO1xyXG5cclxuXHRcdGlmIChldmVudC53aGljaCA9PT0gMykge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCQuc3VwcG9ydC50cmFuc2Zvcm0pIHtcclxuXHRcdFx0c3RhZ2UgPSB0aGlzLiRzdGFnZS5jc3MoJ3RyYW5zZm9ybScpLnJlcGxhY2UoLy4qXFwofFxcKXwgL2csICcnKS5zcGxpdCgnLCcpO1xyXG5cdFx0XHRzdGFnZSA9IHtcclxuXHRcdFx0XHR4OiBzdGFnZVtzdGFnZS5sZW5ndGggPT09IDE2ID8gMTIgOiA0XSxcclxuXHRcdFx0XHR5OiBzdGFnZVtzdGFnZS5sZW5ndGggPT09IDE2ID8gMTMgOiA1XVxyXG5cdFx0XHR9O1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0c3RhZ2UgPSB0aGlzLiRzdGFnZS5wb3NpdGlvbigpO1xyXG5cdFx0XHRzdGFnZSA9IHtcclxuXHRcdFx0XHR4OiB0aGlzLnNldHRpbmdzLnJ0bCA/XHJcblx0XHRcdFx0XHRzdGFnZS5sZWZ0ICsgdGhpcy4kc3RhZ2Uud2lkdGgoKSAtIHRoaXMud2lkdGgoKSArIHRoaXMuc2V0dGluZ3MubWFyZ2luIDpcclxuXHRcdFx0XHRcdHN0YWdlLmxlZnQsXHJcblx0XHRcdFx0eTogc3RhZ2UudG9wXHJcblx0XHRcdH07XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHRoaXMuaXMoJ2FuaW1hdGluZycpKSB7XHJcblx0XHRcdCQuc3VwcG9ydC50cmFuc2Zvcm0gPyB0aGlzLmFuaW1hdGUoc3RhZ2UueCkgOiB0aGlzLiRzdGFnZS5zdG9wKClcclxuXHRcdFx0dGhpcy5pbnZhbGlkYXRlKCdwb3NpdGlvbicpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuJGVsZW1lbnQudG9nZ2xlQ2xhc3ModGhpcy5vcHRpb25zLmdyYWJDbGFzcywgZXZlbnQudHlwZSA9PT0gJ21vdXNlZG93bicpO1xyXG5cclxuXHRcdHRoaXMuc3BlZWQoMCk7XHJcblxyXG5cdFx0dGhpcy5fZHJhZy50aW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcblx0XHR0aGlzLl9kcmFnLnRhcmdldCA9ICQoZXZlbnQudGFyZ2V0KTtcclxuXHRcdHRoaXMuX2RyYWcuc3RhZ2Uuc3RhcnQgPSBzdGFnZTtcclxuXHRcdHRoaXMuX2RyYWcuc3RhZ2UuY3VycmVudCA9IHN0YWdlO1xyXG5cdFx0dGhpcy5fZHJhZy5wb2ludGVyID0gdGhpcy5wb2ludGVyKGV2ZW50KTtcclxuXHJcblx0XHQkKGRvY3VtZW50KS5vbignbW91c2V1cC5vd2wuY29yZSB0b3VjaGVuZC5vd2wuY29yZScsICQucHJveHkodGhpcy5vbkRyYWdFbmQsIHRoaXMpKTtcclxuXHJcblx0XHQkKGRvY3VtZW50KS5vbmUoJ21vdXNlbW92ZS5vd2wuY29yZSB0b3VjaG1vdmUub3dsLmNvcmUnLCAkLnByb3h5KGZ1bmN0aW9uKGV2ZW50KSB7XHJcblx0XHRcdHZhciBkZWx0YSA9IHRoaXMuZGlmZmVyZW5jZSh0aGlzLl9kcmFnLnBvaW50ZXIsIHRoaXMucG9pbnRlcihldmVudCkpO1xyXG5cclxuXHRcdFx0JChkb2N1bWVudCkub24oJ21vdXNlbW92ZS5vd2wuY29yZSB0b3VjaG1vdmUub3dsLmNvcmUnLCAkLnByb3h5KHRoaXMub25EcmFnTW92ZSwgdGhpcykpO1xyXG5cclxuXHRcdFx0aWYgKE1hdGguYWJzKGRlbHRhLngpIDwgTWF0aC5hYnMoZGVsdGEueSkgJiYgdGhpcy5pcygndmFsaWQnKSkge1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuXHJcblx0XHRcdHRoaXMuZW50ZXIoJ2RyYWdnaW5nJyk7XHJcblx0XHRcdHRoaXMudHJpZ2dlcignZHJhZycpO1xyXG5cdFx0fSwgdGhpcykpO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIEhhbmRsZXMgdGhlIGB0b3VjaG1vdmVgIGFuZCBgbW91c2Vtb3ZlYCBldmVudHMuXHJcblx0ICogQHRvZG8gIzI2MVxyXG5cdCAqIEBwcm90ZWN0ZWRcclxuXHQgKiBAcGFyYW0ge0V2ZW50fSBldmVudCAtIFRoZSBldmVudCBhcmd1bWVudHMuXHJcblx0ICovXHJcblx0T3dsLnByb3RvdHlwZS5vbkRyYWdNb3ZlID0gZnVuY3Rpb24oZXZlbnQpIHtcclxuXHRcdHZhciBtaW5pbXVtID0gbnVsbCxcclxuXHRcdFx0bWF4aW11bSA9IG51bGwsXHJcblx0XHRcdHB1bGwgPSBudWxsLFxyXG5cdFx0XHRkZWx0YSA9IHRoaXMuZGlmZmVyZW5jZSh0aGlzLl9kcmFnLnBvaW50ZXIsIHRoaXMucG9pbnRlcihldmVudCkpLFxyXG5cdFx0XHRzdGFnZSA9IHRoaXMuZGlmZmVyZW5jZSh0aGlzLl9kcmFnLnN0YWdlLnN0YXJ0LCBkZWx0YSk7XHJcblxyXG5cdFx0aWYgKCF0aGlzLmlzKCdkcmFnZ2luZycpKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuXHRcdGlmICh0aGlzLnNldHRpbmdzLmxvb3ApIHtcclxuXHRcdFx0bWluaW11bSA9IHRoaXMuY29vcmRpbmF0ZXModGhpcy5taW5pbXVtKCkpO1xyXG5cdFx0XHRtYXhpbXVtID0gdGhpcy5jb29yZGluYXRlcyh0aGlzLm1heGltdW0oKSArIDEpIC0gbWluaW11bTtcclxuXHRcdFx0c3RhZ2UueCA9ICgoKHN0YWdlLnggLSBtaW5pbXVtKSAlIG1heGltdW0gKyBtYXhpbXVtKSAlIG1heGltdW0pICsgbWluaW11bTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdG1pbmltdW0gPSB0aGlzLnNldHRpbmdzLnJ0bCA/IHRoaXMuY29vcmRpbmF0ZXModGhpcy5tYXhpbXVtKCkpIDogdGhpcy5jb29yZGluYXRlcyh0aGlzLm1pbmltdW0oKSk7XHJcblx0XHRcdG1heGltdW0gPSB0aGlzLnNldHRpbmdzLnJ0bCA/IHRoaXMuY29vcmRpbmF0ZXModGhpcy5taW5pbXVtKCkpIDogdGhpcy5jb29yZGluYXRlcyh0aGlzLm1heGltdW0oKSk7XHJcblx0XHRcdHB1bGwgPSB0aGlzLnNldHRpbmdzLnB1bGxEcmFnID8gLTEgKiBkZWx0YS54IC8gNSA6IDA7XHJcblx0XHRcdHN0YWdlLnggPSBNYXRoLm1heChNYXRoLm1pbihzdGFnZS54LCBtaW5pbXVtICsgcHVsbCksIG1heGltdW0gKyBwdWxsKTtcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLl9kcmFnLnN0YWdlLmN1cnJlbnQgPSBzdGFnZTtcclxuXHJcblx0XHR0aGlzLmFuaW1hdGUoc3RhZ2UueCk7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogSGFuZGxlcyB0aGUgYHRvdWNoZW5kYCBhbmQgYG1vdXNldXBgIGV2ZW50cy5cclxuXHQgKiBAdG9kbyAjMjYxXHJcblx0ICogQHRvZG8gVGhyZXNob2xkIGZvciBjbGljayBldmVudFxyXG5cdCAqIEBwcm90ZWN0ZWRcclxuXHQgKiBAcGFyYW0ge0V2ZW50fSBldmVudCAtIFRoZSBldmVudCBhcmd1bWVudHMuXHJcblx0ICovXHJcblx0T3dsLnByb3RvdHlwZS5vbkRyYWdFbmQgPSBmdW5jdGlvbihldmVudCkge1xyXG5cdFx0dmFyIGRlbHRhID0gdGhpcy5kaWZmZXJlbmNlKHRoaXMuX2RyYWcucG9pbnRlciwgdGhpcy5wb2ludGVyKGV2ZW50KSksXHJcblx0XHRcdHN0YWdlID0gdGhpcy5fZHJhZy5zdGFnZS5jdXJyZW50LFxyXG5cdFx0XHRkaXJlY3Rpb24gPSBkZWx0YS54ID4gMCBeIHRoaXMuc2V0dGluZ3MucnRsID8gJ2xlZnQnIDogJ3JpZ2h0JztcclxuXHJcblx0XHQkKGRvY3VtZW50KS5vZmYoJy5vd2wuY29yZScpO1xyXG5cclxuXHRcdHRoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLmdyYWJDbGFzcyk7XHJcblxyXG5cdFx0aWYgKGRlbHRhLnggIT09IDAgJiYgdGhpcy5pcygnZHJhZ2dpbmcnKSB8fCAhdGhpcy5pcygndmFsaWQnKSkge1xyXG5cdFx0XHR0aGlzLnNwZWVkKHRoaXMuc2V0dGluZ3MuZHJhZ0VuZFNwZWVkIHx8IHRoaXMuc2V0dGluZ3Muc21hcnRTcGVlZCk7XHJcblx0XHRcdHRoaXMuY3VycmVudCh0aGlzLmNsb3Nlc3Qoc3RhZ2UueCwgZGVsdGEueCAhPT0gMCA/IGRpcmVjdGlvbiA6IHRoaXMuX2RyYWcuZGlyZWN0aW9uKSk7XHJcblx0XHRcdHRoaXMuaW52YWxpZGF0ZSgncG9zaXRpb24nKTtcclxuXHRcdFx0dGhpcy51cGRhdGUoKTtcclxuXHJcblx0XHRcdHRoaXMuX2RyYWcuZGlyZWN0aW9uID0gZGlyZWN0aW9uO1xyXG5cclxuXHRcdFx0aWYgKE1hdGguYWJzKGRlbHRhLngpID4gMyB8fCBuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIHRoaXMuX2RyYWcudGltZSA+IDMwMCkge1xyXG5cdFx0XHRcdHRoaXMuX2RyYWcudGFyZ2V0Lm9uZSgnY2xpY2sub3dsLmNvcmUnLCBmdW5jdGlvbigpIHsgcmV0dXJuIGZhbHNlOyB9KTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdGlmICghdGhpcy5pcygnZHJhZ2dpbmcnKSkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5sZWF2ZSgnZHJhZ2dpbmcnKTtcclxuXHRcdHRoaXMudHJpZ2dlcignZHJhZ2dlZCcpO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIEdldHMgYWJzb2x1dGUgcG9zaXRpb24gb2YgdGhlIGNsb3Nlc3QgaXRlbSBmb3IgYSBjb29yZGluYXRlLlxyXG5cdCAqIEB0b2RvIFNldHRpbmcgYGZyZWVEcmFnYCBtYWtlcyBgY2xvc2VzdGAgbm90IHJldXNhYmxlLiBTZWUgIzE2NS5cclxuXHQgKiBAcHJvdGVjdGVkXHJcblx0ICogQHBhcmFtIHtOdW1iZXJ9IGNvb3JkaW5hdGUgLSBUaGUgY29vcmRpbmF0ZSBpbiBwaXhlbC5cclxuXHQgKiBAcGFyYW0ge1N0cmluZ30gZGlyZWN0aW9uIC0gVGhlIGRpcmVjdGlvbiB0byBjaGVjayBmb3IgdGhlIGNsb3Nlc3QgaXRlbS4gRXRoZXIgYGxlZnRgIG9yIGByaWdodGAuXHJcblx0ICogQHJldHVybiB7TnVtYmVyfSAtIFRoZSBhYnNvbHV0ZSBwb3NpdGlvbiBvZiB0aGUgY2xvc2VzdCBpdGVtLlxyXG5cdCAqL1xyXG5cdE93bC5wcm90b3R5cGUuY2xvc2VzdCA9IGZ1bmN0aW9uKGNvb3JkaW5hdGUsIGRpcmVjdGlvbikge1xyXG5cdFx0dmFyIHBvc2l0aW9uID0gLTEsXHJcblx0XHRcdHB1bGwgPSAzMCxcclxuXHRcdFx0d2lkdGggPSB0aGlzLndpZHRoKCksXHJcblx0XHRcdGNvb3JkaW5hdGVzID0gdGhpcy5jb29yZGluYXRlcygpO1xyXG5cclxuXHRcdGlmICghdGhpcy5zZXR0aW5ncy5mcmVlRHJhZykge1xyXG5cdFx0XHQvLyBjaGVjayBjbG9zZXN0IGl0ZW1cclxuXHRcdFx0JC5lYWNoKGNvb3JkaW5hdGVzLCAkLnByb3h5KGZ1bmN0aW9uKGluZGV4LCB2YWx1ZSkge1xyXG5cdFx0XHRcdC8vIG9uIGEgbGVmdCBwdWxsLCBjaGVjayBvbiBjdXJyZW50IGluZGV4XHJcblx0XHRcdFx0aWYgKGRpcmVjdGlvbiA9PT0gJ2xlZnQnICYmIGNvb3JkaW5hdGUgPiB2YWx1ZSAtIHB1bGwgJiYgY29vcmRpbmF0ZSA8IHZhbHVlICsgcHVsbCkge1xyXG5cdFx0XHRcdFx0cG9zaXRpb24gPSBpbmRleDtcclxuXHRcdFx0XHQvLyBvbiBhIHJpZ2h0IHB1bGwsIGNoZWNrIG9uIHByZXZpb3VzIGluZGV4XHJcblx0XHRcdFx0Ly8gdG8gZG8gc28sIHN1YnRyYWN0IHdpZHRoIGZyb20gdmFsdWUgYW5kIHNldCBwb3NpdGlvbiA9IGluZGV4ICsgMVxyXG5cdFx0XHRcdH0gZWxzZSBpZiAoZGlyZWN0aW9uID09PSAncmlnaHQnICYmIGNvb3JkaW5hdGUgPiB2YWx1ZSAtIHdpZHRoIC0gcHVsbCAmJiBjb29yZGluYXRlIDwgdmFsdWUgLSB3aWR0aCArIHB1bGwpIHtcclxuXHRcdFx0XHRcdHBvc2l0aW9uID0gaW5kZXggKyAxO1xyXG5cdFx0XHRcdH0gZWxzZSBpZiAodGhpcy5vcChjb29yZGluYXRlLCAnPCcsIHZhbHVlKVxyXG5cdFx0XHRcdFx0JiYgdGhpcy5vcChjb29yZGluYXRlLCAnPicsIGNvb3JkaW5hdGVzW2luZGV4ICsgMV0gfHwgdmFsdWUgLSB3aWR0aCkpIHtcclxuXHRcdFx0XHRcdHBvc2l0aW9uID0gZGlyZWN0aW9uID09PSAnbGVmdCcgPyBpbmRleCArIDEgOiBpbmRleDtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuIHBvc2l0aW9uID09PSAtMTtcclxuXHRcdFx0fSwgdGhpcykpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICghdGhpcy5zZXR0aW5ncy5sb29wKSB7XHJcblx0XHRcdC8vIG5vbiBsb29wIGJvdW5kcmllc1xyXG5cdFx0XHRpZiAodGhpcy5vcChjb29yZGluYXRlLCAnPicsIGNvb3JkaW5hdGVzW3RoaXMubWluaW11bSgpXSkpIHtcclxuXHRcdFx0XHRwb3NpdGlvbiA9IGNvb3JkaW5hdGUgPSB0aGlzLm1pbmltdW0oKTtcclxuXHRcdFx0fSBlbHNlIGlmICh0aGlzLm9wKGNvb3JkaW5hdGUsICc8JywgY29vcmRpbmF0ZXNbdGhpcy5tYXhpbXVtKCldKSkge1xyXG5cdFx0XHRcdHBvc2l0aW9uID0gY29vcmRpbmF0ZSA9IHRoaXMubWF4aW11bSgpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHBvc2l0aW9uO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIEFuaW1hdGVzIHRoZSBzdGFnZS5cclxuXHQgKiBAdG9kbyAjMjcwXHJcblx0ICogQHB1YmxpY1xyXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBjb29yZGluYXRlIC0gVGhlIGNvb3JkaW5hdGUgaW4gcGl4ZWxzLlxyXG5cdCAqL1xyXG5cdE93bC5wcm90b3R5cGUuYW5pbWF0ZSA9IGZ1bmN0aW9uKGNvb3JkaW5hdGUpIHtcclxuXHRcdHZhciBhbmltYXRlID0gdGhpcy5zcGVlZCgpID4gMDtcclxuXHJcblx0XHR0aGlzLmlzKCdhbmltYXRpbmcnKSAmJiB0aGlzLm9uVHJhbnNpdGlvbkVuZCgpO1xyXG5cclxuXHRcdGlmIChhbmltYXRlKSB7XHJcblx0XHRcdHRoaXMuZW50ZXIoJ2FuaW1hdGluZycpO1xyXG5cdFx0XHR0aGlzLnRyaWdnZXIoJ3RyYW5zbGF0ZScpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICgkLnN1cHBvcnQudHJhbnNmb3JtM2QgJiYgJC5zdXBwb3J0LnRyYW5zaXRpb24pIHtcclxuXHRcdFx0dGhpcy4kc3RhZ2UuY3NzKHtcclxuXHRcdFx0XHR0cmFuc2Zvcm06ICd0cmFuc2xhdGUzZCgnICsgY29vcmRpbmF0ZSArICdweCwwcHgsMHB4KScsXHJcblx0XHRcdFx0dHJhbnNpdGlvbjogKHRoaXMuc3BlZWQoKSAvIDEwMDApICsgJ3MnXHJcblx0XHRcdH0pO1xyXG5cdFx0fSBlbHNlIGlmIChhbmltYXRlKSB7XHJcblx0XHRcdHRoaXMuJHN0YWdlLmFuaW1hdGUoe1xyXG5cdFx0XHRcdGxlZnQ6IGNvb3JkaW5hdGUgKyAncHgnXHJcblx0XHRcdH0sIHRoaXMuc3BlZWQoKSwgdGhpcy5zZXR0aW5ncy5mYWxsYmFja0Vhc2luZywgJC5wcm94eSh0aGlzLm9uVHJhbnNpdGlvbkVuZCwgdGhpcykpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0dGhpcy4kc3RhZ2UuY3NzKHtcclxuXHRcdFx0XHRsZWZ0OiBjb29yZGluYXRlICsgJ3B4J1xyXG5cdFx0XHR9KTtcclxuXHRcdH1cclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBDaGVja3Mgd2hldGhlciB0aGUgY2Fyb3VzZWwgaXMgaW4gYSBzcGVjaWZpYyBzdGF0ZSBvciBub3QuXHJcblx0ICogQHBhcmFtIHtTdHJpbmd9IHN0YXRlIC0gVGhlIHN0YXRlIHRvIGNoZWNrLlxyXG5cdCAqIEByZXR1cm5zIHtCb29sZWFufSAtIFRoZSBmbGFnIHdoaWNoIGluZGljYXRlcyBpZiB0aGUgY2Fyb3VzZWwgaXMgYnVzeS5cclxuXHQgKi9cclxuXHRPd2wucHJvdG90eXBlLmlzID0gZnVuY3Rpb24oc3RhdGUpIHtcclxuXHRcdHJldHVybiB0aGlzLl9zdGF0ZXMuY3VycmVudFtzdGF0ZV0gJiYgdGhpcy5fc3RhdGVzLmN1cnJlbnRbc3RhdGVdID4gMDtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBTZXRzIHRoZSBhYnNvbHV0ZSBwb3NpdGlvbiBvZiB0aGUgY3VycmVudCBpdGVtLlxyXG5cdCAqIEBwdWJsaWNcclxuXHQgKiBAcGFyYW0ge051bWJlcn0gW3Bvc2l0aW9uXSAtIFRoZSBuZXcgYWJzb2x1dGUgcG9zaXRpb24gb3Igbm90aGluZyB0byBsZWF2ZSBpdCB1bmNoYW5nZWQuXHJcblx0ICogQHJldHVybnMge051bWJlcn0gLSBUaGUgYWJzb2x1dGUgcG9zaXRpb24gb2YgdGhlIGN1cnJlbnQgaXRlbS5cclxuXHQgKi9cclxuXHRPd2wucHJvdG90eXBlLmN1cnJlbnQgPSBmdW5jdGlvbihwb3NpdGlvbikge1xyXG5cdFx0aWYgKHBvc2l0aW9uID09PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMuX2N1cnJlbnQ7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHRoaXMuX2l0ZW1zLmxlbmd0aCA9PT0gMCkge1xyXG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xyXG5cdFx0fVxyXG5cclxuXHRcdHBvc2l0aW9uID0gdGhpcy5ub3JtYWxpemUocG9zaXRpb24pO1xyXG5cclxuXHRcdGlmICh0aGlzLl9jdXJyZW50ICE9PSBwb3NpdGlvbikge1xyXG5cdFx0XHR2YXIgZXZlbnQgPSB0aGlzLnRyaWdnZXIoJ2NoYW5nZScsIHsgcHJvcGVydHk6IHsgbmFtZTogJ3Bvc2l0aW9uJywgdmFsdWU6IHBvc2l0aW9uIH0gfSk7XHJcblxyXG5cdFx0XHRpZiAoZXZlbnQuZGF0YSAhPT0gdW5kZWZpbmVkKSB7XHJcblx0XHRcdFx0cG9zaXRpb24gPSB0aGlzLm5vcm1hbGl6ZShldmVudC5kYXRhKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dGhpcy5fY3VycmVudCA9IHBvc2l0aW9uO1xyXG5cclxuXHRcdFx0dGhpcy5pbnZhbGlkYXRlKCdwb3NpdGlvbicpO1xyXG5cclxuXHRcdFx0dGhpcy50cmlnZ2VyKCdjaGFuZ2VkJywgeyBwcm9wZXJ0eTogeyBuYW1lOiAncG9zaXRpb24nLCB2YWx1ZTogdGhpcy5fY3VycmVudCB9IH0pO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzLl9jdXJyZW50O1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIEludmFsaWRhdGVzIHRoZSBnaXZlbiBwYXJ0IG9mIHRoZSB1cGRhdGUgcm91dGluZS5cclxuXHQgKiBAcGFyYW0ge1N0cmluZ30gW3BhcnRdIC0gVGhlIHBhcnQgdG8gaW52YWxpZGF0ZS5cclxuXHQgKiBAcmV0dXJucyB7QXJyYXkuPFN0cmluZz59IC0gVGhlIGludmFsaWRhdGVkIHBhcnRzLlxyXG5cdCAqL1xyXG5cdE93bC5wcm90b3R5cGUuaW52YWxpZGF0ZSA9IGZ1bmN0aW9uKHBhcnQpIHtcclxuXHRcdGlmICgkLnR5cGUocGFydCkgPT09ICdzdHJpbmcnKSB7XHJcblx0XHRcdHRoaXMuX2ludmFsaWRhdGVkW3BhcnRdID0gdHJ1ZTtcclxuXHRcdFx0dGhpcy5pcygndmFsaWQnKSAmJiB0aGlzLmxlYXZlKCd2YWxpZCcpO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuICQubWFwKHRoaXMuX2ludmFsaWRhdGVkLCBmdW5jdGlvbih2LCBpKSB7IHJldHVybiBpIH0pO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIFJlc2V0cyB0aGUgYWJzb2x1dGUgcG9zaXRpb24gb2YgdGhlIGN1cnJlbnQgaXRlbS5cclxuXHQgKiBAcHVibGljXHJcblx0ICogQHBhcmFtIHtOdW1iZXJ9IHBvc2l0aW9uIC0gVGhlIGFic29sdXRlIHBvc2l0aW9uIG9mIHRoZSBuZXcgaXRlbS5cclxuXHQgKi9cclxuXHRPd2wucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24ocG9zaXRpb24pIHtcclxuXHRcdHBvc2l0aW9uID0gdGhpcy5ub3JtYWxpemUocG9zaXRpb24pO1xyXG5cclxuXHRcdGlmIChwb3NpdGlvbiA9PT0gdW5kZWZpbmVkKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLl9zcGVlZCA9IDA7XHJcblx0XHR0aGlzLl9jdXJyZW50ID0gcG9zaXRpb247XHJcblxyXG5cdFx0dGhpcy5zdXBwcmVzcyhbICd0cmFuc2xhdGUnLCAndHJhbnNsYXRlZCcgXSk7XHJcblxyXG5cdFx0dGhpcy5hbmltYXRlKHRoaXMuY29vcmRpbmF0ZXMocG9zaXRpb24pKTtcclxuXHJcblx0XHR0aGlzLnJlbGVhc2UoWyAndHJhbnNsYXRlJywgJ3RyYW5zbGF0ZWQnIF0pO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIE5vcm1hbGl6ZXMgYW4gYWJzb2x1dGUgb3IgYSByZWxhdGl2ZSBwb3NpdGlvbiBvZiBhbiBpdGVtLlxyXG5cdCAqIEBwdWJsaWNcclxuXHQgKiBAcGFyYW0ge051bWJlcn0gcG9zaXRpb24gLSBUaGUgYWJzb2x1dGUgb3IgcmVsYXRpdmUgcG9zaXRpb24gdG8gbm9ybWFsaXplLlxyXG5cdCAqIEBwYXJhbSB7Qm9vbGVhbn0gW3JlbGF0aXZlPWZhbHNlXSAtIFdoZXRoZXIgdGhlIGdpdmVuIHBvc2l0aW9uIGlzIHJlbGF0aXZlIG9yIG5vdC5cclxuXHQgKiBAcmV0dXJucyB7TnVtYmVyfSAtIFRoZSBub3JtYWxpemVkIHBvc2l0aW9uLlxyXG5cdCAqL1xyXG5cdE93bC5wcm90b3R5cGUubm9ybWFsaXplID0gZnVuY3Rpb24ocG9zaXRpb24sIHJlbGF0aXZlKSB7XHJcblx0XHR2YXIgbiA9IHRoaXMuX2l0ZW1zLmxlbmd0aCxcclxuXHRcdFx0bSA9IHJlbGF0aXZlID8gMCA6IHRoaXMuX2Nsb25lcy5sZW5ndGg7XHJcblxyXG5cdFx0aWYgKCF0aGlzLmlzTnVtZXJpYyhwb3NpdGlvbikgfHwgbiA8IDEpIHtcclxuXHRcdFx0cG9zaXRpb24gPSB1bmRlZmluZWQ7XHJcblx0XHR9IGVsc2UgaWYgKHBvc2l0aW9uIDwgMCB8fCBwb3NpdGlvbiA+PSBuICsgbSkge1xyXG5cdFx0XHRwb3NpdGlvbiA9ICgocG9zaXRpb24gLSBtIC8gMikgJSBuICsgbikgJSBuICsgbSAvIDI7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHBvc2l0aW9uO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIENvbnZlcnRzIGFuIGFic29sdXRlIHBvc2l0aW9uIG9mIGFuIGl0ZW0gaW50byBhIHJlbGF0aXZlIG9uZS5cclxuXHQgKiBAcHVibGljXHJcblx0ICogQHBhcmFtIHtOdW1iZXJ9IHBvc2l0aW9uIC0gVGhlIGFic29sdXRlIHBvc2l0aW9uIHRvIGNvbnZlcnQuXHJcblx0ICogQHJldHVybnMge051bWJlcn0gLSBUaGUgY29udmVydGVkIHBvc2l0aW9uLlxyXG5cdCAqL1xyXG5cdE93bC5wcm90b3R5cGUucmVsYXRpdmUgPSBmdW5jdGlvbihwb3NpdGlvbikge1xyXG5cdFx0cG9zaXRpb24gLT0gdGhpcy5fY2xvbmVzLmxlbmd0aCAvIDI7XHJcblx0XHRyZXR1cm4gdGhpcy5ub3JtYWxpemUocG9zaXRpb24sIHRydWUpO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIEdldHMgdGhlIG1heGltdW0gcG9zaXRpb24gZm9yIHRoZSBjdXJyZW50IGl0ZW0uXHJcblx0ICogQHB1YmxpY1xyXG5cdCAqIEBwYXJhbSB7Qm9vbGVhbn0gW3JlbGF0aXZlPWZhbHNlXSAtIFdoZXRoZXIgdG8gcmV0dXJuIGFuIGFic29sdXRlIHBvc2l0aW9uIG9yIGEgcmVsYXRpdmUgcG9zaXRpb24uXHJcblx0ICogQHJldHVybnMge051bWJlcn1cclxuXHQgKi9cclxuXHRPd2wucHJvdG90eXBlLm1heGltdW0gPSBmdW5jdGlvbihyZWxhdGl2ZSkge1xyXG5cdFx0dmFyIHNldHRpbmdzID0gdGhpcy5zZXR0aW5ncyxcclxuXHRcdFx0bWF4aW11bSA9IHRoaXMuX2Nvb3JkaW5hdGVzLmxlbmd0aCxcclxuXHRcdFx0aXRlcmF0b3IsXHJcblx0XHRcdHJlY2lwcm9jYWxJdGVtc1dpZHRoLFxyXG5cdFx0XHRlbGVtZW50V2lkdGg7XHJcblxyXG5cdFx0aWYgKHNldHRpbmdzLmxvb3ApIHtcclxuXHRcdFx0bWF4aW11bSA9IHRoaXMuX2Nsb25lcy5sZW5ndGggLyAyICsgdGhpcy5faXRlbXMubGVuZ3RoIC0gMTtcclxuXHRcdH0gZWxzZSBpZiAoc2V0dGluZ3MuYXV0b1dpZHRoIHx8IHNldHRpbmdzLm1lcmdlKSB7XHJcblx0XHRcdGl0ZXJhdG9yID0gdGhpcy5faXRlbXMubGVuZ3RoO1xyXG5cdFx0XHRyZWNpcHJvY2FsSXRlbXNXaWR0aCA9IHRoaXMuX2l0ZW1zWy0taXRlcmF0b3JdLndpZHRoKCk7XHJcblx0XHRcdGVsZW1lbnRXaWR0aCA9IHRoaXMuJGVsZW1lbnQud2lkdGgoKTtcclxuXHRcdFx0d2hpbGUgKGl0ZXJhdG9yLS0pIHtcclxuXHRcdFx0XHRyZWNpcHJvY2FsSXRlbXNXaWR0aCArPSB0aGlzLl9pdGVtc1tpdGVyYXRvcl0ud2lkdGgoKSArIHRoaXMuc2V0dGluZ3MubWFyZ2luO1xyXG5cdFx0XHRcdGlmIChyZWNpcHJvY2FsSXRlbXNXaWR0aCA+IGVsZW1lbnRXaWR0aCkge1xyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdG1heGltdW0gPSBpdGVyYXRvciArIDE7XHJcblx0XHR9IGVsc2UgaWYgKHNldHRpbmdzLmNlbnRlcikge1xyXG5cdFx0XHRtYXhpbXVtID0gdGhpcy5faXRlbXMubGVuZ3RoIC0gMTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdG1heGltdW0gPSB0aGlzLl9pdGVtcy5sZW5ndGggLSBzZXR0aW5ncy5pdGVtcztcclxuXHRcdH1cclxuXHJcblx0XHRpZiAocmVsYXRpdmUpIHtcclxuXHRcdFx0bWF4aW11bSAtPSB0aGlzLl9jbG9uZXMubGVuZ3RoIC8gMjtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gTWF0aC5tYXgobWF4aW11bSwgMCk7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogR2V0cyB0aGUgbWluaW11bSBwb3NpdGlvbiBmb3IgdGhlIGN1cnJlbnQgaXRlbS5cclxuXHQgKiBAcHVibGljXHJcblx0ICogQHBhcmFtIHtCb29sZWFufSBbcmVsYXRpdmU9ZmFsc2VdIC0gV2hldGhlciB0byByZXR1cm4gYW4gYWJzb2x1dGUgcG9zaXRpb24gb3IgYSByZWxhdGl2ZSBwb3NpdGlvbi5cclxuXHQgKiBAcmV0dXJucyB7TnVtYmVyfVxyXG5cdCAqL1xyXG5cdE93bC5wcm90b3R5cGUubWluaW11bSA9IGZ1bmN0aW9uKHJlbGF0aXZlKSB7XHJcblx0XHRyZXR1cm4gcmVsYXRpdmUgPyAwIDogdGhpcy5fY2xvbmVzLmxlbmd0aCAvIDI7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogR2V0cyBhbiBpdGVtIGF0IHRoZSBzcGVjaWZpZWQgcmVsYXRpdmUgcG9zaXRpb24uXHJcblx0ICogQHB1YmxpY1xyXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbcG9zaXRpb25dIC0gVGhlIHJlbGF0aXZlIHBvc2l0aW9uIG9mIHRoZSBpdGVtLlxyXG5cdCAqIEByZXR1cm4ge2pRdWVyeXxBcnJheS48alF1ZXJ5Pn0gLSBUaGUgaXRlbSBhdCB0aGUgZ2l2ZW4gcG9zaXRpb24gb3IgYWxsIGl0ZW1zIGlmIG5vIHBvc2l0aW9uIHdhcyBnaXZlbi5cclxuXHQgKi9cclxuXHRPd2wucHJvdG90eXBlLml0ZW1zID0gZnVuY3Rpb24ocG9zaXRpb24pIHtcclxuXHRcdGlmIChwb3NpdGlvbiA9PT0gdW5kZWZpbmVkKSB7XHJcblx0XHRcdHJldHVybiB0aGlzLl9pdGVtcy5zbGljZSgpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHBvc2l0aW9uID0gdGhpcy5ub3JtYWxpemUocG9zaXRpb24sIHRydWUpO1xyXG5cdFx0cmV0dXJuIHRoaXMuX2l0ZW1zW3Bvc2l0aW9uXTtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBHZXRzIGFuIGl0ZW0gYXQgdGhlIHNwZWNpZmllZCByZWxhdGl2ZSBwb3NpdGlvbi5cclxuXHQgKiBAcHVibGljXHJcblx0ICogQHBhcmFtIHtOdW1iZXJ9IFtwb3NpdGlvbl0gLSBUaGUgcmVsYXRpdmUgcG9zaXRpb24gb2YgdGhlIGl0ZW0uXHJcblx0ICogQHJldHVybiB7alF1ZXJ5fEFycmF5LjxqUXVlcnk+fSAtIFRoZSBpdGVtIGF0IHRoZSBnaXZlbiBwb3NpdGlvbiBvciBhbGwgaXRlbXMgaWYgbm8gcG9zaXRpb24gd2FzIGdpdmVuLlxyXG5cdCAqL1xyXG5cdE93bC5wcm90b3R5cGUubWVyZ2VycyA9IGZ1bmN0aW9uKHBvc2l0aW9uKSB7XHJcblx0XHRpZiAocG9zaXRpb24gPT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5fbWVyZ2Vycy5zbGljZSgpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHBvc2l0aW9uID0gdGhpcy5ub3JtYWxpemUocG9zaXRpb24sIHRydWUpO1xyXG5cdFx0cmV0dXJuIHRoaXMuX21lcmdlcnNbcG9zaXRpb25dO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIEdldHMgdGhlIGFic29sdXRlIHBvc2l0aW9ucyBvZiBjbG9uZXMgZm9yIGFuIGl0ZW0uXHJcblx0ICogQHB1YmxpY1xyXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbcG9zaXRpb25dIC0gVGhlIHJlbGF0aXZlIHBvc2l0aW9uIG9mIHRoZSBpdGVtLlxyXG5cdCAqIEByZXR1cm5zIHtBcnJheS48TnVtYmVyPn0gLSBUaGUgYWJzb2x1dGUgcG9zaXRpb25zIG9mIGNsb25lcyBmb3IgdGhlIGl0ZW0gb3IgYWxsIGlmIG5vIHBvc2l0aW9uIHdhcyBnaXZlbi5cclxuXHQgKi9cclxuXHRPd2wucHJvdG90eXBlLmNsb25lcyA9IGZ1bmN0aW9uKHBvc2l0aW9uKSB7XHJcblx0XHR2YXIgb2RkID0gdGhpcy5fY2xvbmVzLmxlbmd0aCAvIDIsXHJcblx0XHRcdGV2ZW4gPSBvZGQgKyB0aGlzLl9pdGVtcy5sZW5ndGgsXHJcblx0XHRcdG1hcCA9IGZ1bmN0aW9uKGluZGV4KSB7IHJldHVybiBpbmRleCAlIDIgPT09IDAgPyBldmVuICsgaW5kZXggLyAyIDogb2RkIC0gKGluZGV4ICsgMSkgLyAyIH07XHJcblxyXG5cdFx0aWYgKHBvc2l0aW9uID09PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0cmV0dXJuICQubWFwKHRoaXMuX2Nsb25lcywgZnVuY3Rpb24odiwgaSkgeyByZXR1cm4gbWFwKGkpIH0pO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiAkLm1hcCh0aGlzLl9jbG9uZXMsIGZ1bmN0aW9uKHYsIGkpIHsgcmV0dXJuIHYgPT09IHBvc2l0aW9uID8gbWFwKGkpIDogbnVsbCB9KTtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBTZXRzIHRoZSBjdXJyZW50IGFuaW1hdGlvbiBzcGVlZC5cclxuXHQgKiBAcHVibGljXHJcblx0ICogQHBhcmFtIHtOdW1iZXJ9IFtzcGVlZF0gLSBUaGUgYW5pbWF0aW9uIHNwZWVkIGluIG1pbGxpc2Vjb25kcyBvciBub3RoaW5nIHRvIGxlYXZlIGl0IHVuY2hhbmdlZC5cclxuXHQgKiBAcmV0dXJucyB7TnVtYmVyfSAtIFRoZSBjdXJyZW50IGFuaW1hdGlvbiBzcGVlZCBpbiBtaWxsaXNlY29uZHMuXHJcblx0ICovXHJcblx0T3dsLnByb3RvdHlwZS5zcGVlZCA9IGZ1bmN0aW9uKHNwZWVkKSB7XHJcblx0XHRpZiAoc3BlZWQgIT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHR0aGlzLl9zcGVlZCA9IHNwZWVkO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzLl9zcGVlZDtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBHZXRzIHRoZSBjb29yZGluYXRlIG9mIGFuIGl0ZW0uXHJcblx0ICogQHRvZG8gVGhlIG5hbWUgb2YgdGhpcyBtZXRob2QgaXMgbWlzc2xlYW5kaW5nLlxyXG5cdCAqIEBwdWJsaWNcclxuXHQgKiBAcGFyYW0ge051bWJlcn0gcG9zaXRpb24gLSBUaGUgYWJzb2x1dGUgcG9zaXRpb24gb2YgdGhlIGl0ZW0gd2l0aGluIGBtaW5pbXVtKClgIGFuZCBgbWF4aW11bSgpYC5cclxuXHQgKiBAcmV0dXJucyB7TnVtYmVyfEFycmF5LjxOdW1iZXI+fSAtIFRoZSBjb29yZGluYXRlIG9mIHRoZSBpdGVtIGluIHBpeGVsIG9yIGFsbCBjb29yZGluYXRlcy5cclxuXHQgKi9cclxuXHRPd2wucHJvdG90eXBlLmNvb3JkaW5hdGVzID0gZnVuY3Rpb24ocG9zaXRpb24pIHtcclxuXHRcdHZhciBtdWx0aXBsaWVyID0gMSxcclxuXHRcdFx0bmV3UG9zaXRpb24gPSBwb3NpdGlvbiAtIDEsXHJcblx0XHRcdGNvb3JkaW5hdGU7XHJcblxyXG5cdFx0aWYgKHBvc2l0aW9uID09PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0cmV0dXJuICQubWFwKHRoaXMuX2Nvb3JkaW5hdGVzLCAkLnByb3h5KGZ1bmN0aW9uKGNvb3JkaW5hdGUsIGluZGV4KSB7XHJcblx0XHRcdFx0cmV0dXJuIHRoaXMuY29vcmRpbmF0ZXMoaW5kZXgpO1xyXG5cdFx0XHR9LCB0aGlzKSk7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHRoaXMuc2V0dGluZ3MuY2VudGVyKSB7XHJcblx0XHRcdGlmICh0aGlzLnNldHRpbmdzLnJ0bCkge1xyXG5cdFx0XHRcdG11bHRpcGxpZXIgPSAtMTtcclxuXHRcdFx0XHRuZXdQb3NpdGlvbiA9IHBvc2l0aW9uICsgMTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Y29vcmRpbmF0ZSA9IHRoaXMuX2Nvb3JkaW5hdGVzW3Bvc2l0aW9uXTtcclxuXHRcdFx0Y29vcmRpbmF0ZSArPSAodGhpcy53aWR0aCgpIC0gY29vcmRpbmF0ZSArICh0aGlzLl9jb29yZGluYXRlc1tuZXdQb3NpdGlvbl0gfHwgMCkpIC8gMiAqIG11bHRpcGxpZXI7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRjb29yZGluYXRlID0gdGhpcy5fY29vcmRpbmF0ZXNbbmV3UG9zaXRpb25dIHx8IDA7XHJcblx0XHR9XHJcblxyXG5cdFx0Y29vcmRpbmF0ZSA9IE1hdGguY2VpbChjb29yZGluYXRlKTtcclxuXHJcblx0XHRyZXR1cm4gY29vcmRpbmF0ZTtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBDYWxjdWxhdGVzIHRoZSBzcGVlZCBmb3IgYSB0cmFuc2xhdGlvbi5cclxuXHQgKiBAcHJvdGVjdGVkXHJcblx0ICogQHBhcmFtIHtOdW1iZXJ9IGZyb20gLSBUaGUgYWJzb2x1dGUgcG9zaXRpb24gb2YgdGhlIHN0YXJ0IGl0ZW0uXHJcblx0ICogQHBhcmFtIHtOdW1iZXJ9IHRvIC0gVGhlIGFic29sdXRlIHBvc2l0aW9uIG9mIHRoZSB0YXJnZXQgaXRlbS5cclxuXHQgKiBAcGFyYW0ge051bWJlcn0gW2ZhY3Rvcj11bmRlZmluZWRdIC0gVGhlIHRpbWUgZmFjdG9yIGluIG1pbGxpc2Vjb25kcy5cclxuXHQgKiBAcmV0dXJucyB7TnVtYmVyfSAtIFRoZSB0aW1lIGluIG1pbGxpc2Vjb25kcyBmb3IgdGhlIHRyYW5zbGF0aW9uLlxyXG5cdCAqL1xyXG5cdE93bC5wcm90b3R5cGUuZHVyYXRpb24gPSBmdW5jdGlvbihmcm9tLCB0bywgZmFjdG9yKSB7XHJcblx0XHRpZiAoZmFjdG9yID09PSAwKSB7XHJcblx0XHRcdHJldHVybiAwO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBNYXRoLm1pbihNYXRoLm1heChNYXRoLmFicyh0byAtIGZyb20pLCAxKSwgNikgKiBNYXRoLmFicygoZmFjdG9yIHx8IHRoaXMuc2V0dGluZ3Muc21hcnRTcGVlZCkpO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIFNsaWRlcyB0byB0aGUgc3BlY2lmaWVkIGl0ZW0uXHJcblx0ICogQHB1YmxpY1xyXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBwb3NpdGlvbiAtIFRoZSBwb3NpdGlvbiBvZiB0aGUgaXRlbS5cclxuXHQgKiBAcGFyYW0ge051bWJlcn0gW3NwZWVkXSAtIFRoZSB0aW1lIGluIG1pbGxpc2Vjb25kcyBmb3IgdGhlIHRyYW5zaXRpb24uXHJcblx0ICovXHJcblx0T3dsLnByb3RvdHlwZS50byA9IGZ1bmN0aW9uKHBvc2l0aW9uLCBzcGVlZCkge1xyXG5cdFx0dmFyIGN1cnJlbnQgPSB0aGlzLmN1cnJlbnQoKSxcclxuXHRcdFx0cmV2ZXJ0ID0gbnVsbCxcclxuXHRcdFx0ZGlzdGFuY2UgPSBwb3NpdGlvbiAtIHRoaXMucmVsYXRpdmUoY3VycmVudCksXHJcblx0XHRcdGRpcmVjdGlvbiA9IChkaXN0YW5jZSA+IDApIC0gKGRpc3RhbmNlIDwgMCksXHJcblx0XHRcdGl0ZW1zID0gdGhpcy5faXRlbXMubGVuZ3RoLFxyXG5cdFx0XHRtaW5pbXVtID0gdGhpcy5taW5pbXVtKCksXHJcblx0XHRcdG1heGltdW0gPSB0aGlzLm1heGltdW0oKTtcclxuXHJcblx0XHRpZiAodGhpcy5zZXR0aW5ncy5sb29wKSB7XHJcblx0XHRcdGlmICghdGhpcy5zZXR0aW5ncy5yZXdpbmQgJiYgTWF0aC5hYnMoZGlzdGFuY2UpID4gaXRlbXMgLyAyKSB7XHJcblx0XHRcdFx0ZGlzdGFuY2UgKz0gZGlyZWN0aW9uICogLTEgKiBpdGVtcztcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cG9zaXRpb24gPSBjdXJyZW50ICsgZGlzdGFuY2U7XHJcblx0XHRcdHJldmVydCA9ICgocG9zaXRpb24gLSBtaW5pbXVtKSAlIGl0ZW1zICsgaXRlbXMpICUgaXRlbXMgKyBtaW5pbXVtO1xyXG5cclxuXHRcdFx0aWYgKHJldmVydCAhPT0gcG9zaXRpb24gJiYgcmV2ZXJ0IC0gZGlzdGFuY2UgPD0gbWF4aW11bSAmJiByZXZlcnQgLSBkaXN0YW5jZSA+IDApIHtcclxuXHRcdFx0XHRjdXJyZW50ID0gcmV2ZXJ0IC0gZGlzdGFuY2U7XHJcblx0XHRcdFx0cG9zaXRpb24gPSByZXZlcnQ7XHJcblx0XHRcdFx0dGhpcy5yZXNldChjdXJyZW50KTtcclxuXHRcdFx0fVxyXG5cdFx0fSBlbHNlIGlmICh0aGlzLnNldHRpbmdzLnJld2luZCkge1xyXG5cdFx0XHRtYXhpbXVtICs9IDE7XHJcblx0XHRcdHBvc2l0aW9uID0gKHBvc2l0aW9uICUgbWF4aW11bSArIG1heGltdW0pICUgbWF4aW11bTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHBvc2l0aW9uID0gTWF0aC5tYXgobWluaW11bSwgTWF0aC5taW4obWF4aW11bSwgcG9zaXRpb24pKTtcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLnNwZWVkKHRoaXMuZHVyYXRpb24oY3VycmVudCwgcG9zaXRpb24sIHNwZWVkKSk7XHJcblx0XHR0aGlzLmN1cnJlbnQocG9zaXRpb24pO1xyXG5cclxuXHRcdGlmICh0aGlzLiRlbGVtZW50LmlzKCc6dmlzaWJsZScpKSB7XHJcblx0XHRcdHRoaXMudXBkYXRlKCk7XHJcblx0XHR9XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogU2xpZGVzIHRvIHRoZSBuZXh0IGl0ZW0uXHJcblx0ICogQHB1YmxpY1xyXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbc3BlZWRdIC0gVGhlIHRpbWUgaW4gbWlsbGlzZWNvbmRzIGZvciB0aGUgdHJhbnNpdGlvbi5cclxuXHQgKi9cclxuXHRPd2wucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbihzcGVlZCkge1xyXG5cdFx0c3BlZWQgPSBzcGVlZCB8fCBmYWxzZTtcclxuXHRcdHRoaXMudG8odGhpcy5yZWxhdGl2ZSh0aGlzLmN1cnJlbnQoKSkgKyAxLCBzcGVlZCk7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogU2xpZGVzIHRvIHRoZSBwcmV2aW91cyBpdGVtLlxyXG5cdCAqIEBwdWJsaWNcclxuXHQgKiBAcGFyYW0ge051bWJlcn0gW3NwZWVkXSAtIFRoZSB0aW1lIGluIG1pbGxpc2Vjb25kcyBmb3IgdGhlIHRyYW5zaXRpb24uXHJcblx0ICovXHJcblx0T3dsLnByb3RvdHlwZS5wcmV2ID0gZnVuY3Rpb24oc3BlZWQpIHtcclxuXHRcdHNwZWVkID0gc3BlZWQgfHwgZmFsc2U7XHJcblx0XHR0aGlzLnRvKHRoaXMucmVsYXRpdmUodGhpcy5jdXJyZW50KCkpIC0gMSwgc3BlZWQpO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIEhhbmRsZXMgdGhlIGVuZCBvZiBhbiBhbmltYXRpb24uXHJcblx0ICogQHByb3RlY3RlZFxyXG5cdCAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IC0gVGhlIGV2ZW50IGFyZ3VtZW50cy5cclxuXHQgKi9cclxuXHRPd2wucHJvdG90eXBlLm9uVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uKGV2ZW50KSB7XHJcblxyXG5cdFx0Ly8gaWYgY3NzMiBhbmltYXRpb24gdGhlbiBldmVudCBvYmplY3QgaXMgdW5kZWZpbmVkXHJcblx0XHRpZiAoZXZlbnQgIT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcblx0XHRcdC8vIENhdGNoIG9ubHkgb3dsLXN0YWdlIHRyYW5zaXRpb25FbmQgZXZlbnRcclxuXHRcdFx0aWYgKChldmVudC50YXJnZXQgfHwgZXZlbnQuc3JjRWxlbWVudCB8fCBldmVudC5vcmlnaW5hbFRhcmdldCkgIT09IHRoaXMuJHN0YWdlLmdldCgwKSkge1xyXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMubGVhdmUoJ2FuaW1hdGluZycpO1xyXG5cdFx0dGhpcy50cmlnZ2VyKCd0cmFuc2xhdGVkJyk7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogR2V0cyB2aWV3cG9ydCB3aWR0aC5cclxuXHQgKiBAcHJvdGVjdGVkXHJcblx0ICogQHJldHVybiB7TnVtYmVyfSAtIFRoZSB3aWR0aCBpbiBwaXhlbC5cclxuXHQgKi9cclxuXHRPd2wucHJvdG90eXBlLnZpZXdwb3J0ID0gZnVuY3Rpb24oKSB7XHJcblx0XHR2YXIgd2lkdGg7XHJcblx0XHRpZiAodGhpcy5vcHRpb25zLnJlc3BvbnNpdmVCYXNlRWxlbWVudCAhPT0gd2luZG93KSB7XHJcblx0XHRcdHdpZHRoID0gJCh0aGlzLm9wdGlvbnMucmVzcG9uc2l2ZUJhc2VFbGVtZW50KS53aWR0aCgpO1xyXG5cdFx0fSBlbHNlIGlmICh3aW5kb3cuaW5uZXJXaWR0aCkge1xyXG5cdFx0XHR3aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xyXG5cdFx0fSBlbHNlIGlmIChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoKSB7XHJcblx0XHRcdHdpZHRoID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0dGhyb3cgJ0NhbiBub3QgZGV0ZWN0IHZpZXdwb3J0IHdpZHRoLic7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gd2lkdGg7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogUmVwbGFjZXMgdGhlIGN1cnJlbnQgY29udGVudC5cclxuXHQgKiBAcHVibGljXHJcblx0ICogQHBhcmFtIHtIVE1MRWxlbWVudHxqUXVlcnl8U3RyaW5nfSBjb250ZW50IC0gVGhlIG5ldyBjb250ZW50LlxyXG5cdCAqL1xyXG5cdE93bC5wcm90b3R5cGUucmVwbGFjZSA9IGZ1bmN0aW9uKGNvbnRlbnQpIHtcclxuXHRcdHRoaXMuJHN0YWdlLmVtcHR5KCk7XHJcblx0XHR0aGlzLl9pdGVtcyA9IFtdO1xyXG5cclxuXHRcdGlmIChjb250ZW50KSB7XHJcblx0XHRcdGNvbnRlbnQgPSAoY29udGVudCBpbnN0YW5jZW9mIGpRdWVyeSkgPyBjb250ZW50IDogJChjb250ZW50KTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAodGhpcy5zZXR0aW5ncy5uZXN0ZWRJdGVtU2VsZWN0b3IpIHtcclxuXHRcdFx0Y29udGVudCA9IGNvbnRlbnQuZmluZCgnLicgKyB0aGlzLnNldHRpbmdzLm5lc3RlZEl0ZW1TZWxlY3Rvcik7XHJcblx0XHR9XHJcblxyXG5cdFx0Y29udGVudC5maWx0ZXIoZnVuY3Rpb24oKSB7XHJcblx0XHRcdHJldHVybiB0aGlzLm5vZGVUeXBlID09PSAxO1xyXG5cdFx0fSkuZWFjaCgkLnByb3h5KGZ1bmN0aW9uKGluZGV4LCBpdGVtKSB7XHJcblx0XHRcdGl0ZW0gPSB0aGlzLnByZXBhcmUoaXRlbSk7XHJcblx0XHRcdHRoaXMuJHN0YWdlLmFwcGVuZChpdGVtKTtcclxuXHRcdFx0dGhpcy5faXRlbXMucHVzaChpdGVtKTtcclxuXHRcdFx0dGhpcy5fbWVyZ2Vycy5wdXNoKGl0ZW0uZmluZCgnW2RhdGEtbWVyZ2VdJykuYWRkQmFjaygnW2RhdGEtbWVyZ2VdJykuYXR0cignZGF0YS1tZXJnZScpICogMSB8fCAxKTtcclxuXHRcdH0sIHRoaXMpKTtcclxuXHJcblx0XHR0aGlzLnJlc2V0KHRoaXMuaXNOdW1lcmljKHRoaXMuc2V0dGluZ3Muc3RhcnRQb3NpdGlvbikgPyB0aGlzLnNldHRpbmdzLnN0YXJ0UG9zaXRpb24gOiAwKTtcclxuXHJcblx0XHR0aGlzLmludmFsaWRhdGUoJ2l0ZW1zJyk7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogQWRkcyBhbiBpdGVtLlxyXG5cdCAqIEB0b2RvIFVzZSBgaXRlbWAgaW5zdGVhZCBvZiBgY29udGVudGAgZm9yIHRoZSBldmVudCBhcmd1bWVudHMuXHJcblx0ICogQHB1YmxpY1xyXG5cdCAqIEBwYXJhbSB7SFRNTEVsZW1lbnR8alF1ZXJ5fFN0cmluZ30gY29udGVudCAtIFRoZSBpdGVtIGNvbnRlbnQgdG8gYWRkLlxyXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbcG9zaXRpb25dIC0gVGhlIHJlbGF0aXZlIHBvc2l0aW9uIGF0IHdoaWNoIHRvIGluc2VydCB0aGUgaXRlbSBvdGhlcndpc2UgdGhlIGl0ZW0gd2lsbCBiZSBhZGRlZCB0byB0aGUgZW5kLlxyXG5cdCAqL1xyXG5cdE93bC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24oY29udGVudCwgcG9zaXRpb24pIHtcclxuXHRcdHZhciBjdXJyZW50ID0gdGhpcy5yZWxhdGl2ZSh0aGlzLl9jdXJyZW50KTtcclxuXHJcblx0XHRwb3NpdGlvbiA9IHBvc2l0aW9uID09PSB1bmRlZmluZWQgPyB0aGlzLl9pdGVtcy5sZW5ndGggOiB0aGlzLm5vcm1hbGl6ZShwb3NpdGlvbiwgdHJ1ZSk7XHJcblx0XHRjb250ZW50ID0gY29udGVudCBpbnN0YW5jZW9mIGpRdWVyeSA/IGNvbnRlbnQgOiAkKGNvbnRlbnQpO1xyXG5cclxuXHRcdHRoaXMudHJpZ2dlcignYWRkJywgeyBjb250ZW50OiBjb250ZW50LCBwb3NpdGlvbjogcG9zaXRpb24gfSk7XHJcblxyXG5cdFx0Y29udGVudCA9IHRoaXMucHJlcGFyZShjb250ZW50KTtcclxuXHJcblx0XHRpZiAodGhpcy5faXRlbXMubGVuZ3RoID09PSAwIHx8IHBvc2l0aW9uID09PSB0aGlzLl9pdGVtcy5sZW5ndGgpIHtcclxuXHRcdFx0dGhpcy5faXRlbXMubGVuZ3RoID09PSAwICYmIHRoaXMuJHN0YWdlLmFwcGVuZChjb250ZW50KTtcclxuXHRcdFx0dGhpcy5faXRlbXMubGVuZ3RoICE9PSAwICYmIHRoaXMuX2l0ZW1zW3Bvc2l0aW9uIC0gMV0uYWZ0ZXIoY29udGVudCk7XHJcblx0XHRcdHRoaXMuX2l0ZW1zLnB1c2goY29udGVudCk7XHJcblx0XHRcdHRoaXMuX21lcmdlcnMucHVzaChjb250ZW50LmZpbmQoJ1tkYXRhLW1lcmdlXScpLmFkZEJhY2soJ1tkYXRhLW1lcmdlXScpLmF0dHIoJ2RhdGEtbWVyZ2UnKSAqIDEgfHwgMSk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHR0aGlzLl9pdGVtc1twb3NpdGlvbl0uYmVmb3JlKGNvbnRlbnQpO1xyXG5cdFx0XHR0aGlzLl9pdGVtcy5zcGxpY2UocG9zaXRpb24sIDAsIGNvbnRlbnQpO1xyXG5cdFx0XHR0aGlzLl9tZXJnZXJzLnNwbGljZShwb3NpdGlvbiwgMCwgY29udGVudC5maW5kKCdbZGF0YS1tZXJnZV0nKS5hZGRCYWNrKCdbZGF0YS1tZXJnZV0nKS5hdHRyKCdkYXRhLW1lcmdlJykgKiAxIHx8IDEpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuX2l0ZW1zW2N1cnJlbnRdICYmIHRoaXMucmVzZXQodGhpcy5faXRlbXNbY3VycmVudF0uaW5kZXgoKSk7XHJcblxyXG5cdFx0dGhpcy5pbnZhbGlkYXRlKCdpdGVtcycpO1xyXG5cclxuXHRcdHRoaXMudHJpZ2dlcignYWRkZWQnLCB7IGNvbnRlbnQ6IGNvbnRlbnQsIHBvc2l0aW9uOiBwb3NpdGlvbiB9KTtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBSZW1vdmVzIGFuIGl0ZW0gYnkgaXRzIHBvc2l0aW9uLlxyXG5cdCAqIEB0b2RvIFVzZSBgaXRlbWAgaW5zdGVhZCBvZiBgY29udGVudGAgZm9yIHRoZSBldmVudCBhcmd1bWVudHMuXHJcblx0ICogQHB1YmxpY1xyXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBwb3NpdGlvbiAtIFRoZSByZWxhdGl2ZSBwb3NpdGlvbiBvZiB0aGUgaXRlbSB0byByZW1vdmUuXHJcblx0ICovXHJcblx0T3dsLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbihwb3NpdGlvbikge1xyXG5cdFx0cG9zaXRpb24gPSB0aGlzLm5vcm1hbGl6ZShwb3NpdGlvbiwgdHJ1ZSk7XHJcblxyXG5cdFx0aWYgKHBvc2l0aW9uID09PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMudHJpZ2dlcigncmVtb3ZlJywgeyBjb250ZW50OiB0aGlzLl9pdGVtc1twb3NpdGlvbl0sIHBvc2l0aW9uOiBwb3NpdGlvbiB9KTtcclxuXHJcblx0XHR0aGlzLl9pdGVtc1twb3NpdGlvbl0ucmVtb3ZlKCk7XHJcblx0XHR0aGlzLl9pdGVtcy5zcGxpY2UocG9zaXRpb24sIDEpO1xyXG5cdFx0dGhpcy5fbWVyZ2Vycy5zcGxpY2UocG9zaXRpb24sIDEpO1xyXG5cclxuXHRcdHRoaXMuaW52YWxpZGF0ZSgnaXRlbXMnKTtcclxuXHJcblx0XHR0aGlzLnRyaWdnZXIoJ3JlbW92ZWQnLCB7IGNvbnRlbnQ6IG51bGwsIHBvc2l0aW9uOiBwb3NpdGlvbiB9KTtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBQcmVsb2FkcyBpbWFnZXMgd2l0aCBhdXRvIHdpZHRoLlxyXG5cdCAqIEB0b2RvIFJlcGxhY2UgYnkgYSBtb3JlIGdlbmVyaWMgYXBwcm9hY2hcclxuXHQgKiBAcHJvdGVjdGVkXHJcblx0ICovXHJcblx0T3dsLnByb3RvdHlwZS5wcmVsb2FkQXV0b1dpZHRoSW1hZ2VzID0gZnVuY3Rpb24oaW1hZ2VzKSB7XHJcblx0XHRpbWFnZXMuZWFjaCgkLnByb3h5KGZ1bmN0aW9uKGksIGVsZW1lbnQpIHtcclxuXHRcdFx0dGhpcy5lbnRlcigncHJlLWxvYWRpbmcnKTtcclxuXHRcdFx0ZWxlbWVudCA9ICQoZWxlbWVudCk7XHJcblx0XHRcdCQobmV3IEltYWdlKCkpLm9uZSgnbG9hZCcsICQucHJveHkoZnVuY3Rpb24oZSkge1xyXG5cdFx0XHRcdGVsZW1lbnQuYXR0cignc3JjJywgZS50YXJnZXQuc3JjKTtcclxuXHRcdFx0XHRlbGVtZW50LmNzcygnb3BhY2l0eScsIDEpO1xyXG5cdFx0XHRcdHRoaXMubGVhdmUoJ3ByZS1sb2FkaW5nJyk7XHJcblx0XHRcdFx0IXRoaXMuaXMoJ3ByZS1sb2FkaW5nJykgJiYgIXRoaXMuaXMoJ2luaXRpYWxpemluZycpICYmIHRoaXMucmVmcmVzaCgpO1xyXG5cdFx0XHR9LCB0aGlzKSkuYXR0cignc3JjJywgZWxlbWVudC5hdHRyKCdzcmMnKSB8fCBlbGVtZW50LmF0dHIoJ2RhdGEtc3JjJykgfHwgZWxlbWVudC5hdHRyKCdkYXRhLXNyYy1yZXRpbmEnKSk7XHJcblx0XHR9LCB0aGlzKSk7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogRGVzdHJveXMgdGhlIGNhcm91c2VsLlxyXG5cdCAqIEBwdWJsaWNcclxuXHQgKi9cclxuXHRPd2wucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcclxuXHJcblx0XHR0aGlzLiRlbGVtZW50Lm9mZignLm93bC5jb3JlJyk7XHJcblx0XHR0aGlzLiRzdGFnZS5vZmYoJy5vd2wuY29yZScpO1xyXG5cdFx0JChkb2N1bWVudCkub2ZmKCcub3dsLmNvcmUnKTtcclxuXHJcblx0XHRpZiAodGhpcy5zZXR0aW5ncy5yZXNwb25zaXZlICE9PSBmYWxzZSkge1xyXG5cdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KHRoaXMucmVzaXplVGltZXIpO1xyXG5cdFx0XHR0aGlzLm9mZih3aW5kb3csICdyZXNpemUnLCB0aGlzLl9oYW5kbGVycy5vblRocm90dGxlZFJlc2l6ZSk7XHJcblx0XHR9XHJcblxyXG5cdFx0Zm9yICh2YXIgaSBpbiB0aGlzLl9wbHVnaW5zKSB7XHJcblx0XHRcdHRoaXMuX3BsdWdpbnNbaV0uZGVzdHJveSgpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuJHN0YWdlLmNoaWxkcmVuKCcuY2xvbmVkJykucmVtb3ZlKCk7XHJcblxyXG5cdFx0dGhpcy4kc3RhZ2UudW53cmFwKCk7XHJcblx0XHR0aGlzLiRzdGFnZS5jaGlsZHJlbigpLmNvbnRlbnRzKCkudW53cmFwKCk7XHJcblx0XHR0aGlzLiRzdGFnZS5jaGlsZHJlbigpLnVud3JhcCgpO1xyXG5cclxuXHRcdHRoaXMuJGVsZW1lbnRcclxuXHRcdFx0LnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5yZWZyZXNoQ2xhc3MpXHJcblx0XHRcdC5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMubG9hZGluZ0NsYXNzKVxyXG5cdFx0XHQucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLmxvYWRlZENsYXNzKVxyXG5cdFx0XHQucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLnJ0bENsYXNzKVxyXG5cdFx0XHQucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLmRyYWdDbGFzcylcclxuXHRcdFx0LnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5ncmFiQ2xhc3MpXHJcblx0XHRcdC5hdHRyKCdjbGFzcycsIHRoaXMuJGVsZW1lbnQuYXR0cignY2xhc3MnKS5yZXBsYWNlKG5ldyBSZWdFeHAodGhpcy5vcHRpb25zLnJlc3BvbnNpdmVDbGFzcyArICctXFxcXFMrXFxcXHMnLCAnZycpLCAnJykpXHJcblx0XHRcdC5yZW1vdmVEYXRhKCdvd2wuY2Fyb3VzZWwnKTtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBPcGVyYXRvcnMgdG8gY2FsY3VsYXRlIHJpZ2h0LXRvLWxlZnQgYW5kIGxlZnQtdG8tcmlnaHQuXHJcblx0ICogQHByb3RlY3RlZFxyXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbYV0gLSBUaGUgbGVmdCBzaWRlIG9wZXJhbmQuXHJcblx0ICogQHBhcmFtIHtTdHJpbmd9IFtvXSAtIFRoZSBvcGVyYXRvci5cclxuXHQgKiBAcGFyYW0ge051bWJlcn0gW2JdIC0gVGhlIHJpZ2h0IHNpZGUgb3BlcmFuZC5cclxuXHQgKi9cclxuXHRPd2wucHJvdG90eXBlLm9wID0gZnVuY3Rpb24oYSwgbywgYikge1xyXG5cdFx0dmFyIHJ0bCA9IHRoaXMuc2V0dGluZ3MucnRsO1xyXG5cdFx0c3dpdGNoIChvKSB7XHJcblx0XHRcdGNhc2UgJzwnOlxyXG5cdFx0XHRcdHJldHVybiBydGwgPyBhID4gYiA6IGEgPCBiO1xyXG5cdFx0XHRjYXNlICc+JzpcclxuXHRcdFx0XHRyZXR1cm4gcnRsID8gYSA8IGIgOiBhID4gYjtcclxuXHRcdFx0Y2FzZSAnPj0nOlxyXG5cdFx0XHRcdHJldHVybiBydGwgPyBhIDw9IGIgOiBhID49IGI7XHJcblx0XHRcdGNhc2UgJzw9JzpcclxuXHRcdFx0XHRyZXR1cm4gcnRsID8gYSA+PSBiIDogYSA8PSBiO1xyXG5cdFx0XHRkZWZhdWx0OlxyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIEF0dGFjaGVzIHRvIGFuIGludGVybmFsIGV2ZW50LlxyXG5cdCAqIEBwcm90ZWN0ZWRcclxuXHQgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50IC0gVGhlIGV2ZW50IHNvdXJjZS5cclxuXHQgKiBAcGFyYW0ge1N0cmluZ30gZXZlbnQgLSBUaGUgZXZlbnQgbmFtZS5cclxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciAtIFRoZSBldmVudCBoYW5kbGVyIHRvIGF0dGFjaC5cclxuXHQgKiBAcGFyYW0ge0Jvb2xlYW59IGNhcHR1cmUgLSBXZXRoZXIgdGhlIGV2ZW50IHNob3VsZCBiZSBoYW5kbGVkIGF0IHRoZSBjYXB0dXJpbmcgcGhhc2Ugb3Igbm90LlxyXG5cdCAqL1xyXG5cdE93bC5wcm90b3R5cGUub24gPSBmdW5jdGlvbihlbGVtZW50LCBldmVudCwgbGlzdGVuZXIsIGNhcHR1cmUpIHtcclxuXHRcdGlmIChlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIpIHtcclxuXHRcdFx0ZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lciwgY2FwdHVyZSk7XHJcblx0XHR9IGVsc2UgaWYgKGVsZW1lbnQuYXR0YWNoRXZlbnQpIHtcclxuXHRcdFx0ZWxlbWVudC5hdHRhY2hFdmVudCgnb24nICsgZXZlbnQsIGxpc3RlbmVyKTtcclxuXHRcdH1cclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBEZXRhY2hlcyBmcm9tIGFuIGludGVybmFsIGV2ZW50LlxyXG5cdCAqIEBwcm90ZWN0ZWRcclxuXHQgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50IC0gVGhlIGV2ZW50IHNvdXJjZS5cclxuXHQgKiBAcGFyYW0ge1N0cmluZ30gZXZlbnQgLSBUaGUgZXZlbnQgbmFtZS5cclxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciAtIFRoZSBhdHRhY2hlZCBldmVudCBoYW5kbGVyIHRvIGRldGFjaC5cclxuXHQgKiBAcGFyYW0ge0Jvb2xlYW59IGNhcHR1cmUgLSBXZXRoZXIgdGhlIGF0dGFjaGVkIGV2ZW50IGhhbmRsZXIgd2FzIHJlZ2lzdGVyZWQgYXMgYSBjYXB0dXJpbmcgbGlzdGVuZXIgb3Igbm90LlxyXG5cdCAqL1xyXG5cdE93bC5wcm90b3R5cGUub2ZmID0gZnVuY3Rpb24oZWxlbWVudCwgZXZlbnQsIGxpc3RlbmVyLCBjYXB0dXJlKSB7XHJcblx0XHRpZiAoZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKSB7XHJcblx0XHRcdGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgbGlzdGVuZXIsIGNhcHR1cmUpO1xyXG5cdFx0fSBlbHNlIGlmIChlbGVtZW50LmRldGFjaEV2ZW50KSB7XHJcblx0XHRcdGVsZW1lbnQuZGV0YWNoRXZlbnQoJ29uJyArIGV2ZW50LCBsaXN0ZW5lcik7XHJcblx0XHR9XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogVHJpZ2dlcnMgYSBwdWJsaWMgZXZlbnQuXHJcblx0ICogQHRvZG8gUmVtb3ZlIGBzdGF0dXNgLCBgcmVsYXRlZFRhcmdldGAgc2hvdWxkIGJlIHVzZWQgaW5zdGVhZC5cclxuXHQgKiBAcHJvdGVjdGVkXHJcblx0ICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgLSBUaGUgZXZlbnQgbmFtZS5cclxuXHQgKiBAcGFyYW0geyp9IFtkYXRhPW51bGxdIC0gVGhlIGV2ZW50IGRhdGEuXHJcblx0ICogQHBhcmFtIHtTdHJpbmd9IFtuYW1lc3BhY2U9Y2Fyb3VzZWxdIC0gVGhlIGV2ZW50IG5hbWVzcGFjZS5cclxuXHQgKiBAcGFyYW0ge1N0cmluZ30gW3N0YXRlXSAtIFRoZSBzdGF0ZSB3aGljaCBpcyBhc3NvY2lhdGVkIHdpdGggdGhlIGV2ZW50LlxyXG5cdCAqIEBwYXJhbSB7Qm9vbGVhbn0gW2VudGVyPWZhbHNlXSAtIEluZGljYXRlcyBpZiB0aGUgY2FsbCBlbnRlcnMgdGhlIHNwZWNpZmllZCBzdGF0ZSBvciBub3QuXHJcblx0ICogQHJldHVybnMge0V2ZW50fSAtIFRoZSBldmVudCBhcmd1bWVudHMuXHJcblx0ICovXHJcblx0T3dsLnByb3RvdHlwZS50cmlnZ2VyID0gZnVuY3Rpb24obmFtZSwgZGF0YSwgbmFtZXNwYWNlLCBzdGF0ZSwgZW50ZXIpIHtcclxuXHRcdHZhciBzdGF0dXMgPSB7XHJcblx0XHRcdGl0ZW06IHsgY291bnQ6IHRoaXMuX2l0ZW1zLmxlbmd0aCwgaW5kZXg6IHRoaXMuY3VycmVudCgpIH1cclxuXHRcdH0sIGhhbmRsZXIgPSAkLmNhbWVsQ2FzZShcclxuXHRcdFx0JC5ncmVwKFsgJ29uJywgbmFtZSwgbmFtZXNwYWNlIF0sIGZ1bmN0aW9uKHYpIHsgcmV0dXJuIHYgfSlcclxuXHRcdFx0XHQuam9pbignLScpLnRvTG93ZXJDYXNlKClcclxuXHRcdCksIGV2ZW50ID0gJC5FdmVudChcclxuXHRcdFx0WyBuYW1lLCAnb3dsJywgbmFtZXNwYWNlIHx8ICdjYXJvdXNlbCcgXS5qb2luKCcuJykudG9Mb3dlckNhc2UoKSxcclxuXHRcdFx0JC5leHRlbmQoeyByZWxhdGVkVGFyZ2V0OiB0aGlzIH0sIHN0YXR1cywgZGF0YSlcclxuXHRcdCk7XHJcblxyXG5cdFx0aWYgKCF0aGlzLl9zdXByZXNzW25hbWVdKSB7XHJcblx0XHRcdCQuZWFjaCh0aGlzLl9wbHVnaW5zLCBmdW5jdGlvbihuYW1lLCBwbHVnaW4pIHtcclxuXHRcdFx0XHRpZiAocGx1Z2luLm9uVHJpZ2dlcikge1xyXG5cdFx0XHRcdFx0cGx1Z2luLm9uVHJpZ2dlcihldmVudCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KTtcclxuXHJcblx0XHRcdHRoaXMucmVnaXN0ZXIoeyB0eXBlOiBPd2wuVHlwZS5FdmVudCwgbmFtZTogbmFtZSB9KTtcclxuXHRcdFx0dGhpcy4kZWxlbWVudC50cmlnZ2VyKGV2ZW50KTtcclxuXHJcblx0XHRcdGlmICh0aGlzLnNldHRpbmdzICYmIHR5cGVvZiB0aGlzLnNldHRpbmdzW2hhbmRsZXJdID09PSAnZnVuY3Rpb24nKSB7XHJcblx0XHRcdFx0dGhpcy5zZXR0aW5nc1toYW5kbGVyXS5jYWxsKHRoaXMsIGV2ZW50KTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBldmVudDtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBFbnRlcnMgYSBzdGF0ZS5cclxuXHQgKiBAcGFyYW0gbmFtZSAtIFRoZSBzdGF0ZSBuYW1lLlxyXG5cdCAqL1xyXG5cdE93bC5wcm90b3R5cGUuZW50ZXIgPSBmdW5jdGlvbihuYW1lKSB7XHJcblx0XHQkLmVhY2goWyBuYW1lIF0uY29uY2F0KHRoaXMuX3N0YXRlcy50YWdzW25hbWVdIHx8IFtdKSwgJC5wcm94eShmdW5jdGlvbihpLCBuYW1lKSB7XHJcblx0XHRcdGlmICh0aGlzLl9zdGF0ZXMuY3VycmVudFtuYW1lXSA9PT0gdW5kZWZpbmVkKSB7XHJcblx0XHRcdFx0dGhpcy5fc3RhdGVzLmN1cnJlbnRbbmFtZV0gPSAwO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHR0aGlzLl9zdGF0ZXMuY3VycmVudFtuYW1lXSsrO1xyXG5cdFx0fSwgdGhpcykpO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIExlYXZlcyBhIHN0YXRlLlxyXG5cdCAqIEBwYXJhbSBuYW1lIC0gVGhlIHN0YXRlIG5hbWUuXHJcblx0ICovXHJcblx0T3dsLnByb3RvdHlwZS5sZWF2ZSA9IGZ1bmN0aW9uKG5hbWUpIHtcclxuXHRcdCQuZWFjaChbIG5hbWUgXS5jb25jYXQodGhpcy5fc3RhdGVzLnRhZ3NbbmFtZV0gfHwgW10pLCAkLnByb3h5KGZ1bmN0aW9uKGksIG5hbWUpIHtcclxuXHRcdFx0dGhpcy5fc3RhdGVzLmN1cnJlbnRbbmFtZV0tLTtcclxuXHRcdH0sIHRoaXMpKTtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBSZWdpc3RlcnMgYW4gZXZlbnQgb3Igc3RhdGUuXHJcblx0ICogQHB1YmxpY1xyXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgLSBUaGUgZXZlbnQgb3Igc3RhdGUgdG8gcmVnaXN0ZXIuXHJcblx0ICovXHJcblx0T3dsLnByb3RvdHlwZS5yZWdpc3RlciA9IGZ1bmN0aW9uKG9iamVjdCkge1xyXG5cdFx0aWYgKG9iamVjdC50eXBlID09PSBPd2wuVHlwZS5FdmVudCkge1xyXG5cdFx0XHRpZiAoISQuZXZlbnQuc3BlY2lhbFtvYmplY3QubmFtZV0pIHtcclxuXHRcdFx0XHQkLmV2ZW50LnNwZWNpYWxbb2JqZWN0Lm5hbWVdID0ge307XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGlmICghJC5ldmVudC5zcGVjaWFsW29iamVjdC5uYW1lXS5vd2wpIHtcclxuXHRcdFx0XHR2YXIgX2RlZmF1bHQgPSAkLmV2ZW50LnNwZWNpYWxbb2JqZWN0Lm5hbWVdLl9kZWZhdWx0O1xyXG5cdFx0XHRcdCQuZXZlbnQuc3BlY2lhbFtvYmplY3QubmFtZV0uX2RlZmF1bHQgPSBmdW5jdGlvbihlKSB7XHJcblx0XHRcdFx0XHRpZiAoX2RlZmF1bHQgJiYgX2RlZmF1bHQuYXBwbHkgJiYgKCFlLm5hbWVzcGFjZSB8fCBlLm5hbWVzcGFjZS5pbmRleE9mKCdvd2wnKSA9PT0gLTEpKSB7XHJcblx0XHRcdFx0XHRcdHJldHVybiBfZGVmYXVsdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0cmV0dXJuIGUubmFtZXNwYWNlICYmIGUubmFtZXNwYWNlLmluZGV4T2YoJ293bCcpID4gLTE7XHJcblx0XHRcdFx0fTtcclxuXHRcdFx0XHQkLmV2ZW50LnNwZWNpYWxbb2JqZWN0Lm5hbWVdLm93bCA9IHRydWU7XHJcblx0XHRcdH1cclxuXHRcdH0gZWxzZSBpZiAob2JqZWN0LnR5cGUgPT09IE93bC5UeXBlLlN0YXRlKSB7XHJcblx0XHRcdGlmICghdGhpcy5fc3RhdGVzLnRhZ3Nbb2JqZWN0Lm5hbWVdKSB7XHJcblx0XHRcdFx0dGhpcy5fc3RhdGVzLnRhZ3Nbb2JqZWN0Lm5hbWVdID0gb2JqZWN0LnRhZ3M7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0dGhpcy5fc3RhdGVzLnRhZ3Nbb2JqZWN0Lm5hbWVdID0gdGhpcy5fc3RhdGVzLnRhZ3Nbb2JqZWN0Lm5hbWVdLmNvbmNhdChvYmplY3QudGFncyk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHRoaXMuX3N0YXRlcy50YWdzW29iamVjdC5uYW1lXSA9ICQuZ3JlcCh0aGlzLl9zdGF0ZXMudGFnc1tvYmplY3QubmFtZV0sICQucHJveHkoZnVuY3Rpb24odGFnLCBpKSB7XHJcblx0XHRcdFx0cmV0dXJuICQuaW5BcnJheSh0YWcsIHRoaXMuX3N0YXRlcy50YWdzW29iamVjdC5uYW1lXSkgPT09IGk7XHJcblx0XHRcdH0sIHRoaXMpKTtcclxuXHRcdH1cclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBTdXBwcmVzc2VzIGV2ZW50cy5cclxuXHQgKiBAcHJvdGVjdGVkXHJcblx0ICogQHBhcmFtIHtBcnJheS48U3RyaW5nPn0gZXZlbnRzIC0gVGhlIGV2ZW50cyB0byBzdXBwcmVzcy5cclxuXHQgKi9cclxuXHRPd2wucHJvdG90eXBlLnN1cHByZXNzID0gZnVuY3Rpb24oZXZlbnRzKSB7XHJcblx0XHQkLmVhY2goZXZlbnRzLCAkLnByb3h5KGZ1bmN0aW9uKGluZGV4LCBldmVudCkge1xyXG5cdFx0XHR0aGlzLl9zdXByZXNzW2V2ZW50XSA9IHRydWU7XHJcblx0XHR9LCB0aGlzKSk7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogUmVsZWFzZXMgc3VwcHJlc3NlZCBldmVudHMuXHJcblx0ICogQHByb3RlY3RlZFxyXG5cdCAqIEBwYXJhbSB7QXJyYXkuPFN0cmluZz59IGV2ZW50cyAtIFRoZSBldmVudHMgdG8gcmVsZWFzZS5cclxuXHQgKi9cclxuXHRPd2wucHJvdG90eXBlLnJlbGVhc2UgPSBmdW5jdGlvbihldmVudHMpIHtcclxuXHRcdCQuZWFjaChldmVudHMsICQucHJveHkoZnVuY3Rpb24oaW5kZXgsIGV2ZW50KSB7XHJcblx0XHRcdGRlbGV0ZSB0aGlzLl9zdXByZXNzW2V2ZW50XTtcclxuXHRcdH0sIHRoaXMpKTtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBHZXRzIHVuaWZpZWQgcG9pbnRlciBjb29yZGluYXRlcyBmcm9tIGV2ZW50LlxyXG5cdCAqIEB0b2RvICMyNjFcclxuXHQgKiBAcHJvdGVjdGVkXHJcblx0ICogQHBhcmFtIHtFdmVudH0gLSBUaGUgYG1vdXNlZG93bmAgb3IgYHRvdWNoc3RhcnRgIGV2ZW50LlxyXG5cdCAqIEByZXR1cm5zIHtPYmplY3R9IC0gQ29udGFpbnMgYHhgIGFuZCBgeWAgY29vcmRpbmF0ZXMgb2YgY3VycmVudCBwb2ludGVyIHBvc2l0aW9uLlxyXG5cdCAqL1xyXG5cdE93bC5wcm90b3R5cGUucG9pbnRlciA9IGZ1bmN0aW9uKGV2ZW50KSB7XHJcblx0XHR2YXIgcmVzdWx0ID0geyB4OiBudWxsLCB5OiBudWxsIH07XHJcblxyXG5cdFx0ZXZlbnQgPSBldmVudC5vcmlnaW5hbEV2ZW50IHx8IGV2ZW50IHx8IHdpbmRvdy5ldmVudDtcclxuXHJcblx0XHRldmVudCA9IGV2ZW50LnRvdWNoZXMgJiYgZXZlbnQudG91Y2hlcy5sZW5ndGggP1xyXG5cdFx0XHRldmVudC50b3VjaGVzWzBdIDogZXZlbnQuY2hhbmdlZFRvdWNoZXMgJiYgZXZlbnQuY2hhbmdlZFRvdWNoZXMubGVuZ3RoID9cclxuXHRcdFx0XHRldmVudC5jaGFuZ2VkVG91Y2hlc1swXSA6IGV2ZW50O1xyXG5cclxuXHRcdGlmIChldmVudC5wYWdlWCkge1xyXG5cdFx0XHRyZXN1bHQueCA9IGV2ZW50LnBhZ2VYO1xyXG5cdFx0XHRyZXN1bHQueSA9IGV2ZW50LnBhZ2VZO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0cmVzdWx0LnggPSBldmVudC5jbGllbnRYO1xyXG5cdFx0XHRyZXN1bHQueSA9IGV2ZW50LmNsaWVudFk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHJlc3VsdDtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBEZXRlcm1pbmVzIGlmIHRoZSBpbnB1dCBpcyBhIE51bWJlciBvciBzb21ldGhpbmcgdGhhdCBjYW4gYmUgY29lcmNlZCB0byBhIE51bWJlclxyXG5cdCAqIEBwcm90ZWN0ZWRcclxuXHQgKiBAcGFyYW0ge051bWJlcnxTdHJpbmd8T2JqZWN0fEFycmF5fEJvb2xlYW58UmVnRXhwfEZ1bmN0aW9ufFN5bWJvbH0gLSBUaGUgaW5wdXQgdG8gYmUgdGVzdGVkXHJcblx0ICogQHJldHVybnMge0Jvb2xlYW59IC0gQW4gaW5kaWNhdGlvbiBpZiB0aGUgaW5wdXQgaXMgYSBOdW1iZXIgb3IgY2FuIGJlIGNvZXJjZWQgdG8gYSBOdW1iZXJcclxuXHQgKi9cclxuXHRPd2wucHJvdG90eXBlLmlzTnVtZXJpYyA9IGZ1bmN0aW9uKG51bWJlcikge1xyXG5cdFx0cmV0dXJuICFpc05hTihwYXJzZUZsb2F0KG51bWJlcikpO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIEdldHMgdGhlIGRpZmZlcmVuY2Ugb2YgdHdvIHZlY3RvcnMuXHJcblx0ICogQHRvZG8gIzI2MVxyXG5cdCAqIEBwcm90ZWN0ZWRcclxuXHQgKiBAcGFyYW0ge09iamVjdH0gLSBUaGUgZmlyc3QgdmVjdG9yLlxyXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSAtIFRoZSBzZWNvbmQgdmVjdG9yLlxyXG5cdCAqIEByZXR1cm5zIHtPYmplY3R9IC0gVGhlIGRpZmZlcmVuY2UuXHJcblx0ICovXHJcblx0T3dsLnByb3RvdHlwZS5kaWZmZXJlbmNlID0gZnVuY3Rpb24oZmlyc3QsIHNlY29uZCkge1xyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0eDogZmlyc3QueCAtIHNlY29uZC54LFxyXG5cdFx0XHR5OiBmaXJzdC55IC0gc2Vjb25kLnlcclxuXHRcdH07XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogVGhlIGpRdWVyeSBQbHVnaW4gZm9yIHRoZSBPd2wgQ2Fyb3VzZWxcclxuXHQgKiBAdG9kbyBOYXZpZ2F0aW9uIHBsdWdpbiBgbmV4dGAgYW5kIGBwcmV2YFxyXG5cdCAqIEBwdWJsaWNcclxuXHQgKi9cclxuXHQkLmZuLm93bENhcm91c2VsID0gZnVuY3Rpb24ob3B0aW9uKSB7XHJcblx0XHR2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcclxuXHRcdFx0dmFyICR0aGlzID0gJCh0aGlzKSxcclxuXHRcdFx0XHRkYXRhID0gJHRoaXMuZGF0YSgnb3dsLmNhcm91c2VsJyk7XHJcblxyXG5cdFx0XHRpZiAoIWRhdGEpIHtcclxuXHRcdFx0XHRkYXRhID0gbmV3IE93bCh0aGlzLCB0eXBlb2Ygb3B0aW9uID09ICdvYmplY3QnICYmIG9wdGlvbik7XHJcblx0XHRcdFx0JHRoaXMuZGF0YSgnb3dsLmNhcm91c2VsJywgZGF0YSk7XHJcblxyXG5cdFx0XHRcdCQuZWFjaChbXHJcblx0XHRcdFx0XHQnbmV4dCcsICdwcmV2JywgJ3RvJywgJ2Rlc3Ryb3knLCAncmVmcmVzaCcsICdyZXBsYWNlJywgJ2FkZCcsICdyZW1vdmUnXHJcblx0XHRcdFx0XSwgZnVuY3Rpb24oaSwgZXZlbnQpIHtcclxuXHRcdFx0XHRcdGRhdGEucmVnaXN0ZXIoeyB0eXBlOiBPd2wuVHlwZS5FdmVudCwgbmFtZTogZXZlbnQgfSk7XHJcblx0XHRcdFx0XHRkYXRhLiRlbGVtZW50Lm9uKGV2ZW50ICsgJy5vd2wuY2Fyb3VzZWwuY29yZScsICQucHJveHkoZnVuY3Rpb24oZSkge1xyXG5cdFx0XHRcdFx0XHRpZiAoZS5uYW1lc3BhY2UgJiYgZS5yZWxhdGVkVGFyZ2V0ICE9PSB0aGlzKSB7XHJcblx0XHRcdFx0XHRcdFx0dGhpcy5zdXBwcmVzcyhbIGV2ZW50IF0pO1xyXG5cdFx0XHRcdFx0XHRcdGRhdGFbZXZlbnRdLmFwcGx5KHRoaXMsIFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7XHJcblx0XHRcdFx0XHRcdFx0dGhpcy5yZWxlYXNlKFsgZXZlbnQgXSk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH0sIGRhdGEpKTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0aWYgKHR5cGVvZiBvcHRpb24gPT0gJ3N0cmluZycgJiYgb3B0aW9uLmNoYXJBdCgwKSAhPT0gJ18nKSB7XHJcblx0XHRcdFx0ZGF0YVtvcHRpb25dLmFwcGx5KGRhdGEsIGFyZ3MpO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBUaGUgY29uc3RydWN0b3IgZm9yIHRoZSBqUXVlcnkgUGx1Z2luXHJcblx0ICogQHB1YmxpY1xyXG5cdCAqL1xyXG5cdCQuZm4ub3dsQ2Fyb3VzZWwuQ29uc3RydWN0b3IgPSBPd2w7XHJcblxyXG59KSh3aW5kb3cuWmVwdG8gfHwgd2luZG93LmpRdWVyeSwgd2luZG93LCBkb2N1bWVudCk7XHJcblxyXG4vKipcclxuICogQXV0b1JlZnJlc2ggUGx1Z2luXHJcbiAqIEB2ZXJzaW9uIDIuMS4wXHJcbiAqIEBhdXRob3IgQXJ0dXMgS29sYW5vd3NraVxyXG4gKiBAYXV0aG9yIERhdmlkIERldXRzY2hcclxuICogQGxpY2Vuc2UgVGhlIE1JVCBMaWNlbnNlIChNSVQpXHJcbiAqL1xyXG47KGZ1bmN0aW9uKCQsIHdpbmRvdywgZG9jdW1lbnQsIHVuZGVmaW5lZCkge1xyXG5cclxuXHQvKipcclxuXHQgKiBDcmVhdGVzIHRoZSBhdXRvIHJlZnJlc2ggcGx1Z2luLlxyXG5cdCAqIEBjbGFzcyBUaGUgQXV0byBSZWZyZXNoIFBsdWdpblxyXG5cdCAqIEBwYXJhbSB7T3dsfSBjYXJvdXNlbCAtIFRoZSBPd2wgQ2Fyb3VzZWxcclxuXHQgKi9cclxuXHR2YXIgQXV0b1JlZnJlc2ggPSBmdW5jdGlvbihjYXJvdXNlbCkge1xyXG5cdFx0LyoqXHJcblx0XHQgKiBSZWZlcmVuY2UgdG8gdGhlIGNvcmUuXHJcblx0XHQgKiBAcHJvdGVjdGVkXHJcblx0XHQgKiBAdHlwZSB7T3dsfVxyXG5cdFx0ICovXHJcblx0XHR0aGlzLl9jb3JlID0gY2Fyb3VzZWw7XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBSZWZyZXNoIGludGVydmFsLlxyXG5cdFx0ICogQHByb3RlY3RlZFxyXG5cdFx0ICogQHR5cGUge251bWJlcn1cclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5faW50ZXJ2YWwgPSBudWxsO1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogV2hldGhlciB0aGUgZWxlbWVudCBpcyBjdXJyZW50bHkgdmlzaWJsZSBvciBub3QuXHJcblx0XHQgKiBAcHJvdGVjdGVkXHJcblx0XHQgKiBAdHlwZSB7Qm9vbGVhbn1cclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5fdmlzaWJsZSA9IG51bGw7XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBBbGwgZXZlbnQgaGFuZGxlcnMuXHJcblx0XHQgKiBAcHJvdGVjdGVkXHJcblx0XHQgKiBAdHlwZSB7T2JqZWN0fVxyXG5cdFx0ICovXHJcblx0XHR0aGlzLl9oYW5kbGVycyA9IHtcclxuXHRcdFx0J2luaXRpYWxpemVkLm93bC5jYXJvdXNlbCc6ICQucHJveHkoZnVuY3Rpb24oZSkge1xyXG5cdFx0XHRcdGlmIChlLm5hbWVzcGFjZSAmJiB0aGlzLl9jb3JlLnNldHRpbmdzLmF1dG9SZWZyZXNoKSB7XHJcblx0XHRcdFx0XHR0aGlzLndhdGNoKCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LCB0aGlzKVxyXG5cdFx0fTtcclxuXHJcblx0XHQvLyBzZXQgZGVmYXVsdCBvcHRpb25zXHJcblx0XHR0aGlzLl9jb3JlLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgQXV0b1JlZnJlc2guRGVmYXVsdHMsIHRoaXMuX2NvcmUub3B0aW9ucyk7XHJcblxyXG5cdFx0Ly8gcmVnaXN0ZXIgZXZlbnQgaGFuZGxlcnNcclxuXHRcdHRoaXMuX2NvcmUuJGVsZW1lbnQub24odGhpcy5faGFuZGxlcnMpO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIERlZmF1bHQgb3B0aW9ucy5cclxuXHQgKiBAcHVibGljXHJcblx0ICovXHJcblx0QXV0b1JlZnJlc2guRGVmYXVsdHMgPSB7XHJcblx0XHRhdXRvUmVmcmVzaDogdHJ1ZSxcclxuXHRcdGF1dG9SZWZyZXNoSW50ZXJ2YWw6IDUwMFxyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIFdhdGNoZXMgdGhlIGVsZW1lbnQuXHJcblx0ICovXHJcblx0QXV0b1JlZnJlc2gucHJvdG90eXBlLndhdGNoID0gZnVuY3Rpb24oKSB7XHJcblx0XHRpZiAodGhpcy5faW50ZXJ2YWwpIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuX3Zpc2libGUgPSB0aGlzLl9jb3JlLiRlbGVtZW50LmlzKCc6dmlzaWJsZScpO1xyXG5cdFx0dGhpcy5faW50ZXJ2YWwgPSB3aW5kb3cuc2V0SW50ZXJ2YWwoJC5wcm94eSh0aGlzLnJlZnJlc2gsIHRoaXMpLCB0aGlzLl9jb3JlLnNldHRpbmdzLmF1dG9SZWZyZXNoSW50ZXJ2YWwpO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIFJlZnJlc2hlcyB0aGUgZWxlbWVudC5cclxuXHQgKi9cclxuXHRBdXRvUmVmcmVzaC5wcm90b3R5cGUucmVmcmVzaCA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0aWYgKHRoaXMuX2NvcmUuJGVsZW1lbnQuaXMoJzp2aXNpYmxlJykgPT09IHRoaXMuX3Zpc2libGUpIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuX3Zpc2libGUgPSAhdGhpcy5fdmlzaWJsZTtcclxuXHJcblx0XHR0aGlzLl9jb3JlLiRlbGVtZW50LnRvZ2dsZUNsYXNzKCdvd2wtaGlkZGVuJywgIXRoaXMuX3Zpc2libGUpO1xyXG5cclxuXHRcdHRoaXMuX3Zpc2libGUgJiYgKHRoaXMuX2NvcmUuaW52YWxpZGF0ZSgnd2lkdGgnKSAmJiB0aGlzLl9jb3JlLnJlZnJlc2goKSk7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogRGVzdHJveXMgdGhlIHBsdWdpbi5cclxuXHQgKi9cclxuXHRBdXRvUmVmcmVzaC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIGhhbmRsZXIsIHByb3BlcnR5O1xyXG5cclxuXHRcdHdpbmRvdy5jbGVhckludGVydmFsKHRoaXMuX2ludGVydmFsKTtcclxuXHJcblx0XHRmb3IgKGhhbmRsZXIgaW4gdGhpcy5faGFuZGxlcnMpIHtcclxuXHRcdFx0dGhpcy5fY29yZS4kZWxlbWVudC5vZmYoaGFuZGxlciwgdGhpcy5faGFuZGxlcnNbaGFuZGxlcl0pO1xyXG5cdFx0fVxyXG5cdFx0Zm9yIChwcm9wZXJ0eSBpbiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0aGlzKSkge1xyXG5cdFx0XHR0eXBlb2YgdGhpc1twcm9wZXJ0eV0gIT0gJ2Z1bmN0aW9uJyAmJiAodGhpc1twcm9wZXJ0eV0gPSBudWxsKTtcclxuXHRcdH1cclxuXHR9O1xyXG5cclxuXHQkLmZuLm93bENhcm91c2VsLkNvbnN0cnVjdG9yLlBsdWdpbnMuQXV0b1JlZnJlc2ggPSBBdXRvUmVmcmVzaDtcclxuXHJcbn0pKHdpbmRvdy5aZXB0byB8fCB3aW5kb3cualF1ZXJ5LCB3aW5kb3csIGRvY3VtZW50KTtcclxuXHJcbi8qKlxyXG4gKiBMYXp5IFBsdWdpblxyXG4gKiBAdmVyc2lvbiAyLjEuMFxyXG4gKiBAYXV0aG9yIEJhcnRvc3ogV29qY2llY2hvd3NraVxyXG4gKiBAYXV0aG9yIERhdmlkIERldXRzY2hcclxuICogQGxpY2Vuc2UgVGhlIE1JVCBMaWNlbnNlIChNSVQpXHJcbiAqL1xyXG47KGZ1bmN0aW9uKCQsIHdpbmRvdywgZG9jdW1lbnQsIHVuZGVmaW5lZCkge1xyXG5cclxuXHQvKipcclxuXHQgKiBDcmVhdGVzIHRoZSBsYXp5IHBsdWdpbi5cclxuXHQgKiBAY2xhc3MgVGhlIExhenkgUGx1Z2luXHJcblx0ICogQHBhcmFtIHtPd2x9IGNhcm91c2VsIC0gVGhlIE93bCBDYXJvdXNlbFxyXG5cdCAqL1xyXG5cdHZhciBMYXp5ID0gZnVuY3Rpb24oY2Fyb3VzZWwpIHtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIFJlZmVyZW5jZSB0byB0aGUgY29yZS5cclxuXHRcdCAqIEBwcm90ZWN0ZWRcclxuXHRcdCAqIEB0eXBlIHtPd2x9XHJcblx0XHQgKi9cclxuXHRcdHRoaXMuX2NvcmUgPSBjYXJvdXNlbDtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIEFscmVhZHkgbG9hZGVkIGl0ZW1zLlxyXG5cdFx0ICogQHByb3RlY3RlZFxyXG5cdFx0ICogQHR5cGUge0FycmF5LjxqUXVlcnk+fVxyXG5cdFx0ICovXHJcblx0XHR0aGlzLl9sb2FkZWQgPSBbXTtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIEV2ZW50IGhhbmRsZXJzLlxyXG5cdFx0ICogQHByb3RlY3RlZFxyXG5cdFx0ICogQHR5cGUge09iamVjdH1cclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5faGFuZGxlcnMgPSB7XHJcblx0XHRcdCdpbml0aWFsaXplZC5vd2wuY2Fyb3VzZWwgY2hhbmdlLm93bC5jYXJvdXNlbCByZXNpemVkLm93bC5jYXJvdXNlbCc6ICQucHJveHkoZnVuY3Rpb24oZSkge1xyXG5cdFx0XHRcdGlmICghZS5uYW1lc3BhY2UpIHtcclxuXHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdGlmICghdGhpcy5fY29yZS5zZXR0aW5ncyB8fCAhdGhpcy5fY29yZS5zZXR0aW5ncy5sYXp5TG9hZCkge1xyXG5cdFx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0aWYgKChlLnByb3BlcnR5ICYmIGUucHJvcGVydHkubmFtZSA9PSAncG9zaXRpb24nKSB8fCBlLnR5cGUgPT0gJ2luaXRpYWxpemVkJykge1xyXG5cdFx0XHRcdFx0dmFyIHNldHRpbmdzID0gdGhpcy5fY29yZS5zZXR0aW5ncyxcclxuXHRcdFx0XHRcdFx0biA9IChzZXR0aW5ncy5jZW50ZXIgJiYgTWF0aC5jZWlsKHNldHRpbmdzLml0ZW1zIC8gMikgfHwgc2V0dGluZ3MuaXRlbXMpLFxyXG5cdFx0XHRcdFx0XHRpID0gKChzZXR0aW5ncy5jZW50ZXIgJiYgbiAqIC0xKSB8fCAwKSxcclxuXHRcdFx0XHRcdFx0cG9zaXRpb24gPSAoZS5wcm9wZXJ0eSAmJiBlLnByb3BlcnR5LnZhbHVlICE9PSB1bmRlZmluZWQgPyBlLnByb3BlcnR5LnZhbHVlIDogdGhpcy5fY29yZS5jdXJyZW50KCkpICsgaSxcclxuXHRcdFx0XHRcdFx0Y2xvbmVzID0gdGhpcy5fY29yZS5jbG9uZXMoKS5sZW5ndGgsXHJcblx0XHRcdFx0XHRcdGxvYWQgPSAkLnByb3h5KGZ1bmN0aW9uKGksIHYpIHsgdGhpcy5sb2FkKHYpIH0sIHRoaXMpO1xyXG5cclxuXHRcdFx0XHRcdHdoaWxlIChpKysgPCBuKSB7XHJcblx0XHRcdFx0XHRcdHRoaXMubG9hZChjbG9uZXMgLyAyICsgdGhpcy5fY29yZS5yZWxhdGl2ZShwb3NpdGlvbikpO1xyXG5cdFx0XHRcdFx0XHRjbG9uZXMgJiYgJC5lYWNoKHRoaXMuX2NvcmUuY2xvbmVzKHRoaXMuX2NvcmUucmVsYXRpdmUocG9zaXRpb24pKSwgbG9hZCk7XHJcblx0XHRcdFx0XHRcdHBvc2l0aW9uKys7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LCB0aGlzKVxyXG5cdFx0fTtcclxuXHJcblx0XHQvLyBzZXQgdGhlIGRlZmF1bHQgb3B0aW9uc1xyXG5cdFx0dGhpcy5fY29yZS5vcHRpb25zID0gJC5leHRlbmQoe30sIExhenkuRGVmYXVsdHMsIHRoaXMuX2NvcmUub3B0aW9ucyk7XHJcblxyXG5cdFx0Ly8gcmVnaXN0ZXIgZXZlbnQgaGFuZGxlclxyXG5cdFx0dGhpcy5fY29yZS4kZWxlbWVudC5vbih0aGlzLl9oYW5kbGVycyk7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogRGVmYXVsdCBvcHRpb25zLlxyXG5cdCAqIEBwdWJsaWNcclxuXHQgKi9cclxuXHRMYXp5LkRlZmF1bHRzID0ge1xyXG5cdFx0bGF6eUxvYWQ6IGZhbHNlXHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogTG9hZHMgYWxsIHJlc291cmNlcyBvZiBhbiBpdGVtIGF0IHRoZSBzcGVjaWZpZWQgcG9zaXRpb24uXHJcblx0ICogQHBhcmFtIHtOdW1iZXJ9IHBvc2l0aW9uIC0gVGhlIGFic29sdXRlIHBvc2l0aW9uIG9mIHRoZSBpdGVtLlxyXG5cdCAqIEBwcm90ZWN0ZWRcclxuXHQgKi9cclxuXHRMYXp5LnByb3RvdHlwZS5sb2FkID0gZnVuY3Rpb24ocG9zaXRpb24pIHtcclxuXHRcdHZhciAkaXRlbSA9IHRoaXMuX2NvcmUuJHN0YWdlLmNoaWxkcmVuKCkuZXEocG9zaXRpb24pLFxyXG5cdFx0XHQkZWxlbWVudHMgPSAkaXRlbSAmJiAkaXRlbS5maW5kKCcub3dsLWxhenknKTtcclxuXHJcblx0XHRpZiAoISRlbGVtZW50cyB8fCAkLmluQXJyYXkoJGl0ZW0uZ2V0KDApLCB0aGlzLl9sb2FkZWQpID4gLTEpIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdCRlbGVtZW50cy5lYWNoKCQucHJveHkoZnVuY3Rpb24oaW5kZXgsIGVsZW1lbnQpIHtcclxuXHRcdFx0dmFyICRlbGVtZW50ID0gJChlbGVtZW50KSwgaW1hZ2UsXHJcblx0XHRcdFx0dXJsID0gKHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvID4gMSAmJiAkZWxlbWVudC5hdHRyKCdkYXRhLXNyYy1yZXRpbmEnKSkgfHwgJGVsZW1lbnQuYXR0cignZGF0YS1zcmMnKTtcclxuXHJcblx0XHRcdHRoaXMuX2NvcmUudHJpZ2dlcignbG9hZCcsIHsgZWxlbWVudDogJGVsZW1lbnQsIHVybDogdXJsIH0sICdsYXp5Jyk7XHJcblxyXG5cdFx0XHRpZiAoJGVsZW1lbnQuaXMoJ2ltZycpKSB7XHJcblx0XHRcdFx0JGVsZW1lbnQub25lKCdsb2FkLm93bC5sYXp5JywgJC5wcm94eShmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdCRlbGVtZW50LmNzcygnb3BhY2l0eScsIDEpO1xyXG5cdFx0XHRcdFx0dGhpcy5fY29yZS50cmlnZ2VyKCdsb2FkZWQnLCB7IGVsZW1lbnQ6ICRlbGVtZW50LCB1cmw6IHVybCB9LCAnbGF6eScpO1xyXG5cdFx0XHRcdH0sIHRoaXMpKS5hdHRyKCdzcmMnLCB1cmwpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGltYWdlID0gbmV3IEltYWdlKCk7XHJcblx0XHRcdFx0aW1hZ2Uub25sb2FkID0gJC5wcm94eShmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdCRlbGVtZW50LmNzcyh7XHJcblx0XHRcdFx0XHRcdCdiYWNrZ3JvdW5kLWltYWdlJzogJ3VybCgnICsgdXJsICsgJyknLFxyXG5cdFx0XHRcdFx0XHQnb3BhY2l0eSc6ICcxJ1xyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHR0aGlzLl9jb3JlLnRyaWdnZXIoJ2xvYWRlZCcsIHsgZWxlbWVudDogJGVsZW1lbnQsIHVybDogdXJsIH0sICdsYXp5Jyk7XHJcblx0XHRcdFx0fSwgdGhpcyk7XHJcblx0XHRcdFx0aW1hZ2Uuc3JjID0gdXJsO1xyXG5cdFx0XHR9XHJcblx0XHR9LCB0aGlzKSk7XHJcblxyXG5cdFx0dGhpcy5fbG9hZGVkLnB1c2goJGl0ZW0uZ2V0KDApKTtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBEZXN0cm95cyB0aGUgcGx1Z2luLlxyXG5cdCAqIEBwdWJsaWNcclxuXHQgKi9cclxuXHRMYXp5LnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XHJcblx0XHR2YXIgaGFuZGxlciwgcHJvcGVydHk7XHJcblxyXG5cdFx0Zm9yIChoYW5kbGVyIGluIHRoaXMuaGFuZGxlcnMpIHtcclxuXHRcdFx0dGhpcy5fY29yZS4kZWxlbWVudC5vZmYoaGFuZGxlciwgdGhpcy5oYW5kbGVyc1toYW5kbGVyXSk7XHJcblx0XHR9XHJcblx0XHRmb3IgKHByb3BlcnR5IGluIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMpKSB7XHJcblx0XHRcdHR5cGVvZiB0aGlzW3Byb3BlcnR5XSAhPSAnZnVuY3Rpb24nICYmICh0aGlzW3Byb3BlcnR5XSA9IG51bGwpO1xyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdCQuZm4ub3dsQ2Fyb3VzZWwuQ29uc3RydWN0b3IuUGx1Z2lucy5MYXp5ID0gTGF6eTtcclxuXHJcbn0pKHdpbmRvdy5aZXB0byB8fCB3aW5kb3cualF1ZXJ5LCB3aW5kb3csIGRvY3VtZW50KTtcclxuXHJcbi8qKlxyXG4gKiBBdXRvSGVpZ2h0IFBsdWdpblxyXG4gKiBAdmVyc2lvbiAyLjEuMFxyXG4gKiBAYXV0aG9yIEJhcnRvc3ogV29qY2llY2hvd3NraVxyXG4gKiBAYXV0aG9yIERhdmlkIERldXRzY2hcclxuICogQGxpY2Vuc2UgVGhlIE1JVCBMaWNlbnNlIChNSVQpXHJcbiAqL1xyXG47KGZ1bmN0aW9uKCQsIHdpbmRvdywgZG9jdW1lbnQsIHVuZGVmaW5lZCkge1xyXG5cclxuXHQvKipcclxuXHQgKiBDcmVhdGVzIHRoZSBhdXRvIGhlaWdodCBwbHVnaW4uXHJcblx0ICogQGNsYXNzIFRoZSBBdXRvIEhlaWdodCBQbHVnaW5cclxuXHQgKiBAcGFyYW0ge093bH0gY2Fyb3VzZWwgLSBUaGUgT3dsIENhcm91c2VsXHJcblx0ICovXHJcblx0dmFyIEF1dG9IZWlnaHQgPSBmdW5jdGlvbihjYXJvdXNlbCkge1xyXG5cdFx0LyoqXHJcblx0XHQgKiBSZWZlcmVuY2UgdG8gdGhlIGNvcmUuXHJcblx0XHQgKiBAcHJvdGVjdGVkXHJcblx0XHQgKiBAdHlwZSB7T3dsfVxyXG5cdFx0ICovXHJcblx0XHR0aGlzLl9jb3JlID0gY2Fyb3VzZWw7XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBBbGwgZXZlbnQgaGFuZGxlcnMuXHJcblx0XHQgKiBAcHJvdGVjdGVkXHJcblx0XHQgKiBAdHlwZSB7T2JqZWN0fVxyXG5cdFx0ICovXHJcblx0XHR0aGlzLl9oYW5kbGVycyA9IHtcclxuXHRcdFx0J2luaXRpYWxpemVkLm93bC5jYXJvdXNlbCByZWZyZXNoZWQub3dsLmNhcm91c2VsJzogJC5wcm94eShmdW5jdGlvbihlKSB7XHJcblx0XHRcdFx0aWYgKGUubmFtZXNwYWNlICYmIHRoaXMuX2NvcmUuc2V0dGluZ3MuYXV0b0hlaWdodCkge1xyXG5cdFx0XHRcdFx0dGhpcy51cGRhdGUoKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sIHRoaXMpLFxyXG5cdFx0XHQnY2hhbmdlZC5vd2wuY2Fyb3VzZWwnOiAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0XHRpZiAoZS5uYW1lc3BhY2UgJiYgdGhpcy5fY29yZS5zZXR0aW5ncy5hdXRvSGVpZ2h0ICYmIGUucHJvcGVydHkubmFtZSA9PSAncG9zaXRpb24nKXtcclxuXHRcdFx0XHRcdHRoaXMudXBkYXRlKCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LCB0aGlzKSxcclxuXHRcdFx0J2xvYWRlZC5vd2wubGF6eSc6ICQucHJveHkoZnVuY3Rpb24oZSkge1xyXG5cdFx0XHRcdGlmIChlLm5hbWVzcGFjZSAmJiB0aGlzLl9jb3JlLnNldHRpbmdzLmF1dG9IZWlnaHRcclxuXHRcdFx0XHRcdCYmIGUuZWxlbWVudC5jbG9zZXN0KCcuJyArIHRoaXMuX2NvcmUuc2V0dGluZ3MuaXRlbUNsYXNzKS5pbmRleCgpID09PSB0aGlzLl9jb3JlLmN1cnJlbnQoKSkge1xyXG5cdFx0XHRcdFx0dGhpcy51cGRhdGUoKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sIHRoaXMpXHJcblx0XHR9O1xyXG5cclxuXHRcdC8vIHNldCBkZWZhdWx0IG9wdGlvbnNcclxuXHRcdHRoaXMuX2NvcmUub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBBdXRvSGVpZ2h0LkRlZmF1bHRzLCB0aGlzLl9jb3JlLm9wdGlvbnMpO1xyXG5cclxuXHRcdC8vIHJlZ2lzdGVyIGV2ZW50IGhhbmRsZXJzXHJcblx0XHR0aGlzLl9jb3JlLiRlbGVtZW50Lm9uKHRoaXMuX2hhbmRsZXJzKTtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBEZWZhdWx0IG9wdGlvbnMuXHJcblx0ICogQHB1YmxpY1xyXG5cdCAqL1xyXG5cdEF1dG9IZWlnaHQuRGVmYXVsdHMgPSB7XHJcblx0XHRhdXRvSGVpZ2h0OiBmYWxzZSxcclxuXHRcdGF1dG9IZWlnaHRDbGFzczogJ293bC1oZWlnaHQnXHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogVXBkYXRlcyB0aGUgdmlldy5cclxuXHQgKi9cclxuXHRBdXRvSGVpZ2h0LnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbigpIHtcclxuXHRcdHZhciBzdGFydCA9IHRoaXMuX2NvcmUuX2N1cnJlbnQsXHJcblx0XHRcdGVuZCA9IHN0YXJ0ICsgdGhpcy5fY29yZS5zZXR0aW5ncy5pdGVtcyxcclxuXHRcdFx0dmlzaWJsZSA9IHRoaXMuX2NvcmUuJHN0YWdlLmNoaWxkcmVuKCkudG9BcnJheSgpLnNsaWNlKHN0YXJ0LCBlbmQpLFxyXG5cdFx0XHRoZWlnaHRzID0gW10sXHJcblx0XHRcdG1heGhlaWdodCA9IDA7XHJcblxyXG5cdFx0JC5lYWNoKHZpc2libGUsIGZ1bmN0aW9uKGluZGV4LCBpdGVtKSB7XHJcblx0XHRcdGhlaWdodHMucHVzaCgkKGl0ZW0pLmhlaWdodCgpKTtcclxuXHRcdH0pO1xyXG5cclxuXHRcdG1heGhlaWdodCA9IE1hdGgubWF4LmFwcGx5KG51bGwsIGhlaWdodHMpO1xyXG5cclxuXHRcdHRoaXMuX2NvcmUuJHN0YWdlLnBhcmVudCgpXHJcblx0XHRcdC5oZWlnaHQobWF4aGVpZ2h0KVxyXG5cdFx0XHQuYWRkQ2xhc3ModGhpcy5fY29yZS5zZXR0aW5ncy5hdXRvSGVpZ2h0Q2xhc3MpO1xyXG5cdH07XHJcblxyXG5cdEF1dG9IZWlnaHQucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcclxuXHRcdHZhciBoYW5kbGVyLCBwcm9wZXJ0eTtcclxuXHJcblx0XHRmb3IgKGhhbmRsZXIgaW4gdGhpcy5faGFuZGxlcnMpIHtcclxuXHRcdFx0dGhpcy5fY29yZS4kZWxlbWVudC5vZmYoaGFuZGxlciwgdGhpcy5faGFuZGxlcnNbaGFuZGxlcl0pO1xyXG5cdFx0fVxyXG5cdFx0Zm9yIChwcm9wZXJ0eSBpbiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0aGlzKSkge1xyXG5cdFx0XHR0eXBlb2YgdGhpc1twcm9wZXJ0eV0gIT0gJ2Z1bmN0aW9uJyAmJiAodGhpc1twcm9wZXJ0eV0gPSBudWxsKTtcclxuXHRcdH1cclxuXHR9O1xyXG5cclxuXHQkLmZuLm93bENhcm91c2VsLkNvbnN0cnVjdG9yLlBsdWdpbnMuQXV0b0hlaWdodCA9IEF1dG9IZWlnaHQ7XHJcblxyXG59KSh3aW5kb3cuWmVwdG8gfHwgd2luZG93LmpRdWVyeSwgd2luZG93LCBkb2N1bWVudCk7XHJcblxyXG4vKipcclxuICogVmlkZW8gUGx1Z2luXHJcbiAqIEB2ZXJzaW9uIDIuMS4wXHJcbiAqIEBhdXRob3IgQmFydG9zeiBXb2pjaWVjaG93c2tpXHJcbiAqIEBhdXRob3IgRGF2aWQgRGV1dHNjaFxyXG4gKiBAbGljZW5zZSBUaGUgTUlUIExpY2Vuc2UgKE1JVClcclxuICovXHJcbjsoZnVuY3Rpb24oJCwgd2luZG93LCBkb2N1bWVudCwgdW5kZWZpbmVkKSB7XHJcblxyXG5cdC8qKlxyXG5cdCAqIENyZWF0ZXMgdGhlIHZpZGVvIHBsdWdpbi5cclxuXHQgKiBAY2xhc3MgVGhlIFZpZGVvIFBsdWdpblxyXG5cdCAqIEBwYXJhbSB7T3dsfSBjYXJvdXNlbCAtIFRoZSBPd2wgQ2Fyb3VzZWxcclxuXHQgKi9cclxuXHR2YXIgVmlkZW8gPSBmdW5jdGlvbihjYXJvdXNlbCkge1xyXG5cdFx0LyoqXHJcblx0XHQgKiBSZWZlcmVuY2UgdG8gdGhlIGNvcmUuXHJcblx0XHQgKiBAcHJvdGVjdGVkXHJcblx0XHQgKiBAdHlwZSB7T3dsfVxyXG5cdFx0ICovXHJcblx0XHR0aGlzLl9jb3JlID0gY2Fyb3VzZWw7XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBDYWNoZSBhbGwgdmlkZW8gVVJMcy5cclxuXHRcdCAqIEBwcm90ZWN0ZWRcclxuXHRcdCAqIEB0eXBlIHtPYmplY3R9XHJcblx0XHQgKi9cclxuXHRcdHRoaXMuX3ZpZGVvcyA9IHt9O1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogQ3VycmVudCBwbGF5aW5nIGl0ZW0uXHJcblx0XHQgKiBAcHJvdGVjdGVkXHJcblx0XHQgKiBAdHlwZSB7alF1ZXJ5fVxyXG5cdFx0ICovXHJcblx0XHR0aGlzLl9wbGF5aW5nID0gbnVsbDtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIEFsbCBldmVudCBoYW5kbGVycy5cclxuXHRcdCAqIEB0b2RvIFRoZSBjbG9uZWQgY29udGVudCByZW1vdmFsZSBpcyB0b28gbGF0ZVxyXG5cdFx0ICogQHByb3RlY3RlZFxyXG5cdFx0ICogQHR5cGUge09iamVjdH1cclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5faGFuZGxlcnMgPSB7XHJcblx0XHRcdCdpbml0aWFsaXplZC5vd2wuY2Fyb3VzZWwnOiAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0XHRpZiAoZS5uYW1lc3BhY2UpIHtcclxuXHRcdFx0XHRcdHRoaXMuX2NvcmUucmVnaXN0ZXIoeyB0eXBlOiAnc3RhdGUnLCBuYW1lOiAncGxheWluZycsIHRhZ3M6IFsgJ2ludGVyYWN0aW5nJyBdIH0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSwgdGhpcyksXHJcblx0XHRcdCdyZXNpemUub3dsLmNhcm91c2VsJzogJC5wcm94eShmdW5jdGlvbihlKSB7XHJcblx0XHRcdFx0aWYgKGUubmFtZXNwYWNlICYmIHRoaXMuX2NvcmUuc2V0dGluZ3MudmlkZW8gJiYgdGhpcy5pc0luRnVsbFNjcmVlbigpKSB7XHJcblx0XHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LCB0aGlzKSxcclxuXHRcdFx0J3JlZnJlc2hlZC5vd2wuY2Fyb3VzZWwnOiAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0XHRpZiAoZS5uYW1lc3BhY2UgJiYgdGhpcy5fY29yZS5pcygncmVzaXppbmcnKSkge1xyXG5cdFx0XHRcdFx0dGhpcy5fY29yZS4kc3RhZ2UuZmluZCgnLmNsb25lZCAub3dsLXZpZGVvLWZyYW1lJykucmVtb3ZlKCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LCB0aGlzKSxcclxuXHRcdFx0J2NoYW5nZWQub3dsLmNhcm91c2VsJzogJC5wcm94eShmdW5jdGlvbihlKSB7XHJcblx0XHRcdFx0aWYgKGUubmFtZXNwYWNlICYmIGUucHJvcGVydHkubmFtZSA9PT0gJ3Bvc2l0aW9uJyAmJiB0aGlzLl9wbGF5aW5nKSB7XHJcblx0XHRcdFx0XHR0aGlzLnN0b3AoKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sIHRoaXMpLFxyXG5cdFx0XHQncHJlcGFyZWQub3dsLmNhcm91c2VsJzogJC5wcm94eShmdW5jdGlvbihlKSB7XHJcblx0XHRcdFx0aWYgKCFlLm5hbWVzcGFjZSkge1xyXG5cdFx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0dmFyICRlbGVtZW50ID0gJChlLmNvbnRlbnQpLmZpbmQoJy5vd2wtdmlkZW8nKTtcclxuXHJcblx0XHRcdFx0aWYgKCRlbGVtZW50Lmxlbmd0aCkge1xyXG5cdFx0XHRcdFx0JGVsZW1lbnQuY3NzKCdkaXNwbGF5JywgJ25vbmUnKTtcclxuXHRcdFx0XHRcdHRoaXMuZmV0Y2goJGVsZW1lbnQsICQoZS5jb250ZW50KSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LCB0aGlzKVxyXG5cdFx0fTtcclxuXHJcblx0XHQvLyBzZXQgZGVmYXVsdCBvcHRpb25zXHJcblx0XHR0aGlzLl9jb3JlLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgVmlkZW8uRGVmYXVsdHMsIHRoaXMuX2NvcmUub3B0aW9ucyk7XHJcblxyXG5cdFx0Ly8gcmVnaXN0ZXIgZXZlbnQgaGFuZGxlcnNcclxuXHRcdHRoaXMuX2NvcmUuJGVsZW1lbnQub24odGhpcy5faGFuZGxlcnMpO1xyXG5cclxuXHRcdHRoaXMuX2NvcmUuJGVsZW1lbnQub24oJ2NsaWNrLm93bC52aWRlbycsICcub3dsLXZpZGVvLXBsYXktaWNvbicsICQucHJveHkoZnVuY3Rpb24oZSkge1xyXG5cdFx0XHR0aGlzLnBsYXkoZSk7XHJcblx0XHR9LCB0aGlzKSk7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogRGVmYXVsdCBvcHRpb25zLlxyXG5cdCAqIEBwdWJsaWNcclxuXHQgKi9cclxuXHRWaWRlby5EZWZhdWx0cyA9IHtcclxuXHRcdHZpZGVvOiBmYWxzZSxcclxuXHRcdHZpZGVvSGVpZ2h0OiBmYWxzZSxcclxuXHRcdHZpZGVvV2lkdGg6IGZhbHNlXHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogR2V0cyB0aGUgdmlkZW8gSUQgYW5kIHRoZSB0eXBlIChZb3VUdWJlL1ZpbWVvL3Z6YWFyIG9ubHkpLlxyXG5cdCAqIEBwcm90ZWN0ZWRcclxuXHQgKiBAcGFyYW0ge2pRdWVyeX0gdGFyZ2V0IC0gVGhlIHRhcmdldCBjb250YWluaW5nIHRoZSB2aWRlbyBkYXRhLlxyXG5cdCAqIEBwYXJhbSB7alF1ZXJ5fSBpdGVtIC0gVGhlIGl0ZW0gY29udGFpbmluZyB0aGUgdmlkZW8uXHJcblx0ICovXHJcblx0VmlkZW8ucHJvdG90eXBlLmZldGNoID0gZnVuY3Rpb24odGFyZ2V0LCBpdGVtKSB7XHJcblx0XHRcdHZhciB0eXBlID0gKGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0aWYgKHRhcmdldC5hdHRyKCdkYXRhLXZpbWVvLWlkJykpIHtcclxuXHRcdFx0XHRcdFx0cmV0dXJuICd2aW1lbyc7XHJcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHRhcmdldC5hdHRyKCdkYXRhLXZ6YWFyLWlkJykpIHtcclxuXHRcdFx0XHRcdFx0cmV0dXJuICd2emFhcidcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdHJldHVybiAneW91dHViZSc7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSkoKSxcclxuXHRcdFx0XHRpZCA9IHRhcmdldC5hdHRyKCdkYXRhLXZpbWVvLWlkJykgfHwgdGFyZ2V0LmF0dHIoJ2RhdGEteW91dHViZS1pZCcpIHx8IHRhcmdldC5hdHRyKCdkYXRhLXZ6YWFyLWlkJyksXHJcblx0XHRcdFx0d2lkdGggPSB0YXJnZXQuYXR0cignZGF0YS13aWR0aCcpIHx8IHRoaXMuX2NvcmUuc2V0dGluZ3MudmlkZW9XaWR0aCxcclxuXHRcdFx0XHRoZWlnaHQgPSB0YXJnZXQuYXR0cignZGF0YS1oZWlnaHQnKSB8fCB0aGlzLl9jb3JlLnNldHRpbmdzLnZpZGVvSGVpZ2h0LFxyXG5cdFx0XHRcdHVybCA9IHRhcmdldC5hdHRyKCdocmVmJyk7XHJcblxyXG5cdFx0aWYgKHVybCkge1xyXG5cclxuXHRcdFx0LypcclxuXHRcdFx0XHRcdFBhcnNlcyB0aGUgaWQncyBvdXQgb2YgdGhlIGZvbGxvd2luZyB1cmxzIChhbmQgcHJvYmFibHkgbW9yZSk6XHJcblx0XHRcdFx0XHRodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PTppZFxyXG5cdFx0XHRcdFx0aHR0cHM6Ly95b3V0dS5iZS86aWRcclxuXHRcdFx0XHRcdGh0dHBzOi8vdmltZW8uY29tLzppZFxyXG5cdFx0XHRcdFx0aHR0cHM6Ly92aW1lby5jb20vY2hhbm5lbHMvOmNoYW5uZWwvOmlkXHJcblx0XHRcdFx0XHRodHRwczovL3ZpbWVvLmNvbS9ncm91cHMvOmdyb3VwL3ZpZGVvcy86aWRcclxuXHRcdFx0XHRcdGh0dHBzOi8vYXBwLnZ6YWFyLmNvbS92aWRlb3MvOmlkXHJcblxyXG5cdFx0XHRcdFx0VmlzdWFsIGV4YW1wbGU6IGh0dHBzOi8vcmVnZXhwZXIuY29tLyMoaHR0cCUzQSU3Q2h0dHBzJTNBJTdDKSU1QyUyRiU1QyUyRihwbGF5ZXIuJTdDd3d3LiU3Q2FwcC4pJTNGKHZpbWVvJTVDLmNvbSU3Q3lvdXR1KGJlJTVDLmNvbSU3QyU1Qy5iZSU3Q2JlJTVDLmdvb2dsZWFwaXMlNUMuY29tKSU3Q3Z6YWFyJTVDLmNvbSklNUMlMkYodmlkZW8lNUMlMkYlN0N2aWRlb3MlNUMlMkYlN0NlbWJlZCU1QyUyRiU3Q2NoYW5uZWxzJTVDJTJGLiUyQiU1QyUyRiU3Q2dyb3VwcyU1QyUyRi4lMkIlNUMlMkYlN0N3YXRjaCU1QyUzRnYlM0QlN0N2JTVDJTJGKSUzRiglNUJBLVphLXowLTkuXyUyNS0lNUQqKSglNUMlMjYlNUNTJTJCKSUzRlxyXG5cdFx0XHQqL1xyXG5cclxuXHRcdFx0aWQgPSB1cmwubWF0Y2goLyhodHRwOnxodHRwczp8KVxcL1xcLyhwbGF5ZXIufHd3dy58YXBwLik/KHZpbWVvXFwuY29tfHlvdXR1KGJlXFwuY29tfFxcLmJlfGJlXFwuZ29vZ2xlYXBpc1xcLmNvbSl8dnphYXJcXC5jb20pXFwvKHZpZGVvXFwvfHZpZGVvc1xcL3xlbWJlZFxcL3xjaGFubmVsc1xcLy4rXFwvfGdyb3Vwc1xcLy4rXFwvfHdhdGNoXFw/dj18dlxcLyk/KFtBLVphLXowLTkuXyUtXSopKFxcJlxcUyspPy8pO1xyXG5cclxuXHRcdFx0aWYgKGlkWzNdLmluZGV4T2YoJ3lvdXR1JykgPiAtMSkge1xyXG5cdFx0XHRcdHR5cGUgPSAneW91dHViZSc7XHJcblx0XHRcdH0gZWxzZSBpZiAoaWRbM10uaW5kZXhPZigndmltZW8nKSA+IC0xKSB7XHJcblx0XHRcdFx0dHlwZSA9ICd2aW1lbyc7XHJcblx0XHRcdH0gZWxzZSBpZiAoaWRbM10uaW5kZXhPZigndnphYXInKSA+IC0xKSB7XHJcblx0XHRcdFx0dHlwZSA9ICd2emFhcic7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCdWaWRlbyBVUkwgbm90IHN1cHBvcnRlZC4nKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRpZCA9IGlkWzZdO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdNaXNzaW5nIHZpZGVvIFVSTC4nKTtcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLl92aWRlb3NbdXJsXSA9IHtcclxuXHRcdFx0dHlwZTogdHlwZSxcclxuXHRcdFx0aWQ6IGlkLFxyXG5cdFx0XHR3aWR0aDogd2lkdGgsXHJcblx0XHRcdGhlaWdodDogaGVpZ2h0XHJcblx0XHR9O1xyXG5cclxuXHRcdGl0ZW0uYXR0cignZGF0YS12aWRlbycsIHVybCk7XHJcblxyXG5cdFx0dGhpcy50aHVtYm5haWwodGFyZ2V0LCB0aGlzLl92aWRlb3NbdXJsXSk7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogQ3JlYXRlcyB2aWRlbyB0aHVtYm5haWwuXHJcblx0ICogQHByb3RlY3RlZFxyXG5cdCAqIEBwYXJhbSB7alF1ZXJ5fSB0YXJnZXQgLSBUaGUgdGFyZ2V0IGNvbnRhaW5pbmcgdGhlIHZpZGVvIGRhdGEuXHJcblx0ICogQHBhcmFtIHtPYmplY3R9IGluZm8gLSBUaGUgdmlkZW8gaW5mbyBvYmplY3QuXHJcblx0ICogQHNlZSBgZmV0Y2hgXHJcblx0ICovXHJcblx0VmlkZW8ucHJvdG90eXBlLnRodW1ibmFpbCA9IGZ1bmN0aW9uKHRhcmdldCwgdmlkZW8pIHtcclxuXHRcdHZhciB0bkxpbmssXHJcblx0XHRcdGljb24sXHJcblx0XHRcdHBhdGgsXHJcblx0XHRcdGRpbWVuc2lvbnMgPSB2aWRlby53aWR0aCAmJiB2aWRlby5oZWlnaHQgPyAnc3R5bGU9XCJ3aWR0aDonICsgdmlkZW8ud2lkdGggKyAncHg7aGVpZ2h0OicgKyB2aWRlby5oZWlnaHQgKyAncHg7XCInIDogJycsXHJcblx0XHRcdGN1c3RvbVRuID0gdGFyZ2V0LmZpbmQoJ2ltZycpLFxyXG5cdFx0XHRzcmNUeXBlID0gJ3NyYycsXHJcblx0XHRcdGxhenlDbGFzcyA9ICcnLFxyXG5cdFx0XHRzZXR0aW5ncyA9IHRoaXMuX2NvcmUuc2V0dGluZ3MsXHJcblx0XHRcdGNyZWF0ZSA9IGZ1bmN0aW9uKHBhdGgpIHtcclxuXHRcdFx0XHRpY29uID0gJzxkaXYgY2xhc3M9XCJvd2wtdmlkZW8tcGxheS1pY29uXCI+PC9kaXY+JztcclxuXHJcblx0XHRcdFx0aWYgKHNldHRpbmdzLmxhenlMb2FkKSB7XHJcblx0XHRcdFx0XHR0bkxpbmsgPSAnPGRpdiBjbGFzcz1cIm93bC12aWRlby10biAnICsgbGF6eUNsYXNzICsgJ1wiICcgKyBzcmNUeXBlICsgJz1cIicgKyBwYXRoICsgJ1wiPjwvZGl2Pic7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdHRuTGluayA9ICc8ZGl2IGNsYXNzPVwib3dsLXZpZGVvLXRuXCIgc3R5bGU9XCJvcGFjaXR5OjE7YmFja2dyb3VuZC1pbWFnZTp1cmwoJyArIHBhdGggKyAnKVwiPjwvZGl2Pic7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHRhcmdldC5hZnRlcih0bkxpbmspO1xyXG5cdFx0XHRcdHRhcmdldC5hZnRlcihpY29uKTtcclxuXHRcdFx0fTtcclxuXHJcblx0XHQvLyB3cmFwIHZpZGVvIGNvbnRlbnQgaW50byBvd2wtdmlkZW8td3JhcHBlciBkaXZcclxuXHRcdHRhcmdldC53cmFwKCc8ZGl2IGNsYXNzPVwib3dsLXZpZGVvLXdyYXBwZXJcIicgKyBkaW1lbnNpb25zICsgJz48L2Rpdj4nKTtcclxuXHJcblx0XHRpZiAodGhpcy5fY29yZS5zZXR0aW5ncy5sYXp5TG9hZCkge1xyXG5cdFx0XHRzcmNUeXBlID0gJ2RhdGEtc3JjJztcclxuXHRcdFx0bGF6eUNsYXNzID0gJ293bC1sYXp5JztcclxuXHRcdH1cclxuXHJcblx0XHQvLyBjdXN0b20gdGh1bWJuYWlsXHJcblx0XHRpZiAoY3VzdG9tVG4ubGVuZ3RoKSB7XHJcblx0XHRcdGNyZWF0ZShjdXN0b21Ubi5hdHRyKHNyY1R5cGUpKTtcclxuXHRcdFx0Y3VzdG9tVG4ucmVtb3ZlKCk7XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAodmlkZW8udHlwZSA9PT0gJ3lvdXR1YmUnKSB7XHJcblx0XHRcdHBhdGggPSBcIi8vaW1nLnlvdXR1YmUuY29tL3ZpL1wiICsgdmlkZW8uaWQgKyBcIi9ocWRlZmF1bHQuanBnXCI7XHJcblx0XHRcdGNyZWF0ZShwYXRoKTtcclxuXHRcdH0gZWxzZSBpZiAodmlkZW8udHlwZSA9PT0gJ3ZpbWVvJykge1xyXG5cdFx0XHQkLmFqYXgoe1xyXG5cdFx0XHRcdHR5cGU6ICdHRVQnLFxyXG5cdFx0XHRcdHVybDogJy8vdmltZW8uY29tL2FwaS92Mi92aWRlby8nICsgdmlkZW8uaWQgKyAnLmpzb24nLFxyXG5cdFx0XHRcdGpzb25wOiAnY2FsbGJhY2snLFxyXG5cdFx0XHRcdGRhdGFUeXBlOiAnanNvbnAnLFxyXG5cdFx0XHRcdHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHtcclxuXHRcdFx0XHRcdHBhdGggPSBkYXRhWzBdLnRodW1ibmFpbF9sYXJnZTtcclxuXHRcdFx0XHRcdGNyZWF0ZShwYXRoKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cdFx0fSBlbHNlIGlmICh2aWRlby50eXBlID09PSAndnphYXInKSB7XHJcblx0XHRcdCQuYWpheCh7XHJcblx0XHRcdFx0dHlwZTogJ0dFVCcsXHJcblx0XHRcdFx0dXJsOiAnLy92emFhci5jb20vYXBpL3ZpZGVvcy8nICsgdmlkZW8uaWQgKyAnLmpzb24nLFxyXG5cdFx0XHRcdGpzb25wOiAnY2FsbGJhY2snLFxyXG5cdFx0XHRcdGRhdGFUeXBlOiAnanNvbnAnLFxyXG5cdFx0XHRcdHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHtcclxuXHRcdFx0XHRcdHBhdGggPSBkYXRhLmZyYW1lZ3JhYl91cmw7XHJcblx0XHRcdFx0XHRjcmVhdGUocGF0aCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KTtcclxuXHRcdH1cclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBTdG9wcyB0aGUgY3VycmVudCB2aWRlby5cclxuXHQgKiBAcHVibGljXHJcblx0ICovXHJcblx0VmlkZW8ucHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbigpIHtcclxuXHRcdHRoaXMuX2NvcmUudHJpZ2dlcignc3RvcCcsIG51bGwsICd2aWRlbycpO1xyXG5cdFx0dGhpcy5fcGxheWluZy5maW5kKCcub3dsLXZpZGVvLWZyYW1lJykucmVtb3ZlKCk7XHJcblx0XHR0aGlzLl9wbGF5aW5nLnJlbW92ZUNsYXNzKCdvd2wtdmlkZW8tcGxheWluZycpO1xyXG5cdFx0dGhpcy5fcGxheWluZyA9IG51bGw7XHJcblx0XHR0aGlzLl9jb3JlLmxlYXZlKCdwbGF5aW5nJyk7XHJcblx0XHR0aGlzLl9jb3JlLnRyaWdnZXIoJ3N0b3BwZWQnLCBudWxsLCAndmlkZW8nKTtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBTdGFydHMgdGhlIGN1cnJlbnQgdmlkZW8uXHJcblx0ICogQHB1YmxpY1xyXG5cdCAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IC0gVGhlIGV2ZW50IGFyZ3VtZW50cy5cclxuXHQgKi9cclxuXHRWaWRlby5wcm90b3R5cGUucGxheSA9IGZ1bmN0aW9uKGV2ZW50KSB7XHJcblx0XHR2YXIgdGFyZ2V0ID0gJChldmVudC50YXJnZXQpLFxyXG5cdFx0XHRpdGVtID0gdGFyZ2V0LmNsb3Nlc3QoJy4nICsgdGhpcy5fY29yZS5zZXR0aW5ncy5pdGVtQ2xhc3MpLFxyXG5cdFx0XHR2aWRlbyA9IHRoaXMuX3ZpZGVvc1tpdGVtLmF0dHIoJ2RhdGEtdmlkZW8nKV0sXHJcblx0XHRcdHdpZHRoID0gdmlkZW8ud2lkdGggfHwgJzEwMCUnLFxyXG5cdFx0XHRoZWlnaHQgPSB2aWRlby5oZWlnaHQgfHwgdGhpcy5fY29yZS4kc3RhZ2UuaGVpZ2h0KCksXHJcblx0XHRcdGh0bWw7XHJcblxyXG5cdFx0aWYgKHRoaXMuX3BsYXlpbmcpIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuX2NvcmUuZW50ZXIoJ3BsYXlpbmcnKTtcclxuXHRcdHRoaXMuX2NvcmUudHJpZ2dlcigncGxheScsIG51bGwsICd2aWRlbycpO1xyXG5cclxuXHRcdGl0ZW0gPSB0aGlzLl9jb3JlLml0ZW1zKHRoaXMuX2NvcmUucmVsYXRpdmUoaXRlbS5pbmRleCgpKSk7XHJcblxyXG5cdFx0dGhpcy5fY29yZS5yZXNldChpdGVtLmluZGV4KCkpO1xyXG5cclxuXHRcdGlmICh2aWRlby50eXBlID09PSAneW91dHViZScpIHtcclxuXHRcdFx0aHRtbCA9ICc8aWZyYW1lIHdpZHRoPVwiJyArIHdpZHRoICsgJ1wiIGhlaWdodD1cIicgKyBoZWlnaHQgKyAnXCIgc3JjPVwiLy93d3cueW91dHViZS5jb20vZW1iZWQvJyArXHJcblx0XHRcdFx0dmlkZW8uaWQgKyAnP2F1dG9wbGF5PTEmdj0nICsgdmlkZW8uaWQgKyAnXCIgZnJhbWVib3JkZXI9XCIwXCIgYWxsb3dmdWxsc2NyZWVuPjwvaWZyYW1lPic7XHJcblx0XHR9IGVsc2UgaWYgKHZpZGVvLnR5cGUgPT09ICd2aW1lbycpIHtcclxuXHRcdFx0aHRtbCA9ICc8aWZyYW1lIHNyYz1cIi8vcGxheWVyLnZpbWVvLmNvbS92aWRlby8nICsgdmlkZW8uaWQgK1xyXG5cdFx0XHRcdCc/YXV0b3BsYXk9MVwiIHdpZHRoPVwiJyArIHdpZHRoICsgJ1wiIGhlaWdodD1cIicgKyBoZWlnaHQgK1xyXG5cdFx0XHRcdCdcIiBmcmFtZWJvcmRlcj1cIjBcIiB3ZWJraXRhbGxvd2Z1bGxzY3JlZW4gbW96YWxsb3dmdWxsc2NyZWVuIGFsbG93ZnVsbHNjcmVlbj48L2lmcmFtZT4nO1xyXG5cdFx0fSBlbHNlIGlmICh2aWRlby50eXBlID09PSAndnphYXInKSB7XHJcblx0XHRcdGh0bWwgPSAnPGlmcmFtZSBmcmFtZWJvcmRlcj1cIjBcIicgKyAnaGVpZ2h0PVwiJyArIGhlaWdodCArICdcIicgKyAnd2lkdGg9XCInICsgd2lkdGggK1xyXG5cdFx0XHRcdCdcIiBhbGxvd2Z1bGxzY3JlZW4gbW96YWxsb3dmdWxsc2NyZWVuIHdlYmtpdEFsbG93RnVsbFNjcmVlbiAnICtcclxuXHRcdFx0XHQnc3JjPVwiLy92aWV3LnZ6YWFyLmNvbS8nICsgdmlkZW8uaWQgKyAnL3BsYXllcj9hdXRvcGxheT10cnVlXCI+PC9pZnJhbWU+JztcclxuXHRcdH1cclxuXHJcblx0XHQkKCc8ZGl2IGNsYXNzPVwib3dsLXZpZGVvLWZyYW1lXCI+JyArIGh0bWwgKyAnPC9kaXY+JykuaW5zZXJ0QWZ0ZXIoaXRlbS5maW5kKCcub3dsLXZpZGVvJykpO1xyXG5cclxuXHRcdHRoaXMuX3BsYXlpbmcgPSBpdGVtLmFkZENsYXNzKCdvd2wtdmlkZW8tcGxheWluZycpO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIENoZWNrcyB3aGV0aGVyIGFuIHZpZGVvIGlzIGN1cnJlbnRseSBpbiBmdWxsIHNjcmVlbiBtb2RlIG9yIG5vdC5cclxuXHQgKiBAdG9kbyBCYWQgc3R5bGUgYmVjYXVzZSBsb29rcyBsaWtlIGEgcmVhZG9ubHkgbWV0aG9kIGJ1dCBjaGFuZ2VzIG1lbWJlcnMuXHJcblx0ICogQHByb3RlY3RlZFxyXG5cdCAqIEByZXR1cm5zIHtCb29sZWFufVxyXG5cdCAqL1xyXG5cdFZpZGVvLnByb3RvdHlwZS5pc0luRnVsbFNjcmVlbiA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIGVsZW1lbnQgPSBkb2N1bWVudC5mdWxsc2NyZWVuRWxlbWVudCB8fCBkb2N1bWVudC5tb3pGdWxsU2NyZWVuRWxlbWVudCB8fFxyXG5cdFx0XHRcdGRvY3VtZW50LndlYmtpdEZ1bGxzY3JlZW5FbGVtZW50O1xyXG5cclxuXHRcdHJldHVybiBlbGVtZW50ICYmICQoZWxlbWVudCkucGFyZW50KCkuaGFzQ2xhc3MoJ293bC12aWRlby1mcmFtZScpO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIERlc3Ryb3lzIHRoZSBwbHVnaW4uXHJcblx0ICovXHJcblx0VmlkZW8ucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcclxuXHRcdHZhciBoYW5kbGVyLCBwcm9wZXJ0eTtcclxuXHJcblx0XHR0aGlzLl9jb3JlLiRlbGVtZW50Lm9mZignY2xpY2sub3dsLnZpZGVvJyk7XHJcblxyXG5cdFx0Zm9yIChoYW5kbGVyIGluIHRoaXMuX2hhbmRsZXJzKSB7XHJcblx0XHRcdHRoaXMuX2NvcmUuJGVsZW1lbnQub2ZmKGhhbmRsZXIsIHRoaXMuX2hhbmRsZXJzW2hhbmRsZXJdKTtcclxuXHRcdH1cclxuXHRcdGZvciAocHJvcGVydHkgaW4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGhpcykpIHtcclxuXHRcdFx0dHlwZW9mIHRoaXNbcHJvcGVydHldICE9ICdmdW5jdGlvbicgJiYgKHRoaXNbcHJvcGVydHldID0gbnVsbCk7XHJcblx0XHR9XHJcblx0fTtcclxuXHJcblx0JC5mbi5vd2xDYXJvdXNlbC5Db25zdHJ1Y3Rvci5QbHVnaW5zLlZpZGVvID0gVmlkZW87XHJcblxyXG59KSh3aW5kb3cuWmVwdG8gfHwgd2luZG93LmpRdWVyeSwgd2luZG93LCBkb2N1bWVudCk7XHJcblxyXG4vKipcclxuICogQW5pbWF0ZSBQbHVnaW5cclxuICogQHZlcnNpb24gMi4xLjBcclxuICogQGF1dGhvciBCYXJ0b3N6IFdvamNpZWNob3dza2lcclxuICogQGF1dGhvciBEYXZpZCBEZXV0c2NoXHJcbiAqIEBsaWNlbnNlIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxyXG4gKi9cclxuOyhmdW5jdGlvbigkLCB3aW5kb3csIGRvY3VtZW50LCB1bmRlZmluZWQpIHtcclxuXHJcblx0LyoqXHJcblx0ICogQ3JlYXRlcyB0aGUgYW5pbWF0ZSBwbHVnaW4uXHJcblx0ICogQGNsYXNzIFRoZSBOYXZpZ2F0aW9uIFBsdWdpblxyXG5cdCAqIEBwYXJhbSB7T3dsfSBzY29wZSAtIFRoZSBPd2wgQ2Fyb3VzZWxcclxuXHQgKi9cclxuXHR2YXIgQW5pbWF0ZSA9IGZ1bmN0aW9uKHNjb3BlKSB7XHJcblx0XHR0aGlzLmNvcmUgPSBzY29wZTtcclxuXHRcdHRoaXMuY29yZS5vcHRpb25zID0gJC5leHRlbmQoe30sIEFuaW1hdGUuRGVmYXVsdHMsIHRoaXMuY29yZS5vcHRpb25zKTtcclxuXHRcdHRoaXMuc3dhcHBpbmcgPSB0cnVlO1xyXG5cdFx0dGhpcy5wcmV2aW91cyA9IHVuZGVmaW5lZDtcclxuXHRcdHRoaXMubmV4dCA9IHVuZGVmaW5lZDtcclxuXHJcblx0XHR0aGlzLmhhbmRsZXJzID0ge1xyXG5cdFx0XHQnY2hhbmdlLm93bC5jYXJvdXNlbCc6ICQucHJveHkoZnVuY3Rpb24oZSkge1xyXG5cdFx0XHRcdGlmIChlLm5hbWVzcGFjZSAmJiBlLnByb3BlcnR5Lm5hbWUgPT0gJ3Bvc2l0aW9uJykge1xyXG5cdFx0XHRcdFx0dGhpcy5wcmV2aW91cyA9IHRoaXMuY29yZS5jdXJyZW50KCk7XHJcblx0XHRcdFx0XHR0aGlzLm5leHQgPSBlLnByb3BlcnR5LnZhbHVlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSwgdGhpcyksXHJcblx0XHRcdCdkcmFnLm93bC5jYXJvdXNlbCBkcmFnZ2VkLm93bC5jYXJvdXNlbCB0cmFuc2xhdGVkLm93bC5jYXJvdXNlbCc6ICQucHJveHkoZnVuY3Rpb24oZSkge1xyXG5cdFx0XHRcdGlmIChlLm5hbWVzcGFjZSkge1xyXG5cdFx0XHRcdFx0dGhpcy5zd2FwcGluZyA9IGUudHlwZSA9PSAndHJhbnNsYXRlZCc7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LCB0aGlzKSxcclxuXHRcdFx0J3RyYW5zbGF0ZS5vd2wuY2Fyb3VzZWwnOiAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0XHRpZiAoZS5uYW1lc3BhY2UgJiYgdGhpcy5zd2FwcGluZyAmJiAodGhpcy5jb3JlLm9wdGlvbnMuYW5pbWF0ZU91dCB8fCB0aGlzLmNvcmUub3B0aW9ucy5hbmltYXRlSW4pKSB7XHJcblx0XHRcdFx0XHR0aGlzLnN3YXAoKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sIHRoaXMpXHJcblx0XHR9O1xyXG5cclxuXHRcdHRoaXMuY29yZS4kZWxlbWVudC5vbih0aGlzLmhhbmRsZXJzKTtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBEZWZhdWx0IG9wdGlvbnMuXHJcblx0ICogQHB1YmxpY1xyXG5cdCAqL1xyXG5cdEFuaW1hdGUuRGVmYXVsdHMgPSB7XHJcblx0XHRhbmltYXRlT3V0OiBmYWxzZSxcclxuXHRcdGFuaW1hdGVJbjogZmFsc2VcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBUb2dnbGVzIHRoZSBhbmltYXRpb24gY2xhc3NlcyB3aGVuZXZlciBhbiB0cmFuc2xhdGlvbnMgc3RhcnRzLlxyXG5cdCAqIEBwcm90ZWN0ZWRcclxuXHQgKiBAcmV0dXJucyB7Qm9vbGVhbnx1bmRlZmluZWR9XHJcblx0ICovXHJcblx0QW5pbWF0ZS5wcm90b3R5cGUuc3dhcCA9IGZ1bmN0aW9uKCkge1xyXG5cclxuXHRcdGlmICh0aGlzLmNvcmUuc2V0dGluZ3MuaXRlbXMgIT09IDEpIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICghJC5zdXBwb3J0LmFuaW1hdGlvbiB8fCAhJC5zdXBwb3J0LnRyYW5zaXRpb24pIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuY29yZS5zcGVlZCgwKTtcclxuXHJcblx0XHR2YXIgbGVmdCxcclxuXHRcdFx0Y2xlYXIgPSAkLnByb3h5KHRoaXMuY2xlYXIsIHRoaXMpLFxyXG5cdFx0XHRwcmV2aW91cyA9IHRoaXMuY29yZS4kc3RhZ2UuY2hpbGRyZW4oKS5lcSh0aGlzLnByZXZpb3VzKSxcclxuXHRcdFx0bmV4dCA9IHRoaXMuY29yZS4kc3RhZ2UuY2hpbGRyZW4oKS5lcSh0aGlzLm5leHQpLFxyXG5cdFx0XHRpbmNvbWluZyA9IHRoaXMuY29yZS5zZXR0aW5ncy5hbmltYXRlSW4sXHJcblx0XHRcdG91dGdvaW5nID0gdGhpcy5jb3JlLnNldHRpbmdzLmFuaW1hdGVPdXQ7XHJcblxyXG5cdFx0aWYgKHRoaXMuY29yZS5jdXJyZW50KCkgPT09IHRoaXMucHJldmlvdXMpIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChvdXRnb2luZykge1xyXG5cdFx0XHRsZWZ0ID0gdGhpcy5jb3JlLmNvb3JkaW5hdGVzKHRoaXMucHJldmlvdXMpIC0gdGhpcy5jb3JlLmNvb3JkaW5hdGVzKHRoaXMubmV4dCk7XHJcblx0XHRcdHByZXZpb3VzLm9uZSgkLnN1cHBvcnQuYW5pbWF0aW9uLmVuZCwgY2xlYXIpXHJcblx0XHRcdFx0LmNzcyggeyAnbGVmdCc6IGxlZnQgKyAncHgnIH0gKVxyXG5cdFx0XHRcdC5hZGRDbGFzcygnYW5pbWF0ZWQgb3dsLWFuaW1hdGVkLW91dCcpXHJcblx0XHRcdFx0LmFkZENsYXNzKG91dGdvaW5nKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoaW5jb21pbmcpIHtcclxuXHRcdFx0bmV4dC5vbmUoJC5zdXBwb3J0LmFuaW1hdGlvbi5lbmQsIGNsZWFyKVxyXG5cdFx0XHRcdC5hZGRDbGFzcygnYW5pbWF0ZWQgb3dsLWFuaW1hdGVkLWluJylcclxuXHRcdFx0XHQuYWRkQ2xhc3MoaW5jb21pbmcpO1xyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdEFuaW1hdGUucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24oZSkge1xyXG5cdFx0JChlLnRhcmdldCkuY3NzKCB7ICdsZWZ0JzogJycgfSApXHJcblx0XHRcdC5yZW1vdmVDbGFzcygnYW5pbWF0ZWQgb3dsLWFuaW1hdGVkLW91dCBvd2wtYW5pbWF0ZWQtaW4nKVxyXG5cdFx0XHQucmVtb3ZlQ2xhc3ModGhpcy5jb3JlLnNldHRpbmdzLmFuaW1hdGVJbilcclxuXHRcdFx0LnJlbW92ZUNsYXNzKHRoaXMuY29yZS5zZXR0aW5ncy5hbmltYXRlT3V0KTtcclxuXHRcdHRoaXMuY29yZS5vblRyYW5zaXRpb25FbmQoKTtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBEZXN0cm95cyB0aGUgcGx1Z2luLlxyXG5cdCAqIEBwdWJsaWNcclxuXHQgKi9cclxuXHRBbmltYXRlLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XHJcblx0XHR2YXIgaGFuZGxlciwgcHJvcGVydHk7XHJcblxyXG5cdFx0Zm9yIChoYW5kbGVyIGluIHRoaXMuaGFuZGxlcnMpIHtcclxuXHRcdFx0dGhpcy5jb3JlLiRlbGVtZW50Lm9mZihoYW5kbGVyLCB0aGlzLmhhbmRsZXJzW2hhbmRsZXJdKTtcclxuXHRcdH1cclxuXHRcdGZvciAocHJvcGVydHkgaW4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGhpcykpIHtcclxuXHRcdFx0dHlwZW9mIHRoaXNbcHJvcGVydHldICE9ICdmdW5jdGlvbicgJiYgKHRoaXNbcHJvcGVydHldID0gbnVsbCk7XHJcblx0XHR9XHJcblx0fTtcclxuXHJcblx0JC5mbi5vd2xDYXJvdXNlbC5Db25zdHJ1Y3Rvci5QbHVnaW5zLkFuaW1hdGUgPSBBbmltYXRlO1xyXG5cclxufSkod2luZG93LlplcHRvIHx8IHdpbmRvdy5qUXVlcnksIHdpbmRvdywgZG9jdW1lbnQpO1xyXG5cclxuLyoqXHJcbiAqIEF1dG9wbGF5IFBsdWdpblxyXG4gKiBAdmVyc2lvbiAyLjEuMFxyXG4gKiBAYXV0aG9yIEJhcnRvc3ogV29qY2llY2hvd3NraVxyXG4gKiBAYXV0aG9yIEFydHVzIEtvbGFub3dza2lcclxuICogQGF1dGhvciBEYXZpZCBEZXV0c2NoXHJcbiAqIEBsaWNlbnNlIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxyXG4gKi9cclxuOyhmdW5jdGlvbigkLCB3aW5kb3csIGRvY3VtZW50LCB1bmRlZmluZWQpIHtcclxuXHJcblx0LyoqXHJcblx0ICogQ3JlYXRlcyB0aGUgYXV0b3BsYXkgcGx1Z2luLlxyXG5cdCAqIEBjbGFzcyBUaGUgQXV0b3BsYXkgUGx1Z2luXHJcblx0ICogQHBhcmFtIHtPd2x9IHNjb3BlIC0gVGhlIE93bCBDYXJvdXNlbFxyXG5cdCAqL1xyXG5cdHZhciBBdXRvcGxheSA9IGZ1bmN0aW9uKGNhcm91c2VsKSB7XHJcblx0XHQvKipcclxuXHRcdCAqIFJlZmVyZW5jZSB0byB0aGUgY29yZS5cclxuXHRcdCAqIEBwcm90ZWN0ZWRcclxuXHRcdCAqIEB0eXBlIHtPd2x9XHJcblx0XHQgKi9cclxuXHRcdHRoaXMuX2NvcmUgPSBjYXJvdXNlbDtcclxuXHJcblx0XHQvKipcclxuXHRcdCAqIFRoZSBhdXRvcGxheSB0aW1lb3V0LlxyXG5cdFx0ICogQHR5cGUge1RpbWVvdXR9XHJcblx0XHQgKi9cclxuXHRcdHRoaXMuX3RpbWVvdXQgPSBudWxsO1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogSW5kaWNhdGVzIHdoZW5ldmVyIHRoZSBhdXRvcGxheSBpcyBwYXVzZWQuXHJcblx0XHQgKiBAdHlwZSB7Qm9vbGVhbn1cclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5fcGF1c2VkID0gZmFsc2U7XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBBbGwgZXZlbnQgaGFuZGxlcnMuXHJcblx0XHQgKiBAcHJvdGVjdGVkXHJcblx0XHQgKiBAdHlwZSB7T2JqZWN0fVxyXG5cdFx0ICovXHJcblx0XHR0aGlzLl9oYW5kbGVycyA9IHtcclxuXHRcdFx0J2NoYW5nZWQub3dsLmNhcm91c2VsJzogJC5wcm94eShmdW5jdGlvbihlKSB7XHJcblx0XHRcdFx0aWYgKGUubmFtZXNwYWNlICYmIGUucHJvcGVydHkubmFtZSA9PT0gJ3NldHRpbmdzJykge1xyXG5cdFx0XHRcdFx0aWYgKHRoaXMuX2NvcmUuc2V0dGluZ3MuYXV0b3BsYXkpIHtcclxuXHRcdFx0XHRcdFx0dGhpcy5wbGF5KCk7XHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHR0aGlzLnN0b3AoKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9IGVsc2UgaWYgKGUubmFtZXNwYWNlICYmIGUucHJvcGVydHkubmFtZSA9PT0gJ3Bvc2l0aW9uJykge1xyXG5cdFx0XHRcdFx0Ly9jb25zb2xlLmxvZygncGxheT8nLCBlKTtcclxuXHRcdFx0XHRcdGlmICh0aGlzLl9jb3JlLnNldHRpbmdzLmF1dG9wbGF5KSB7XHJcblx0XHRcdFx0XHRcdHRoaXMuX3NldEF1dG9QbGF5SW50ZXJ2YWwoKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sIHRoaXMpLFxyXG5cdFx0XHQnaW5pdGlhbGl6ZWQub3dsLmNhcm91c2VsJzogJC5wcm94eShmdW5jdGlvbihlKSB7XHJcblx0XHRcdFx0aWYgKGUubmFtZXNwYWNlICYmIHRoaXMuX2NvcmUuc2V0dGluZ3MuYXV0b3BsYXkpIHtcclxuXHRcdFx0XHRcdHRoaXMucGxheSgpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSwgdGhpcyksXHJcblx0XHRcdCdwbGF5Lm93bC5hdXRvcGxheSc6ICQucHJveHkoZnVuY3Rpb24oZSwgdCwgcykge1xyXG5cdFx0XHRcdGlmIChlLm5hbWVzcGFjZSkge1xyXG5cdFx0XHRcdFx0dGhpcy5wbGF5KHQsIHMpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSwgdGhpcyksXHJcblx0XHRcdCdzdG9wLm93bC5hdXRvcGxheSc6ICQucHJveHkoZnVuY3Rpb24oZSkge1xyXG5cdFx0XHRcdGlmIChlLm5hbWVzcGFjZSkge1xyXG5cdFx0XHRcdFx0dGhpcy5zdG9wKCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LCB0aGlzKSxcclxuXHRcdFx0J21vdXNlb3Zlci5vd2wuYXV0b3BsYXknOiAkLnByb3h5KGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGlmICh0aGlzLl9jb3JlLnNldHRpbmdzLmF1dG9wbGF5SG92ZXJQYXVzZSAmJiB0aGlzLl9jb3JlLmlzKCdyb3RhdGluZycpKSB7XHJcblx0XHRcdFx0XHR0aGlzLnBhdXNlKCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LCB0aGlzKSxcclxuXHRcdFx0J21vdXNlbGVhdmUub3dsLmF1dG9wbGF5JzogJC5wcm94eShmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRpZiAodGhpcy5fY29yZS5zZXR0aW5ncy5hdXRvcGxheUhvdmVyUGF1c2UgJiYgdGhpcy5fY29yZS5pcygncm90YXRpbmcnKSkge1xyXG5cdFx0XHRcdFx0dGhpcy5wbGF5KCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LCB0aGlzKSxcclxuXHRcdFx0J3RvdWNoc3RhcnQub3dsLmNvcmUnOiAkLnByb3h5KGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdGlmICh0aGlzLl9jb3JlLnNldHRpbmdzLmF1dG9wbGF5SG92ZXJQYXVzZSAmJiB0aGlzLl9jb3JlLmlzKCdyb3RhdGluZycpKSB7XHJcblx0XHRcdFx0XHR0aGlzLnBhdXNlKCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LCB0aGlzKSxcclxuXHRcdFx0J3RvdWNoZW5kLm93bC5jb3JlJzogJC5wcm94eShmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRpZiAodGhpcy5fY29yZS5zZXR0aW5ncy5hdXRvcGxheUhvdmVyUGF1c2UpIHtcclxuXHRcdFx0XHRcdHRoaXMucGxheSgpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSwgdGhpcylcclxuXHRcdH07XHJcblxyXG5cdFx0Ly8gcmVnaXN0ZXIgZXZlbnQgaGFuZGxlcnNcclxuXHRcdHRoaXMuX2NvcmUuJGVsZW1lbnQub24odGhpcy5faGFuZGxlcnMpO1xyXG5cclxuXHRcdC8vIHNldCBkZWZhdWx0IG9wdGlvbnNcclxuXHRcdHRoaXMuX2NvcmUub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBBdXRvcGxheS5EZWZhdWx0cywgdGhpcy5fY29yZS5vcHRpb25zKTtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBEZWZhdWx0IG9wdGlvbnMuXHJcblx0ICogQHB1YmxpY1xyXG5cdCAqL1xyXG5cdEF1dG9wbGF5LkRlZmF1bHRzID0ge1xyXG5cdFx0YXV0b3BsYXk6IGZhbHNlLFxyXG5cdFx0YXV0b3BsYXlUaW1lb3V0OiA1MDAwLFxyXG5cdFx0YXV0b3BsYXlIb3ZlclBhdXNlOiBmYWxzZSxcclxuXHRcdGF1dG9wbGF5U3BlZWQ6IGZhbHNlXHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogU3RhcnRzIHRoZSBhdXRvcGxheS5cclxuXHQgKiBAcHVibGljXHJcblx0ICogQHBhcmFtIHtOdW1iZXJ9IFt0aW1lb3V0XSAtIFRoZSBpbnRlcnZhbCBiZWZvcmUgdGhlIG5leHQgYW5pbWF0aW9uIHN0YXJ0cy5cclxuXHQgKiBAcGFyYW0ge051bWJlcn0gW3NwZWVkXSAtIFRoZSBhbmltYXRpb24gc3BlZWQgZm9yIHRoZSBhbmltYXRpb25zLlxyXG5cdCAqL1xyXG5cdEF1dG9wbGF5LnByb3RvdHlwZS5wbGF5ID0gZnVuY3Rpb24odGltZW91dCwgc3BlZWQpIHtcclxuXHRcdHRoaXMuX3BhdXNlZCA9IGZhbHNlO1xyXG5cclxuXHRcdGlmICh0aGlzLl9jb3JlLmlzKCdyb3RhdGluZycpKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLl9jb3JlLmVudGVyKCdyb3RhdGluZycpO1xyXG5cclxuXHRcdHRoaXMuX3NldEF1dG9QbGF5SW50ZXJ2YWwoKTtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBHZXRzIGEgbmV3IHRpbWVvdXRcclxuXHQgKiBAcHJpdmF0ZVxyXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbdGltZW91dF0gLSBUaGUgaW50ZXJ2YWwgYmVmb3JlIHRoZSBuZXh0IGFuaW1hdGlvbiBzdGFydHMuXHJcblx0ICogQHBhcmFtIHtOdW1iZXJ9IFtzcGVlZF0gLSBUaGUgYW5pbWF0aW9uIHNwZWVkIGZvciB0aGUgYW5pbWF0aW9ucy5cclxuXHQgKiBAcmV0dXJuIHtUaW1lb3V0fVxyXG5cdCAqL1xyXG5cdEF1dG9wbGF5LnByb3RvdHlwZS5fZ2V0TmV4dFRpbWVvdXQgPSBmdW5jdGlvbih0aW1lb3V0LCBzcGVlZCkge1xyXG5cdFx0aWYgKCB0aGlzLl90aW1lb3V0ICkge1xyXG5cdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KHRoaXMuX3RpbWVvdXQpO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHdpbmRvdy5zZXRUaW1lb3V0KCQucHJveHkoZnVuY3Rpb24oKSB7XHJcblx0XHRcdGlmICh0aGlzLl9wYXVzZWQgfHwgdGhpcy5fY29yZS5pcygnYnVzeScpIHx8IHRoaXMuX2NvcmUuaXMoJ2ludGVyYWN0aW5nJykgfHwgZG9jdW1lbnQuaGlkZGVuKSB7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblx0XHRcdHRoaXMuX2NvcmUubmV4dChzcGVlZCB8fCB0aGlzLl9jb3JlLnNldHRpbmdzLmF1dG9wbGF5U3BlZWQpO1xyXG5cdFx0fSwgdGhpcyksIHRpbWVvdXQgfHwgdGhpcy5fY29yZS5zZXR0aW5ncy5hdXRvcGxheVRpbWVvdXQpO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIFNldHMgYXV0b3BsYXkgaW4gbW90aW9uLlxyXG5cdCAqIEBwcml2YXRlXHJcblx0ICovXHJcblx0QXV0b3BsYXkucHJvdG90eXBlLl9zZXRBdXRvUGxheUludGVydmFsID0gZnVuY3Rpb24oKSB7XHJcblx0XHR0aGlzLl90aW1lb3V0ID0gdGhpcy5fZ2V0TmV4dFRpbWVvdXQoKTtcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBTdG9wcyB0aGUgYXV0b3BsYXkuXHJcblx0ICogQHB1YmxpY1xyXG5cdCAqL1xyXG5cdEF1dG9wbGF5LnByb3RvdHlwZS5zdG9wID0gZnVuY3Rpb24oKSB7XHJcblx0XHRpZiAoIXRoaXMuX2NvcmUuaXMoJ3JvdGF0aW5nJykpIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdHdpbmRvdy5jbGVhclRpbWVvdXQodGhpcy5fdGltZW91dCk7XHJcblx0XHR0aGlzLl9jb3JlLmxlYXZlKCdyb3RhdGluZycpO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIFN0b3BzIHRoZSBhdXRvcGxheS5cclxuXHQgKiBAcHVibGljXHJcblx0ICovXHJcblx0QXV0b3BsYXkucHJvdG90eXBlLnBhdXNlID0gZnVuY3Rpb24oKSB7XHJcblx0XHRpZiAoIXRoaXMuX2NvcmUuaXMoJ3JvdGF0aW5nJykpIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuX3BhdXNlZCA9IHRydWU7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogRGVzdHJveXMgdGhlIHBsdWdpbi5cclxuXHQgKi9cclxuXHRBdXRvcGxheS5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIGhhbmRsZXIsIHByb3BlcnR5O1xyXG5cclxuXHRcdHRoaXMuc3RvcCgpO1xyXG5cclxuXHRcdGZvciAoaGFuZGxlciBpbiB0aGlzLl9oYW5kbGVycykge1xyXG5cdFx0XHR0aGlzLl9jb3JlLiRlbGVtZW50Lm9mZihoYW5kbGVyLCB0aGlzLl9oYW5kbGVyc1toYW5kbGVyXSk7XHJcblx0XHR9XHJcblx0XHRmb3IgKHByb3BlcnR5IGluIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMpKSB7XHJcblx0XHRcdHR5cGVvZiB0aGlzW3Byb3BlcnR5XSAhPSAnZnVuY3Rpb24nICYmICh0aGlzW3Byb3BlcnR5XSA9IG51bGwpO1xyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdCQuZm4ub3dsQ2Fyb3VzZWwuQ29uc3RydWN0b3IuUGx1Z2lucy5hdXRvcGxheSA9IEF1dG9wbGF5O1xyXG5cclxufSkod2luZG93LlplcHRvIHx8IHdpbmRvdy5qUXVlcnksIHdpbmRvdywgZG9jdW1lbnQpO1xyXG5cclxuLyoqXHJcbiAqIE5hdmlnYXRpb24gUGx1Z2luXHJcbiAqIEB2ZXJzaW9uIDIuMS4wXHJcbiAqIEBhdXRob3IgQXJ0dXMgS29sYW5vd3NraVxyXG4gKiBAYXV0aG9yIERhdmlkIERldXRzY2hcclxuICogQGxpY2Vuc2UgVGhlIE1JVCBMaWNlbnNlIChNSVQpXHJcbiAqL1xyXG47KGZ1bmN0aW9uKCQsIHdpbmRvdywgZG9jdW1lbnQsIHVuZGVmaW5lZCkge1xyXG5cdCd1c2Ugc3RyaWN0JztcclxuXHJcblx0LyoqXHJcblx0ICogQ3JlYXRlcyB0aGUgbmF2aWdhdGlvbiBwbHVnaW4uXHJcblx0ICogQGNsYXNzIFRoZSBOYXZpZ2F0aW9uIFBsdWdpblxyXG5cdCAqIEBwYXJhbSB7T3dsfSBjYXJvdXNlbCAtIFRoZSBPd2wgQ2Fyb3VzZWwuXHJcblx0ICovXHJcblx0dmFyIE5hdmlnYXRpb24gPSBmdW5jdGlvbihjYXJvdXNlbCkge1xyXG5cdFx0LyoqXHJcblx0XHQgKiBSZWZlcmVuY2UgdG8gdGhlIGNvcmUuXHJcblx0XHQgKiBAcHJvdGVjdGVkXHJcblx0XHQgKiBAdHlwZSB7T3dsfVxyXG5cdFx0ICovXHJcblx0XHR0aGlzLl9jb3JlID0gY2Fyb3VzZWw7XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBJbmRpY2F0ZXMgd2hldGhlciB0aGUgcGx1Z2luIGlzIGluaXRpYWxpemVkIG9yIG5vdC5cclxuXHRcdCAqIEBwcm90ZWN0ZWRcclxuXHRcdCAqIEB0eXBlIHtCb29sZWFufVxyXG5cdFx0ICovXHJcblx0XHR0aGlzLl9pbml0aWFsaXplZCA9IGZhbHNlO1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogVGhlIGN1cnJlbnQgcGFnaW5nIGluZGV4ZXMuXHJcblx0XHQgKiBAcHJvdGVjdGVkXHJcblx0XHQgKiBAdHlwZSB7QXJyYXl9XHJcblx0XHQgKi9cclxuXHRcdHRoaXMuX3BhZ2VzID0gW107XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBBbGwgRE9NIGVsZW1lbnRzIG9mIHRoZSB1c2VyIGludGVyZmFjZS5cclxuXHRcdCAqIEBwcm90ZWN0ZWRcclxuXHRcdCAqIEB0eXBlIHtPYmplY3R9XHJcblx0XHQgKi9cclxuXHRcdHRoaXMuX2NvbnRyb2xzID0ge307XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBNYXJrdXAgZm9yIGFuIGluZGljYXRvci5cclxuXHRcdCAqIEBwcm90ZWN0ZWRcclxuXHRcdCAqIEB0eXBlIHtBcnJheS48U3RyaW5nPn1cclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5fdGVtcGxhdGVzID0gW107XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBUaGUgY2Fyb3VzZWwgZWxlbWVudC5cclxuXHRcdCAqIEB0eXBlIHtqUXVlcnl9XHJcblx0XHQgKi9cclxuXHRcdHRoaXMuJGVsZW1lbnQgPSB0aGlzLl9jb3JlLiRlbGVtZW50O1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogT3ZlcnJpZGRlbiBtZXRob2RzIG9mIHRoZSBjYXJvdXNlbC5cclxuXHRcdCAqIEBwcm90ZWN0ZWRcclxuXHRcdCAqIEB0eXBlIHtPYmplY3R9XHJcblx0XHQgKi9cclxuXHRcdHRoaXMuX292ZXJyaWRlcyA9IHtcclxuXHRcdFx0bmV4dDogdGhpcy5fY29yZS5uZXh0LFxyXG5cdFx0XHRwcmV2OiB0aGlzLl9jb3JlLnByZXYsXHJcblx0XHRcdHRvOiB0aGlzLl9jb3JlLnRvXHJcblx0XHR9O1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogQWxsIGV2ZW50IGhhbmRsZXJzLlxyXG5cdFx0ICogQHByb3RlY3RlZFxyXG5cdFx0ICogQHR5cGUge09iamVjdH1cclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5faGFuZGxlcnMgPSB7XHJcblx0XHRcdCdwcmVwYXJlZC5vd2wuY2Fyb3VzZWwnOiAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0XHRpZiAoZS5uYW1lc3BhY2UgJiYgdGhpcy5fY29yZS5zZXR0aW5ncy5kb3RzRGF0YSkge1xyXG5cdFx0XHRcdFx0dGhpcy5fdGVtcGxhdGVzLnB1c2goJzxkaXYgY2xhc3M9XCInICsgdGhpcy5fY29yZS5zZXR0aW5ncy5kb3RDbGFzcyArICdcIj4nICtcclxuXHRcdFx0XHRcdFx0JChlLmNvbnRlbnQpLmZpbmQoJ1tkYXRhLWRvdF0nKS5hZGRCYWNrKCdbZGF0YS1kb3RdJykuYXR0cignZGF0YS1kb3QnKSArICc8L2Rpdj4nKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sIHRoaXMpLFxyXG5cdFx0XHQnYWRkZWQub3dsLmNhcm91c2VsJzogJC5wcm94eShmdW5jdGlvbihlKSB7XHJcblx0XHRcdFx0aWYgKGUubmFtZXNwYWNlICYmIHRoaXMuX2NvcmUuc2V0dGluZ3MuZG90c0RhdGEpIHtcclxuXHRcdFx0XHRcdHRoaXMuX3RlbXBsYXRlcy5zcGxpY2UoZS5wb3NpdGlvbiwgMCwgdGhpcy5fdGVtcGxhdGVzLnBvcCgpKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sIHRoaXMpLFxyXG5cdFx0XHQncmVtb3ZlLm93bC5jYXJvdXNlbCc6ICQucHJveHkoZnVuY3Rpb24oZSkge1xyXG5cdFx0XHRcdGlmIChlLm5hbWVzcGFjZSAmJiB0aGlzLl9jb3JlLnNldHRpbmdzLmRvdHNEYXRhKSB7XHJcblx0XHRcdFx0XHR0aGlzLl90ZW1wbGF0ZXMuc3BsaWNlKGUucG9zaXRpb24sIDEpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSwgdGhpcyksXHJcblx0XHRcdCdjaGFuZ2VkLm93bC5jYXJvdXNlbCc6ICQucHJveHkoZnVuY3Rpb24oZSkge1xyXG5cdFx0XHRcdGlmIChlLm5hbWVzcGFjZSAmJiBlLnByb3BlcnR5Lm5hbWUgPT0gJ3Bvc2l0aW9uJykge1xyXG5cdFx0XHRcdFx0dGhpcy5kcmF3KCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LCB0aGlzKSxcclxuXHRcdFx0J2luaXRpYWxpemVkLm93bC5jYXJvdXNlbCc6ICQucHJveHkoZnVuY3Rpb24oZSkge1xyXG5cdFx0XHRcdGlmIChlLm5hbWVzcGFjZSAmJiAhdGhpcy5faW5pdGlhbGl6ZWQpIHtcclxuXHRcdFx0XHRcdHRoaXMuX2NvcmUudHJpZ2dlcignaW5pdGlhbGl6ZScsIG51bGwsICduYXZpZ2F0aW9uJyk7XHJcblx0XHRcdFx0XHR0aGlzLmluaXRpYWxpemUoKTtcclxuXHRcdFx0XHRcdHRoaXMudXBkYXRlKCk7XHJcblx0XHRcdFx0XHR0aGlzLmRyYXcoKTtcclxuXHRcdFx0XHRcdHRoaXMuX2luaXRpYWxpemVkID0gdHJ1ZTtcclxuXHRcdFx0XHRcdHRoaXMuX2NvcmUudHJpZ2dlcignaW5pdGlhbGl6ZWQnLCBudWxsLCAnbmF2aWdhdGlvbicpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSwgdGhpcyksXHJcblx0XHRcdCdyZWZyZXNoZWQub3dsLmNhcm91c2VsJzogJC5wcm94eShmdW5jdGlvbihlKSB7XHJcblx0XHRcdFx0aWYgKGUubmFtZXNwYWNlICYmIHRoaXMuX2luaXRpYWxpemVkKSB7XHJcblx0XHRcdFx0XHR0aGlzLl9jb3JlLnRyaWdnZXIoJ3JlZnJlc2gnLCBudWxsLCAnbmF2aWdhdGlvbicpO1xyXG5cdFx0XHRcdFx0dGhpcy51cGRhdGUoKTtcclxuXHRcdFx0XHRcdHRoaXMuZHJhdygpO1xyXG5cdFx0XHRcdFx0dGhpcy5fY29yZS50cmlnZ2VyKCdyZWZyZXNoZWQnLCBudWxsLCAnbmF2aWdhdGlvbicpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSwgdGhpcylcclxuXHRcdH07XHJcblxyXG5cdFx0Ly8gc2V0IGRlZmF1bHQgb3B0aW9uc1xyXG5cdFx0dGhpcy5fY29yZS5vcHRpb25zID0gJC5leHRlbmQoe30sIE5hdmlnYXRpb24uRGVmYXVsdHMsIHRoaXMuX2NvcmUub3B0aW9ucyk7XHJcblxyXG5cdFx0Ly8gcmVnaXN0ZXIgZXZlbnQgaGFuZGxlcnNcclxuXHRcdHRoaXMuJGVsZW1lbnQub24odGhpcy5faGFuZGxlcnMpO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIERlZmF1bHQgb3B0aW9ucy5cclxuXHQgKiBAcHVibGljXHJcblx0ICogQHRvZG8gUmVuYW1lIGBzbGlkZUJ5YCB0byBgbmF2QnlgXHJcblx0ICovXHJcblx0TmF2aWdhdGlvbi5EZWZhdWx0cyA9IHtcclxuXHRcdG5hdjogZmFsc2UsXHJcblx0XHRuYXZUZXh0OiBbICdwcmV2JywgJ25leHQnIF0sXHJcblx0XHRuYXZTcGVlZDogZmFsc2UsXHJcblx0XHRuYXZFbGVtZW50OiAnZGl2JyxcclxuXHRcdG5hdkNvbnRhaW5lcjogZmFsc2UsXHJcblx0XHRuYXZDb250YWluZXJDbGFzczogJ293bC1uYXYnLFxyXG5cdFx0bmF2Q2xhc3M6IFsgJ293bC1wcmV2JywgJ293bC1uZXh0JyBdLFxyXG5cdFx0c2xpZGVCeTogMSxcclxuXHRcdGRvdENsYXNzOiAnb3dsLWRvdCcsXHJcblx0XHRkb3RzQ2xhc3M6ICdvd2wtZG90cycsXHJcblx0XHRkb3RzOiB0cnVlLFxyXG5cdFx0ZG90c0VhY2g6IGZhbHNlLFxyXG5cdFx0ZG90c0RhdGE6IGZhbHNlLFxyXG5cdFx0ZG90c1NwZWVkOiBmYWxzZSxcclxuXHRcdGRvdHNDb250YWluZXI6IGZhbHNlXHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogSW5pdGlhbGl6ZXMgdGhlIGxheW91dCBvZiB0aGUgcGx1Z2luIGFuZCBleHRlbmRzIHRoZSBjYXJvdXNlbC5cclxuXHQgKiBAcHJvdGVjdGVkXHJcblx0ICovXHJcblx0TmF2aWdhdGlvbi5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIG92ZXJyaWRlLFxyXG5cdFx0XHRzZXR0aW5ncyA9IHRoaXMuX2NvcmUuc2V0dGluZ3M7XHJcblxyXG5cdFx0Ly8gY3JlYXRlIERPTSBzdHJ1Y3R1cmUgZm9yIHJlbGF0aXZlIG5hdmlnYXRpb25cclxuXHRcdHRoaXMuX2NvbnRyb2xzLiRyZWxhdGl2ZSA9IChzZXR0aW5ncy5uYXZDb250YWluZXIgPyAkKHNldHRpbmdzLm5hdkNvbnRhaW5lcilcclxuXHRcdFx0OiAkKCc8ZGl2PicpLmFkZENsYXNzKHNldHRpbmdzLm5hdkNvbnRhaW5lckNsYXNzKS5hcHBlbmRUbyh0aGlzLiRlbGVtZW50KSkuYWRkQ2xhc3MoJ2Rpc2FibGVkJyk7XHJcblxyXG5cdFx0dGhpcy5fY29udHJvbHMuJHByZXZpb3VzID0gJCgnPCcgKyBzZXR0aW5ncy5uYXZFbGVtZW50ICsgJz4nKVxyXG5cdFx0XHQuYWRkQ2xhc3Moc2V0dGluZ3MubmF2Q2xhc3NbMF0pXHJcblx0XHRcdC5odG1sKHNldHRpbmdzLm5hdlRleHRbMF0pXHJcblx0XHRcdC5wcmVwZW5kVG8odGhpcy5fY29udHJvbHMuJHJlbGF0aXZlKVxyXG5cdFx0XHQub24oJ2NsaWNrJywgJC5wcm94eShmdW5jdGlvbihlKSB7XHJcblx0XHRcdFx0dGhpcy5wcmV2KHNldHRpbmdzLm5hdlNwZWVkKTtcclxuXHRcdFx0fSwgdGhpcykpO1xyXG5cdFx0dGhpcy5fY29udHJvbHMuJG5leHQgPSAkKCc8JyArIHNldHRpbmdzLm5hdkVsZW1lbnQgKyAnPicpXHJcblx0XHRcdC5hZGRDbGFzcyhzZXR0aW5ncy5uYXZDbGFzc1sxXSlcclxuXHRcdFx0Lmh0bWwoc2V0dGluZ3MubmF2VGV4dFsxXSlcclxuXHRcdFx0LmFwcGVuZFRvKHRoaXMuX2NvbnRyb2xzLiRyZWxhdGl2ZSlcclxuXHRcdFx0Lm9uKCdjbGljaycsICQucHJveHkoZnVuY3Rpb24oZSkge1xyXG5cdFx0XHRcdHRoaXMubmV4dChzZXR0aW5ncy5uYXZTcGVlZCk7XHJcblx0XHRcdH0sIHRoaXMpKTtcclxuXHJcblx0XHQvLyBjcmVhdGUgRE9NIHN0cnVjdHVyZSBmb3IgYWJzb2x1dGUgbmF2aWdhdGlvblxyXG5cdFx0aWYgKCFzZXR0aW5ncy5kb3RzRGF0YSkge1xyXG5cdFx0XHR0aGlzLl90ZW1wbGF0ZXMgPSBbICQoJzxkaXY+JylcclxuXHRcdFx0XHQuYWRkQ2xhc3Moc2V0dGluZ3MuZG90Q2xhc3MpXHJcblx0XHRcdFx0LmFwcGVuZCgkKCc8c3Bhbj4nKSlcclxuXHRcdFx0XHQucHJvcCgnb3V0ZXJIVE1MJykgXTtcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLl9jb250cm9scy4kYWJzb2x1dGUgPSAoc2V0dGluZ3MuZG90c0NvbnRhaW5lciA/ICQoc2V0dGluZ3MuZG90c0NvbnRhaW5lcilcclxuXHRcdFx0OiAkKCc8ZGl2PicpLmFkZENsYXNzKHNldHRpbmdzLmRvdHNDbGFzcykuYXBwZW5kVG8odGhpcy4kZWxlbWVudCkpLmFkZENsYXNzKCdkaXNhYmxlZCcpO1xyXG5cclxuXHRcdHRoaXMuX2NvbnRyb2xzLiRhYnNvbHV0ZS5vbignY2xpY2snLCAnZGl2JywgJC5wcm94eShmdW5jdGlvbihlKSB7XHJcblx0XHRcdHZhciBpbmRleCA9ICQoZS50YXJnZXQpLnBhcmVudCgpLmlzKHRoaXMuX2NvbnRyb2xzLiRhYnNvbHV0ZSlcclxuXHRcdFx0XHQ/ICQoZS50YXJnZXQpLmluZGV4KCkgOiAkKGUudGFyZ2V0KS5wYXJlbnQoKS5pbmRleCgpO1xyXG5cclxuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuXHRcdFx0dGhpcy50byhpbmRleCwgc2V0dGluZ3MuZG90c1NwZWVkKTtcclxuXHRcdH0sIHRoaXMpKTtcclxuXHJcblx0XHQvLyBvdmVycmlkZSBwdWJsaWMgbWV0aG9kcyBvZiB0aGUgY2Fyb3VzZWxcclxuXHRcdGZvciAob3ZlcnJpZGUgaW4gdGhpcy5fb3ZlcnJpZGVzKSB7XHJcblx0XHRcdHRoaXMuX2NvcmVbb3ZlcnJpZGVdID0gJC5wcm94eSh0aGlzW292ZXJyaWRlXSwgdGhpcyk7XHJcblx0XHR9XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogRGVzdHJveXMgdGhlIHBsdWdpbi5cclxuXHQgKiBAcHJvdGVjdGVkXHJcblx0ICovXHJcblx0TmF2aWdhdGlvbi5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIGhhbmRsZXIsIGNvbnRyb2wsIHByb3BlcnR5LCBvdmVycmlkZTtcclxuXHJcblx0XHRmb3IgKGhhbmRsZXIgaW4gdGhpcy5faGFuZGxlcnMpIHtcclxuXHRcdFx0dGhpcy4kZWxlbWVudC5vZmYoaGFuZGxlciwgdGhpcy5faGFuZGxlcnNbaGFuZGxlcl0pO1xyXG5cdFx0fVxyXG5cdFx0Zm9yIChjb250cm9sIGluIHRoaXMuX2NvbnRyb2xzKSB7XHJcblx0XHRcdHRoaXMuX2NvbnRyb2xzW2NvbnRyb2xdLnJlbW92ZSgpO1xyXG5cdFx0fVxyXG5cdFx0Zm9yIChvdmVycmlkZSBpbiB0aGlzLm92ZXJpZGVzKSB7XHJcblx0XHRcdHRoaXMuX2NvcmVbb3ZlcnJpZGVdID0gdGhpcy5fb3ZlcnJpZGVzW292ZXJyaWRlXTtcclxuXHRcdH1cclxuXHRcdGZvciAocHJvcGVydHkgaW4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGhpcykpIHtcclxuXHRcdFx0dHlwZW9mIHRoaXNbcHJvcGVydHldICE9ICdmdW5jdGlvbicgJiYgKHRoaXNbcHJvcGVydHldID0gbnVsbCk7XHJcblx0XHR9XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogVXBkYXRlcyB0aGUgaW50ZXJuYWwgc3RhdGUuXHJcblx0ICogQHByb3RlY3RlZFxyXG5cdCAqL1xyXG5cdE5hdmlnYXRpb24ucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyIGksIGosIGssXHJcblx0XHRcdGxvd2VyID0gdGhpcy5fY29yZS5jbG9uZXMoKS5sZW5ndGggLyAyLFxyXG5cdFx0XHR1cHBlciA9IGxvd2VyICsgdGhpcy5fY29yZS5pdGVtcygpLmxlbmd0aCxcclxuXHRcdFx0bWF4aW11bSA9IHRoaXMuX2NvcmUubWF4aW11bSh0cnVlKSxcclxuXHRcdFx0c2V0dGluZ3MgPSB0aGlzLl9jb3JlLnNldHRpbmdzLFxyXG5cdFx0XHRzaXplID0gc2V0dGluZ3MuY2VudGVyIHx8IHNldHRpbmdzLmF1dG9XaWR0aCB8fCBzZXR0aW5ncy5kb3RzRGF0YVxyXG5cdFx0XHRcdD8gMSA6IHNldHRpbmdzLmRvdHNFYWNoIHx8IHNldHRpbmdzLml0ZW1zO1xyXG5cclxuXHRcdGlmIChzZXR0aW5ncy5zbGlkZUJ5ICE9PSAncGFnZScpIHtcclxuXHRcdFx0c2V0dGluZ3Muc2xpZGVCeSA9IE1hdGgubWluKHNldHRpbmdzLnNsaWRlQnksIHNldHRpbmdzLml0ZW1zKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoc2V0dGluZ3MuZG90cyB8fCBzZXR0aW5ncy5zbGlkZUJ5ID09ICdwYWdlJykge1xyXG5cdFx0XHR0aGlzLl9wYWdlcyA9IFtdO1xyXG5cclxuXHRcdFx0Zm9yIChpID0gbG93ZXIsIGogPSAwLCBrID0gMDsgaSA8IHVwcGVyOyBpKyspIHtcclxuXHRcdFx0XHRpZiAoaiA+PSBzaXplIHx8IGogPT09IDApIHtcclxuXHRcdFx0XHRcdHRoaXMuX3BhZ2VzLnB1c2goe1xyXG5cdFx0XHRcdFx0XHRzdGFydDogTWF0aC5taW4obWF4aW11bSwgaSAtIGxvd2VyKSxcclxuXHRcdFx0XHRcdFx0ZW5kOiBpIC0gbG93ZXIgKyBzaXplIC0gMVxyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHRpZiAoTWF0aC5taW4obWF4aW11bSwgaSAtIGxvd2VyKSA9PT0gbWF4aW11bSkge1xyXG5cdFx0XHRcdFx0XHRicmVhaztcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGogPSAwLCArK2s7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGogKz0gdGhpcy5fY29yZS5tZXJnZXJzKHRoaXMuX2NvcmUucmVsYXRpdmUoaSkpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogRHJhd3MgdGhlIHVzZXIgaW50ZXJmYWNlLlxyXG5cdCAqIEB0b2RvIFRoZSBvcHRpb24gYGRvdHNEYXRhYCB3b250IHdvcmsuXHJcblx0ICogQHByb3RlY3RlZFxyXG5cdCAqL1xyXG5cdE5hdmlnYXRpb24ucHJvdG90eXBlLmRyYXcgPSBmdW5jdGlvbigpIHtcclxuXHRcdHZhciBkaWZmZXJlbmNlLFxyXG5cdFx0XHRzZXR0aW5ncyA9IHRoaXMuX2NvcmUuc2V0dGluZ3MsXHJcblx0XHRcdGRpc2FibGVkID0gdGhpcy5fY29yZS5pdGVtcygpLmxlbmd0aCA8PSBzZXR0aW5ncy5pdGVtcyxcclxuXHRcdFx0aW5kZXggPSB0aGlzLl9jb3JlLnJlbGF0aXZlKHRoaXMuX2NvcmUuY3VycmVudCgpKSxcclxuXHRcdFx0bG9vcCA9IHNldHRpbmdzLmxvb3AgfHwgc2V0dGluZ3MucmV3aW5kO1xyXG5cclxuXHRcdHRoaXMuX2NvbnRyb2xzLiRyZWxhdGl2ZS50b2dnbGVDbGFzcygnZGlzYWJsZWQnLCAhc2V0dGluZ3MubmF2IHx8IGRpc2FibGVkKTtcclxuXHJcblx0XHRpZiAoc2V0dGluZ3MubmF2KSB7XHJcblx0XHRcdHRoaXMuX2NvbnRyb2xzLiRwcmV2aW91cy50b2dnbGVDbGFzcygnZGlzYWJsZWQnLCAhbG9vcCAmJiBpbmRleCA8PSB0aGlzLl9jb3JlLm1pbmltdW0odHJ1ZSkpO1xyXG5cdFx0XHR0aGlzLl9jb250cm9scy4kbmV4dC50b2dnbGVDbGFzcygnZGlzYWJsZWQnLCAhbG9vcCAmJiBpbmRleCA+PSB0aGlzLl9jb3JlLm1heGltdW0odHJ1ZSkpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuX2NvbnRyb2xzLiRhYnNvbHV0ZS50b2dnbGVDbGFzcygnZGlzYWJsZWQnLCAhc2V0dGluZ3MuZG90cyB8fCBkaXNhYmxlZCk7XHJcblxyXG5cdFx0aWYgKHNldHRpbmdzLmRvdHMpIHtcclxuXHRcdFx0ZGlmZmVyZW5jZSA9IHRoaXMuX3BhZ2VzLmxlbmd0aCAtIHRoaXMuX2NvbnRyb2xzLiRhYnNvbHV0ZS5jaGlsZHJlbigpLmxlbmd0aDtcclxuXHJcblx0XHRcdGlmIChzZXR0aW5ncy5kb3RzRGF0YSAmJiBkaWZmZXJlbmNlICE9PSAwKSB7XHJcblx0XHRcdFx0dGhpcy5fY29udHJvbHMuJGFic29sdXRlLmh0bWwodGhpcy5fdGVtcGxhdGVzLmpvaW4oJycpKTtcclxuXHRcdFx0fSBlbHNlIGlmIChkaWZmZXJlbmNlID4gMCkge1xyXG5cdFx0XHRcdHRoaXMuX2NvbnRyb2xzLiRhYnNvbHV0ZS5hcHBlbmQobmV3IEFycmF5KGRpZmZlcmVuY2UgKyAxKS5qb2luKHRoaXMuX3RlbXBsYXRlc1swXSkpO1xyXG5cdFx0XHR9IGVsc2UgaWYgKGRpZmZlcmVuY2UgPCAwKSB7XHJcblx0XHRcdFx0dGhpcy5fY29udHJvbHMuJGFic29sdXRlLmNoaWxkcmVuKCkuc2xpY2UoZGlmZmVyZW5jZSkucmVtb3ZlKCk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHRoaXMuX2NvbnRyb2xzLiRhYnNvbHV0ZS5maW5kKCcuYWN0aXZlJykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xyXG5cdFx0XHR0aGlzLl9jb250cm9scy4kYWJzb2x1dGUuY2hpbGRyZW4oKS5lcSgkLmluQXJyYXkodGhpcy5jdXJyZW50KCksIHRoaXMuX3BhZ2VzKSkuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIEV4dGVuZHMgZXZlbnQgZGF0YS5cclxuXHQgKiBAcHJvdGVjdGVkXHJcblx0ICogQHBhcmFtIHtFdmVudH0gZXZlbnQgLSBUaGUgZXZlbnQgb2JqZWN0IHdoaWNoIGdldHMgdGhyb3duLlxyXG5cdCAqL1xyXG5cdE5hdmlnYXRpb24ucHJvdG90eXBlLm9uVHJpZ2dlciA9IGZ1bmN0aW9uKGV2ZW50KSB7XHJcblx0XHR2YXIgc2V0dGluZ3MgPSB0aGlzLl9jb3JlLnNldHRpbmdzO1xyXG5cclxuXHRcdGV2ZW50LnBhZ2UgPSB7XHJcblx0XHRcdGluZGV4OiAkLmluQXJyYXkodGhpcy5jdXJyZW50KCksIHRoaXMuX3BhZ2VzKSxcclxuXHRcdFx0Y291bnQ6IHRoaXMuX3BhZ2VzLmxlbmd0aCxcclxuXHRcdFx0c2l6ZTogc2V0dGluZ3MgJiYgKHNldHRpbmdzLmNlbnRlciB8fCBzZXR0aW5ncy5hdXRvV2lkdGggfHwgc2V0dGluZ3MuZG90c0RhdGFcclxuXHRcdFx0XHQ/IDEgOiBzZXR0aW5ncy5kb3RzRWFjaCB8fCBzZXR0aW5ncy5pdGVtcylcclxuXHRcdH07XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogR2V0cyB0aGUgY3VycmVudCBwYWdlIHBvc2l0aW9uIG9mIHRoZSBjYXJvdXNlbC5cclxuXHQgKiBAcHJvdGVjdGVkXHJcblx0ICogQHJldHVybnMge051bWJlcn1cclxuXHQgKi9cclxuXHROYXZpZ2F0aW9uLnByb3RvdHlwZS5jdXJyZW50ID0gZnVuY3Rpb24oKSB7XHJcblx0XHR2YXIgY3VycmVudCA9IHRoaXMuX2NvcmUucmVsYXRpdmUodGhpcy5fY29yZS5jdXJyZW50KCkpO1xyXG5cdFx0cmV0dXJuICQuZ3JlcCh0aGlzLl9wYWdlcywgJC5wcm94eShmdW5jdGlvbihwYWdlLCBpbmRleCkge1xyXG5cdFx0XHRyZXR1cm4gcGFnZS5zdGFydCA8PSBjdXJyZW50ICYmIHBhZ2UuZW5kID49IGN1cnJlbnQ7XHJcblx0XHR9LCB0aGlzKSkucG9wKCk7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogR2V0cyB0aGUgY3VycmVudCBzdWNjZXNvci9wcmVkZWNlc3NvciBwb3NpdGlvbi5cclxuXHQgKiBAcHJvdGVjdGVkXHJcblx0ICogQHJldHVybnMge051bWJlcn1cclxuXHQgKi9cclxuXHROYXZpZ2F0aW9uLnByb3RvdHlwZS5nZXRQb3NpdGlvbiA9IGZ1bmN0aW9uKHN1Y2Nlc3Nvcikge1xyXG5cdFx0dmFyIHBvc2l0aW9uLCBsZW5ndGgsXHJcblx0XHRcdHNldHRpbmdzID0gdGhpcy5fY29yZS5zZXR0aW5ncztcclxuXHJcblx0XHRpZiAoc2V0dGluZ3Muc2xpZGVCeSA9PSAncGFnZScpIHtcclxuXHRcdFx0cG9zaXRpb24gPSAkLmluQXJyYXkodGhpcy5jdXJyZW50KCksIHRoaXMuX3BhZ2VzKTtcclxuXHRcdFx0bGVuZ3RoID0gdGhpcy5fcGFnZXMubGVuZ3RoO1xyXG5cdFx0XHRzdWNjZXNzb3IgPyArK3Bvc2l0aW9uIDogLS1wb3NpdGlvbjtcclxuXHRcdFx0cG9zaXRpb24gPSB0aGlzLl9wYWdlc1soKHBvc2l0aW9uICUgbGVuZ3RoKSArIGxlbmd0aCkgJSBsZW5ndGhdLnN0YXJ0O1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0cG9zaXRpb24gPSB0aGlzLl9jb3JlLnJlbGF0aXZlKHRoaXMuX2NvcmUuY3VycmVudCgpKTtcclxuXHRcdFx0bGVuZ3RoID0gdGhpcy5fY29yZS5pdGVtcygpLmxlbmd0aDtcclxuXHRcdFx0c3VjY2Vzc29yID8gcG9zaXRpb24gKz0gc2V0dGluZ3Muc2xpZGVCeSA6IHBvc2l0aW9uIC09IHNldHRpbmdzLnNsaWRlQnk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHBvc2l0aW9uO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIFNsaWRlcyB0byB0aGUgbmV4dCBpdGVtIG9yIHBhZ2UuXHJcblx0ICogQHB1YmxpY1xyXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbc3BlZWQ9ZmFsc2VdIC0gVGhlIHRpbWUgaW4gbWlsbGlzZWNvbmRzIGZvciB0aGUgdHJhbnNpdGlvbi5cclxuXHQgKi9cclxuXHROYXZpZ2F0aW9uLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24oc3BlZWQpIHtcclxuXHRcdCQucHJveHkodGhpcy5fb3ZlcnJpZGVzLnRvLCB0aGlzLl9jb3JlKSh0aGlzLmdldFBvc2l0aW9uKHRydWUpLCBzcGVlZCk7XHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogU2xpZGVzIHRvIHRoZSBwcmV2aW91cyBpdGVtIG9yIHBhZ2UuXHJcblx0ICogQHB1YmxpY1xyXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBbc3BlZWQ9ZmFsc2VdIC0gVGhlIHRpbWUgaW4gbWlsbGlzZWNvbmRzIGZvciB0aGUgdHJhbnNpdGlvbi5cclxuXHQgKi9cclxuXHROYXZpZ2F0aW9uLnByb3RvdHlwZS5wcmV2ID0gZnVuY3Rpb24oc3BlZWQpIHtcclxuXHRcdCQucHJveHkodGhpcy5fb3ZlcnJpZGVzLnRvLCB0aGlzLl9jb3JlKSh0aGlzLmdldFBvc2l0aW9uKGZhbHNlKSwgc3BlZWQpO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIFNsaWRlcyB0byB0aGUgc3BlY2lmaWVkIGl0ZW0gb3IgcGFnZS5cclxuXHQgKiBAcHVibGljXHJcblx0ICogQHBhcmFtIHtOdW1iZXJ9IHBvc2l0aW9uIC0gVGhlIHBvc2l0aW9uIG9mIHRoZSBpdGVtIG9yIHBhZ2UuXHJcblx0ICogQHBhcmFtIHtOdW1iZXJ9IFtzcGVlZF0gLSBUaGUgdGltZSBpbiBtaWxsaXNlY29uZHMgZm9yIHRoZSB0cmFuc2l0aW9uLlxyXG5cdCAqIEBwYXJhbSB7Qm9vbGVhbn0gW3N0YW5kYXJkPWZhbHNlXSAtIFdoZXRoZXIgdG8gdXNlIHRoZSBzdGFuZGFyZCBiZWhhdmlvdXIgb3Igbm90LlxyXG5cdCAqL1xyXG5cdE5hdmlnYXRpb24ucHJvdG90eXBlLnRvID0gZnVuY3Rpb24ocG9zaXRpb24sIHNwZWVkLCBzdGFuZGFyZCkge1xyXG5cdFx0dmFyIGxlbmd0aDtcclxuXHJcblx0XHRpZiAoIXN0YW5kYXJkICYmIHRoaXMuX3BhZ2VzLmxlbmd0aCkge1xyXG5cdFx0XHRsZW5ndGggPSB0aGlzLl9wYWdlcy5sZW5ndGg7XHJcblx0XHRcdCQucHJveHkodGhpcy5fb3ZlcnJpZGVzLnRvLCB0aGlzLl9jb3JlKSh0aGlzLl9wYWdlc1soKHBvc2l0aW9uICUgbGVuZ3RoKSArIGxlbmd0aCkgJSBsZW5ndGhdLnN0YXJ0LCBzcGVlZCk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHQkLnByb3h5KHRoaXMuX292ZXJyaWRlcy50bywgdGhpcy5fY29yZSkocG9zaXRpb24sIHNwZWVkKTtcclxuXHRcdH1cclxuXHR9O1xyXG5cclxuXHQkLmZuLm93bENhcm91c2VsLkNvbnN0cnVjdG9yLlBsdWdpbnMuTmF2aWdhdGlvbiA9IE5hdmlnYXRpb247XHJcblxyXG59KSh3aW5kb3cuWmVwdG8gfHwgd2luZG93LmpRdWVyeSwgd2luZG93LCBkb2N1bWVudCk7XHJcblxyXG4vKipcclxuICogSGFzaCBQbHVnaW5cclxuICogQHZlcnNpb24gMi4xLjBcclxuICogQGF1dGhvciBBcnR1cyBLb2xhbm93c2tpXHJcbiAqIEBhdXRob3IgRGF2aWQgRGV1dHNjaFxyXG4gKiBAbGljZW5zZSBUaGUgTUlUIExpY2Vuc2UgKE1JVClcclxuICovXHJcbjsoZnVuY3Rpb24oJCwgd2luZG93LCBkb2N1bWVudCwgdW5kZWZpbmVkKSB7XHJcblx0J3VzZSBzdHJpY3QnO1xyXG5cclxuXHQvKipcclxuXHQgKiBDcmVhdGVzIHRoZSBoYXNoIHBsdWdpbi5cclxuXHQgKiBAY2xhc3MgVGhlIEhhc2ggUGx1Z2luXHJcblx0ICogQHBhcmFtIHtPd2x9IGNhcm91c2VsIC0gVGhlIE93bCBDYXJvdXNlbFxyXG5cdCAqL1xyXG5cdHZhciBIYXNoID0gZnVuY3Rpb24oY2Fyb3VzZWwpIHtcclxuXHRcdC8qKlxyXG5cdFx0ICogUmVmZXJlbmNlIHRvIHRoZSBjb3JlLlxyXG5cdFx0ICogQHByb3RlY3RlZFxyXG5cdFx0ICogQHR5cGUge093bH1cclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5fY29yZSA9IGNhcm91c2VsO1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogSGFzaCBpbmRleCBmb3IgdGhlIGl0ZW1zLlxyXG5cdFx0ICogQHByb3RlY3RlZFxyXG5cdFx0ICogQHR5cGUge09iamVjdH1cclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5faGFzaGVzID0ge307XHJcblxyXG5cdFx0LyoqXHJcblx0XHQgKiBUaGUgY2Fyb3VzZWwgZWxlbWVudC5cclxuXHRcdCAqIEB0eXBlIHtqUXVlcnl9XHJcblx0XHQgKi9cclxuXHRcdHRoaXMuJGVsZW1lbnQgPSB0aGlzLl9jb3JlLiRlbGVtZW50O1xyXG5cclxuXHRcdC8qKlxyXG5cdFx0ICogQWxsIGV2ZW50IGhhbmRsZXJzLlxyXG5cdFx0ICogQHByb3RlY3RlZFxyXG5cdFx0ICogQHR5cGUge09iamVjdH1cclxuXHRcdCAqL1xyXG5cdFx0dGhpcy5faGFuZGxlcnMgPSB7XHJcblx0XHRcdCdpbml0aWFsaXplZC5vd2wuY2Fyb3VzZWwnOiAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0XHRpZiAoZS5uYW1lc3BhY2UgJiYgdGhpcy5fY29yZS5zZXR0aW5ncy5zdGFydFBvc2l0aW9uID09PSAnVVJMSGFzaCcpIHtcclxuXHRcdFx0XHRcdCQod2luZG93KS50cmlnZ2VyKCdoYXNoY2hhbmdlLm93bC5uYXZpZ2F0aW9uJyk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LCB0aGlzKSxcclxuXHRcdFx0J3ByZXBhcmVkLm93bC5jYXJvdXNlbCc6ICQucHJveHkoZnVuY3Rpb24oZSkge1xyXG5cdFx0XHRcdGlmIChlLm5hbWVzcGFjZSkge1xyXG5cdFx0XHRcdFx0dmFyIGhhc2ggPSAkKGUuY29udGVudCkuZmluZCgnW2RhdGEtaGFzaF0nKS5hZGRCYWNrKCdbZGF0YS1oYXNoXScpLmF0dHIoJ2RhdGEtaGFzaCcpO1xyXG5cclxuXHRcdFx0XHRcdGlmICghaGFzaCkge1xyXG5cdFx0XHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdFx0dGhpcy5faGFzaGVzW2hhc2hdID0gZS5jb250ZW50O1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSwgdGhpcyksXHJcblx0XHRcdCdjaGFuZ2VkLm93bC5jYXJvdXNlbCc6ICQucHJveHkoZnVuY3Rpb24oZSkge1xyXG5cdFx0XHRcdGlmIChlLm5hbWVzcGFjZSAmJiBlLnByb3BlcnR5Lm5hbWUgPT09ICdwb3NpdGlvbicpIHtcclxuXHRcdFx0XHRcdHZhciBjdXJyZW50ID0gdGhpcy5fY29yZS5pdGVtcyh0aGlzLl9jb3JlLnJlbGF0aXZlKHRoaXMuX2NvcmUuY3VycmVudCgpKSksXHJcblx0XHRcdFx0XHRcdGhhc2ggPSAkLm1hcCh0aGlzLl9oYXNoZXMsIGZ1bmN0aW9uKGl0ZW0sIGhhc2gpIHtcclxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gaXRlbSA9PT0gY3VycmVudCA/IGhhc2ggOiBudWxsO1xyXG5cdFx0XHRcdFx0XHR9KS5qb2luKCk7XHJcblxyXG5cdFx0XHRcdFx0aWYgKCFoYXNoIHx8IHdpbmRvdy5sb2NhdGlvbi5oYXNoLnNsaWNlKDEpID09PSBoYXNoKSB7XHJcblx0XHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHR3aW5kb3cubG9jYXRpb24uaGFzaCA9IGhhc2g7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LCB0aGlzKVxyXG5cdFx0fTtcclxuXHJcblx0XHQvLyBzZXQgZGVmYXVsdCBvcHRpb25zXHJcblx0XHR0aGlzLl9jb3JlLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgSGFzaC5EZWZhdWx0cywgdGhpcy5fY29yZS5vcHRpb25zKTtcclxuXHJcblx0XHQvLyByZWdpc3RlciB0aGUgZXZlbnQgaGFuZGxlcnNcclxuXHRcdHRoaXMuJGVsZW1lbnQub24odGhpcy5faGFuZGxlcnMpO1xyXG5cclxuXHRcdC8vIHJlZ2lzdGVyIGV2ZW50IGxpc3RlbmVyIGZvciBoYXNoIG5hdmlnYXRpb25cclxuXHRcdCQod2luZG93KS5vbignaGFzaGNoYW5nZS5vd2wubmF2aWdhdGlvbicsICQucHJveHkoZnVuY3Rpb24oZSkge1xyXG5cdFx0XHR2YXIgaGFzaCA9IHdpbmRvdy5sb2NhdGlvbi5oYXNoLnN1YnN0cmluZygxKSxcclxuXHRcdFx0XHRpdGVtcyA9IHRoaXMuX2NvcmUuJHN0YWdlLmNoaWxkcmVuKCksXHJcblx0XHRcdFx0cG9zaXRpb24gPSB0aGlzLl9oYXNoZXNbaGFzaF0gJiYgaXRlbXMuaW5kZXgodGhpcy5faGFzaGVzW2hhc2hdKTtcclxuXHJcblx0XHRcdGlmIChwb3NpdGlvbiA9PT0gdW5kZWZpbmVkIHx8IHBvc2l0aW9uID09PSB0aGlzLl9jb3JlLmN1cnJlbnQoKSkge1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dGhpcy5fY29yZS50byh0aGlzLl9jb3JlLnJlbGF0aXZlKHBvc2l0aW9uKSwgZmFsc2UsIHRydWUpO1xyXG5cdFx0fSwgdGhpcykpO1xyXG5cdH07XHJcblxyXG5cdC8qKlxyXG5cdCAqIERlZmF1bHQgb3B0aW9ucy5cclxuXHQgKiBAcHVibGljXHJcblx0ICovXHJcblx0SGFzaC5EZWZhdWx0cyA9IHtcclxuXHRcdFVSTGhhc2hMaXN0ZW5lcjogZmFsc2VcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBEZXN0cm95cyB0aGUgcGx1Z2luLlxyXG5cdCAqIEBwdWJsaWNcclxuXHQgKi9cclxuXHRIYXNoLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XHJcblx0XHR2YXIgaGFuZGxlciwgcHJvcGVydHk7XHJcblxyXG5cdFx0JCh3aW5kb3cpLm9mZignaGFzaGNoYW5nZS5vd2wubmF2aWdhdGlvbicpO1xyXG5cclxuXHRcdGZvciAoaGFuZGxlciBpbiB0aGlzLl9oYW5kbGVycykge1xyXG5cdFx0XHR0aGlzLl9jb3JlLiRlbGVtZW50Lm9mZihoYW5kbGVyLCB0aGlzLl9oYW5kbGVyc1toYW5kbGVyXSk7XHJcblx0XHR9XHJcblx0XHRmb3IgKHByb3BlcnR5IGluIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMpKSB7XHJcblx0XHRcdHR5cGVvZiB0aGlzW3Byb3BlcnR5XSAhPSAnZnVuY3Rpb24nICYmICh0aGlzW3Byb3BlcnR5XSA9IG51bGwpO1xyXG5cdFx0fVxyXG5cdH07XHJcblxyXG5cdCQuZm4ub3dsQ2Fyb3VzZWwuQ29uc3RydWN0b3IuUGx1Z2lucy5IYXNoID0gSGFzaDtcclxuXHJcbn0pKHdpbmRvdy5aZXB0byB8fCB3aW5kb3cualF1ZXJ5LCB3aW5kb3csIGRvY3VtZW50KTtcclxuXHJcbi8qKlxyXG4gKiBTdXBwb3J0IFBsdWdpblxyXG4gKlxyXG4gKiBAdmVyc2lvbiAyLjEuMFxyXG4gKiBAYXV0aG9yIFZpdmlkIFBsYW5ldCBTb2Z0d2FyZSBHbWJIXHJcbiAqIEBhdXRob3IgQXJ0dXMgS29sYW5vd3NraVxyXG4gKiBAYXV0aG9yIERhdmlkIERldXRzY2hcclxuICogQGxpY2Vuc2UgVGhlIE1JVCBMaWNlbnNlIChNSVQpXHJcbiAqL1xyXG47KGZ1bmN0aW9uKCQsIHdpbmRvdywgZG9jdW1lbnQsIHVuZGVmaW5lZCkge1xyXG5cclxuXHR2YXIgc3R5bGUgPSAkKCc8c3VwcG9ydD4nKS5nZXQoMCkuc3R5bGUsXHJcblx0XHRwcmVmaXhlcyA9ICdXZWJraXQgTW96IE8gbXMnLnNwbGl0KCcgJyksXHJcblx0XHRldmVudHMgPSB7XHJcblx0XHRcdHRyYW5zaXRpb246IHtcclxuXHRcdFx0XHRlbmQ6IHtcclxuXHRcdFx0XHRcdFdlYmtpdFRyYW5zaXRpb246ICd3ZWJraXRUcmFuc2l0aW9uRW5kJyxcclxuXHRcdFx0XHRcdE1velRyYW5zaXRpb246ICd0cmFuc2l0aW9uZW5kJyxcclxuXHRcdFx0XHRcdE9UcmFuc2l0aW9uOiAnb1RyYW5zaXRpb25FbmQnLFxyXG5cdFx0XHRcdFx0dHJhbnNpdGlvbjogJ3RyYW5zaXRpb25lbmQnXHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LFxyXG5cdFx0XHRhbmltYXRpb246IHtcclxuXHRcdFx0XHRlbmQ6IHtcclxuXHRcdFx0XHRcdFdlYmtpdEFuaW1hdGlvbjogJ3dlYmtpdEFuaW1hdGlvbkVuZCcsXHJcblx0XHRcdFx0XHRNb3pBbmltYXRpb246ICdhbmltYXRpb25lbmQnLFxyXG5cdFx0XHRcdFx0T0FuaW1hdGlvbjogJ29BbmltYXRpb25FbmQnLFxyXG5cdFx0XHRcdFx0YW5pbWF0aW9uOiAnYW5pbWF0aW9uZW5kJ1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHRcdHRlc3RzID0ge1xyXG5cdFx0XHRjc3N0cmFuc2Zvcm1zOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gISF0ZXN0KCd0cmFuc2Zvcm0nKTtcclxuXHRcdFx0fSxcclxuXHRcdFx0Y3NzdHJhbnNmb3JtczNkOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gISF0ZXN0KCdwZXJzcGVjdGl2ZScpO1xyXG5cdFx0XHR9LFxyXG5cdFx0XHRjc3N0cmFuc2l0aW9uczogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuICEhdGVzdCgndHJhbnNpdGlvbicpO1xyXG5cdFx0XHR9LFxyXG5cdFx0XHRjc3NhbmltYXRpb25zOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gISF0ZXN0KCdhbmltYXRpb24nKTtcclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHJcblx0ZnVuY3Rpb24gdGVzdChwcm9wZXJ0eSwgcHJlZml4ZWQpIHtcclxuXHRcdHZhciByZXN1bHQgPSBmYWxzZSxcclxuXHRcdFx0dXBwZXIgPSBwcm9wZXJ0eS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHByb3BlcnR5LnNsaWNlKDEpO1xyXG5cclxuXHRcdCQuZWFjaCgocHJvcGVydHkgKyAnICcgKyBwcmVmaXhlcy5qb2luKHVwcGVyICsgJyAnKSArIHVwcGVyKS5zcGxpdCgnICcpLCBmdW5jdGlvbihpLCBwcm9wZXJ0eSkge1xyXG5cdFx0XHRpZiAoc3R5bGVbcHJvcGVydHldICE9PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0XHRyZXN1bHQgPSBwcmVmaXhlZCA/IHByb3BlcnR5IDogdHJ1ZTtcclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiBwcmVmaXhlZChwcm9wZXJ0eSkge1xyXG5cdFx0cmV0dXJuIHRlc3QocHJvcGVydHksIHRydWUpO1xyXG5cdH1cclxuXHJcblx0aWYgKHRlc3RzLmNzc3RyYW5zaXRpb25zKCkpIHtcclxuXHRcdC8qIGpzaGludCAtVzA1MyAqL1xyXG5cdFx0JC5zdXBwb3J0LnRyYW5zaXRpb24gPSBuZXcgU3RyaW5nKHByZWZpeGVkKCd0cmFuc2l0aW9uJykpXHJcblx0XHQkLnN1cHBvcnQudHJhbnNpdGlvbi5lbmQgPSBldmVudHMudHJhbnNpdGlvbi5lbmRbICQuc3VwcG9ydC50cmFuc2l0aW9uIF07XHJcblx0fVxyXG5cclxuXHRpZiAodGVzdHMuY3NzYW5pbWF0aW9ucygpKSB7XHJcblx0XHQvKiBqc2hpbnQgLVcwNTMgKi9cclxuXHRcdCQuc3VwcG9ydC5hbmltYXRpb24gPSBuZXcgU3RyaW5nKHByZWZpeGVkKCdhbmltYXRpb24nKSlcclxuXHRcdCQuc3VwcG9ydC5hbmltYXRpb24uZW5kID0gZXZlbnRzLmFuaW1hdGlvbi5lbmRbICQuc3VwcG9ydC5hbmltYXRpb24gXTtcclxuXHR9XHJcblxyXG5cdGlmICh0ZXN0cy5jc3N0cmFuc2Zvcm1zKCkpIHtcclxuXHRcdC8qIGpzaGludCAtVzA1MyAqL1xyXG5cdFx0JC5zdXBwb3J0LnRyYW5zZm9ybSA9IG5ldyBTdHJpbmcocHJlZml4ZWQoJ3RyYW5zZm9ybScpKTtcclxuXHRcdCQuc3VwcG9ydC50cmFuc2Zvcm0zZCA9IHRlc3RzLmNzc3RyYW5zZm9ybXMzZCgpO1xyXG5cdH1cclxuXHJcbn0pKHdpbmRvdy5aZXB0byB8fCB3aW5kb3cualF1ZXJ5LCB3aW5kb3csIGRvY3VtZW50KTtcclxuIiwiKGZ1bmN0aW9uKCQpIHtcclxuXHRcInVzZSBzdHJpY3RcIjtcclxuXHJcblx0Ly9IaWRlIExvYWRpbmcgQm94IChQcmVsb2FkZXIpXHJcblx0ZnVuY3Rpb24gaGFuZGxlUHJlbG9hZGVyKCkge1xyXG5cdFx0aWYoJCgnLnByZWxvYWRlcicpLmxlbmd0aCl7XHJcblx0XHRcdCQoJy5wcmVsb2FkZXInKS5kZWxheSgyMDApLmZhZGVPdXQoNTAwKTtcclxuXHRcdH1cclxuXHR9XHJcblx0XHJcblx0XHJcblx0Ly9VcGRhdGUgSGVhZGVyIFN0eWxlIGFuZCBTY3JvbGwgdG8gVG9wXHJcblx0ZnVuY3Rpb24gaGVhZGVyU3R5bGUoKSB7XHJcblx0XHRpZigkKCcubWFpbi1oZWFkZXInKS5sZW5ndGgpe1xyXG5cdFx0XHR2YXIgd2luZG93cG9zID0gJCh3aW5kb3cpLnNjcm9sbFRvcCgpO1xyXG5cdFx0XHR2YXIgc2l0ZUhlYWRlciA9ICQoJy5tYWluLWhlYWRlcicpO1xyXG5cdFx0XHR2YXIgc2l0ZUhlYWRlckhlaWdodCA9ICQoJy5tYWluLWhlYWRlcicpLmhlaWdodCgpO1xyXG5cdFx0XHR2YXIgc2Nyb2xsTGluayA9ICQoJy5zY3JvbGwtdG8tdG9wJyk7XHJcblx0XHRcdGlmICh3aW5kb3dwb3MgPj0gc2l0ZUhlYWRlckhlaWdodCkge1xyXG5cdFx0XHRcdHNpdGVIZWFkZXIuYWRkQ2xhc3MoJ2ZpeGVkLWhlYWRlcicpO1xyXG5cdFx0XHRcdHNjcm9sbExpbmsuZmFkZUluKDMwMCk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0c2l0ZUhlYWRlci5yZW1vdmVDbGFzcygnZml4ZWQtaGVhZGVyJyk7XHJcblx0XHRcdFx0c2Nyb2xsTGluay5mYWRlT3V0KDMwMCk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8vaGVhZGVyU3R5bGUoKTtcclxuXHJcblx0XHJcblx0Ly9FdmVudCBDb3VudGRvd24gVGltZXJcclxuXHRpZigkKCcudGltZS1jb3VudGRvd24nKS5sZW5ndGgpeyAgXHJcblx0XHQkKCcudGltZS1jb3VudGRvd24nKS5lYWNoKGZ1bmN0aW9uKCkge1xyXG5cdFx0dmFyICR0aGlzID0gJCh0aGlzKSwgZmluYWxEYXRlID0gJCh0aGlzKS5kYXRhKCdjb3VudGRvd24nKTtcclxuXHRcdCR0aGlzLmNvdW50ZG93bihmaW5hbERhdGUsIGZ1bmN0aW9uKGV2ZW50KSB7XHJcblx0XHRcdHZhciAkdGhpcyA9ICQodGhpcykuaHRtbChldmVudC5zdHJmdGltZSgnJyArICc8ZGl2IGNsYXNzPVwiY291bnRlci1jb2x1bW5cIj48c3BhbiBjbGFzcz1cImNvdW50XCI+JUQ8L3NwYW4+RGF5czwvZGl2PiAnICsgJzxkaXYgY2xhc3M9XCJjb3VudGVyLWNvbHVtblwiPjxzcGFuIGNsYXNzPVwiY291bnRcIj4lSDwvc3Bhbj5Ib3VyczwvZGl2PiAgJyArICc8ZGl2IGNsYXNzPVwiY291bnRlci1jb2x1bW5cIj48c3BhbiBjbGFzcz1cImNvdW50XCI+JU08L3NwYW4+TWludXRlczwvZGl2PiAgJyArICc8ZGl2IGNsYXNzPVwiY291bnRlci1jb2x1bW5cIj48c3BhbiBjbGFzcz1cImNvdW50XCI+JVM8L3NwYW4+U2Vjb25kczwvZGl2PicpKTtcclxuXHRcdH0pO1xyXG5cdCB9KTtcclxuXHR9XHJcblxyXG5cdFxyXG5cdC8vRmFjdCBDb3VudGVyICsgVGV4dCBDb3VudFxyXG5cdGlmKCQoJy5jb3VudC1ib3gnKS5sZW5ndGgpe1xyXG5cdFx0JCgnLmNvdW50LWJveCcpLmFwcGVhcihmdW5jdGlvbigpe1xyXG5cdFxyXG5cdFx0XHR2YXIgJHQgPSAkKHRoaXMpLFxyXG5cdFx0XHRcdG4gPSAkdC5maW5kKFwiLmNvdW50LXRleHRcIikuYXR0cihcImRhdGEtc3RvcFwiKSxcclxuXHRcdFx0XHRyID0gcGFyc2VJbnQoJHQuZmluZChcIi5jb3VudC10ZXh0XCIpLmF0dHIoXCJkYXRhLXNwZWVkXCIpLCAxMCk7XHJcblx0XHRcdFx0XHJcblx0XHRcdGlmICghJHQuaGFzQ2xhc3MoXCJjb3VudGVkXCIpKSB7XHJcblx0XHRcdFx0JHQuYWRkQ2xhc3MoXCJjb3VudGVkXCIpO1xyXG5cdFx0XHRcdCQoe1xyXG5cdFx0XHRcdFx0Y291bnROdW06ICR0LmZpbmQoXCIuY291bnQtdGV4dFwiKS50ZXh0KClcclxuXHRcdFx0XHR9KS5hbmltYXRlKHtcclxuXHRcdFx0XHRcdGNvdW50TnVtOiBuXHJcblx0XHRcdFx0fSwge1xyXG5cdFx0XHRcdFx0ZHVyYXRpb246IHIsXHJcblx0XHRcdFx0XHRlYXNpbmc6IFwibGluZWFyXCIsXHJcblx0XHRcdFx0XHRzdGVwOiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdFx0JHQuZmluZChcIi5jb3VudC10ZXh0XCIpLnRleHQoTWF0aC5mbG9vcih0aGlzLmNvdW50TnVtKSk7XHJcblx0XHRcdFx0XHR9LFxyXG5cdFx0XHRcdFx0Y29tcGxldGU6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdFx0XHQkdC5maW5kKFwiLmNvdW50LXRleHRcIikudGV4dCh0aGlzLmNvdW50TnVtKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fVxyXG5cdFx0XHRcclxuXHRcdH0se2FjY1k6IDB9KTtcclxuXHR9XHJcblxyXG5cdFxyXG5cdC8vUHJvZHVjdCBUYWJzXHJcblx0aWYoJCgnLnByb2plY3QtdGFiJykubGVuZ3RoKXtcclxuXHRcdCQoJy5wcm9qZWN0LXRhYiAucHJvZHVjdC10YWItYnRucyAucC10YWItYnRuJykub24oJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xyXG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XHJcblx0XHRcdHZhciB0YXJnZXQgPSAkKCQodGhpcykuYXR0cignZGF0YS10YWInKSk7XHJcblx0XHRcdFxyXG5cdFx0XHRpZiAoJCh0YXJnZXQpLmhhc0NsYXNzKCdhY3R2ZS10YWInKSl7XHJcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHR9ZWxzZXtcclxuXHRcdFx0XHQkKCcucHJvamVjdC10YWIgLnByb2R1Y3QtdGFiLWJ0bnMgLnAtdGFiLWJ0bicpLnJlbW92ZUNsYXNzKCdhY3RpdmUtYnRuJyk7XHJcblx0XHRcdFx0JCh0aGlzKS5hZGRDbGFzcygnYWN0aXZlLWJ0bicpO1xyXG5cdFx0XHRcdCQoJy5wcm9qZWN0LXRhYiAucC10YWJzLWNvbnRlbnQgLnAtdGFiJykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZS10YWInKTtcclxuXHRcdFx0XHQkKHRhcmdldCkuYWRkQ2xhc3MoJ2FjdGl2ZS10YWInKTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0fVxyXG5cclxuXHRcclxuXHQvL0pxdWVyeSBTcGlubmVyIC8gUXVhbnRpdHkgU3Bpbm5lclxyXG5cdGlmKCQoJy5xdWFudGl0eS1zcGlubmVyJykubGVuZ3RoKXtcclxuXHRcdCQoXCJpbnB1dC5xdWFudGl0eS1zcGlubmVyXCIpLlRvdWNoU3Bpbih7XHJcblx0XHQgIHZlcnRpY2FsYnV0dG9uczogdHJ1ZVxyXG5cdFx0fSk7XHJcblx0fVxyXG5cclxuXHQvL1Byb2R1Y3QgQ2Fyb3VzZWxcclxuXHRpZiAoJCgnLnByb2plY3QtY2Fyb3VzZWwnKS5sZW5ndGgpIHtcclxuXHRcdCQoJy5wcm9qZWN0LWNhcm91c2VsJykub3dsQ2Fyb3VzZWwoe1xyXG5cdFx0XHRsb29wOnRydWUsXHJcblx0XHRcdG1hcmdpbjozMCxcclxuXHRcdFx0bmF2OnRydWUsXHJcblx0XHRcdHNtYXJ0U3BlZWQ6IDcwMCxcclxuXHRcdFx0YXV0b3BsYXk6IDUwMDAsXHJcblx0XHRcdG5hdlRleHQ6IFsgJzxzcGFuIGNsYXNzPVwiZmEgZmEtYW5nbGUtbGVmdFwiPjwvc3Bhbj4nLCAnPHNwYW4gY2xhc3M9XCJmYSBmYS1hbmdsZS1yaWdodFwiPjwvc3Bhbj4nIF0sXHJcblx0XHRcdHJlc3BvbnNpdmU6e1xyXG5cdFx0XHRcdDA6e1xyXG5cdFx0XHRcdFx0aXRlbXM6MVxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0NjAwOntcclxuXHRcdFx0XHRcdGl0ZW1zOjJcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdDgwMDp7XHJcblx0XHRcdFx0XHRpdGVtczozXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHQxMDI0OntcclxuXHRcdFx0XHRcdGl0ZW1zOjRcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdDEyMDA6e1xyXG5cdFx0XHRcdFx0aXRlbXM6NVxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdH1cclxuXHRcdH0pOyAgICBcdFx0XHJcblx0fVxyXG5cdFxyXG5cdFxyXG5cdC8vUHJvZHVjdCBDYXJvdXNlbCBUd29cclxuXHRpZiAoJCgnLnByb2plY3QtY2Fyb3VzZWwtdHdvJykubGVuZ3RoKSB7XHJcblx0XHQkKCcucHJvamVjdC1jYXJvdXNlbC10d28nKS5vd2xDYXJvdXNlbCh7XHJcblx0XHRcdGxvb3A6dHJ1ZSxcclxuXHRcdFx0bWFyZ2luOjMwLFxyXG5cdFx0XHRuYXY6dHJ1ZSxcclxuXHRcdFx0c21hcnRTcGVlZDogNzAwLFxyXG5cdFx0XHRhdXRvcGxheTogNTAwMCxcclxuXHRcdFx0bmF2VGV4dDogWyAnPHNwYW4gY2xhc3M9XCJmYSBmYS1hbmdsZS1sZWZ0XCI+PC9zcGFuPicsICc8c3BhbiBjbGFzcz1cImZhIGZhLWFuZ2xlLXJpZ2h0XCI+PC9zcGFuPicgXSxcclxuXHRcdFx0cmVzcG9uc2l2ZTp7XHJcblx0XHRcdFx0MDp7XHJcblx0XHRcdFx0XHRpdGVtczoxXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHQ2MDA6e1xyXG5cdFx0XHRcdFx0aXRlbXM6MlxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0ODAwOntcclxuXHRcdFx0XHRcdGl0ZW1zOjNcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdDEwMjQ6e1xyXG5cdFx0XHRcdFx0aXRlbXM6NFxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0MTIwMDp7XHJcblx0XHRcdFx0XHRpdGVtczo0XHJcblx0XHRcdFx0fSxcclxuXHRcdFx0fVxyXG5cdFx0fSk7ICAgIFx0XHRcclxuXHR9XHJcblxyXG5cdC8vVGV4dCBSb3RhdG9yXHJcblx0IGlmKCQoJy5zbGlkZXItYmFubmVyLXNlY3Rpb24gLmNvbnRlbnQgaDIgc3BhbicpLmxlbmd0aCl7XHJcblx0XHQgIC8vICQoXCIuc2xpZGVyLWJhbm5lci1zZWN0aW9uIC5jb250ZW50IGgyIHNwYW5cIikudGV4dHJvdGF0b3Ioe1xyXG5cdFx0XHQvLyBhbmltYXRpb246IFwiZmxpcFwiLFxyXG5cdFx0XHQvLyBzcGVlZDogMzAwMFxyXG5cdFx0ICAvLyB9KTtcclxuXHQgfVxyXG5cdFxyXG5cdFxyXG5cdC8vVGFicyBCb3hcclxuXHRpZigkKCcudGFicy1ib3gnKS5sZW5ndGgpe1xyXG5cdFx0JCgnLnRhYnMtYm94IC50YWItYnV0dG9ucyAudGFiLWJ0bicpLm9uKCdjbGljaycsIGZ1bmN0aW9uKGUpIHtcclxuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdFx0XHR2YXIgdGFyZ2V0ID0gJCgkKHRoaXMpLmF0dHIoJ2RhdGEtdGFiJykpO1xyXG5cdFx0XHRcclxuXHRcdFx0aWYgKCQodGFyZ2V0KS5pcygnOnZpc2libGUnKSl7XHJcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHR9ZWxzZXtcclxuXHRcdFx0XHR0YXJnZXQucGFyZW50cygnLnRhYnMtYm94JykuZmluZCgnLnRhYi1idXR0b25zJykuZmluZCgnLnRhYi1idG4nKS5yZW1vdmVDbGFzcygnYWN0aXZlLWJ0bicpO1xyXG5cdFx0XHRcdCQodGhpcykuYWRkQ2xhc3MoJ2FjdGl2ZS1idG4nKTtcclxuXHRcdFx0XHR0YXJnZXQucGFyZW50cygnLnRhYnMtYm94JykuZmluZCgnLnRhYnMtY29udGVudCcpLmZpbmQoJy50YWInKS5mYWRlT3V0KDApO1xyXG5cdFx0XHRcdHRhcmdldC5wYXJlbnRzKCcudGFicy1ib3gnKS5maW5kKCcudGFicy1jb250ZW50JykuZmluZCgnLnRhYicpLnJlbW92ZUNsYXNzKCdhY3RpdmUtdGFiJyk7XHJcblx0XHRcdFx0JCh0YXJnZXQpLmZhZGVJbigzMDApO1xyXG5cdFx0XHRcdCQodGFyZ2V0KS5hZGRDbGFzcygnYWN0aXZlLXRhYicpO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHR9XHJcblx0XHJcblx0XHJcblx0Ly9BY2NvcmRpb24gQm94XHJcblx0aWYoJCgnLmFjY29yZGlvbi1ib3gnKS5sZW5ndGgpe1xyXG5cdFx0JChcIi5hY2NvcmRpb24tYm94XCIpLm9uKCdjbGljaycsICcuYWNjLWJ0bicsIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcclxuXHRcdFx0dmFyIG91dGVyQm94ID0gJCh0aGlzKS5wYXJlbnRzKCcuYWNjb3JkaW9uLWJveCcpO1xyXG5cdFx0XHR2YXIgdGFyZ2V0ID0gJCh0aGlzKS5wYXJlbnRzKCcuYWNjb3JkaW9uJyk7XHJcblx0XHRcdFxyXG5cdFx0XHRpZigkKHRoaXMpLmhhc0NsYXNzKCdhY3RpdmUnKSE9PXRydWUpe1xyXG5cdFx0XHRcdCQob3V0ZXJCb3gpLmZpbmQoJy5hY2NvcmRpb24gLmFjYy1idG4nKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XHJcblx0XHRcdH1cclxuXHRcdFx0XHJcblx0XHRcdGlmICgkKHRoaXMpLm5leHQoJy5hY2MtY29udGVudCcpLmlzKCc6dmlzaWJsZScpKXtcclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdH1lbHNle1xyXG5cdFx0XHRcdCQodGhpcykuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xyXG5cdFx0XHRcdCQob3V0ZXJCb3gpLmNoaWxkcmVuKCcuYWNjb3JkaW9uJykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZS1ibG9jaycpO1xyXG5cdFx0XHRcdCQob3V0ZXJCb3gpLmZpbmQoJy5hY2NvcmRpb24nKS5jaGlsZHJlbignLmFjYy1jb250ZW50Jykuc2xpZGVVcCgzMDApO1xyXG5cdFx0XHRcdHRhcmdldC5hZGRDbGFzcygnYWN0aXZlLWJsb2NrJyk7XHJcblx0XHRcdFx0JCh0aGlzKS5uZXh0KCcuYWNjLWNvbnRlbnQnKS5zbGlkZURvd24oMzAwKTtcdFxyXG5cdFx0XHR9XHJcblx0XHR9KTtcdFxyXG5cdH1cclxuXHRcclxuXHQvL1R3byBJdGVtIENhcm91c2VsXHJcblx0aWYgKCQoJy50d28taXRlbS1jYXJvdXNlbCcpLmxlbmd0aCkge1xyXG5cdFx0JCgnLnR3by1pdGVtLWNhcm91c2VsJykub3dsQ2Fyb3VzZWwoe1xyXG5cdFx0XHRsb29wOnRydWUsXHJcblx0XHRcdG1hcmdpbjo5MCxcclxuXHRcdFx0bmF2OnRydWUsXHJcblx0XHRcdHNtYXJ0U3BlZWQ6IDcwMCxcclxuXHRcdFx0YXV0b3BsYXk6IDQwMDAsXHJcblx0XHRcdG5hdlRleHQ6IFsgJzxzcGFuIGNsYXNzPVwiZmEgZmEtYW5nbGUtbGVmdFwiPjwvc3Bhbj4nLCAnPHNwYW4gY2xhc3M9XCJmYSBmYS1hbmdsZS1yaWdodFwiPjwvc3Bhbj4nIF0sXHJcblx0XHRcdHJlc3BvbnNpdmU6e1xyXG5cdFx0XHRcdDA6e1xyXG5cdFx0XHRcdFx0aXRlbXM6MVxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0NjAwOntcclxuXHRcdFx0XHRcdGl0ZW1zOjFcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdDgwMDp7XHJcblx0XHRcdFx0XHRpdGVtczoxXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHQxMDI0OntcclxuXHRcdFx0XHRcdGl0ZW1zOjJcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdDEyMDA6e1xyXG5cdFx0XHRcdFx0aXRlbXM6MlxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fSk7ICAgIFx0XHRcclxuXHR9XHJcblxyXG5cclxuXHQvL0ZvdXIgSXRlbSBDYXJvdXNlbFxyXG5cdGlmICgkKCcuZm91ci1pdGVtLWNhcm91c2VsJykubGVuZ3RoKSB7XHJcblx0XHQkKCcuZm91ci1pdGVtLWNhcm91c2VsJykub3dsQ2Fyb3VzZWwoe1xyXG5cdFx0XHRsb29wOnRydWUsXHJcblx0XHRcdG1hcmdpbjozMCxcclxuXHRcdFx0bmF2OnRydWUsXHJcblx0XHRcdHNtYXJ0U3BlZWQ6IDcwMCxcclxuXHRcdFx0YXV0b3BsYXk6IDQwMDAsXHJcblx0XHRcdG5hdlRleHQ6IFsgJzxzcGFuIGNsYXNzPVwiZmEgZmEtYW5nbGUtbGVmdFwiPjwvc3Bhbj4nLCAnPHNwYW4gY2xhc3M9XCJmYSBmYS1hbmdsZS1yaWdodFwiPjwvc3Bhbj4nIF0sXHJcblx0XHRcdHJlc3BvbnNpdmU6e1xyXG5cdFx0XHRcdDA6e1xyXG5cdFx0XHRcdFx0aXRlbXM6MVxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0NjAwOntcclxuXHRcdFx0XHRcdGl0ZW1zOjJcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdDgwMDp7XHJcblx0XHRcdFx0XHRpdGVtczoyXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHQxMDI0OntcclxuXHRcdFx0XHRcdGl0ZW1zOjNcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdDEyMDA6e1xyXG5cdFx0XHRcdFx0aXRlbXM6NFxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fSk7ICAgIFx0XHRcclxuXHR9XHJcblx0XHJcblx0Ly9Tb3J0YWJsZSBNYXNvbmFyeSB3aXRoIEZpbHRlcnNcclxuXHRmdW5jdGlvbiBzb3J0YWJsZU1hc29ucnkoKSB7XHJcblx0XHRpZigkKCcuc29ydGFibGUtbWFzb25yeScpLmxlbmd0aCl7XHJcblx0XHJcblx0XHRcdHZhciB3aW5Eb3cgPSAkKHdpbmRvdyk7XHJcblx0XHRcdC8vIE5lZWRlZCB2YXJpYWJsZXNcclxuXHRcdFx0dmFyICRjb250YWluZXI9JCgnLnNvcnRhYmxlLW1hc29ucnkgLml0ZW1zLWNvbnRhaW5lcicpO1xyXG5cdFx0XHR2YXIgJGZpbHRlcj0kKCcuZmlsdGVyLWJ0bnMnKTtcclxuXHRcclxuXHRcdFx0JGNvbnRhaW5lci5pc290b3BlKHtcclxuXHRcdFx0XHRmaWx0ZXI6JyonLFxyXG5cdFx0XHRcdCBtYXNvbnJ5OiB7XHJcblx0XHRcdFx0XHRjb2x1bW5XaWR0aCA6ICcubWFzb25yeS1pdGVtLmNvbC1sZy00J1xyXG5cdFx0XHRcdCB9LFxyXG5cdFx0XHRcdGFuaW1hdGlvbk9wdGlvbnM6e1xyXG5cdFx0XHRcdFx0ZHVyYXRpb246NTAwLFxyXG5cdFx0XHRcdFx0ZWFzaW5nOidsaW5lYXInXHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KTtcclxuXHRcdFx0XHJcblx0XHJcblx0XHRcdC8vIElzb3RvcGUgRmlsdGVyIFxyXG5cdFx0XHQkZmlsdGVyLmZpbmQoJ2xpJykub24oJ2NsaWNrJywgZnVuY3Rpb24oKXtcclxuXHRcdFx0XHR2YXIgc2VsZWN0b3IgPSAkKHRoaXMpLmF0dHIoJ2RhdGEtZmlsdGVyJyk7XHJcblx0XHJcblx0XHRcdFx0dHJ5IHtcclxuXHRcdFx0XHRcdCRjb250YWluZXIuaXNvdG9wZSh7IFxyXG5cdFx0XHRcdFx0XHRmaWx0ZXJcdDogc2VsZWN0b3IsXHJcblx0XHRcdFx0XHRcdGFuaW1hdGlvbk9wdGlvbnM6IHtcclxuXHRcdFx0XHRcdFx0XHRkdXJhdGlvbjogNTAwLFxyXG5cdFx0XHRcdFx0XHRcdGVhc2luZ1x0OiAnbGluZWFyJyxcclxuXHRcdFx0XHRcdFx0XHRxdWV1ZVx0OiBmYWxzZVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHR9IGNhdGNoKGVycikge1xyXG5cdFxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdH0pO1xyXG5cdFxyXG5cdFxyXG5cdFx0XHR3aW5Eb3cub24oJ3Jlc2l6ZScsIGZ1bmN0aW9uKCl7XHJcblx0XHRcdFx0dmFyIHNlbGVjdG9yID0gJGZpbHRlci5maW5kKCdsaS5hY3RpdmUnKS5hdHRyKCdkYXRhLWZpbHRlcicpO1xyXG5cclxuXHRcdFx0XHQkY29udGFpbmVyLmlzb3RvcGUoeyBcclxuXHRcdFx0XHRcdGZpbHRlclx0OiBzZWxlY3RvcixcclxuXHRcdFx0XHRcdGFuaW1hdGlvbk9wdGlvbnM6IHtcclxuXHRcdFx0XHRcdFx0ZHVyYXRpb246IDUwMCxcclxuXHRcdFx0XHRcdFx0ZWFzaW5nXHQ6ICdsaW5lYXInLFxyXG5cdFx0XHRcdFx0XHRxdWV1ZVx0OiBmYWxzZVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9KTtcclxuXHRcclxuXHRcclxuXHRcdFx0dmFyIGZpbHRlckl0ZW1BXHQ9ICQoJy5maWx0ZXItYnRucyBsaScpO1xyXG5cdFxyXG5cdFx0XHRmaWx0ZXJJdGVtQS5vbignY2xpY2snLCBmdW5jdGlvbigpe1xyXG5cdFx0XHRcdHZhciAkdGhpcyA9ICQodGhpcyk7XHJcblx0XHRcdFx0aWYgKCAhJHRoaXMuaGFzQ2xhc3MoJ2FjdGl2ZScpKSB7XHJcblx0XHRcdFx0XHRmaWx0ZXJJdGVtQS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XHJcblx0XHRcdFx0XHQkdGhpcy5hZGRDbGFzcygnYWN0aXZlJyk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KTtcclxuXHRcdH1cclxuXHR9XHJcblx0XHJcblx0c29ydGFibGVNYXNvbnJ5KCk7XHJcblx0XHJcblx0XHJcblx0Ly8gU3BvbnNvcnMgQ2Fyb3VzZWxcclxuXHRpZiAoJCgnLnNwb25zb3JzLWNhcm91c2VsJykubGVuZ3RoKSB7XHJcblx0XHQkKCcuc3BvbnNvcnMtY2Fyb3VzZWwnKS5vd2xDYXJvdXNlbCh7XHJcblx0XHRcdGxvb3A6dHJ1ZSxcclxuXHRcdFx0bWFyZ2luOjAsXHJcblx0XHRcdG5hdjp0cnVlLFxyXG5cdFx0XHRzbWFydFNwZWVkOiA1MDAsXHJcblx0XHRcdGF1dG9wbGF5OiA0MDAwLFxyXG5cdFx0XHRuYXZUZXh0OiBbICc8c3BhbiBjbGFzcz1cImZhIGZhLWFuZ2xlLWxlZnRcIj48L3NwYW4+JywgJzxzcGFuIGNsYXNzPVwiZmEgZmEtYW5nbGUtcmlnaHRcIj48L3NwYW4+JyBdLFxyXG5cdFx0XHRyZXNwb25zaXZlOntcclxuXHRcdFx0XHQwOntcclxuXHRcdFx0XHRcdGl0ZW1zOjFcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdDQ4MDp7XHJcblx0XHRcdFx0XHRpdGVtczoyXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHQ2MDA6e1xyXG5cdFx0XHRcdFx0aXRlbXM6M1xyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0ODAwOntcclxuXHRcdFx0XHRcdGl0ZW1zOjVcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdDEwMjQ6e1xyXG5cdFx0XHRcdFx0aXRlbXM6NlxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fSk7ICAgIFx0XHRcclxuXHR9XHJcblx0XHJcblx0XHJcblx0Ly9MaWdodEJveCAvIEZhbmN5Ym94XHJcblx0aWYoJCgnLmxpZ2h0Ym94LWltYWdlJykubGVuZ3RoKSB7XHJcblx0XHQkKCcubGlnaHRib3gtaW1hZ2UnKS5mYW5jeWJveCh7XHJcblx0XHRcdG9wZW5FZmZlY3QgIDogJ2ZhZGUnLFxyXG5cdFx0XHRjbG9zZUVmZmVjdCA6ICdmYWRlJyxcclxuXHRcdFx0aGVscGVycyA6IHtcclxuXHRcdFx0XHRtZWRpYSA6IHt9XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdH1cclxuXHRcclxuXHQvL0dhbGxlcnkgRmlsdGVyc1xyXG5cdGlmKCQoJy5maWx0ZXItbGlzdCcpLmxlbmd0aCl7XHJcblx0XHQkKCcuZmlsdGVyLWxpc3QnKS5taXhJdFVwKHt9KTtcclxuXHR9XHJcblx0XHJcblx0XHJcblx0Ly8gU2Nyb2xsIHRvIGEgU3BlY2lmaWMgRGl2XHJcblx0aWYoJCgnLnNjcm9sbC10by10YXJnZXQnKS5sZW5ndGgpe1xyXG5cdFx0JChcIi5zY3JvbGwtdG8tdGFyZ2V0XCIpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCkge1xyXG5cdFx0XHR2YXIgdGFyZ2V0ID0gJCh0aGlzKS5hdHRyKCdkYXRhLXRhcmdldCcpO1xyXG5cdFx0ICAgLy8gYW5pbWF0ZVxyXG5cdFx0ICAgJCgnaHRtbCwgYm9keScpLmFuaW1hdGUoe1xyXG5cdFx0XHQgICBzY3JvbGxUb3A6ICQodGFyZ2V0KS5vZmZzZXQoKS50b3BcclxuXHRcdFx0IH0sIDE1MDApO1xyXG5cdFxyXG5cdFx0fSk7XHJcblx0fVxyXG5cdFxyXG5cdFxyXG5cdC8vIEVsZW1lbnRzIEFuaW1hdGlvblxyXG5cdGlmKCQoJy53b3cnKS5sZW5ndGgpe1xyXG5cdFx0dmFyIHdvdyA9IG5ldyBXT1coXHJcblx0XHQgIHtcclxuXHRcdFx0Ym94Q2xhc3M6ICAgICAnd293JywgICAgICAvLyBhbmltYXRlZCBlbGVtZW50IGNzcyBjbGFzcyAoZGVmYXVsdCBpcyB3b3cpXHJcblx0XHRcdGFuaW1hdGVDbGFzczogJ2FuaW1hdGVkJywgLy8gYW5pbWF0aW9uIGNzcyBjbGFzcyAoZGVmYXVsdCBpcyBhbmltYXRlZClcclxuXHRcdFx0b2Zmc2V0OiAgICAgICAwLCAgICAgICAgICAvLyBkaXN0YW5jZSB0byB0aGUgZWxlbWVudCB3aGVuIHRyaWdnZXJpbmcgdGhlIGFuaW1hdGlvbiAoZGVmYXVsdCBpcyAwKVxyXG5cdFx0XHRtb2JpbGU6ICAgICAgIGZhbHNlLCAgICAgICAvLyB0cmlnZ2VyIGFuaW1hdGlvbnMgb24gbW9iaWxlIGRldmljZXMgKGRlZmF1bHQgaXMgdHJ1ZSlcclxuXHRcdFx0bGl2ZTogICAgICAgICB0cnVlICAgICAgIC8vIGFjdCBvbiBhc3luY2hyb25vdXNseSBsb2FkZWQgY29udGVudCAoZGVmYXVsdCBpcyB0cnVlKVxyXG5cdFx0ICB9XHJcblx0XHQpO1xyXG5cdFx0d293LmluaXQoKTtcclxuXHR9XHJcblxyXG5cclxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICAgV2hlbiBkb2N1bWVudCBpcyBTY3JvbGxpZywgZG9cclxuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuXHRcclxuXHQkKHdpbmRvdykub24oJ3Njcm9sbCcsIGZ1bmN0aW9uKCkge1xyXG5cdFx0aGVhZGVyU3R5bGUoKTtcclxuXHR9KTtcclxuXHRcclxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICAgV2hlbiBkb2N1bWVudCBpcyBsb2FkaW5nLCBkb1xyXG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xyXG5cdFxyXG5cdCQod2luZG93KS5vbignbG9hZCcsIGZ1bmN0aW9uKCkge1xyXG5cdFx0aGFuZGxlUHJlbG9hZGVyKCk7XHJcblx0XHRzb3J0YWJsZU1hc29ucnkoKTtcclxuXHR9KTtcclxuXHJcblx0dmFyIGNvbnRhY3RGb3JtID0gJChcIiNjb250YWN0LWZvcm1cIik7XHJcblx0aWYgKCQoY29udGFjdEZvcm0pLmxlbmd0aCkge1xyXG5cdFx0Q2FwdGNoYS5sb2FkKCk7XHJcblx0XHQkKGNvbnRhY3RGb3JtKS5zdWJtaXQoZnVuY3Rpb24gKGUpIHtcclxuXHRcdFx0dmFyIGVtYWlsID0gJChcIltuYW1lPWVtYWlsXVwiLCBjb250YWN0Rm9ybSkudmFsKCk7XHJcblx0XHRcdHZhciBwaG9uZSA9ICQoXCJbbmFtZT1waG9uZV1cIiwgY29udGFjdEZvcm0pLnZhbCgpO1xyXG5cdFx0XHRpZiAoZW1haWwgPT09ICcnICYmIHBob25lID09PSAnJykge1xyXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0fVxyXG5cclxufSkod2luZG93LmpRdWVyeSk7IiwiLyohIFdPVyAtIHYxLjAuMSAtIDIwMTQtMDgtMTVcclxuKiBDb3B5cmlnaHQgKGMpIDIwMTQgTWF0dGhpZXUgQXVzc2FndWVsOyBMaWNlbnNlZCBNSVQgKi8oZnVuY3Rpb24oKXt2YXIgYSxiLGMsZD1mdW5jdGlvbihhLGIpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiBhLmFwcGx5KGIsYXJndW1lbnRzKX19LGU9W10uaW5kZXhPZnx8ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPTAsYz10aGlzLmxlbmd0aDtjPmI7YisrKWlmKGIgaW4gdGhpcyYmdGhpc1tiXT09PWEpcmV0dXJuIGI7cmV0dXJuLTF9O2I9ZnVuY3Rpb24oKXtmdW5jdGlvbiBhKCl7fXJldHVybiBhLnByb3RvdHlwZS5leHRlbmQ9ZnVuY3Rpb24oYSxiKXt2YXIgYyxkO2ZvcihjIGluIGIpZD1iW2NdLG51bGw9PWFbY10mJihhW2NdPWQpO3JldHVybiBhfSxhLnByb3RvdHlwZS5pc01vYmlsZT1mdW5jdGlvbihhKXtyZXR1cm4vQW5kcm9pZHx3ZWJPU3xpUGhvbmV8aVBhZHxpUG9kfEJsYWNrQmVycnl8SUVNb2JpbGV8T3BlcmEgTWluaS9pLnRlc3QoYSl9LGF9KCksYz10aGlzLldlYWtNYXB8fHRoaXMuTW96V2Vha01hcHx8KGM9ZnVuY3Rpb24oKXtmdW5jdGlvbiBhKCl7dGhpcy5rZXlzPVtdLHRoaXMudmFsdWVzPVtdfXJldHVybiBhLnByb3RvdHlwZS5nZXQ9ZnVuY3Rpb24oYSl7dmFyIGIsYyxkLGUsZjtmb3IoZj10aGlzLmtleXMsYj1kPTAsZT1mLmxlbmd0aDtlPmQ7Yj0rK2QpaWYoYz1mW2JdLGM9PT1hKXJldHVybiB0aGlzLnZhbHVlc1tiXX0sYS5wcm90b3R5cGUuc2V0PWZ1bmN0aW9uKGEsYil7dmFyIGMsZCxlLGYsZztmb3IoZz10aGlzLmtleXMsYz1lPTAsZj1nLmxlbmd0aDtmPmU7Yz0rK2UpaWYoZD1nW2NdLGQ9PT1hKXJldHVybiB2b2lkKHRoaXMudmFsdWVzW2NdPWIpO3JldHVybiB0aGlzLmtleXMucHVzaChhKSx0aGlzLnZhbHVlcy5wdXNoKGIpfSxhfSgpKSxhPXRoaXMuTXV0YXRpb25PYnNlcnZlcnx8dGhpcy5XZWJraXRNdXRhdGlvbk9ic2VydmVyfHx0aGlzLk1vek11dGF0aW9uT2JzZXJ2ZXJ8fChhPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gYSgpe2NvbnNvbGUud2FybihcIk11dGF0aW9uT2JzZXJ2ZXIgaXMgbm90IHN1cHBvcnRlZCBieSB5b3VyIGJyb3dzZXIuXCIpLGNvbnNvbGUud2FybihcIldPVy5qcyBjYW5ub3QgZGV0ZWN0IGRvbSBtdXRhdGlvbnMsIHBsZWFzZSBjYWxsIC5zeW5jKCkgYWZ0ZXIgbG9hZGluZyBuZXcgY29udGVudC5cIil9cmV0dXJuIGEubm90U3VwcG9ydGVkPSEwLGEucHJvdG90eXBlLm9ic2VydmU9ZnVuY3Rpb24oKXt9LGF9KCkpLHRoaXMuV09XPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZihhKXtudWxsPT1hJiYoYT17fSksdGhpcy5zY3JvbGxDYWxsYmFjaz1kKHRoaXMuc2Nyb2xsQ2FsbGJhY2ssdGhpcyksdGhpcy5zY3JvbGxIYW5kbGVyPWQodGhpcy5zY3JvbGxIYW5kbGVyLHRoaXMpLHRoaXMuc3RhcnQ9ZCh0aGlzLnN0YXJ0LHRoaXMpLHRoaXMuc2Nyb2xsZWQ9ITAsdGhpcy5jb25maWc9dGhpcy51dGlsKCkuZXh0ZW5kKGEsdGhpcy5kZWZhdWx0cyksdGhpcy5hbmltYXRpb25OYW1lQ2FjaGU9bmV3IGN9cmV0dXJuIGYucHJvdG90eXBlLmRlZmF1bHRzPXtib3hDbGFzczpcIndvd1wiLGFuaW1hdGVDbGFzczpcImFuaW1hdGVkXCIsb2Zmc2V0OjAsbW9iaWxlOiEwLGxpdmU6ITB9LGYucHJvdG90eXBlLmluaXQ9ZnVuY3Rpb24oKXt2YXIgYTtyZXR1cm4gdGhpcy5lbGVtZW50PXdpbmRvdy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsXCJpbnRlcmFjdGl2ZVwiPT09KGE9ZG9jdW1lbnQucmVhZHlTdGF0ZSl8fFwiY29tcGxldGVcIj09PWE/dGhpcy5zdGFydCgpOmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsdGhpcy5zdGFydCksdGhpcy5maW5pc2hlZD1bXX0sZi5wcm90b3R5cGUuc3RhcnQ9ZnVuY3Rpb24oKXt2YXIgYixjLGQsZTtpZih0aGlzLnN0b3BwZWQ9ITEsdGhpcy5ib3hlcz1mdW5jdGlvbigpe3ZhciBhLGMsZCxlO2ZvcihkPXRoaXMuZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLlwiK3RoaXMuY29uZmlnLmJveENsYXNzKSxlPVtdLGE9MCxjPWQubGVuZ3RoO2M+YTthKyspYj1kW2FdLGUucHVzaChiKTtyZXR1cm4gZX0uY2FsbCh0aGlzKSx0aGlzLmFsbD1mdW5jdGlvbigpe3ZhciBhLGMsZCxlO2ZvcihkPXRoaXMuYm94ZXMsZT1bXSxhPTAsYz1kLmxlbmd0aDtjPmE7YSsrKWI9ZFthXSxlLnB1c2goYik7cmV0dXJuIGV9LmNhbGwodGhpcyksdGhpcy5ib3hlcy5sZW5ndGgpaWYodGhpcy5kaXNhYmxlZCgpKXRoaXMucmVzZXRTdHlsZSgpO2Vsc2V7Zm9yKGU9dGhpcy5ib3hlcyxjPTAsZD1lLmxlbmd0aDtkPmM7YysrKWI9ZVtjXSx0aGlzLmFwcGx5U3R5bGUoYiwhMCk7d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIix0aGlzLnNjcm9sbEhhbmRsZXIsITEpLHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsdGhpcy5zY3JvbGxIYW5kbGVyLCExKSx0aGlzLmludGVydmFsPXNldEludGVydmFsKHRoaXMuc2Nyb2xsQ2FsbGJhY2ssNTApfXJldHVybiB0aGlzLmNvbmZpZy5saXZlP25ldyBhKGZ1bmN0aW9uKGEpe3JldHVybiBmdW5jdGlvbihiKXt2YXIgYyxkLGUsZixnO2ZvcihnPVtdLGU9MCxmPWIubGVuZ3RoO2Y+ZTtlKyspZD1iW2VdLGcucHVzaChmdW5jdGlvbigpe3ZhciBhLGIsZSxmO2ZvcihlPWQuYWRkZWROb2Rlc3x8W10sZj1bXSxhPTAsYj1lLmxlbmd0aDtiPmE7YSsrKWM9ZVthXSxmLnB1c2godGhpcy5kb1N5bmMoYykpO3JldHVybiBmfS5jYWxsKGEpKTtyZXR1cm4gZ319KHRoaXMpKS5vYnNlcnZlKGRvY3VtZW50LmJvZHkse2NoaWxkTGlzdDohMCxzdWJ0cmVlOiEwfSk6dm9pZCAwfSxmLnByb3RvdHlwZS5zdG9wPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc3RvcHBlZD0hMCx3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLHRoaXMuc2Nyb2xsSGFuZGxlciwhMSksd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIix0aGlzLnNjcm9sbEhhbmRsZXIsITEpLG51bGwhPXRoaXMuaW50ZXJ2YWw/Y2xlYXJJbnRlcnZhbCh0aGlzLmludGVydmFsKTp2b2lkIDB9LGYucHJvdG90eXBlLnN5bmM9ZnVuY3Rpb24oKXtyZXR1cm4gYS5ub3RTdXBwb3J0ZWQ/dGhpcy5kb1N5bmModGhpcy5lbGVtZW50KTp2b2lkIDB9LGYucHJvdG90eXBlLmRvU3luYz1mdW5jdGlvbihhKXt2YXIgYixjLGQsZixnO2lmKCF0aGlzLnN0b3BwZWQpe2lmKG51bGw9PWEmJihhPXRoaXMuZWxlbWVudCksMSE9PWEubm9kZVR5cGUpcmV0dXJuO2ZvcihhPWEucGFyZW50Tm9kZXx8YSxmPWEucXVlcnlTZWxlY3RvckFsbChcIi5cIit0aGlzLmNvbmZpZy5ib3hDbGFzcyksZz1bXSxjPTAsZD1mLmxlbmd0aDtkPmM7YysrKWI9ZltjXSxlLmNhbGwodGhpcy5hbGwsYik8MD8odGhpcy5hcHBseVN0eWxlKGIsITApLHRoaXMuYm94ZXMucHVzaChiKSx0aGlzLmFsbC5wdXNoKGIpLGcucHVzaCh0aGlzLnNjcm9sbGVkPSEwKSk6Zy5wdXNoKHZvaWQgMCk7cmV0dXJuIGd9fSxmLnByb3RvdHlwZS5zaG93PWZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmFwcGx5U3R5bGUoYSksYS5jbGFzc05hbWU9XCJcIithLmNsYXNzTmFtZStcIiBcIit0aGlzLmNvbmZpZy5hbmltYXRlQ2xhc3N9LGYucHJvdG90eXBlLmFwcGx5U3R5bGU9ZnVuY3Rpb24oYSxiKXt2YXIgYyxkLGU7cmV0dXJuIGQ9YS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXdvdy1kdXJhdGlvblwiKSxjPWEuZ2V0QXR0cmlidXRlKFwiZGF0YS13b3ctZGVsYXlcIiksZT1hLmdldEF0dHJpYnV0ZShcImRhdGEtd293LWl0ZXJhdGlvblwiKSx0aGlzLmFuaW1hdGUoZnVuY3Rpb24oZil7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGYuY3VzdG9tU3R5bGUoYSxiLGQsYyxlKX19KHRoaXMpKX0sZi5wcm90b3R5cGUuYW5pbWF0ZT1mdW5jdGlvbigpe3JldHVyblwicmVxdWVzdEFuaW1hdGlvbkZyYW1lXCJpbiB3aW5kb3c/ZnVuY3Rpb24oYSl7cmV0dXJuIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoYSl9OmZ1bmN0aW9uKGEpe3JldHVybiBhKCl9fSgpLGYucHJvdG90eXBlLnJlc2V0U3R5bGU9ZnVuY3Rpb24oKXt2YXIgYSxiLGMsZCxlO2ZvcihkPXRoaXMuYm94ZXMsZT1bXSxiPTAsYz1kLmxlbmd0aDtjPmI7YisrKWE9ZFtiXSxlLnB1c2goYS5zZXRBdHRyaWJ1dGUoXCJzdHlsZVwiLFwidmlzaWJpbGl0eTogdmlzaWJsZTtcIikpO3JldHVybiBlfSxmLnByb3RvdHlwZS5jdXN0b21TdHlsZT1mdW5jdGlvbihhLGIsYyxkLGUpe3JldHVybiBiJiZ0aGlzLmNhY2hlQW5pbWF0aW9uTmFtZShhKSxhLnN0eWxlLnZpc2liaWxpdHk9Yj9cImhpZGRlblwiOlwidmlzaWJsZVwiLGMmJnRoaXMudmVuZG9yU2V0KGEuc3R5bGUse2FuaW1hdGlvbkR1cmF0aW9uOmN9KSxkJiZ0aGlzLnZlbmRvclNldChhLnN0eWxlLHthbmltYXRpb25EZWxheTpkfSksZSYmdGhpcy52ZW5kb3JTZXQoYS5zdHlsZSx7YW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6ZX0pLHRoaXMudmVuZG9yU2V0KGEuc3R5bGUse2FuaW1hdGlvbk5hbWU6Yj9cIm5vbmVcIjp0aGlzLmNhY2hlZEFuaW1hdGlvbk5hbWUoYSl9KSxhfSxmLnByb3RvdHlwZS52ZW5kb3JzPVtcIm1velwiLFwid2Via2l0XCJdLGYucHJvdG90eXBlLnZlbmRvclNldD1mdW5jdGlvbihhLGIpe3ZhciBjLGQsZSxmO2Y9W107Zm9yKGMgaW4gYilkPWJbY10sYVtcIlwiK2NdPWQsZi5wdXNoKGZ1bmN0aW9uKCl7dmFyIGIsZixnLGg7Zm9yKGc9dGhpcy52ZW5kb3JzLGg9W10sYj0wLGY9Zy5sZW5ndGg7Zj5iO2IrKyllPWdbYl0saC5wdXNoKGFbXCJcIitlK2MuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrYy5zdWJzdHIoMSldPWQpO3JldHVybiBofS5jYWxsKHRoaXMpKTtyZXR1cm4gZn0sZi5wcm90b3R5cGUudmVuZG9yQ1NTPWZ1bmN0aW9uKGEsYil7dmFyIGMsZCxlLGYsZyxoO2ZvcihkPXdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGEpLGM9ZC5nZXRQcm9wZXJ0eUNTU1ZhbHVlKGIpLGg9dGhpcy52ZW5kb3JzLGY9MCxnPWgubGVuZ3RoO2c+ZjtmKyspZT1oW2ZdLGM9Y3x8ZC5nZXRQcm9wZXJ0eUNTU1ZhbHVlKFwiLVwiK2UrXCItXCIrYik7cmV0dXJuIGN9LGYucHJvdG90eXBlLmFuaW1hdGlvbk5hbWU9ZnVuY3Rpb24oYSl7dmFyIGI7dHJ5e2I9dGhpcy52ZW5kb3JDU1MoYSxcImFuaW1hdGlvbi1uYW1lXCIpLmNzc1RleHR9Y2F0Y2goYyl7Yj13aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShhKS5nZXRQcm9wZXJ0eVZhbHVlKFwiYW5pbWF0aW9uLW5hbWVcIil9cmV0dXJuXCJub25lXCI9PT1iP1wiXCI6Yn0sZi5wcm90b3R5cGUuY2FjaGVBbmltYXRpb25OYW1lPWZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmFuaW1hdGlvbk5hbWVDYWNoZS5zZXQoYSx0aGlzLmFuaW1hdGlvbk5hbWUoYSkpfSxmLnByb3RvdHlwZS5jYWNoZWRBbmltYXRpb25OYW1lPWZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmFuaW1hdGlvbk5hbWVDYWNoZS5nZXQoYSl9LGYucHJvdG90eXBlLnNjcm9sbEhhbmRsZXI9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zY3JvbGxlZD0hMH0sZi5wcm90b3R5cGUuc2Nyb2xsQ2FsbGJhY2s9ZnVuY3Rpb24oKXt2YXIgYTtyZXR1cm4hdGhpcy5zY3JvbGxlZHx8KHRoaXMuc2Nyb2xsZWQ9ITEsdGhpcy5ib3hlcz1mdW5jdGlvbigpe3ZhciBiLGMsZCxlO2ZvcihkPXRoaXMuYm94ZXMsZT1bXSxiPTAsYz1kLmxlbmd0aDtjPmI7YisrKWE9ZFtiXSxhJiYodGhpcy5pc1Zpc2libGUoYSk/dGhpcy5zaG93KGEpOmUucHVzaChhKSk7cmV0dXJuIGV9LmNhbGwodGhpcyksdGhpcy5ib3hlcy5sZW5ndGh8fHRoaXMuY29uZmlnLmxpdmUpP3ZvaWQgMDp0aGlzLnN0b3AoKX0sZi5wcm90b3R5cGUub2Zmc2V0VG9wPWZ1bmN0aW9uKGEpe2Zvcih2YXIgYjt2b2lkIDA9PT1hLm9mZnNldFRvcDspYT1hLnBhcmVudE5vZGU7Zm9yKGI9YS5vZmZzZXRUb3A7YT1hLm9mZnNldFBhcmVudDspYis9YS5vZmZzZXRUb3A7cmV0dXJuIGJ9LGYucHJvdG90eXBlLmlzVmlzaWJsZT1mdW5jdGlvbihhKXt2YXIgYixjLGQsZSxmO3JldHVybiBjPWEuZ2V0QXR0cmlidXRlKFwiZGF0YS13b3ctb2Zmc2V0XCIpfHx0aGlzLmNvbmZpZy5vZmZzZXQsZj13aW5kb3cucGFnZVlPZmZzZXQsZT1mK01hdGgubWluKHRoaXMuZWxlbWVudC5jbGllbnRIZWlnaHQsaW5uZXJIZWlnaHQpLWMsZD10aGlzLm9mZnNldFRvcChhKSxiPWQrYS5jbGllbnRIZWlnaHQsZT49ZCYmYj49Zn0sZi5wcm90b3R5cGUudXRpbD1mdW5jdGlvbigpe3JldHVybiBudWxsIT10aGlzLl91dGlsP3RoaXMuX3V0aWw6dGhpcy5fdXRpbD1uZXcgYn0sZi5wcm90b3R5cGUuZGlzYWJsZWQ9ZnVuY3Rpb24oKXtyZXR1cm4hdGhpcy5jb25maWcubW9iaWxlJiZ0aGlzLnV0aWwoKS5pc01vYmlsZShuYXZpZ2F0b3IudXNlckFnZW50KX0sZn0oKX0pLmNhbGwodGhpcyk7IiwicmVxdWlyZSgnLi9jc3MvYm9vdHN0cmFwLmNzcycpO1xyXG5yZXF1aXJlKCcuL3BsdWdpbnMvcmV2b2x1dGlvbi9jc3Mvc2V0dGluZ3MuY3NzJyk7XHJcbnJlcXVpcmUoJy4vcGx1Z2lucy9yZXZvbHV0aW9uL2Nzcy9sYXllcnMuY3NzJyk7XHJcbnJlcXVpcmUoJy4vcGx1Z2lucy9yZXZvbHV0aW9uL2Nzcy9uYXZpZ2F0aW9uLmNzcycpO1xyXG5yZXF1aXJlKCcuL2Nzcy9zdHlsZS5jc3MnKTtcclxucmVxdWlyZSgnLi9jc3Mvc3R5bGUtbWVudS5jc3MnKTtcclxucmVxdWlyZSgnLi9jc3Mvc3R5bGUtb3ZlcndyaXRlLmNzcycpO1xyXG5yZXF1aXJlKCcuL2Nzcy9yZXNwb25zaXZlLmNzcycpO1xyXG5cclxuY29uc3QgJCA9IGpRdWVyeSA9IHJlcXVpcmUoJ2pxdWVyeScpO1xyXG5nbG9iYWwuJCA9IGdsb2JhbC5qUXVlcnkgPSAkO1xyXG5cclxucmVxdWlyZSgnanF1ZXJ5LXVpJyk7XHJcbnJlcXVpcmUoJy4vanMvanF1ZXJ5LmZhbmN5Ym94LmpzJyk7XHJcbnJlcXVpcmUoJy4vanMvYm9vdHN0cmFwLm1pbi5qcycpO1xyXG5cclxuLy8gcmVxdWlyZSgnLi9wbHVnaW5zL1R3ZWVuTGl0ZS5taW4uanMnKTtcclxuLy8gcmVxdWlyZSgnLi9wbHVnaW5zL0NTU1BsdWdpbi5taW4uanMnKTtcclxuXHJcbi8vIHJlcXVpcmUoJy4vcGx1Z2lucy9yZXZvbHV0aW9uL2pzL2pxdWVyeS50aGVtZXB1bmNoLnJldm9sdXRpb24ubWluLmpzJyk7XHJcbi8vIHJlcXVpcmUoJy4vcGx1Z2lucy9yZXZvbHV0aW9uL2pzL2pxdWVyeS50aGVtZXB1bmNoLnRvb2xzLm1pbi5qcycpO1xyXG5cclxuLy8gcmVxdWlyZSgnLi9wbHVnaW5zL3Jldm9sdXRpb24vanMvZXh0ZW5zaW9ucy9yZXZvbHV0aW9uLmV4dGVuc2lvbi5hY3Rpb25zLm1pbi5qcycpO1xyXG4vLyByZXF1aXJlKCcuL3BsdWdpbnMvcmV2b2x1dGlvbi9qcy9leHRlbnNpb25zL3Jldm9sdXRpb24uZXh0ZW5zaW9uLmNhcm91c2VsLm1pbi5qcycpO1xyXG4vLyByZXF1aXJlKCcuL3BsdWdpbnMvcmV2b2x1dGlvbi9qcy9leHRlbnNpb25zL3Jldm9sdXRpb24uZXh0ZW5zaW9uLmtlbmJ1cm4ubWluLmpzJyk7XHJcbi8vIHJlcXVpcmUoJy4vcGx1Z2lucy9yZXZvbHV0aW9uL2pzL2V4dGVuc2lvbnMvcmV2b2x1dGlvbi5leHRlbnNpb24ubGF5ZXJhbmltYXRpb24ubWluLmpzJyk7XHJcbi8vIHJlcXVpcmUoJy4vcGx1Z2lucy9yZXZvbHV0aW9uL2pzL2V4dGVuc2lvbnMvcmV2b2x1dGlvbi5leHRlbnNpb24ubWlncmF0aW9uLm1pbi5qcycpO1xyXG4vLyByZXF1aXJlKCcuL3BsdWdpbnMvcmV2b2x1dGlvbi9qcy9leHRlbnNpb25zL3Jldm9sdXRpb24uZXh0ZW5zaW9uLm5hdmlnYXRpb24ubWluLmpzJyk7XHJcbi8vIHJlcXVpcmUoJy4vcGx1Z2lucy9yZXZvbHV0aW9uL2pzL2V4dGVuc2lvbnMvcmV2b2x1dGlvbi5leHRlbnNpb24ucGFyYWxsYXgubWluLmpzJyk7XHJcbi8vIHJlcXVpcmUoJy4vcGx1Z2lucy9yZXZvbHV0aW9uL2pzL2V4dGVuc2lvbnMvcmV2b2x1dGlvbi5leHRlbnNpb24uc2xpZGVhbmltcy5taW4uanMnKTtcclxuLy8gcmVxdWlyZSgnLi9wbHVnaW5zL3Jldm9sdXRpb24vanMvZXh0ZW5zaW9ucy9yZXZvbHV0aW9uLmV4dGVuc2lvbi52aWRlby5taW4uanMnKTtcclxuLy9cclxuLy9yZXF1aXJlKCcuL2pzL21haW4tc2xpZGVyLXNjcmlwdC5qcycpO1xyXG4vL3JlcXVpcmUoJy4vanMvdmFsaWRhdGUuanMnKTtcclxucmVxdWlyZSgnLi9qcy9pc290b3BlLmpzJyk7XHJcbnJlcXVpcmUoJy4vanMvb3dsLmpzJyk7XHJcbnJlcXVpcmUoJy4vanMvbWl4aXR1cC5qcycpO1xyXG5yZXF1aXJlKCcuL2pzL3dvdy5qcycpO1xyXG5yZXF1aXJlKCcuL2pzL2FwcGVhci5qcycpO1xyXG5yZXF1aXJlKCcuL2pzL2NhcHRjaGEuanMnKTtcclxucmVxdWlyZSgnLi9qcy9zY3JpcHQuanMnKTtcclxuXHJcbiIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpbiIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpbiIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpbiJdLCJzb3VyY2VSb290IjoiIn0=